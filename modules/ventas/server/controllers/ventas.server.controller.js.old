'use strict';
// Include the async package
var async = require("async");
process.env.TZ = 'America/Argentina/Buenos_Aires'

/**
 * Module dependencies.
 */
var _ = require('lodash'),
	path = require('path'),
	mongoose = require('mongoose'),
	Moment = require('moment'),
	Venta = mongoose.model('Venta'),
	Cliente = mongoose.model('Cliente'),
	Product = mongoose.model('Product'),
	Entrega = mongoose.model('Entrega'),
	Finanza = mongoose.model('Finanza'),
	Movimiento = mongoose.model('Movimiento'),
	Caja = mongoose.model('Caja'),
	Sucursal = mongoose.model('Sucursal'),
	Condicionventa = mongoose.model('Condicionventa'),
	Comprobante = mongoose.model('Comprobante'),
	errorHandler = require(path.resolve('./modules/core/server/controllers/errors.server.controller'));

/**
 * Create a Venta
 */
exports.create = function(req, res) {
	var productos = Product.find();
	var venta = new Venta(req.body);
	var sub = 0;
	var totTax1 = 0;
	var totTax2 = 0;
	var totTax3 = 0;
	var tax1 = [];
	var tax2 = [];
	var	tax3 = [];
	var x = -1;
	// var z = 0;
	var idCondicion = venta.condicionVenta;

	//*****Actualiza el ultimo numero del comprobante correspondiente
	comprobanteConId(venta.tipoComprobante, function(comp){
			comp.ultimoNumero = venta.comprobante;
			comp.save(function(err) {
				if (err) {
					console.log("comprobante guardado error");
				} else {
					productosDeCliente(venta.cliente, function(c){
						for(var i=0; i<venta.products.length; i++){
							if(c.productosAsociados.indexOf(venta.products[i].product._id)<0){
								c.productosAsociados.push(venta.products[i].product._id);
							};
						};
						c.save(function(err) {
							if (err) {
								console.log("cliente guardado error");
							} else {
								// console.log("cliente guardado");
							}
						});
					});
				};
			});
	});
	//*****Por cada producto actualizo el stock
	for(var i=0; i<venta.products.length; i++){
		var actual = venta.products[i];
		productoConId(venta.products[i], function(c){
			var produccion = c.produccion; 
			var actualStock = c.unitsInStock;
			var pedidos = actual.cantidad;
			var nuevoStock = actualStock - pedidos;
			if ( produccion.length > 0){
				for(var i=0; i < produccion.length ; i++){
					var p = produccion[i];
					var prod = p.producto;
					materiaConId(prod, function(z){
						var cant = p.cantidad;
						var prod = p.producto;
						var totalCant = cant * pedidos;
						var stockA = z.unitsInStock;
						if(stockA - totalCant > 0){
							var num  = stockA - totalCant;
							z.unitsInStock = num.toFixed(2);
						} else {
							z.unitsInStock = 0;
						}
						console.log(z.unitsInStock, '------units in stock MP----------');
						z.save(function(err) {
							if (err) {
								console.log('ERROR UNOO');
							} else {
								console.log("stock MP actualizado");
							}
						});//end callback save
					});	
				}
			}
			if(nuevoStock > 0){
				c.unitsInStock = nuevoStock;
			} else {
				c.unitsInStock = 0;
			}
			c.save(function(err) {
				if (err) {
					console.log('ERROR DOSSS', err);
				} else {
					console.log("stock producto actualizado");
				}
			});//end callback save
		});
	};// end for

	venta.user = req.user;
	var d = new Moment(venta.created); // modificado para que tome la fecha seleccionada en el campo de fecha 2015.11.20
	//console.log('[+] date V: %s D: %s', venta.created, d);
	venta.filterDate = {
		year: d.year().toString(), 											// 2015
		quarter: d.year().toString() + '-' + d.quarter().toString() + 'Q', 	// 2015-1Q
		month: d.year().toString() + '-' + d.month().toString(), 			// 2015-7
		week: d.year().toString() + '-' + d.week().toString(), 				// 2015-29
		day: d.year().toString() + '-' + d.dayOfYear().toString(),			// 2015-191
		dayOfWeek: d.weekday(),												// 3 (Miercoles)
		Hour: d.hour() 														// 11
	};

	for (var i = 0; i < venta.products.length; i++) {
		var additionalIva = parseFloat(venta.products[i].product.tax) * parseFloat(venta.products[i].product.unitPrice) / 100;
		if(parseFloat(venta.products[i].product.tax) == 10.5){
			tax1.push(additionalIva*parseInt(venta.products[i].cantidad));
		}
		if(parseFloat(venta.products[i].product.tax) == 21.00){
			tax2.push(additionalIva*parseInt(venta.products[i].cantidad));
		}
		if(parseFloat(venta.products[i].product.tax) == 27.00){
			tax3.push(additionalIva*parseInt(venta.products[i].cantidad));
		}
			var desc = parseInt(venta.products[i].descuento) * venta.products[i].product.unitPrice / 100;
			var finalPrice = venta.products[i].product.unitPrice - desc;
			sub = sub + parseInt(venta.products[i].cantidad)*finalPrice;
	}

	if(tax1.length > 0){
		for (i = 0; i < tax1.length; i++) {
			// total del tax 1
	   		var totTax1 = totTax1 + parseInt(tax1[i]);
   		}
	}

	if(tax2.length > 0){
		for (i = 0; i < tax2.length; i++) {
			// total del tax 1
			var totTax2 = totTax2 + parseInt(tax2[i]);
   		}
	}

	if(tax3.length > 0){
		for (i = 0; i < tax3.length; i++) {
			// total del tax 3
	   		var totTax3 = totTax3 + parseInt(tax3[i]);
   		}
	}

	var descV = sub * venta.descuentoPorcentaje / 100;
	var net = sub - descV;
	var total = net + totTax1 + totTax2 + totTax3;
	venta.save(function(err) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			condicionConId(idCondicion, function(c){
				var condicionVenta = c.name;
				if (condicionVenta == 'Cuenta Corriente'){
					crearMovimiento(venta);
				}
				else{
					if (venta.caja !== undefined){
						cajaConId(venta.caja, function(c){
							agregarCaja(venta,condicionVenta,c);
						})
					}	
				}
				if(venta.delivery){
					creaEntrega(venta, function(entrega){
					
					});
				}
				res.jsonp(venta);
			})	
		}
	});
};

//agrega el total de la venta a la caja seleccionada, segun la condicion de venta
function agregarCaja(venta,condicion,c){
	if (condicion == 'Cheque'){
		c.cheques = c.cheques + venta.total;
	}
	else{
		if (condicion == 'Efectivo'){
			c.efectivo = c.efectivo + venta.total;		
		}
		else{
			if(condicion == 'Tarjeta de Credito'){
				c.credito = c.credito + venta.total;			
			}
			else{
				if (condicion == 'Tarjeta de Debito'){
					c.debito = c.debito + venta.total;
				}
			}
		}
	}
	c.total = c.cheques + c.efectivo + c.debito + c.debito;
	venta.saldoCaja = c.total;
	c.save(function(err) {
		if (err) {
			console.log(err);
		} else {
			console.log('Caja actualizada ok');
			venta.save(function(err) {
				if (err) {
					console.log(err, 'erorr actualizar venta');
				} else {
					console.log('guardado saldo caja ok en venta');
				}
			})
		}
	});		
};

//crea un nuevo movimiento para las finanzas cuando se crea una venta
function crearMovimiento (venta) {

	var idClient = venta.cliente;

	var f = new Movimiento();
	f.client = venta.cliente;
	f.caja = venta.caja;
	f.condicion = venta.condicionVenta;
	f.comprobante = venta.tipoComprobante;
	f.numero = venta.comprobante;
	f.fecha = venta.created;
	f.estado = 'haber';
	f.monto = venta.total;
	f.saldo = venta.total;
	f.enterprise = venta.enterprise;
	f.deleted = false;
	f.created = Date.now();
	f.user = venta.user;

	clientConId(idClient, function(c){
		var idFinanza = c.finanza;
		finanzaConId(idFinanza, function(z){
			z.saldo = z.saldo + venta.total;
			z.update = Date.now();
			z.save(function(err) {
				if (err) {
					console.log("fianza actualizada error");
				} else {
					console.log("fianza actualizada ok");
					f.saldo = z.saldo;
					f.finanza = idFinanza;
					f.save(function(err) {
						if (err) {
							console.log(err);
							return res.status(400).send({
								message: errorHandler.getErrorMessage(err)
							});
						} else {
							console.log('todo piola');
						}
					});
				}
			});//end callback save
		})
	});	
};

/**
 * Show the current Venta
 */
exports.read = function(req, res) { res.jsonp(req.venta); };

/**
 * Update a Venta
 */
exports.update = function(req, res) {
	var venta = req.venta ;
	venta = _.extend(venta , req.body);

	//*****Si se anula la venta debo retornar el stock del producto que reste cuando la cree
	if(venta.estado == 'Anulada'){
		//*****Por cada producto actualizo el stock
		for(var i=0; i<venta.products.length; i++){
			var actual = venta.products[i];
			productoConId(venta.products[i], function(c){
				var produccion = c.produccion;
				var actualStock = c.unitsInStock;
				var pedidos = actual.cantidad;
				var arrayProduccion = [];
				if ( produccion.length > 0){
					for(var i=0; i < produccion.length ; i++){
						var n = { producto: {}, cantidad: undefined, total:undefined };
						var p = produccion[i];
						var cant = p.cantidad;
						n.cantidad = cant;
						n.total = p.total;
						var prod = p.producto;
						var totalCant = cant * pedidos;
						var stockA = prod.unitsInStock;
						var num  = parseFloat(stockA) + parseFloat(totalCant);
						prod.unitsInStock = num;
						n.producto = prod;
						arrayProduccion.push(n);
						materiaConId(prod, function(z){
							z.save(function(err) {
								if (err) {
									console.log('ERROR UNOO');
									// return res.status(400).send({
									// 	message: errorHandler.getErrorMessage(err)
									// });
								} else {
									// console.log(z.unitsInStock, 'units in stock');
									console.log("stock MP actualizado");
								}
							});//end callback save
						});
					}
					c.produccion = arrayProduccion;
				}
				c.unitsInStock = parseInt(actualStock)+parseInt(pedidos);
				c.save(function(err) {
					if (err) {
						return res.status(400).send({
							message: errorHandler.getErrorMessage(err)
						});
					} else {
						// console.log("stock actualizado");
					}
				});//end callback save
			});
		};// end for
	}
	venta.save(function(err) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			res.jsonp(venta);
		}
	});	
};

/**
 * Delete an Venta
 */
exports.delete = function(req, res) {
	var venta = req.venta ;
	venta.deleted = true;
	venta.save(function(err) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			res.jsonp(venta);
		}
	});
};

/**
 * List of Ventas
 */
exports.list = function(req, res) {
	// Inicio de càlculo de semana actual //
	var week = req.query.w || null;
	var Year = req.query.y || null;
	var estado = req.query.estado || null;
	var pagina = parseInt(req.query.p) || null;
	var limite = parseInt(req.query.pcount) || null;

	// if (week === null) {
	// 	var today = new Date();
	// 	var first = new Date(today.getFullYear(), 0, 1);
	// 	var theDay = Math.round(((today - first) / 1000 / 60 / 60 / 24) + .5, 0);
	// 	var year = today.getFullYear();
	// 	// calculo semana start
	// 	var target  = today;
	// 	var dayNr   = (today.getDay() + 6) % 7;
	// 	target.setDate(target.getDate() - dayNr + 3);
	// 	var jan4    = new Date(target.getFullYear(), 0, 4);
	// 	var dayDiff = (target - jan4) / 86400000;
	// 	var weekNr = 1 + Math.ceil(dayDiff / 7);
	// } else {
	// 	var weekNr = week;
	// 	var year = parseInt(Year);
	// };

	// fin de càlculo de semana actual //
	var start = new Date;
	var enterprise = req.query.e || null;
	
	//para que devuelva todos (para calcular deuda por ejemplo)
	if (enterprise !== null) {
		Venta.find({enterprise: enterprise, estado: estado, deleted: false })
		.skip(pagina * limite)
		.limit(limite)
		.sort('-myDate')
		.populate('user', 'displayName')
		.populate('enterprise', 'name')
		.populate('cliente', 'name address phone')
		.populate('category1', 'name')
		.exec(function(err, ventas) {
			if (err) {
				return res.status(400).send({
					message: errorHandler.getErrorMessage(err)
				});
			} else {
				var end = new Date();
				// console.log('[+] ventas::list finalizado en: %sms', end - start);
				res.jsonp(ventas);
			}
		});
	} else {
		Venta.find({'filterDate.week': year + '-' + weekNr})
		.sort('-created')
		.limit(100)
		.populate('user', 'displayName')
		.populate('enterprise', 'name')
		.populate('cliente', 'name address phone')
		.populate('category1', 'name')
		.exec(function(err, ventas) {
			if (err) {
				return res.status(400).send({
					message: errorHandler.getErrorMessage(err)
				});
			} else {
				var end = new Date();
				console.log('[+] ventas::list finalizado en: %sms', end - start);
				res.jsonp(ventas);
			}
		});
	}	
};

/**
 * Venta middleware
 */
exports.ventaByID = function(req, res, next, id) {
	Venta.findById(id)
	.populate('user', 'displayName')
	.populate('enterprise', 'name')
	.populate('tipoComprobante')
	.populate('cliente', 'name address phone')
	.populate('category1', 'name')
	.populate('condicionVenta', 'name')
	.populate('caja', 'name')
	.exec(function(err, venta) {
		if (err) return next(err);
		if (! venta) return next(new Error('Failed to load Venta ' + id));
		req.venta = venta ;
		next();
	});
};

//retorna los productos del cliente
function productosDeCliente(id, callback){
	Cliente.findById(id)
	.populate('user', 'displayName')
	.populate('enterprise', 'name')
	.populate('sub', 'name')
	.populate('contacts')
	.populate('taxCondition', 'name')
	.exec(function(err, cliente) {
		if (!err) {
			return callback(cliente);
		} else {
			console.log("error");
		}
	});
};

//retorna un producto con id
function productoConId(p, callback){
	Product.findById(p.product._id)
	.populate('user', 'displayName')
	.populate('enterprise', 'name')
	.exec(function(err, product) {
		if (!err) {
			return callback(product);
		} else {
			console.log("error");
		}
	});
};

function finanzaConId(z, callback){
	Finanza.findById(z)
	// .populate('user', 'displayName')
	// .populate('enterprise', 'name')
	.exec(function(err, finanza) {
		if (!err) {
			return callback(finanza);
		} else {
			console.log("error");
		}
	});
};

function clientConId(c, callback){
	Cliente.findById(c)
	// .populate('user', 'displayName')
	// .populate('enterprise', 'name')
	.exec(function(err, client) {
		if (!err) {
			return callback(client);
		} else {
			console.log("error");
		}
	});
};

function cajaConId(c, callback){
	Caja.findById(c)
	// .populate('user', 'displayName')
	// .populate('enterprise', 'name')
	.exec(function(err, caja) {
		if (!err) {
			return callback(caja);
		} else {
			console.log("error");
		}
	});
};

function sucursalConId(s, callback){
	Sucursal.findById(s)
	// .populate('user', 'displayName')
	// .populate('enterprise', 'name')
	.exec(function(err, sucursal) {
		if (!err) {
			return callback(sucursal);
		} else {
			console.log("error");
		}
	});
};

function materiaConId(p, callback){
	Product.findById(p)
	.populate('user', 'displayName')
	.populate('enterprise', 'name')
	.exec(function(err, product) {
		if (!err) {
			return callback(product);
		} else {
			console.log("error");
		}
	});
};

//retorna un comprobante con id
function comprobanteConId(id, callback){
	Comprobante.findById(id)
	.exec(function(err, comp) {
		if (!err) {
			return callback(comp);
		} else {
			console.log("error");
		}
	});
};

//retorna un comprobante con nombre
function comprobanteConNombre(id, callback){
	Comprobante.findOne({name: 'Remito'})
	.exec(function(err, comp) {
		if (!err) {
			return callback(comp);
		} else {
			console.log("error");
		}
	});
};

function condicionConId(c, callback){
	Condicionventa.findById(c)
	// .populate('user', 'displayName')
	// .populate('enterprise', 'name')
	.exec(function(err, condicion) {
		if (!err) {
			return callback(condicion);
		} else {
			console.log("error");
		}
	});
};

function arrContains(array, value){
	for(var j=0; j< array.length; j++){
		if(array[j] === value){
			console.log("contiene");
			return true;
		}
		return false;
	}
};

//crea entrega si la venta fue cerrada y era p delivery
function creaEntrega(venta, callback){
	var entrega = new Entrega();
	//ultimo remito
	comprobanteConNombre('Remito', function(comp){
		var ultimoNumero = parseInt(comp.ultimoNumero) + 1;
		console.log('var nuevo ultimo numero', ultimoNumero);
		entrega.numero = ultimoNumero;
		entrega.tipoComprobante = comp._id;
		entrega.venta = venta._id;
		entrega.estado = 'pendiente';
		entrega.products = venta.products;
		entrega.cliente = venta.cliente;
		entrega.observaciones = venta.observaciones;
		entrega.subtotal = venta.subtotal;
		entrega.neto = venta.neto;
		entrega.tax1 = venta.tax1;
		entrega.tax2 = venta.tax2;
		entrega.tax3 = venta.tax3;
		entrega.totalTax = venta.totalTax;
		entrega.total = venta.total;
		entrega.condicionVenta = venta.condicionVenta;
		entrega.enterprise = venta.enterprise;
		entrega.filterDate = venta.filterDate;
		entrega.fechaEntrega = venta.myDate;
		entrega.user = venta.user;
		entrega.save(function(err) {
			if (err) {
				console.log("error");
			} else {
				comp.ultimoNumero = ultimoNumero;
				comp.save(function(err){
					if (err) {
						console.log("error guardando comprobante");
					} else {
						console.log("comprobante guardado");
					}
				});
				return callback(entrega);
			}
		});
	});
};
