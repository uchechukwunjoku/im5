'use strict';

// Init the application configuration module for AngularJS application
var ApplicationConfiguration = (function() {
	// Init module configuration options
	var applicationModuleName = 'MEAN';

	var applicationModuleVendorDependencies = ['ngResource', 'ui.router', /*'ui.bootstrap',*/ 'ui.utils', 'angularFileUpload', 'ngMaterial', /*'ngMaterialDropmenu',*/'ngMdIcons', 'ngLodash', 'ngMap', 'nvd3', 'md.data.table', 'infinite-scroll'];

	// Add a new vertical module
	var registerModule = function(moduleName, dependencies) {
		// Create angular module
		angular.module(moduleName, dependencies || []);

		// Add the module to the AngularJS configuration file
		angular.module(applicationModuleName).requires.push(moduleName);
	};

	return {
		applicationModuleName: applicationModuleName,
		applicationModuleVendorDependencies: applicationModuleVendorDependencies,
		registerModule: registerModule
	};
})();

'use strict';

//Start by defining the main module and adding the module dependencies
angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies);

// Setting HTML5 Location Mode
angular.module(ApplicationConfiguration.applicationModuleName).config(['$locationProvider', '$mdThemingProvider',
    function ($locationProvider, $mdThemingProvider) {
        $locationProvider.html5Mode(true).hashPrefix('!');
        $mdThemingProvider.theme('default')
        // .primaryPalette('indigo')
            .primaryPalette('blue', {
                'default': '800', // by default use shade 400 from the pink palette for primary intentions
                'hue-1': '500', // use shade 100 for the <code>md-hue-1</code> class
                'hue-2': '600', // use shade 600 for the <code>md-hue-2</code> class
                'hue-3': 'A400' // use shade A100 for the <code>md-hue-3</code> class
            })
            .accentPalette('red');
    }
]);

angular.module(ApplicationConfiguration.applicationModuleName).run(['$rootScope', '$mdSidenav',
    function ($rootScope, $mdSidenav) {
        var check = false;
        (function (a) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
        })(navigator.userAgent || navigator.vendor || window.opera);
        $rootScope.isMobile = check;
        $rootScope.isSideNavOpen = false;

        $rootScope.$on('$stateChangeStart',
            function () {
                $mdSidenav('left').close();
            });

        console.log('isMobile:', $rootScope.isMobile);
    }
]);

//Then define the init function for starting up the application
angular.element(document).ready(function () {
    //Fixing facebook bug with redirect
    if (window.location.hash === '#_=_') window.location.hash = '#!';

    //Then init the app
    angular.bootstrap(document, [ApplicationConfiguration.applicationModuleName]);
});

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('clients');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('actividades');

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('areas');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('arqueos');
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('articles');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('cajas');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('categories');
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('chat');

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('compras');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('comprobantes');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('condicionventas');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('contacts');
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('core');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('costcenters');
(function (app) {
  'use strict';

  app.registerModule('costosindirectos');
}(ApplicationConfiguration));

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('empleados');

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('enterprises');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('entregas');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('finanzas');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('historialCompras');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('impuestos');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('liquidaciones');

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('movimientos');
(function (app) {
  'use strict';

  app.registerModule('pagos');
}(ApplicationConfiguration));

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('pedidos');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('personas');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('posts');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('procedimientos');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('procesos');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('products');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('providers');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('puestos');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('remuneraciones');

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('reportes');

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('rrhhs');
(function (app) {
  'use strict';

  app.registerModule('servicios');
}(ApplicationConfiguration));

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('stocks');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('subs');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('sucursales');
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('tareas');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('taxconditions');
'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('transferencias');
'use strict';

// Use Applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('users');

'use strict';

// Use applicaion configuration module to register a new module
ApplicationConfiguration.registerModule('ventas');

'use strict';

// Configuring the Clients module
angular.module('clients').run(['Menus',
	function(Menus) {
		// Add the Clients dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Clients',
			state: 'clients',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'clients', {
			title: 'List Clients',
			state: 'clients.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'clients', {
			title: 'Create Client',
			state: 'clients.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('clients').config(['$stateProvider',
	function($stateProvider) {
		// Clients state routing
		$stateProvider.
		state('clients', {
			abstract: true,
			url: '/clients',
			template: '<ui-view/>'
		}).
		state('clients.list', {
			url: '',
			templateUrl: 'modules/clients/views/list-clients.client.view.html'
		}).
		state('clients.create', {
			url: '/create',
			templateUrl: 'modules/clients/views/create-client.client.view.html'
		}).
		state('clients.view', {
			url: '/:clientId',
			templateUrl: 'modules/clients/views/view-client.client.view.html'
		}).
		state('clients.edit', {
			url: '/:clientId/edit',
			templateUrl: 'modules/clients/views/edit-client.client.view.html'
		});
	}
]);
'use strict';

// condicionventas controller
angular.module('clients').controller('ClientsCreateController', ['$state', '$scope', 'user', 'clientes', 'client', 'enterprises', 'uens', 'condicionventas', 'categorias', 'contactos', 'condicionesdeiva', 'comprobantes', 'users', '$http',
	function($state, $scope, user, clientes, client, enterprises, uens, condicionventas, categorias, contactos, condicionesdeiva, comprobantes, users, $http) {

		// asignacion de modelos
		this.user = user;
		this.client = client;
		this.enterprises = enterprises;
		this.turnos = ['Mañana', 'Tarde', 'Noche'];
		this.zones = ['Zona 1', 'Zona 2', 'Zona 3', 'Zona 4', 'Zona 5'];
		this.subs = uens;
		this.condicionPagos = condicionventas;
		this.categories = categorias;
		this.contacts = contactos;
		this.taxconditions = condicionesdeiva;
		this.comprobantes = comprobantes;

		// asignacion de funciones
		this.create = create;
		this.borrarError = borrarError;

		// definicion de funciones

		// Create new Client
		function create () {
			var prod = [];
			if(this.name !== undefined){
				if(this.address !== undefined){
					if(this.taxcondition !== undefined){
						if(this.condicionPago !== undefined){
							if(this.tipoComprobante !== undefined){
								var client = new clientes ({
									name: this.name,
									creditLimit: this.creditLimit ? this.creditLimit : 0,
									fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
									taxCondition: this.taxcondition._id,
									condicionPago: this.condicionPago._id,
									comprobante: this.tipoComprobante._id,
									discountRate: this.discountRate ? this.discountRate : 0,
									loc: [$scope.place.geometry.location.lat(), $scope.place.geometry.location.lng()],
									observaciones: this.observaciones ? this.observaciones : undefined,
									paymentMethod: this.paymentMethod,
									contacts: this.contact ? this.contact._id : undefined,
									country: this.country,
									city: this.city,
									region: this.region ? this.region : undefined,
									turno: this.turno ? this.turno : undefined,
									postalCode: this.postalCode ? this.postalCode : 1900,
									address: this.address,
									phone: this.phone ? this.phone : undefined,
									web: this.web ? this.web : undefined,
									mail: this.mail ? this.mail : undefined,
									isUser: this.isUser,
									category1: this.category1 ? this.category1._id : undefined,
									enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id,
									productosAsociados: prod
								});

								if (this.isUser){
									if (this.userName !== undefined){
										createUser(client,this.userName);
									}
									else{
										this.errorName = 'Se debe indicar el nombre de usuario para el nuevo usuario';
									}
								}else{
									client.$save(function(response) {
										$state.go('home.clients');
									}, function(errorResponse) {
										this.error = errorResponse.data.message;
									});
								}
							}
							else{
								this.errorComprobante = 'Se debe elegir un tipo de comprobante';
							}	
						}
						else{
							this.errorCondicion = 'Se debe elegir una condicion de pago';
						}	
					}
					else{
						this.errorTax = 'Se debe ingresar la condicion de IVA';
					}					
				}
				else{
					this.errorDir = 'Se debe ingresar la direccion';
				}	
			}
			else{
				this.errorName = 'Se debe ingresar la razon social del cliente';
			}			
		};

		function createUser (client,userName){
			var rol = [];
			rol.push('cliente');
			var persona = new users ({
				displayName: client.name,
				username: userName,
				email: client.mail,
				enterprise: client.enterprise,
				roles: rol,
				password: angular.lowercase(client.name + 'pass').split(' ').join('')
			});
			$http.post('/api/auth/signup', persona).success(function(response) {
				client.userLogin = response._id;
				client.$save(function(response) {
					$state.go('home.clients');
				}, function(errorResponse) {
					this.error = errorResponse.data.message;
				});
			});
		};

		function borrarError(){
			this.errorName = undefined;
			this.errorDir = undefined;
			this.errorSub = undefined;
			this.errorCategory = undefined;
			this.errorTax = undefined;
			this.errorCondicion = undefined;
			this.errorComprobante = undefined;
		}

		$scope.placeChanged = function() {
           $scope.place = this.getPlace();
           this.errorDir = undefined;
        }

	}
]);
'use strict';

// condicionventas controller
angular.module('clients').controller('ClientsEditController', ['$state', '$scope', 'user', 'clientes', 'client', 'enterprises', 'uens', 'condicionventas', 'categorias', 'contactos', 'condicionesdeiva', 'comprobantes',
	function($state, $scope, user, clientes, client, enterprises, uens, condicionventas, categorias, contactos, condicionesdeiva, comprobantes) {

		// asignacion de modelos
		this.user = user;
		this.client = client;
		this.enterprises = enterprises;
		this.turnos = ['Mañana', 'Tarde', 'Noche'];
		this.zones = ['Zona 1', 'Zona 2', 'Zona 3', 'Zona 4', 'Zona 5'];
		this.subs = uens;
		this.condicionPagos = condicionventas;
		this.categories = categorias;
		this.contacts = contactos;
		this.taxconditions = condicionesdeiva;
		this.comprobantes = comprobantes;

		this.selectedMode = 'md-scale';
	    this.selectedDirection = 'up';

		// asignacion de funciones
		this.update = update;

		// definicion de funciones

		// Update existing Client
		function update(){
			var client = this.client
			if (this.enterprise !== undefined) { client.enterprise = this.enterprise } else if ((client.enterprise!==undefined)&&(client.enterprise!==null)){ client.enterprise = client.enterprise._id};
			// if (this.sub !== undefined) { client.sub = this.sub } else if((client.sub !== undefined)&&(client.sub !== null)){ client.sub = client.sub._id};
			if (this.contact !== undefined) { client.contacts = this.contact } else if((client.contacts !== undefined)&&(client.contacts !== null)){ client.contacts = client.contacts._id};
			if (this.taxcondition !== undefined) { client.taxCondition = this.taxcondition } else if((client.taxCondition !== undefined)&&(client.taxCondition !== null)){ client.taxCondition = client.taxCondition._id};
			if (this.comprobante !== undefined) { client.comprobante = this.comprobante } else if((client.comprobante !== undefined)&&(client.comprobante !== null)){ client.comprobante = client.comprobante._id};
			if (this.condicionPago !== undefined) { client.condicionPago = this.condicionPago } else if((client.condicionPago !== undefined)&&(client.condicionPago !== null)){ client.condicionPago = client.condicionPago._id};
			if (this.category !== undefined) { client.category1 = this.category } else if((client.category1 !== undefined)&&(client.category1 !== null)){ client.category1 = client.category1._id};
			if (this.region !== undefined) { client.region = this.region } else if((client.region !== undefined)&&(client.region !== null)){ client.region = client.region};
			if (this.turno !== undefined) { client.turno = this.turno } else if((client.turno !== undefined)&&(client.turno !== null)){ client.turno = client.turno};
			if ($scope.place !== undefined) { client.loc = [ $scope.place.geometry.location.lat(), $scope.place.geometry.location.lng()]} else if((client.loc!==undefined)&&(client.loc!==null)) { client.loc = client.loc };
			client.$update(function() {
				$state.go('home.clients');
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};


		$scope.placeChanged = function() {
           $scope.place = this.getPlace();
           this.errorDir = undefined;
        };

	}
]);
'use strict';

// condicionventas controller
angular.module('clients').controller('ClientsListController', ['$rootScope', '$mdBottomSheet', '$mdDialog', '$state', 'user', 'clientes', 'enterprises',
	function($rootScope, $mdBottomSheet, $mdDialog, $state, user, clientes, enterprises) {

		// asignacion de modelos
		this.user = user;
		this.clients = clientes || [];
		this.enterprises = enterprises;

		// asignacion de funciones
		this.showBottomSheet = showBottomSheet;

		// definicion de funciones
		function showBottomSheet($event, item, model, param) {
			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	$mdBottomSheet.show({
	    	  controller: DialogController,
		      templateUrl: template,
		      // controller: 'ListBottomSheetCtrl',
		      targetEvent: $event,
		      resolve: {
		         item: function () {
		           return item;
		         }
		       }

		    }).then(function(clickedItem) {
		    	//$mdBottomSheet.hide();
		    	// console.log('por aqui ando');
		    });
	  	}; //end showBottomSheet

		function DialogController($scope, $mdDialog, item, Areas) {

	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
					$state.go(state, params);
					$mdBottomSheet.hide();
				}
			} //end goTo

			//abre modal para eliminar una categoria
			$scope.showConfirm = function(ev,item) {
				var confirm = $mdDialog.confirm()
		          .title('Eliminar Cliente')
		          .content('¿Está seguro que desea eliminar este cliente?')
		          .ariaLabel('Lucky day')
		          .ok('Eliminar')
		          .cancel('Cancelar')
		          .targetEvent(ev);
			    $mdDialog.show(confirm).then(function() {
			      remove(item);
			    }, function() {
			      // console.log('cancelaste borrar');
			    });
			}; //end showConfirm


			function remove ( client ) {
				if ( client ) { client.$remove();
				} else {
					this.client.$remove(function() {
					});
				}
				$mdBottomSheet.hide();
			};//end remove

		}; //end DialogController

	}
]);

'use strict';

// Comprobantes controller
angular.module('clients').controller('ClientsViewController', ['user', 'client', 'products', 'pedidos', 'ventas', '$scope',
	function(user, client, products, pedidos, ventas, $scope) {

		// $scope.$watch('deudaCliente', function (){
		// 	$scope.calcularDeuda();
		// });

		// asignacion de modelos
		this.user = user;
		this.client = client;
		this.products = products;
		this.pedidos = pedidos;
		this.ventas = ventas;
	    this.isOpen = false;
	    //variables para el menu
	    this.selectedMode = 'md-scale';
	    this.selectedDirection = 'up';
		// calcularDeuda();

		// asignacion de funciones

		this.calcularDeuda = calcularDeuda;

		this.calcularDeuda(ventas);

		// definicion de funciones
		function calcularDeuda (ventas){
			ventas.$promise.then(angular.bind(this, function(data) { 
				this.totalDeuda = 0;
				for (var i in data) {
					if ((data[i].cliente !== undefined ) && (data[i].cliente !== null)){
						if(data[i].cliente._id == client._id){
							if((data[i].estado == 'Pendiente de pago y entrega') || (data[i].estado=='Pendiente de pago2')){
								this.totalDeuda = this.totalDeuda + data[i].total; 
							}
						}
					}	
				};
			}));	
		}; //end calcularDeuda

	}//end function
]);
'use strict';

// Clients controller
angular.module('clients').controller('ClientsController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Clients', 'Enterprises', 'Subs', '$mdBottomSheet', 'Contacts', 'Taxconditions', 'Categories', 'Ventas', 'Comprobantes', 'Pedidos', '$filter', '$timeout', '$mdDialog', '$state', 'Condicionventas', '$q',
	function($scope, $rootScope, $stateParams, $location, Authentication, Clients, Enterprises, Subs, $mdBottomSheet, Contacts, Taxconditions, Categories, Ventas, Comprobantes, Pedidos, $filter, $timeout, $mdDialog, $state, Condicionventas, $q ) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			$scope.findAll();
			$scope.findZones();
			$scope.findCondicionPagos();
		});

		var marker, map;
		$scope.$on('mapInitialized', function(evt, evtMap) {
		    map = evtMap;
			marker = map.markers[0];
		});

		$scope.types = "['address']";
       
        $scope.placeChanged = function() {
           $scope.place = this.getPlace();
           $scope.errorDir = undefined;
        }

		//console.log('user: ', $scope.SEARCH);

		// Create new Client
		$scope.create = function() {
			// Create new Client object
			var tempContact = [];
			var prod = [];
				if(this.name !== undefined){
					if(this.address !== undefined){
						if(this.sub !== undefined){
							if(this.category1 !== undefined){
								if(this.taxcondition !== undefined){
									if(this.condicionPago !== undefined){
										if(this.tipoComprobante !== undefined){
											var client = new Clients ({
												name: this.name,
												creditLimit: this.creditLimit ? this.creditLimit : 0,
												fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
												taxCondition: this.taxcondition._id,
												condicionPago: this.condicionPago._id,
												comprobante: this.tipoComprobante._id,
												discountRate: this.discountRate ? this.discountRate : 0,
												loc: [$scope.place.geometry.location.lat(), $scope.place.geometry.location.lng()],
												//costCenter: this.costCenter,
												observaciones: this.observaciones ? this.observaciones : undefined,
												paymentMethod: this.paymentMethod,
												contacts: this.contact ? [ this.contact._id ] : [],
												country: this.country,
												city: this.city,
												region: this.region ? this.region : undefined,
												turno: this.turno ? this.turno : undefined,
												postalCode: this.postalCode ? this.postalCode : 1900,
												address: this.address,
												phone: this.phone ? this.phone : undefined,
												// fax: this.fax,
												web: this.web ? this.web : undefined,
												category1: this.category ? this.category._id : undefined,
												enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
												sub: this.sub ? this.sub._id : undefined,
												productosAsociados: prod
											});

											// Redirect after save
											client.$save(function(response) {
												//$location.path('clients/' + response._id);

												if(response._id) {
													// agregar sub al array

													client._id = response._id;
													$rootScope.clients.unshift(client);

												}

												$state.go('home.clients');

												// Clear form fields
												$scope.name = '';
												$scope.creditLimit = 0;
												$scope.fiscalNumber = '';
												$scope.discountRate = 0;
												$scope.contacts = [];
												$scope.country = '';
												$scope.city = '';
												$scope.region = '';
												$scope.postalCode = '';
												$scope.address = '';
												$scope.phone = '';
												$scope.fax = '';
												$scope.web = '';

												// $mdBottomSheet.hide();
											}, function(errorResponse) {
												$scope.error = errorResponse.data.message;
											});
										}
										else{
											$scope.errorComprobante = 'Se debe elegir un tipo de comprobante';
										}	
									}
									else{
										$scope.errorCondicion = 'Se debe elegir una condicion de pago';
									}	
								}
								else{
									$scope.errorTax = 'Se debe ingresar la condicion de IVA';
								}		
							}
							else{
								$scope.errorCategory = 'Se debe ingresar la categoria';
							}			
						}
						else{
							$scope.errorSub = 'Se debe ingresar la UEN';
						}				
					}
					else{
						$scope.errorDir = 'Se debe ingresar la direccion';
					}	
				}
				else{
					$scope.errorName = 'Se debe ingresar la razon social del cliente';
				}			
		};

		$scope.borrarError = function(){
			$scope.errorName = undefined;
			$scope.errorDir = undefined;
			$scope.errorSub = undefined;
			$scope.errorCategory = undefined;
			$scope.errorTax = undefined;
			$scope.errorCondicion = undefined;
			$scope.errorComprobante = undefined;
		}

		//abre modal para eliminar un cliente
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Cliente')
	          .content('¿Está seguro que desea eliminar este cliente?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
					$mdBottomSheet.hide();
		    }, function() {
					$mdBottomSheet.hide();
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Client
		$scope.remove = function( client ) {
			console.log('---> remover item disparado');
			if ( client ) {
				//client.$remove();
				console.log('client es: ', client);
				for (var i in $rootScope.clients ) {
					if ($rootScope.clients[i]._id === client._id ) {
						console.log('---> se encuentra en el array en la posicion ', i);
						$rootScope.clients.splice(i, 1);
						client.$remove();
					} else { console.log('La concha de la lora');}
				}
			} else {
				console.log('--> No se encuentra en el array');
				$scope.client.$remove(function() {
					$location.path('clients');
				});
			}
		};

		// Update existing Client
		$scope.update = function() {
			var client = $scope.client
			if (this.enterprise !== undefined) { client.enterprise = this.enterprise._id } else if ((client.enterprise!==undefined)&&(client.enterprise!==null)){ client.enterprise = client.enterprise._id};
			if (this.sub !== undefined) { client.sub = this.sub._id } else if((client.sub !== undefined)&&(client.sub !== null)){ client.sub = client.sub._id};
			if (this.contact !== undefined) { client.contacts = [ this.contact._id ] } else if((client.contacts[0] !== undefined)&&(client.contacts[0] !== null)){ client.contacts = [ client.contacts[0]._id]};
			if (this.taxcondition !== undefined) { client.taxCondition = this.taxcondition._id } else if((client.taxCondition !== undefined)&&(client.taxCondition !== null)){ client.taxCondition = client.taxCondition._id};
			if (this.comprobante !== undefined) { client.comprobante = this.comprobante._id } else if((client.comprobante !== undefined)&&(client.comprobante !== null)){ client.comprobante = client.comprobante._id};
			if (this.condicionPago !== undefined) { client.condicionPago = this.condicionPago._id } else if((client.condicionPago !== undefined)&&(client.condicionPago !== null)){ client.condicionPago = client.condicionPago._id};
			if (this.category !== undefined) { client.category1 = this.category._id } else if((client.category1 !== undefined)&&(client.category1 !== null)){ client.category1 = client.category1._id};
			if (this.region !== undefined) { client.region = this.region } else if((client.region !== undefined)&&(client.region !== null)){ client.region = client.region};
			if (this.turno !== undefined) { client.turno = this.turno } else if((client.turno !== undefined)&&(client.turno !== null)){ client.turno = client.turno};
			if ($scope.place !== undefined) { client.loc = [ $scope.place.geometry.location.lat(), $scope.place.geometry.location.lng()]} else if((client.loc!==undefined)&&(client.loc!==null)) { client.loc = client.loc};
			//if (this.city !== undefined) { client.city = this.city } else { client.city = client.city};

			client.$update(function() {
				$location.path('clientes');
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Clients
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) {
				$rootScope.clients = Clients.query({ e: $scope.SEARCH.enterprise });

			};

		};

		$scope.setZone = function(s) {
			if (s !== '') {
				//console.log('cambio a ', s);
				$scope.fzone = { region: s };
			} else {
				//console.log('filtro eliminado ');
				$scope.fzone = undefined;
			}

		};

		// Find a list of SBUs
		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find a list of SBUs
		$scope.findSubs = function() {
			if($scope.SEARCH !== undefined) { $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise }); }

		};

		// Find a list of SBUs
		$scope.findContacts = function() {
			if ($scope.SEARCH !== undefined) { $scope.contacts = Contacts.query({e: $scope.SEARCH.enterprise }); };
		};

		// Find a list of Taxconditions
		$scope.findTaxConditions = function() {
			if ($scope.SEARCH !== undefined) { $scope.taxconditions = Taxconditions.query({e: $scope.SEARCH.enterprise }); };

		};

		// Find a list of Enterprises
		$scope.findCategories = function() {
			if ($scope.SEARCH !== undefined) { $scope.categories = Categories.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		$scope.findZones = function() {
			if ($scope.SEARCH !== undefined) { $scope.zones = ['Zona 1', 'Zona 2', 'Zona 3', 'Zona 4', 'Zona 5'];
				$scope.clientsInZone = [];
				$timeout(function(){
					$scope.zones.forEach(function(zone){
						$scope.clientsInZone[zone] = $filter('filter')($rootScope.clients, { region: zone });
					});
				}, 500)

			} // ToDo:  migrate this to a factory
		};

		// Find a list of Enterprises
		$scope.findTurnos = function() {
			if ($scope.SEARCH !== undefined) { $scope.turnos = ['Mañana', 'Tarde', 'Noche']; } // ToDo:  migrate this to a factory

		};

		// Find a list of Enterprises
		$scope.findCitys = function() {
			if ($scope.SEARCH !== undefined) { $scope.citys = ['Berisso', 'Ensenala', 'La Plata']; } // ToDo:  migrate this to a factory

		};


		// Find existing Client
		$scope.findOne = function() {
			$scope.client = Clients.get({
				clientId: $stateParams.clientId
			});
			$scope.idClient = $stateParams.clientId;
		};

		$scope.findAll = function(){
			//$scope.findOne();
			$scope.findComprobantes();
			$scope.findVentas();
			$scope.findPedidos();
		};

		$scope.findAllView = function(){
			$scope.findOne();
			$scope.findComprobantes();
			$scope.findPedidos();
			$scope.findVentas();
			var promise = asyncVentas();
			promise.then(function(response) {
				calcularDeuda();
  			});
		};

		function calcularDeuda(){
			$scope.totalDeuda = 0;
			for (var i = $scope.ventas.length - 1; i >= 0; i--) {
				if($scope.ventas[i].cliente._id==$scope.client._id){
					if(($scope.ventas[i].estado=='Pendiente de pago y entrega')||($scope.ventas[i].estado=='Pendiente de pago2')){
						$scope.totalDeuda = $scope.totalDeuda + $scope.ventas[i].total; 
					}
				}
			};
		};

		function asyncVentas(item) {
		    var deferred = $q.defer();
			setTimeout(function() {
			    if ($scope.ventas!==undefined) {
			      deferred.resolve('Hello');
			    } else {
			      deferred.reject('Greeting');
			    }
			}, 1000);
			return deferred.promise;
		};

		$scope.findComprobantes = function(){
			if ($scope.SEARCH !== undefined) {
				$scope.comprobantes = Comprobantes.query({e: $scope.SEARCH.enterprise }, function(res){
					$rootScope.comprobantes = res;
					for (var i in $rootScope.comprobantes) {
						if ($rootScope.comprobantes[i].name === 'Presupuesto'){
							$scope.idPresupuesto = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Factura A'){
							$rootScope.idFacturaA = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Factura B'){
							$rootScope.idFacturaB = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Factura C'){
							$rootScope.idFacturaC = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Remito'){
							$rootScope.idRemito = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Remito de Devolucion'){
							$rootScope.idRemitoDev = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Nota de Credito'){
							$rootScope.idNotaC = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Nota de Debito'){
							$rootScope.idNotaD = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Orden de Pago'){
							$rootScope.idOrden = $rootScope.comprobantes[i]._id;
						}
					}
				});
			}
		};

		// Find a list of condiciones de pago
		$scope.findCondicionPagos = function() {
			if($scope.SEARCH !== undefined) { $scope.condicionPagos = Condicionventas.query({ e: $scope.SEARCH.enterprise });}
		};

		$scope.findVentas = function() {
			if($scope.SEARCH !== undefined) {
				$scope.ventas = Ventas.query({ e: $scope.SEARCH.enterprise });
			}
		};


		$scope.findPedidos = function(){
			if ($scope.SEARCH !== undefined) {
				$scope.pedidos = Pedidos.query({ e: $scope.SEARCH.enterprise });
			}
		};

		$scope.showBottomSheet = function($event, item, model, param) {
			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	//console.log('estadoactual: ', $rootScope.estadoActual);
	    	$mdBottomSheet.show({
	    		controller: DialogController,
		      	templateUrl: template,
		      // controller: 'ListBottomSheetCtrl',
		      targetEvent: $event,
		      resolve: {
		         item: function () {
		           return item;
		         }
		       }

		    }).then(function(clickedItem) {
		    	//$mdBottomSheet.hide();
		    });

	  	};

	  	function DialogController($scope, $mdDialog, item, Areas) {

	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
						$state.go(state, params);
						$mdBottomSheet.hide();
				}
			}

			//abre modal para eliminar un cliente
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Cliente')
	          .content('¿Está seguro que desea eliminar este cliente?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
					$mdBottomSheet.hide();
		    }, function() {
					$mdBottomSheet.hide();
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Client
		$scope.remove = function( client ) {
			if ( client ) {
				for (var i in $rootScope.clients ) {
					if ($rootScope.clients[i]._id === client._id ) {
						$rootScope.clients.splice(i, 1);
						client.$remove();
					} else { console.log('hubo un error al eliminar');}
				}
			} else {
				$scope.client.$remove(function() {
				});
			}
			$mdBottomSheet.hide();
		};

	  	};


	}
]);

'use strict';

//Clients service used to communicate Clients REST endpoints
angular.module('clients').factory('Clients', ['$resource',
	function($resource) {
		return $resource('api/clients/:clientId', { clientId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the actividades module
angular.module('actividades').run(['Menus',
	function(Menus) {
		// Add the actividades dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Actividades',
			state: 'actividades',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'actividades', {
			title: 'List actividades',
			state: 'actividades.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'actividades', {
			title: 'Create Liquidacion',
			state: 'actividades.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('actividades').config(['$stateProvider',
	function($stateProvider) {
		// actividades state routing
		$stateProvider.
		state('actividades', {
			abstract: true,
			url: '/actividades',
			template: '<ui-view/>'
		})
	}
]);
'use strict';

// Actividad controller
angular.module('actividades').controller('ActividadListController', ['$scope', '$http', '$stateParams', '$mdDialog', 'Empleados', 'Actividades',
    function ($scope, $http, $stateParams, $mdDialog, Empleados, Actividades) {
        $scope.centroDeCosto = $stateParams.centroDeCosto;

        $scope.findActividad = function () {
            $http.put('/api/actividades', {
                empleadoId: $stateParams.empleadoId
            }).success(function (response) {
                $scope.actividades = response;
                $scope.name = $stateParams.displayName;
            });
        };

        $scope.showObservacion = function(ev, obs) {
            $mdDialog.show(
                $mdDialog.alert()
                    .parent(angular.element(document.querySelector('#popupContainer')))
                    .clickOutsideToClose(true)
                    .title(obs)
                    .ariaLabel('Alert Dialog Demo')
                    .targetEvent(ev)
                    .ok('Cerrar')
            );
        };

        $scope.showDialogActividad = function ($event) {
            Empleados.get({empleadoId: $stateParams.empleadoId}, function (response) {
                $mdDialog.show({
                    targetEvent: $event,
                    templateUrl: 'modules/actividades/views/create-actividad.client.view.html',
                    locals: {
                        item: response
                    },
                    controller: DialogController
                })
            });
        };

        function DialogController($scope, $mdDialog, $state, item) {
            $scope.item = item;
            $scope.item.name = item.userLogin.displayName;

            $scope.closeDialog = function () {
                $mdDialog.hide();
            };

            $scope.createActividad = function ($event, item) {
                var actividad = new Actividades({
                    enterprise: item.enterprise,
                    operacion: $scope.operacion,
                    observaciones: $scope.observaciones,
                    empleado: item._id
                });

                actividad.$save(function () {
                    $scope.closeDialog();
                    $state.go('home.actividades', {empleadoId: item._id, displayName: item.userLogin.displayName}, {reload: true})
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            };
        }
    }
]);
'use strict';

//actividades service used to communicate Actividades REST endpoints
angular.module('actividades').factory('Actividades', ['$resource',
	function($resource) {
		return $resource('api/actividades/:actividadId', { liquidacionId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Areas module
angular.module('areas').run(['Menus',
	function(Menus) {
		// Add the Areas dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Areas',
			state: 'areas',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'areas', {
			title: 'List Areas',
			state: 'areas.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'areas', {
			title: 'Create Area',
			state: 'areas.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('areas').config(['$stateProvider',
	function($stateProvider) {
		// Areas state routing
		$stateProvider.
		state('areas__', {
			abstract: true,
			url: '/areas__',
			template: '<ui-view/>'
		}).
		state('areas__.list', {
			url: '',
			templateUrl: 'modules/areas/views/list-areas.client.view.html'
		}).
		state('areas__.create', {
			url: '/create',
			templateUrl: 'modules/areas/views/create-area.client.view.html'
		}).
		state('areas__.view', {
			url: '/:areaId',
			templateUrl: 'modules/areas/views/view-area.client.view.html'
		}).
		state('areas__.edit', {
			url: '/:areaId/edit',
			templateUrl: 'modules/areas/views/edit-area.client.view.html'
		});
	}
]);
'use strict';

// Areas controller
angular.module('areas').controller('AreasController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Areas', '$mdBottomSheet', 'Enterprises', '$mdDialog', '$http', '$state', 'Procesos', 'Subs',
	function($scope, $rootScope, $stateParams, $location, Authentication, Areas, $mdBottomSheet, Enterprises, $mdDialog, $http, $state, Procesos, Subs) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			$scope.findAll();
			if($stateParams.areaId !== undefined){
				$scope.findOne();
			}
			//console.log('search: ', $scope.SEARCH);
		});

		$rootScope.procesosEdit = [];

		$scope.submitEdit = function(){
			$scope.clickedEdit = true;
			$scope.update();
		};

		// Create new Area
		$scope.create = function() {
			// Create new Area object
			if (this.name !== undefined){
				if((this.parent !== undefined) || ($rootScope.areas.length == 0)){
					$scope.error = undefined;
					var area = new Areas ({
						name: this.name,
						nivel: this.nivel,
						parent: $scope.parent,
						objetivos: this.objetivos ? this.objetivos : undefined,
						politicas: this.politicas ? this.politicas : undefined,
						reglas: this.reglas ? this.reglas : undefined,
						sectores: this.sectores ? this.sectores : undefined,
						bienesUso :  this.bienesUso ? this.bienesUso : undefined,
						procesos: $rootScope.procesosAgregados,
						sub: this.sub ? this.sub._id : undefined,
						enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
					});

					// Redirect after save
					area.$save(function(response) {
						if(response._id) {
							// agregar sub al array
							area._id = response._id;
							$rootScope.areas.unshift(area);
							$rootScope.procesosAgregados = [];
							$location.path('/rrhh');
						}

						// Clear form fields
						$scope.name = '';
						$scope.nivel = '';
						$scope.parent = '';
						$scope.objetivos = '';
						$scope.politicas = '';
						$scope.reglas = '';
						$scope.sectores = '';
						$scope.bienesUso = '';

						$location.path('rrhh');
					}, function(errorResponse) {
						$scope.error = errorResponse.data.message;
					});
				} else {
					$scope.error = 'Debes asignar un area superior';
				}
			}
			else{
				$scope.errorName = 'Indicar nombre para el area'
			}	
		};

		$scope.asignoAreaSuperior = function(){
			$scope.error = undefined;
			$scope.area.nivel = parseInt($scope.parent.nivel) + 1;
		};

		$scope.asignoAreaSuperiorCreate = function(){
			$scope.error = undefined;
			console.log($scope.parent.nivel);
			$scope.nivel = parseInt($scope.parent.nivel) + 1;
		};

		//abre modal para eliminar un area
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Area')
	          .content('¿Está seguro que desea eliminar este area?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		      // $scope.eliminarArea(item);
		    }, function() {
		      // console.log('cancelaste borrar');
		    });
		};	

		// Remove existing Area
		$scope.remove = function( area ) {
			if ( area ) { area.$remove();

				for (var i in $scope.areas ) {
					if ($scope.areas [i] === area ) {
						$scope.areas.splice(i, 1);
					}
				}
			} else {
				$scope.area.$remove(function() {				
				});
			}
			$mdBottomSheet.hide();
		};

		// Funciones para agregar/borrar procesos del area en el edit

		$scope.removeProceso= function(item){
			$rootScope.procesosEdit = this.area.procesos;
			for (var i in $rootScope.procesosEdit) {
				if ($rootScope.procesosEdit[i].proceso._id === item._id ) {
					$rootScope.procesosEdit.splice(i, 1);
				}
			}
		};

		$scope.addProceso = function(proceso){
			var p = {proceso: {}};
			p.proceso = proceso;
			$rootScope.procesosEdit = this.area.procesos;
			$rootScope.procesosEdit.push(p);		
		};

		// Remove existing Area
		$scope.eliminarArea = function( area ) {
			if ( area ) { 
				console.log(area._id);
				$http({ method: 'GET',
	                url: ('/api/borrarArea'),
	                params: { areaId: $stateParams.areaId }
	                })
				  	.then(function(response) {                         
	                    // console.log('borrado');
	                }, function(response) {
	                    // console.log('error');
	                });
				for (var i in $scope.areas ) {
					if ($scope.areas [i] === area ) {
						$scope.areas.splice(i, 1);
					}
				}
			} else {
				$scope.area.$remove(function() {
					$location.path('areas');
				});
			}
		};

		// Update existing Area
		$scope.update = function() {
			if ($scope.clickedEdit === true){
				console.log($scope.parent, 'parent');
				var area = $scope.area ;

				if( $rootScope.procesosEdit.length !== 0 ){
					area.procesos = $rootScope.procesosEdit;
				};	

				/* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
				una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no 
				hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

				if (this.enterprise !== undefined) { area.enterprise = this.enterprise._id } else if ((area.enterprise !== undefined)&&(area.enterprise !== null)) { area.enterprise = area.enterprise._id };
				if (this.sub !== undefined) { area.sub = this.sub} else if ((area.sub !== undefined)&&(area.sub !== null)) { area.sub = area.sub._id };
				if ($scope.parent !== undefined) { area.parent = $scope.parent._id} else if ((area.parent !== undefined)&&(area.parent !== null)) { area.parent = area.parent._id };
				console.log(area, 'area');
				area.$update(function() {
					$location.path('areas');
				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});
			}	
		};

		$scope.findAll = function(){
			$scope.find();
			$scope.findProcesos();
		};

		// Find a list of Areas
		$scope.find = function() {
			/*console.log('find areas');*/
			if ($scope.SEARCH !== undefined) { 
				Areas.query({ e: $scope.SEARCH.enterprise }, function(res){
					$rootScope.areas = res;
					if($rootScope.areas.length == 0){
						$scope.nivel = 0;
						$scope.name = 'Directorio';
					}; 
				});
			};
		};

		// Find existing Provider
		$scope.findOne = function() {
			$scope.area = Areas.get({
				areaId: $stateParams.areaId 
			});
			$scope.idProvider = $stateParams.providerId;
		};

		$rootScope.procesosAgregados = [];
		$scope.selected = [];

	    $scope.toggle = function (item, list) {
	        var idx = list.indexOf(item);
	        if (idx > -1) list.splice(idx, 1);
	        else {
	        	list.push(item); 
	        	// $scope.errorProc = undefined;
	        	$scope.agregarProceso(item);
	        }
	    };

	    $scope.exists = function (item, list) {
	        return list.indexOf(item) > -1;
	    };

	    $scope.agregarProceso = function(item){
	    	var p = {proceso: {}};
			p.proceso = item;
			$rootScope.procesosAgregados.push(p);
	    }

		//find lista de empresas
		$scope.findEnterprises = function() {
			if ($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise }); }			
		};

		$scope.findProcesos = function() {
			if ($scope.SEARCH !== undefined) { $scope.procesos = Procesos.query({ e: $scope.SEARCH.enterprise }); }			
		};

		$scope.findSubs = function() {
			if($scope.SEARCH !== undefined) { $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise }); }			
		};

		$scope.showBottomSheet = function($event, item, model, param) {

			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	$mdBottomSheet.show({
	    		controller: DialogController,
		    	templateUrl: template,
		        targetEvent: $event,
		        resolve: {
		         item: function () {
		           return item;
		         }
		       }

		    }).then(function(clickedItem) {
		    	//$mdBottomSheet.hide();
		    	console.log('por aqui ando');
		    });

	  	};

	  	function DialogController($scope, $mdDialog, item, Areas) {
	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
						$state.go(state, params);
						$mdBottomSheet.hide();
				}
			};

			$scope.showConfirm = function(ev,item) {
				//corroboro que no sea el directorio antes de borrar
				if(item.nivel!==0){
					var confirm = $mdDialog.confirm()
			          .title('Eliminar Area')
			          .content('¿Está seguro que desea eliminar este area?')
			          .ariaLabel('Lucky day')
			          .ok('Eliminar')
			          .cancel('Cancelar')
			          .targetEvent(ev);
				} else {
					var confirm = $mdDialog.confirm()
			          .title('Eliminar Area')
			          .content('No se puede eliminar el area de nivel 0')
			          .ariaLabel('Lucky day')
			          .ok('OK')
			          .targetEvent(ev);
				}
			    $mdDialog.show(confirm).then(function() {
			      $scope.remove(item);
			    }, function() {
			      // console.log('cancelaste borrar');
			    });
			};	

			// Remove existing Area
			$scope.remove = function( area ) {
				if(area.nivel!==0){
					/* recorro las areas para saber quien tiene como area superior
					al area que se va a a eliminar */
					
					var hijos = [];

					for (var i = $rootScope.areas.length - 1; i >= 0; i--) {
						if($rootScope.areas[i].deleted == false) {
							if($rootScope.areas[i].parent!==null){
								/*por cada area que tiene asignada como padre la candidata a eliminar
								le asigno como parent el padre de la misma, subiendo un nivel*/
								if($rootScope.areas[i].parent._id==area._id){
									$scope.updateParent($rootScope.areas[i], area.parent);
									var hijo = $rootScope.areas[i];
									hijos.push(hijo);
								}
							}
						}
					};

					/* recorro cada uno de los hijos que voy a modificar para actualizarlos
					recursivamente */

					recorroHijos(hijos);

					if ( area ) {
						area.$remove();
						for (var i in $scope.$parent.areas ) {
							if ($scope.$parent.areas [i] === area ) {
								$scope.$parent.areas.splice(i, 1);
							}
						}
					} else {
						$scope.area.$remove(function() {				
						});
					}
					$mdBottomSheet.hide();
				}
			};

			function recorroHijos(hijos) {
				console.log('recorro hijos');
				// console.log(hijos, hijos.length);
				var nietos = [];
				for (var m = hijos.length - 1; m >= 0; m--) {
					var area = hijos[m];
					// console.log('area', area);
					for (var i = $rootScope.areas.length - 1; i >= 0; i--) {
						if($rootScope.areas[i].deleted == false) {
							if($rootScope.areas[i].parent!==null){
								/*por cada area que tiene asignada como padre la candidata a eliminar
								le asigno como parent el padre de la misma, subiendo un nivel*/
								if($rootScope.areas[i].parent._id==area._id){
									// console.log('tiene hijo', $rootScope.areas[i]);
									$scope.updateParent($rootScope.areas[i], area);
									var nieto = $rootScope.areas[i];
									nietos.push(nieto);
								}
							}
						}
					};
				};
				if(nietos.length>0){
					recorroHijos(nietos);
				}
			};

			$scope.updateParent = function( area, parent ) {
				/* asigno el nuevo parent, por lo tanto actualizo el nivel */
				
				// console.log(parent);
				area.parent = parent;
				area.nivel = parseInt(parent.nivel) + 1;

				/* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
				una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no 
				hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

				if (this.enterprise !== undefined) { area.enterprise = this.enterprise._id } else if ((area.enterprise !== undefined)&&(area.enterprise !== null)) { area.enterprise = area.enterprise._id };

				area.$update(function() {
				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

			};

	  	};
	  	//end Dialog Controller

	}
]);

'use strict';

//Areas service used to communicate Areas REST endpoints
angular.module('areas').factory('Areas', ['$resource',
	function($resource) {
		return $resource('api/areas/:areaId', { areaId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);


'use strict';

// Configuring the Comprobantes module
angular.module('arqueos').run(['Menus',
	function(Menus) {
		// Add the Comprobantes dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Arqueos',
			state: 'arqueos',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'arqueos', {
			title: 'List Arqueos',
			state: 'arqueos.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'arqueos', {
			title: 'Create Caja',
			state: 'arqueos.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('arqueos').config(['$stateProvider',
	function($stateProvider) {
		// Comprobantes state routing
		$stateProvider.
		state('arqueos', {
			abstract: true,
			url: '/arqueos',
			template: '<ui-view/>'
		}).
		state('arqueos.list', {
			url: '',
			templateUrl: 'modules/arqueos/views/list-arqueos.client.view.html'
		}).
		state('arqueos.create', {
			url: '/create',
			templateUrl: 'modules/arqueos/views/create-arqueo.client.view.html'
		}).
		state('arqueos.view', {
			url: '/:arqueoId',
			templateUrl: 'modules/arqueos/views/view-arqueo.client.view.html'
		}).
		state('arqueos.edit', {
			url: '/:arqueoId/edit',
			templateUrl: 'modules/arqueos/views/edit-arqueo.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('arqueos').controller('CreateArqueosController', ['user', 'arqueo', 'enterprises', '$state', 'arqueos',
	function(user, arqueo, enterprises, $state, arqueos) {

		// asignacion de modelos
		this.user = user;
		this.arqueo = arqueo;
		this.enterprises = enterprises;
		this.arqueos = arqueos;

		// asignacion de funciones
		this.create = create;

		// definicion de funciones
		// Create new sucursal
		function create() {
			// Create new sucursal object
			var arqueo = new arqueos ({
				name: res,
				descripcion: this.descripcion,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id
			});

			arqueo.$save(function(response) {
				if(response._id) {
					// agregar sub al array
					$state.go('home.arqueos');

				}
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};

	}
]);

'use strict';

// Comprobantes controller
angular.module('arqueos').controller('ArqueosEditController', ['user', 'arqueo', 'enterprises', '$location',
	function(user, arqueo, enterprises, $location) {

		// asignacion de modelos
		this.user = user;
		this.arqueo = arqueo;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.update = update;

		// definicion de funciones
		// Update existing Comprobante
		function update () {
			// console.log(this.comprobante.enterprise, 'ent');
			// console.log(this.comprobante, 'comp');
			var arqueo = this.arqueo;

			if (this.enterprise !== undefined) { caja.enterprise = this.enterprise._id } else { caja.enterprise = caja.enterprise._id };
			if (this.modoFacturacion !== undefined) { caja.modoFacturacion = this.modoFacturacion } else { caja.modoFacturacion = sucursal.modoFacturacion };

			// comprobante.$update(function() {
			// 	$location.path('comprobantes/view/' + comprobante._id);
			// }, function(errorResponse) {
			// 	this.error = errorResponse.data.message;
			// });
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('arqueos').controller('ListArqueosController', ['$location', 'user', 'arqueos', 'enterprises', '$mdDialog',
	function($location, user, arqueos, enterprises, $mdDialog) {

		// asignacion de modelos
		this.user = user;
		this.arqueos = arqueos;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.remove = remove;

		// definicion de funciones

		// Remove existing Comprobante
		function remove ( arqueo ) {
			if ( arqueo ) { arqueo.$remove();
			} else {
				this.arqueo.$remove(function() {
					$location.path('arqueos');
				});
			}
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('arqueos').controller('ArqueosViewController', ['user', 'arqueo',
	function(user, arqueo) {

		// asignacion de modelos
		this.user = user;
		this.arqueo = arqueo;

		// asignacion de funciones

		// definicion de funciones


	}
]);

'use strict';

// Comprobantes controller
angular.module('arqueos').controller('ArqueosController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Sucursales', '$mdBottomSheet', 'Enterprises', '$mdDialog',
	function($scope, $rootScope, $stateParams, $location, Authentication, Sucursales, $mdBottomSheet, Enterprises, $mdDialog) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		// Create new Comprobante
		$scope.create = function() {
			// Create new Comprobante object
			var caja = new Cajas ({
				name: this.name,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
			});

			// Redirect after save
			caja.$save(function(response) {
				if(response._id) {
					// agregar sub al array

					caja._id = response._id;
					$rootScope.cajas.unshift(caja);

				}

			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un puesto 
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar tipo de Comprobante')
	          .content('¿Está seguro que desea eliminar este tipo de Comprobante?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Comprobante
		$scope.remove = function( caja ) {
			if ( caja ) { caja.$remove();

				for (var i in $scope.cajas ) {
					if ($scope.cajas [i] === caja ) {
						$scope.cajas.splice(i, 1);
					}
				}
			} else {
				$scope.caja.$remove(function() {
					$location.path('cajas');
				});
			}
		};

		// Update existing Comprobante
		$scope.update = function() {
			var caja = $scope.caja ;

			if (this.enterprise !== undefined) { caja.enterprise = this.enterprise._id } else { caja.enterprise = caja.enterprise._id };

			caja.$update(function() {
				$location.path('cajas/view/' + caja._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Comprobantes
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.cajas = Cajas.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		// $scope.findEnterprises = function() {
		// 	if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });}			
		// };

		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find existing Comprobante
		$scope.findOne = function() {
			$scope.caja = Cajas.get({ 
				cajaId: $stateParams.cajaId
			});
		};
	}
]);
'use strict';

//Comprobantes service used to communicate Comprobantes REST endpoints
angular.module('arqueos').factory('Arqueos', ['$resource',
	function($resource) {
		return $resource('api/arqueos/:arqueoId', { arqueoId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

// Configuring the Articles module
angular.module('articles').run(['Menus',
	function(Menus) {
		// Add the articles dropdown item
		/*Menus.addMenuItem('topbar', {
			title: 'Articles',
			state: 'articles',
			type: 'dropdown'
		});*/

		// Add the dropdown list item
		/*Menus.addSubMenuItem('topbar', 'articles', {
			title: 'List Articles',
			state: 'articles.list'
		});*/

		// Add the dropdown create item
		/*Menus.addSubMenuItem('topbar', 'articles', {
			title: 'Create Articles',
			state: 'articles.create'
		});*/
	}
]);

'use strict';

// Setting up route
angular.module('articles').config(['$stateProvider',
	function($stateProvider) {
		// Articles state routing
		$stateProvider.
		state('articles', {
			abstract: true,
			url: '/articles',
			template: '<ui-view/>'
		}).
		state('articles.list', {
			url: '',
			templateUrl: 'modules/articles/views/list-articles.client.view.html'
		}).
		state('articles.create', {
			url: '/create',
			templateUrl: 'modules/articles/views/create-article.client.view.html'
		}).
		state('articles.view', {
			url: '/:articleId',
			templateUrl: 'modules/articles/views/view-article.client.view.html'
		}).
		state('articles.edit', {
			url: '/:articleId/edit',
			templateUrl: 'modules/articles/views/edit-article.client.view.html'
		});
	}
]);

'use strict';

angular.module('articles').controller('ArticlesController', ['$scope', '$stateParams', '$location', 'Authentication', 'Articles',
	function($scope, $stateParams, $location, Authentication, Articles) {
		$scope.authentication = Authentication;

		$scope.create = function() {
			var article = new Articles({
				title: this.title,
				content: this.content
			});
			article.$save(function(response) {
				$location.path('articles/' + response._id);

				$scope.title = '';
				$scope.content = '';
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		$scope.remove = function(article) {
			if (article) {
				article.$remove();

				for (var i in $scope.articles) {
					if ($scope.articles[i] === article) {
						$scope.articles.splice(i, 1);
					}
				}
			} else {
				$scope.article.$remove(function() {
					$location.path('articles');
				});
			}
		};

		$scope.update = function() {
			var article = $scope.article;

			article.$update(function() {
				$location.path('articles/' + article._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		$scope.find = function() {
			$scope.articles = Articles.query();
		};

		$scope.findOne = function() {
			$scope.article = Articles.get({
				articleId: $stateParams.articleId
			});
		};
	}
]);
'use strict';

//Articles service used for communicating with the articles REST endpoints
angular.module('articles').factory('Articles', ['$resource',
	function($resource) {
		return $resource('api/articles/:articleId', {
			articleId: '@_id'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

// Configuring the Comprobantes module
angular.module('cajas').run(['Menus',
	function(Menus) {
		// Add the Comprobantes dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Cajas',
			state: 'cajas',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'cajas', {
			title: 'List Cajas',
			state: 'cajas.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'cajas', {
			title: 'Create Caja',
			state: 'cajas.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('cajas').config(['$stateProvider',
	function($stateProvider) {
		// Comprobantes state routing
		$stateProvider.
		state('cajas', {
			abstract: true,
			url: '/cajas',
			template: '<ui-view/>'
		}).
		state('cajas.list', {
			url: '',
			templateUrl: 'modules/cajas/views/list-cajas.client.view.html'
		}).
		state('cajas.create', {
			url: '/create',
			templateUrl: 'modules/cajas/views/create-caja.client.view.html'
		}).
		state('cajas.view', {
			url: '/:cajaId',
			templateUrl: 'modules/cajas/views/view-caja.client.view.html'
		}).
		state('cajas.edit', {
			url: '/:cajaId/edit',
			templateUrl: 'modules/cajas/views/edit-caja.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('cajas').controller('CajasCreateController', ['user', 'caja', 'enterprises', '$state', 'cajas', 'puestos', 'totalCajas',
	function(user, caja, enterprises, $state, cajas, puestos, totalCajas) {

		// asignacion de modelos
		this.user = user;
		this.caja = caja;
		this.enterprises = enterprises;
		this.puestos = puestos;
		this.cajas = cajas;

		this.puestosAgregados = [];

		// asignacion de funciones
		this.create = create;
		this.agregarPuesto = agregarPuesto;

		// definicion de funciones
		// Create new sucursal
		function create() {
			var name = 'Caja '
			var num = totalCajas.length + 1;
			var res = name.concat(num);
			// Create new sucursal object
			var caja = new cajas ({
				name: res,
				descripcion: this.descripcion,
				puestos: this.puestosAgregados,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id
			});

			caja.$save(function(response) {
				if(response._id) {
					// agregar sub al array
					$state.go('home.sucursales');

				}
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};

		function agregarPuesto (puesto){
			var ok = false;
			if ((puesto !== undefined) && (puesto !== null)){
				for (var i in this.puestosAgregados){
					if (this.puestosAgregados[i]._id === puesto._id){
						var ok = true;
					}
				}
				if (!ok){
					this.puestosAgregados.push(puesto);
				}
			}
			console.log(this.puestosAgregados, 'puestos agregados');
		};

	}
]);

'use strict';

// Comprobantes controller
angular.module('cajas').controller('CajasEditController', ['user', 'caja', 'enterprises', '$location',
	function(user, caja, enterprises, $location) {

		// asignacion de modelos
		this.user = user;
		this.caja = caja;
		this.enterprises = enterprises;
		this.modosFacturacion = modosFacturacion;

		// asignacion de funciones
		this.update = update;

		// definicion de funciones
		// Update existing Comprobante
		function update () {
			// console.log(this.comprobante.enterprise, 'ent');
			// console.log(this.comprobante, 'comp');
			var caja = this.caja;

			if (this.enterprise !== undefined) { caja.enterprise = this.enterprise._id } else { caja.enterprise = caja.enterprise._id };
			if (this.modoFacturacion !== undefined) { caja.modoFacturacion = this.modoFacturacion } else { caja.modoFacturacion = sucursal.modoFacturacion };

			// comprobante.$update(function() {
			// 	$location.path('comprobantes/view/' + comprobante._id);
			// }, function(errorResponse) {
			// 	this.error = errorResponse.data.message;
			// });
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('cajas').controller('CajasListController', ['$location', 'user', 'cajas', 'enterprises', '$mdDialog',
	function($location, user, cajas, enterprises, $mdDialog) {

		// asignacion de modelos
		this.user = user;
		this.cajas = cajas;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.showConfirm = showConfirm;
		this.remove = remove;

		// definicion de funciones
		function showConfirm (ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar tipo de Comprobante')
	          .content('¿Está seguro que desea eliminar este tipo de Comprobante?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Comprobante
		function remove ( caja ) {
			if ( caja ) { caja.$remove();
			} else {
				this.caja.$remove(function() {
					$location.path('cajas');
				});
			}
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('cajas').controller('CajasViewController', ['$stateParams', 'user', 'Authentication', 'caja', 'transferencias', 'arqueos', '$mdDialog', 'ventasPendientes', 'comprasFinalizadas', 'movimientos', 'ventasPendientesEntrega', 'ventasFinalizadas', 'condicionventas', 'CajasExtra', '$scope', 'pagosService','ventasAnuladas', function ($stateParams, user, authentication, caja, transferencias, arqueos, $mdDialog, ventasPendientes, comprasFinalizadas, movimientos, ventasPendientesEntrega, ventasFinalizadas, condicionventas, CajasExtra, $scope, pagosService, ventasAnuladas) {

    // asignacion de modelos
    var global = this;
    this.user = user;
    this.caja = caja;
    this.transferencias = transferencias;
    this.arqueos = arqueos;
    this.ventasFinalizada = [];
    this.movimientos = [];
    this.movimientosList = [];
    this.waiting = false;
    this.idCuenta;

    // asignacion de funciones

    this.findMovimientos = findMovimientos;
    this.showAlert = showAlert;

    this.findMovimientos(arqueos, transferencias, ventasPendientes, comprasFinalizadas);

    this.loadmoreCaja = function () {
    }
    global.loadmoreCondi = 0;

    global.ventasFinalizada = [];
    this.loadmoreCaja1 = function () {
        global.loadingCaja = true;
        global.movimientosList = global.movimientos;
        setTimeout(function () {

            // ventasFinalizadas.$promise.then(angular.bind(this, function(data) {
            //   console.log("data");
            //     for (var i = 0; i < data.length; i++) {
            //         if ((data[i].caja == caja._id) && (data[i].condicionVenta != global.idCuenta)) {
            //           console.log("data pushed");
            //             global.movimientos.push(data[i]);
            //         }
            //     }
            // }));
            console.log(authentication)
            console.log("áuth");
            var p = global.ventasFinalizada.length ? global.ventasFinalizada.length : 0;
            var enterprise = this.user ? this.user.enterprise.enterprise : authentication.user.enterprise.enterprise;
            CajasExtra.loadMore(enterprise, 'Finalizada', p, 30).then(
                angular.bind(this, function (data) {
                    data = data.data;
                    global.ventasFinalizada = global.ventasFinalizada.concat(data);
                    console.log(data.length);
                    for (var i = 0; i < data.length; i++) {
                        if ((data[i].caja == caja._id) && (data[i].condicionVenta != global.idCuenta)) {
                            console.log("data pushed1");
                            global.movimientos.push(data[i]);
                        }

                    }
                    global.loadingCaja = false;
                    global.movimientosList = global.movimientos;
                })
            )

            // if(global.movimientosList.length === 0) {
            //     global.count = 40;
            //     global.movimientosList = global.movimientos.slice(0, 40);
            //     // global.doneCaja = true;
            // }
            //
            // if(global.movimientos.slice(global.count, global.count + 20).length >= 20) {
            //     global.movimientosList = global.movimientosList.concat(global.movimientos.slice(global.count, global.count + 20));
            //     global.loadingCaja = false;
            //     global.count += 20;
            // } else {
            //     global.movimientosList = global.movimientosList.concat(global.movimientos.slice(global.count));
            //     global.loadingCaja = false;
            //     global.count += 20;
            // }
        }, 1000);
    };

    // definicion de funciones

    function findMovimientos(arqueos, transferencias) {
        console.log("Movimientos: ");
        console.log(movimientos);
        console.log("Pagos Service: ");
        console.log(pagosService);
        console.log("Transferencias: ");
        console.log(transferencias);
        this.waiting = true;
        condicionventas.$promise.then(angular.bind(this, function (res) {
            for (var i = 0; i < res.length; i++) {
                if (res[i].name == 'Cuenta Corriente') {
                    global.idCuenta = res[i]._id;
                }
            }
        }));
        arqueos.$promise.then(angular.bind(this, function (res) {
            for (var i = 0; i < res.length; i++) {
                if (res[i].caja == caja._id) {
                    this.movimientos.push(res[i]);
                }
            }
        }));
        transferencias.$promise.then(angular.bind(this, function (data) {
            for (var i = 0; i < data.length; i++) {
                if ((data[i].cajaO._id == caja._id) || (data[i].cajaD._id == caja._id)) {
                    this.movimientos.push(data[i]);
                }
            }
        }));
        movimientos.$promise.then(angular.bind(this, function (data) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].caja == caja._id) {
                    if (((data[i].estado == 'haber') && (data[i].provider != undefined)) || ((data[i].estado == 'debe') && (data[i].client != undefined))) {
                        this.movimientos.push(data[i]);
                    }
                }
            }
        }));
        ventasPendientes.$promise.then(angular.bind(this, function (data) {
            for (var i = 0; i < data.length; i++) {
                if ((data[i].caja == caja._id) && (data[i].condicionVenta != global.idCuenta)) {
                    this.movimientos.push(data[i]);
                }
            }
        }));
        ventasPendientesEntrega.$promise.then(angular.bind(this, function (data) {
            for (var i = 0; i < data.length; i++) {
                if ((data[i].caja == caja._id) && (data[i].condicionVenta != global.idCuenta)) {
                    this.movimientos.push(data[i]);
                }
            }
        }));

        comprasFinalizadas.$promise.then(angular.bind(this, function (data) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].caja == caja._id) {
                    this.movimientos.push(data[i]);
                }
            }
        }));
        pagosService.$promise.then(angular.bind(this, function (data) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].cajaD._id == caja._id) {
                    this.movimientos.push(data[i]);
                }
            }
        }));
        ventasAnuladas.$promise.then(angular.bind(this,function (data) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].caja == caja._id) {
                    this.movimientos.push(data[i]);
                }
            }
        }));
        this.waiting = false;


        function loaditmore() {
            global.loadingCaja = true;
            global.movimientosList = global.movimientos;
            setTimeout(function () {
				
                // ventasFinalizadas.$promise.then(angular.bind(this, function(data) {
                //   console.log("data");
                //     for (var i = 0; i < data.length; i++) {
                //         if ((data[i].caja == caja._id) && (data[i].condicionVenta != global.idCuenta)) {
                //           console.log("data pushed");
                //             global.movimientos.push(data[i]);
                //         }
                //     }
                // }));
                var p = global.ventasFinalizada.length ? global.ventasFinalizada.length : 0;
                var enterprise = this.user ? this.user.enterprise.enterprise : authentication.user.enterprise.enterprise;
                CajasExtra.loadMore(enterprise, 'Finalizada', p, 20).then(
                    angular.bind(this, function (data) {
                        data = data.data;
                        global.ventasFinalizada = global.ventasFinalizada.concat(data);
                        for (var i = 0; i < data.length; i++) {
                            if ((data[i].caja == caja._id) && (data[i].condicionVenta != global.idCuenta)) {
                                console.log("data pushed");
                                global.movimientos.push(data[i]);
                            }
                        }
                        global.loadingCaja = false;
                        global.movimientosList = global.movimientos;
                        if (global.loadmoreCondi == 0) {
                            console.log("loaditmore2");
                            loaditmore();
                        }
                    })
                )

                // if(global.movimientosList.length === 0) {
                //     global.count = 40;
                //     global.movimientosList = global.movimientos.slice(0, 40);
                //     // global.doneCaja = true;
                // }
                //
                // if(global.movimientos.slice(global.count, global.count + 20).length >= 20) {
                //     global.movimientosList = global.movimientosList.concat(global.movimientos.slice(global.count, global.count + 20));
                //     global.loadingCaja = false;
                //     global.count += 20;
                // } else {
                //     global.movimientosList = global.movimientosList.concat(global.movimientos.slice(global.count));
                //     global.loadingCaja = false;
                //     global.count += 20;
                // }
            }, 1000);
        };

        loaditmore();
        $scope.$on('$destroy', function () {
            global.loadmoreCondi = 1;
        });
    }

    function showAlert(ev, obs) {
        $mdDialog.show(
            $mdDialog.alert()
                .parent(angular.element(document.querySelector('#popupContainer')))
                .clickOutsideToClose(true)
                .title(obs)
                .ariaLabel('Alert Dialog Demo')
                .targetEvent(ev)
                .ok('Cerrar')
        );
    }

}
]);

'use strict';

// Comprobantes controller
angular.module('cajas').controller('CajasController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Sucursales', '$mdBottomSheet', 'Enterprises', '$mdDialog',
	function($scope, $rootScope, $stateParams, $location, Authentication, Sucursales, $mdBottomSheet, Enterprises, $mdDialog) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		// Create new Comprobante
		$scope.create = function() {
			// Create new Comprobante object
			var caja = new Cajas ({
				name: this.name,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
			});

			// Redirect after save
			caja.$save(function(response) {
				if(response._id) {
					// agregar sub al array

					caja._id = response._id;
					$rootScope.cajas.unshift(caja);

				}

			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un puesto 
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar tipo de Comprobante')
	          .content('¿Está seguro que desea eliminar este tipo de Comprobante?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Comprobante
		$scope.remove = function( caja ) {
			if ( caja ) { caja.$remove();

				for (var i in $scope.cajas ) {
					if ($scope.cajas [i] === caja ) {
						$scope.cajas.splice(i, 1);
					}
				}
			} else {
				$scope.caja.$remove(function() {
					$location.path('cajas');
				});
			}
		};

		// Update existing Comprobante
		$scope.update = function() {
			var caja = $scope.caja ;

			if (this.enterprise !== undefined) { caja.enterprise = this.enterprise._id } else { caja.enterprise = caja.enterprise._id };

			caja.$update(function() {
				$location.path('cajas/view/' + caja._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Comprobantes
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.cajas = Cajas.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		// $scope.findEnterprises = function() {
		// 	if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });}			
		// };

		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find existing Comprobante
		$scope.findOne = function() {
			$scope.caja = Cajas.get({ 
				cajaId: $stateParams.cajaId
			});
		};
	}
]);
'use strict';

//Comprobantes service used to communicate Comprobantes REST endpoints
angular.module('cajas').factory('Cajas', ['$resource',
	function($resource) {
		return $resource('api/cajas/:cajaId', { cajaId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

angular.module('cajas').factory('CajasExtra', ['$http',
	function($http) {
		return {
			select: function(estado, enterprise) {
				return $http({
          method: "get",
          url: "/api/ventas/select",
          params: {
            e: enterprise,
            estado: estado
          }
        });
			},
			loadMore: function (enterprise, estado, last, limit) {
				return $http({
					method: "get",
					url: "/api/ventas",
					params: {
						e: enterprise,
						p: last,
						pcount: limit,
						estado: estado
					}
				})
			}
		}
	}
]);

'use strict';

// Configuring the Categories module
angular.module('categories').run(['Menus',
	function(Menus) {
		// Add the Categories dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Categories',
			state: 'categories',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'categories', {
			title: 'List Categories',
			state: 'categories.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'categories', {
			title: 'Create Category',
			state: 'categories.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('categories').config(['$stateProvider',
	function($stateProvider) {
		// Categories state routing
		$stateProvider.
		state('categories', {
			abstract: true,
			url: '/categories',
			template: '<ui-view/>'
		}).
		state('categories.list', {
			url: '',
			templateUrl: 'modules/categories/views/list-categories.client.view.html'
		}).
		state('categories.create', {
			url: '/create',
			templateUrl: 'modules/categories/views/create-category.client.view.html'
		}).
		state('categories.view', {
			url: '/:categoryId',
			templateUrl: 'modules/categories/views/view-category.client.view.html'
		}).
		state('categories.edit', {
			url: '/:categoryId/edit',
			templateUrl: 'modules/categories/views/edit-category.client.view.html'
		});
	}
]);
'use strict';

// Categories controller
angular.module('categories').controller('CategoriesController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Categories', 'Enterprises', '$mdBottomSheet', '$mdDialog', '$state', 'Subs',
    function($scope, $rootScope, $stateParams, $location, Authentication, Categories, Enterprises, $mdBottomSheet, $mdDialog, $state, Subs) {
        $scope.authentication = Authentication;

        // watch for SEARCH to update value
        $scope.$watch('authentication', function() {
            $scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
            $scope.find();
            $scope.findCategoryTypes();
            //console.log('search: ', $scope.SEARCH);
        });

        $scope.selectedMode = 'md-scale';
        $scope.selectedDirection = 'up';

        // Create new Category
        $scope.create = function() {
            // Create new Category object
            if (this.name !== undefined) {
                if (this.categoryType !== undefined) {
                    if (this.sub !== undefined) {
                        var category = new Categories({
                            name: this.name,
                            description: this.description ? this.description : undefined,
                            type1: this.categoryType,
                            sub: this.sub,
                            enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
                        });
                        // Redirect after save
                        category.$save(function(response) {
                            //$location.path('categories/' + response._id);

                            if (response._id) {
                                // agregar sub al array

                                category._id = response._id;
                                $rootScope.categories.unshift(category);

                            }
                            // Clear form fields
                            $scope.name = '';
                            $scope.description = '';

                            $state.go('home.categories');
                        }, function(errorResponse) {
                            $scope.error = errorResponse.data.message;
                        });
                    } else {
                        $scope.errorName = 'Indicar UEN';
                    }
                } else {
                    $scope.errorName = 'Indicar el tipo de la categoria ';
                }
            } else {
                $scope.errorName = 'Indicar el nombre para la categoria ';
            }
        };

        // Update existing Category
        $scope.update = function() {
            var category = $scope.category;
            if (this.sub !== undefined) {
                category.sub = this.sub._id;
            } else if ((category.sub !== undefined) && (category.sub !== null)) {
                category.sub = category.sub._id;
            }

            if (this.enterprise !== undefined) {
                category.enterprise = this.enterprise._id;
            } else if ((category.enterprise !== undefined) && (category.enterprise !== null)) {
                category.enterprise = category.enterprise._id;
            }

            if (this.categoryType !== undefined) {
                category.type1 = this.categoryType;
            }

            if (category.mostrador == undefined) {
                category.mostrador = false;
            }


            category.$update(function() {
                $location.path('categorias');
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        // Find a list of Categories
        $scope.find = function() {
            if ($scope.SEARCH !== undefined) {
                $rootScope.categories = Categories.query({ e: $scope.SEARCH.enterprise });
            }

        };

        $scope.findEnterprises = function() {
            $scope.enterprises = Enterprises.query();
        };

        // Find a list of Enterprises
        $scope.findCategoryTypes = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.categoryTypes = ['Centro de Costo', 'Tipo de Venta','Tipo de Compra', 'Cliente', 'Contacto', 'Insumo', 'Materia Prima', 'Producto', 'Producto Interno', 'Proveedor', 'Proceso','Remuneracione'];
            }
        };

        $scope.findSubs = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise });
            }
        };

        // Find existing Category
        $scope.findOne = function() {
            $scope.category = Categories.get({
                categoryId: $stateParams.categoryId
            });
        };

        $scope.showBottomSheet = function($event, item, model, param) {
            var template = '/modules/core/views/menu-opciones.client.view.html';
            $rootScope.currentItem = item;
            $rootScope.currentModel = model;
            $rootScope.currentParam = param;
            //console.log('estadoactual: ', $rootScope.estadoActual);
            $mdBottomSheet.show({
                controller: DialogController,
                templateUrl: template,
                // controller: 'ListBottomSheetCtrl',
                targetEvent: $event,
                resolve: {
                    item: function() {
                        return item;
                    }
                }

            }).then(function(clickedItem) {
                //$mdBottomSheet.hide();
                console.log('por aqui ando');
            });
        };

        $scope.borrarError = function() {
            $scope.errorName = undefined;
        };

        function DialogController($scope, $mdDialog, item, Areas) {

            $scope.item = item;

            $scope.goto = function(state, params) {
                if (state !== undefined) {
                    $state.go(state, params);
                    $mdBottomSheet.hide();
                }
            };

            //abre modal para eliminar una categoria
            $scope.showConfirm = function(ev, item) {
                var confirm = $mdDialog.confirm()
                    .title('Eliminar Categoría')
                    .content('¿Está seguro que desea eliminar esta categoría?')
                    .ariaLabel('Lucky day')
                    .ok('Eliminar')
                    .cancel('Cancelar')
                    .targetEvent(ev);
                $mdDialog.show(confirm).then(function() {
                    $scope.remove(item);
                }, function() {
                    console.log('cancelaste borrar');
                });
            };

            // Remove existing Category
            $scope.remove = function(category) {
                if (category) {
                    category.$remove();

                    for (var i in $scope.categories) {
                        if ($scope.categories[i] === category) {
                            $scope.categories.splice(i, 1);
                        }
                    }
                } else {
                    $scope.category.$remove(function() {
                        $location.path('categories');
                    });
                }
            };
        }

    }
]);
'use strict';

// Comprobantes controller
angular.module('categories').controller('CategoriesListController', ['$rootScope', 'user', 'categories', 'enterprises', '$mdBottomSheet', '$mdDialog', 'categoryTypes', '$state',
    function ($rootScope, user, categories, enterprises, $mdBottomSheet, $mdDialog, categoryTypes, $state) {

        // asignacion de modelos
        this.user = user;
        this.categories = categories;
        this.enterprises = enterprises;
        this.categoryTypes = categoryTypes;

        // asignacion de funciones
        this.showBottomSheet = showBottomSheet;
        // this.remove = remove;

        // definicion de funciones
        function showBottomSheet($event, item, model, param) {
            var template = '/modules/core/views/menu-opciones.client.view.html';
            $rootScope.currentItem = item;
            $rootScope.currentModel = model;
            $rootScope.currentParam = param;
            $mdBottomSheet.show({
                controller: DialogController,
                templateUrl: template,
                // controller: 'ListBottomSheetCtrl',
                targetEvent: $event,
                resolve: {
                    item: function () {
                        return item;
                    }
                }

            }).then(function (clickedItem) {
                //$mdBottomSheet.hide();
                // console.log('por aqui ando');
            });
        } //end showBottomSheet

        function DialogController($scope, $mdDialog, item, Areas) {

            $scope.item = item;

            $scope.goto = function (state, params) {
                if (state !== undefined) {
                    $state.go(state, params);
                    $mdBottomSheet.hide();
                }
            }; //end goTo

            //abre modal para eliminar una categoria
            $scope.showConfirm = function (ev, item) {
                var confirm = $mdDialog.confirm()
                    .title('Eliminar Categoría')
                    .content('¿Está seguro que desea eliminar esta categoría?')
                    .ariaLabel('Lucky day')
                    .ok('Eliminar')
                    .cancel('Cancelar')
                    .targetEvent(ev);
                $mdDialog.show(confirm).then(function () {
                    remove(item);
                }, function () {
                    $mdBottomSheet.hide();
                });
            }; //end showConfirm

            // Remove existing Category
            function remove(category) {
                if (category) {
                    category.$remove();

                } else {
                    this.category.$remove(function () {
                    });
                }
                $mdBottomSheet.hide();
            } //end remove

        } //end DialogController

    } //end function
]);
'use strict';

// Comprobantes controller
angular.module('categories').controller('CategoriesViewController', ['user', 'category',
	function(user, category) {

		// asignacion de modelos
		this.user = user;
		this.category = category;

		this.selectedMode = 'md-scale';
	    this.selectedDirection = 'up';

		// asignacion de funciones

		// definicion de funciones


	}
]);
'use strict';

//Categories service used to communicate Categories REST endpoints
angular.module('categories').factory('Categories', ['$resource',
	function($resource) {
		return $resource('api/categories/:categoryId', { categoryId: '@_id', e: '@enterprise', type1: '@type1'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Chat module
angular.module('chat').run(['Menus',
	function(Menus) {
		// Set top bar menu items
		/*Menus.addMenuItem('topbar', {
			title: 'Chat',
			state: 'chat'
		});*/
	}
]);

'use strict';

// Configure the 'chat' module routes
angular.module('chat').config(['$stateProvider',
	function($stateProvider) {
		$stateProvider.
		state('chat', {
			url: '/chat',
			templateUrl: 'modules/chat/views/chat.client.view.html'
		});
	}
]);
'use strict';

// Create the 'chat' controller
angular.module('chat').controller('ChatController', ['$scope', 'Socket', 'Posts', 'lodash', 'Authentication',
    function($scope, Socket, Posts, lodash, Authentication) {

        $scope.authentication = Authentication;

        // watch for SEARCH to update value
        $scope.$watch('authentication', function (){
            $scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
            //$scope.find();
            //console.log('search: ', $scope.SEARCH);
        });

        var _ = lodash;
    	// Create a messages array
        $scope.posts = [];
        
        Socket.on('PostList', function(message) {
            if(message.length > 0 && message[0].enterprise === $scope.SEARCH.enterprise) {
                $scope.posts= message;       
            }            
        });
        // Add an event listener to the 'chatMessage' event
        Socket.on('newPost', function(message) {
            //$scope.posts.unshift(message);
            // only add the post if we don't have it already in the posts list to avoid dupes
        if ($scope.SEARCH !== undefined) {
            if (message.enterprise === $scope.SEARCH.enterprise) {
                if (!_.some($scope.posts, function (p) {
                    return p._id === message._id;
                  })) {
                    $scope.posts.unshift(message);
                  }
            }
            
          };
          
        });

        Socket.on('newComment', function(message) {
            //$scope.posts.unshift(message);

            if ($scope.SEARCH !== undefined) {
                if (message.user.enterprise._id === $scope.SEARCH.enterprise) {
                    var post = _.find($scope.posts, function (post) {
                      return post._id === message.postId;
                    });

                    // only add the comment if we don't have it already in the post's comments list to avoid dupes
                    if (post && !_.some(post.comments, function (c) {
                      return c._id === message._id;
                    })) {
                      post.comments.push(message);
                    }
                }
            };
        });
        
        // Create a controller method for sending messages
        $scope.sendPost = function() {
        	// Create a new message object
            //this.messageText.disabled = true;
            var post = {
                message: this.messageText
            };
            
            // Emit a 'chatMessage' message event
            Socket.emit('createPost', post);
            
            // Clear the message text
            this.messageText = '';
        };

        $scope.sendComment = function($event, post) {
            if ($event.keyCode !== 13) {
              return;
            }
            // Create a new message object
            var comment = {
                postId: post._id,
                message: post.commentBox.message
            };
            
            // Emit a 'chatMessage' message event
            Socket.emit('createComment', comment);
            
            // Clear the message text
            this.post.commentBox.message = '';
        };

        $scope.findPosts = function() {
            //$scope.posts = Posts.query();
             Socket.emit('getPosts', null);
        };

        // Remove the event listener when the controller instance is destroyed
        $scope.$on('$destroy', function() {
            Socket.removeListener('chatMessage');
        });

    }
]); 
'use strict';

// Configuring the Compras module
angular.module('compras').run(['Menus',
	function(Menus) {
		// Add the Compras dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Compras',
			state: 'compras',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'compras', {
			title: 'List Compras',
			state: 'compras.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'compras', {
			title: 'Create Compra',
			state: 'compras.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('compras').config(['$stateProvider',
	function($stateProvider) {
		// Compras state routing
		$stateProvider.
		state('compras_', {
			abstract: true,
			url: '/compras_',
			template: '<ui-view/>'
		}).
		state('compras.list', {
			url: '',
			templateUrl: 'modules/compras/views/list-compras.client.view.html'
		}).
		state('compras.create', {
			url: '/create',
			templateUrl: 'modules/compras/views/create-compra.client.view.html'
		}).
		state('compras.view', {
			url: '/:compraId',
			templateUrl: 'modules/compras/views/view-compra.client.view.html'
		}).
		state('compras.edit', {
			url: '/:compraId/edit',
			templateUrl: 'modules/compras/views/edit-compra.client.view.html'
		});
	}
]);

'use strict';

// Compras controller
angular.module('compras')
.controller('ComprasController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Compras', 'Enterprises', 'Comprobantes', 'Condicionventas', 'Products', 'Providers', '$mdBottomSheet', '$state', 'lodash', '$mdDialog', '$timeout', '$filter', 'Modal', 'Categories', 'Subs', 'Metrics', '$http', 'Contacts', 'Taxconditions', 'HistorialCompras', '$q',
	function($scope, $rootScope, $stateParams, $location, Authentication, Compras, Enterprises, Comprobantes, Condicionventas, Products, Providers, $mdBottomSheet, $state, lodash, $mdDialog, $timeout, $filter, Modal, Categories, Subs, Metrics, $http, Contacts, Taxconditions, HistorialCompras, $q) {
		$scope.authentication = Authentication;
		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			$scope.findProveedores();
			$scope.findProductos();
			//condiciones para el select
			$scope.findComprobantes();
			$scope.findCondicionesventas();
            $scope.findOne();
		});

		var created = new Date();
		$scope.created = new Date(created.setTime(created.getTime() + (3*60*60*1000)));
		
		$scope.$watch('compraVerificada', function (){
		});

		$rootScope.$watch('nuevoProveedor', function(){
			if($rootScope.nuevoProveedor!==undefined){
				$scope.mostrar = true;
				$scope.proveedor = $rootScope.nuevoProveedor;
				$scope.selectedItemChange($scope.proveedor);
				$rootScope.nuevoProveedor = undefined;
			} else {
				$scope.mostrar = false;
			}
		});
		$rootScope.$watch('nuevaMateriaPrima', function(){
			if($rootScope.nuevaMateriaPrima !==undefined){
				$scope.mostrarMateria = true;
				$http({ method: 'GET',
		            url: ('/api/products/' + $rootScope.nuevaMateriaPrima._id),
		            params: {  }
		        })
				.then(function(response) {
		            $scope.producto = response.data;
		        }, function(response) {
		            console.log('error');
		        });
				// $scope.producto = $rootScope.nuevaMateriaPrima ;
				$scope.selectedItemChangeProduct($scope.producto);
			} else {
				$scope.mostrarMateria = false;
			};
		});
		$scope.modoEdicion = false;
		$scope.isFocus = false;
		
		$scope.initAutocomplete = function(){
			$scope.findProductos();
			$scope.searchTextChangeProduct('');
		};
		$scope.activarEdicion = function(compra){
			$scope.modoEdicion = true;
			$scope.compraVerificada = angular.copy(compra);
			$location.hash('verificacion');
			// console.log($scope.compraVerificada);
		};

		$scope.cerrarEdicion = function(compra){
			$scope.modoEdicion = false;
			$scope.compraVerificada = undefined;
		};

		$scope.modificoProducto = function(p){
			actualizarValoresProducto(p);
			calcularTotalesVerificacion();
			$scope.modificarPrecioProducto(p.product);
		};

		function actualizarValoresProducto(p){
			for(var i = 0; i<$scope.compraVerificada.products.length; i++){
				if($scope.compraVerificada.products[i]._id==p._id){
					var total = 0;
					var desc = $scope.compraVerificada.products[i].descuento * $scope.compraVerificada.products[i].product.costPerUnit / 100;
					var descTotal = desc * $scope.compraVerificada.products[i].cantidad;
					// console.log(desc, 'desc');
					// console.log(descTotal, 'descTotal');
					total = $scope.compraVerificada.products[i].product.costPerUnit * $scope.compraVerificada.products[i].cantidad;
					// console.log(total, 'total');
					$scope.compraVerificada.products[i].total = total - descTotal;
					$scope.compraVerificada.products[i].subtotal = total;
					// console.log($scope.compraVerificada.products[i]);
				}
			}
		}

		function calcularTotalesVerificacion(){
			// console.log($scope.compraVerificada);
			var sub = 0;
			var totTax1 = 0;
			var totTax2 = 0;
			var totTax3 = 0;
			var descP = 0;
			var i;
			var tax1 = [];
			var tax2 = [];
			var tax3 = [];
			if ($scope.compraVerificada.descuentoPorcentaje !== undefined){
				descP = parseFloat($scope.compraVerificada.descuentoPorcentaje);
			}
			for (i = 0; i < $scope.compraVerificada.products.length; i++) {
				//descuentos
				if ($scope.compraVerificada.products[i].descuento === undefined){
					$scope.compraVerificada.products[i].descuento = 0;
				}
				if (($scope.compraVerificada.products[i].cantidad === undefined) || ($scope.compraVerificada.products[i].cantidad === null)){
					$scope.compraVerificada.products[i].cantidad = 0;
				}
				if ($scope.compraVerificada.products[i].product.costPerUnit === undefined){
					$scope.compraVerificada.products[i].product.costPerUnit = 0;
				}
   				var desc = parseFloat($scope.compraVerificada.products[i].descuento) * $scope.compraVerificada.products[i].product.costPerUnit / 100;
   				var finalPrice = parseFloat($scope.compraVerificada.products[i].product.costPerUnit) - desc;
   				var additionalIva = parseFloat($scope.compraVerificada.products[i].product.tax) * parseFloat(finalPrice) / 100;
				if(parseFloat($scope.compraVerificada.products[i].product.tax) === 10.5){
					tax1.push(additionalIva*parseFloat($scope.compraVerificada.products[i].cantidad));
				}
				if(parseFloat($scope.compraVerificada.products[i].product.tax) === 21){
					tax2.push(additionalIva*parseFloat($scope.compraVerificada.products[i].cantidad));
				}
				if(parseFloat($scope.compraVerificada.products[i].product.tax) === 27){
					tax3.push(additionalIva*parseFloat($scope.compraVerificada.products[i].cantidad));
				}
				// console.log('cantidad', $scope.compraVerificada.products[i].cantidad);
				// console.log('final price', finalPrice);
   				sub = sub + parseFloat($scope.compraVerificada.products[i].cantidad)*finalPrice;
			}
			if(tax1.length > 0){
				for (i = 0; i < tax1.length; i++) {
	   				totTax1 = totTax1 + parseFloat(tax1[i]);
   				}
			}
			if(tax2.length > 0){
				for (i = 0; i < tax2.length; i++) {
	   				totTax2 = totTax2 + parseFloat(tax2[i]);
   				}
			}
			if(tax3.length > 0){
				for (i = 0; i < tax3.length; i++) {
	   				totTax3 = totTax3 + parseFloat(tax3[i]);
   				}
			}
			// console.log(sub);
			$scope.compraVerificada.subtotal = sub;
			var descV = sub * descP / 100;
			var d = $scope.compraVerificada.descuentoPorcentaje * $scope.compraVerificada.subtotal / 100;
			$scope.compraVerificada.descuentoValor = d;

			$scope.compraVerificada.neto = $scope.compraVerificada.subtotal - d;
			$scope.compraVerificada.tax1 = totTax1;
			$scope.compraVerificada.tax2 = totTax2;
			$scope.compraVerificada.tax3 = totTax3;
			$scope.compraVerificada.totalTax = totTax1 + totTax2 + totTax3;;
			$scope.compraVerificada.total = $scope.compraVerificada.neto + totTax1 + totTax2 + totTax3;
		};

		$scope.modificarPrecioProducto = function(p){
			$rootScope.products = $scope.products;
			for (var i in $rootScope.products){
				if ($rootScope.products[i]._id === p._id){
					var cost = p.costPerUnit;
					p = $rootScope.products[i];
					var product = new Products ({
						_id : p._id,
						name : p.name,
						description: p.description,
						code: p.code,
						//picture: this.picture || undefined,
						brandName: p.brandName,
						unitPrice: cost,
						costPerUnit: cost,
						// sku: p.sku,
						discontinued: p.discontinued,
						provider: p.provider,
						quantityPerUnit: p.quantityPerUnit,
						unitsInStock: p.unitsInStock,
						idealStock: p.idealStock,
						criticalStock: p.criticalStock,
						unitsOnOrder: p.unitsOnOrder,
						storedIn: p.storedIn,
						metric: p.metric,
						reseller: p.reseller,
						visible: p.visible,
						esProducto: p.esProducto,
						esMateriaPrima: p.esMateriaPrima,
						esInsumo: p.esInsumo,
						//rawMaterial: p.rawMaterial,
						tax: p.tax,
						enterprise: p.enterprise ,
						sub: p.sub._id,
						category1: p.category1,
						category2: p.category2
					});
					
					product.enterprise = product.enterprise._id;
					if ((product.sub!==undefined)&&(product.sub!==null)){ product.sub = product.sub._id };
					if ((product.category1!==undefined)&&(product.category1!==null)) { product.category1 = product.category1._id };
					if ((product.category2!==undefined)&&(product.category2!==null)) { product.category2 = product.category2 ? product.category2._id : undefined };
					if ((product.provider!==undefined)&&(product.provider!==null)) { product.provider = product.provider._id };
					// if ((product.tax!==undefined)&&(product.tax!==null)) { product.tax = product.tax };
					// if ((product.metric!==undefined)&&(product.metric!==null)){ product.metric = product.metric };
					// console.log(product, 'product');

					product.$update(function(response) {
						// console.log('actualice bien');
					}, function(errorResponse) {
						$scope.error = errorResponse.data.message;
					});
				}
			}
		};

		$scope.historialDeCompra = function(compraO){
			//creo un historial de compra y lo guardo en la bbdd
			var historialCompra = new HistorialCompras ({
				compra: $scope.historialCompra
			});
			console.log("ISTORIJAA");
			// Redirect after save
			historialCompra.$save(function(response) {
				// console.log('se creo el historial con id:', response._id);

				// actualizo la modificacion de la compra despues de guardar el historial
				$scope.modoEdicion = false;
				var compra = $scope.compraVerificada;
				compra.historial = response;
				compra.estado = 'Finalizada';

				/* 
				español
				la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
				una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
				hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id
				
				ingles
				the following validation is for making sure that only the proper id of each item read is reaching the db, and not the complete object 
				because when you populate the id stored as string it turns into a complete object and if we do not make this validation 
				that would go to the db when it really should be a string pointing the id */

				if (compra.enterprise !== undefined) { compra.enterprise = compra.enterprise._id };
				if (compra.tipoComprobante !== undefined) { compra.tipoComprobante = compra.tipoComprobante._id };
				if (compra.proveedor !== undefined) { compra.proveedor = compra.proveedor._id };
				if (compra.condicionVenta !== undefined) { compra.condicionVenta = compra.condicionVenta._id };
				if (compra.caja !== undefined) { compra.caja = compra.caja._id };

				compra.$update(function() {
					//actualiza la compra
					$scope.findOne();
				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});
				$scope.compraVerificada = null;
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		$scope.productoCompra = { cantidad: undefined, descuento: undefined, observaciones: ''};

		//para mostrar formulario de crear contacto en modal de crear proveedor
		$scope.mostrarFormulario = true;

		//no muestra el form para elegir productos hasta que no se elija un proveedor
		$scope.mostrarForm = false;

		//deshabolita el select del proveedor cuando hay productos agregados a la compra
		$scope.deshabilitarProveedor = false;

		//variable para filtrar productos por proveedor
		$scope.idProveedor = 0;

		$rootScope.productosAgregados = [];
		$scope.productoEditado = [];
		$scope.comprobanteEditado = false;
		//se pone en true cuando se elige un proveedor para mostrar sus productos asociados
		$scope.mostrarProductos = false;

		//cambia segun se quieran ver las compras anuladas/cerradas
		$scope.verAnuladas = 0;
		$scope.verCerradas = 0;

		//controla si el producto esta siendo ingresado para ver si lo borra o no al cambiar el proveedor
		$scope.tipeando = false;

		//Pongo a 0 valores de la vista
		$scope.subtotal = 0;
		$scope.descuentoPorcentaje = 0;
		$scope.descuentoValor = 0;
		$scope.neto = 0;
		$scope.tax1 = 0;
		$scope.tax2 = 0;
		$scope.tax3 = 0;
		$scope.total = parseFloat(0);
		$scope.totalTax = 0;

		$scope.showConfirmRecepcion = function(ev, item) {
			var confirm = $mdDialog.confirm()
	          .title('Recibir compra')
	          .content('¿Confirmar recibo de la compra?')
	          .ariaLabel('Lucky day')
	          .ok('Confirmar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		    	item.estado = 'Finalizada';
		      	$scope.update(item);
		    }, function() {
		      console.log('cancelaste cerrar');
		    });
		};

		$scope.showConfirmPago = function(ev, item) {
			var confirm = $mdDialog.confirm()
	          .title('Pagar compra')
	          .content('¿Confirmar pago de la compra?')
	          .ariaLabel('Lucky day')
	          .ok('Confirmar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      	item.estado = 'Finalizada';
		      	$scope.update(item);
		    }, function() {
		      console.log('cancelaste cerrar');
		    });
		};

		//abre modal para anular y pagar compras
		$scope.showConfirm = function(ev,item,n) {
			console.log(n);
			switch(n){
				case 1:
					var confirm = $mdDialog.confirm()
			          .title('Anular Compra')
			          .content('¿Está seguro que desea anular esta compra?')
			          .ariaLabel('Lucky day')
			          .ok('Anular')
			          .cancel('Cancelar')
			          .targetEvent(ev);
				    $mdDialog.show(confirm).then(function() {
				    	item.estado = 'Anulada';
				    	$scope.update(item);
				    	$scope.montoTotal();
				    }, function() {
				      console.log('cancelaste anular');
				    });
				break;
				// case 2:
				// 	var confirm = $mdDialog.confirm()
			 //          .title('Pagar Compra')
			 //          .content('¿Está seguro que desea pagar esta compra?')
			 //          .ariaLabel('Lucky day')
			 //          .ok('Pagar')
			 //          .cancel('Cancelar')
			 //          .targetEvent(ev);
				//     $mdDialog.show(confirm).then(function() {
				//       $scope.comprobarComprobante(item);
				//     }, function() {
				//       console.log('cancelaste pagar');
				//     });
				// break;
				case 3:
					var confirm = $mdDialog.confirm()
			          .title('Verificar Compra')
			          .content('¿Está seguro que verificar esta compra?')
			          .ariaLabel('Lucky day')
			          .ok('Verificar')
			          .cancel('Cancelar')
			          .targetEvent(ev);
				    $mdDialog.show(confirm).then(function() {
				      $scope.historialDeCompra(item);
				    }, function() {
				      console.log('cancelaste verificar');
				    });
				break;
			}
		};


		//Trae el % de descuento del proveedor seleccionado, y vuelve a calcular valores si el % cambio
		$scope.descProveedor = function(){
			if (($scope.proveedor !== null) && ($scope.proveedor !== undefined)){
				$scope.idProveedor = $scope.proveedor._id;
				$scope.errorProv = undefined;
			}
			else{
				$scope.idProveedor = 0;
			}
			if ((this.producto !== undefined) && (this.producto !== null) && ($scope.tipeando === false)){
				this.producto = undefined;
				$scope.searchText = undefined;
			}
		};

		//agrega producto seleccionado de la lista de productos frecuentes
		$scope.agregar = function(item){
			$scope.producto = item;
			item = undefined;
		};

		$scope.sendProduct = function($event,productoCompra,producto) {
			$scope.mensajeP = undefined;
            if ($event.keyCode === 13) {
            	$event.preventDefault();
              	if((producto === null) || (producto === undefined)){
              		$scope.mensajeP = 'No seleccionaste un producto';
              	}
              	else {
              		$scope.mensajeP = undefined;
              		if(productoCompra === undefined){
              			productoCompra = {cantidad: 0}
              		}
              		if((productoCompra.cantidad === null) || (productoCompra.cantidad === undefined) || (productoCompra.cantidad === 0)){
              			$scope.mensajeP = 'No seleccionaste una cantidad para el producto';
              		}
              		else {
              				$scope.mensajeP = undefined;
              				$scope.producto = producto;
              				$scope.agregarProducto(producto,productoCompra);
              			}

              	};
            }
        };

		//Agrega a un arreglo los productos que va seleccionando
		$scope.agregarProducto = function(producto,productoCompra) {
			$scope.clicked = false;
			$scope.errorProd = undefined;
			$scope.mensajeP = undefined;
			var p = {product: {}, cantidad: undefined, descuento: undefined, total: undefined, subtotal: undefined, observaciones: undefined};
			if (producto != undefined){
				if(producto.total == undefined){
					producto.total = 0;
				}
				p.product = producto;
				p.cantidad = productoCompra.cantidad;
				if (productoCompra.descuento == undefined){
					p.descuento = 0;
				}
				else{
					p.descuento = productoCompra.descuento;
				}
				if (productoCompra.observaciones == undefined){
					p.observaciones = '';
				}
				else{
					p.observaciones = productoCompra.observaciones;
				}
				p.total = 0;
				p.subtotal = 0;
				var subtotal = calcularSubtotal(p);
				p.total = p.total + subtotal;
				$rootScope.productosAgregados.push(p);
				// $scope.producto = undefined;
				productoCompra = undefined;
				p = undefined;
				$scope.productoCompra = { cantidad: undefined, descuento: undefined, observaciones: ''};
				$scope.selectedProduct = [];
				$scope.selectedItem = null;
				$scope.searchText = '';
				$scope.deshabilitarProveedor = true;
				document.getElementById("buscaP").focus();
			}
			else{
				return 0;
			}
		};

		$scope.reverse = function(array) {
            var copy = [].concat(array);
            return copy.reverse();
        }

		//autocomplete
		$scope.selectedProduct = [];
		$scope.selectedItem = null;
		$scope.searchText = null;

		//Calcula el subtotal del producto que agrega, y actualiza los valores del total de la compra a medida que agrega productos
		var calcularSubtotal = function(p){
			var total = 0;
			var descuentoPorcentaje = p.descuento;
			var precio = parseFloat(p.product.costPerUnit);
			var cant = parseFloat(p.cantidad);
			var subtotal = parseFloat(precio*cant);
			var descuentoValor = subtotal*descuentoPorcentaje/100;
			p.subtotal = subtotal;
			total = subtotal - descuentoValor;
			$scope.subtotal = $scope.subtotal + total;
			$scope.descuentoValor = $scope.subtotal*$scope.descuentoPorcentaje/100;
			$scope.neto = $scope.subtotal - $scope.descuentoValor;
			if (p.product.tax == 10.5){
				$scope.tax1 = $scope.tax1 + (total*10.5/100);
			}
			if (p.product.tax == 21){
				$scope.tax2 = $scope.tax2 + (total*21/100);
			}
			if (p.product.tax == 27){
				$scope.tax3 = $scope.tax3 + total*27/100;
			}
			$scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3;
			$scope.totalTax = $scope.tax1 + $scope.tax2 + $scope.tax3;
			return total;
		};


		//Elimina un producto del arreglo de productos
		$scope.borrarProducto = function(producto) {
			var subt = 0;
			var iva = 0;
			var descProd = 0; //descuento del producto
			var descGen = 0; //descuento del proveedor
			var tax1 = 0;
			var tax2 = 0;
			var tax3 = 0;
			var totalIva = 0;
			descProd = parseFloat((producto.product.costPerUnit * producto.cantidad)*producto.descuento/100);
			subt = parseFloat((producto.product.costPerUnit * producto.cantidad) - descProd); //subtotal de solo ese prod
			descGen = parseFloat((subt*$scope.descuentoPorcentaje)/100);
			iva = producto.product.tax;
			if (iva == 10.5){
				tax1 = parseFloat(subt*10.5/100);
				$scope.tax1 = parseFloat($scope.tax1 - tax1);
			}
			if (iva == 21){
				tax2 = parseFloat(subt*21/100);
				$scope.tax2 = parseFloat($scope.tax2 - tax2);
			}
			if (iva == 27){
				tax3 = parseFloat(subt*27/100);
				$scope.tax3 = parseFloat($scope.tax3 - tax3);
			}
			$scope.neto = parseFloat($scope.neto - (subt - descGen));
			$scope.subtotal = parseFloat($scope.subtotal - subt);
			totalIva = (subt - descGen + tax1 + tax2 + tax3);
			$scope.descuentoValor = parseFloat($scope.descuentoValor - descGen);
			$scope.total = $scope.total - totalIva;
			$scope.totalTax = $scope.totalTax - tax1 - tax2 - tax3;
			$rootScope.productosAgregados.splice(producto, 1);
			if($rootScope.productosAgregados.length == 0){
				$scope.deshabilitarProveedor = false;
			}
		};

		$scope.cantProductos = function(){
			if ($rootScope.productosAgregados.length > 0) {return true;}
		};

		$scope.clickSubmit = function(){
			$scope.clicked = true;
			$scope.create();
		};

		// Create new Compra
		$scope.create = function() {
			if ($scope.clicked === true){
				if ($scope.productosAgregados.length !== 0){
					if ($scope.proveedor !== undefined){
						if($scope.comprobante !== undefined){
							if ($scope.tipoComprobante !== undefined){								
								if(this.condicionV !== undefined){
									// Create new Compra object
									var compra = new Compras ({
										created: $scope.created,
										comprobante: this.comprobante,
										tipoComprobante: this.tipoComprobante,
										products: $rootScope.productosAgregados,
										proveedor: $scope.proveedor,
										observaciones: this.observaciones,
										subtotal: this.subtotal,
										descuentoPorcentaje: this.descuentoPorcentaje,
										descuentoValor: this.descuentoValor,
										neto: this.neto,
										tax1: this.tax1,
										tax2: this.tax2,
										tax3: this.tax3,
										totalTax: this.totalTax,
										total: this.total,
										condicionVenta: this.condicionV._id,
										enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
									});

									// Redirect after save
									compra.$save(function(response) {
										/*$location.path('compras/' + response._id);*/

										if(response._id) {
											// agregar sub al array

											compra._id = response._id;
											$rootScope.compras.unshift(compra);

										}

										$state.go('home.compras');

										// Clear form fields
										$scope.comprobante = '';
										$scope.tipoComprobante = '';
										$scope.observaciones = '';
										$scope.subtotal = 0;
										$scope.descuentoPorcentaje = 0;
										$scope.descuentoValor = 0;
										$scope.neto = 0;
										$scope.tax1 = 0;
										$scope.tax2 = 0;
										$scope.tax3 = 0;
										$scope.total = 0;
										$scope.condicionVenta = '';
										$scope.clicked = false;
										$rootScope.nuevoProveedor = '';
										$rootScope.nuevaMateriaPrima = '';
										$scope.proveedor = '';
										$scope.producto = '';


									}, function(errorResponse) {
										$scope.error = errorResponse.data.message;
									});

								}
								else{
									$scope.errorCondicion = 'No elegiste una condicion de compra';
								}
							}
							else{
								$scope.errorTipoC = 'No elegiste un tipo de comprobante';
							}
						}
						else{
							$scope.errorComprobante = 'Se debe especificar un numero de comprobante';
						}
					}
					else{
						$scope.errorProv = 'No elegiste un proveedor';
					}
				}
				else{
					$scope.errorProd = 'Tenes que elegir productos para la compra';
				}
			}
			else {
				//prevent defaults
				//prevengo que se haga un submit cuando presiona enter
			}
		};

		//Habilita form para editar producto
		$scope.editar = function(index){
			$scope.productoEditado[index] = true;
		};

		//edita un producto
		$scope.editarProducto = function(index,p){
			var subt = 0;
			var tax1 = 0;
			var tax2 = 0;
			var tax3 = 0;
			var descuento = p.product.costPerUnit*p.descuento/100;
			p.subtotal = p.cantidad * p.product.costPerUnit;
			p.total = p.cantidad * (p.product.costPerUnit - descuento);
			/*var subtotal = calcularSubtotal(p);*/
			$rootScope.productosAgregados[index] = p;
			for (var i = 0; i < $rootScope.productosAgregados.length; i++) {
				subt = subt + $rootScope.productosAgregados[i].total;
				var iva = $rootScope.productosAgregados[i].product.tax;
				if (iva == 10.5){
					tax1 = tax1 + $rootScope.productosAgregados[i].total*10.5/100;
				}
				if (iva == 21){
					/*console.log(tax2);*/
					tax2 = tax2 + $rootScope.productosAgregados[i].total*21/100;
				}
				if (iva == 27){
					tax3 = tax3 + $rootScope.productosAgregados[i].total*27/100;
				}
			}
			$scope.descuentoValor = subt * $scope.descuentoPorcentaje/100;
			$scope.subtotal = subt;
			$scope.neto = subt - $scope.descuentoValor;
			$scope.tax1 = tax1;
			$scope.tax2 = tax2;
			$scope.tax3 = tax3;
			$scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3;
			this.p = undefined;
			$scope.productoEditado[index] = false;
		};

		// Remove existing Compra
		$scope.remove = function( compra ) {
			if ( compra ) { compra.$remove();

				for (var i in $scope.compras ) {
					if ($scope.compras [i] === compra ) {
						$scope.compras.splice(i, 1);
					}
				}
			} else {
				$scope.compra.$remove(function() {
					$location.path('compras');
				});
			}
		};

		// Update estado a Anulado
		$scope.update = function(item) {
			var compra = item;

			/* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
			una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
			hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

			if (this.enterprise !== undefined) { compra.enterprise = this.enterprise._id } else if ((compra.enterprise !== undefined)&&(compra.enterprise !== null)) { compra.enterprise = compra.enterprise._id };
			if (this.tipoComprobante !== undefined) { compra.tipoComprobante = this.tipoComprobante._id } else if((compra.tipoComprobante !== undefined)&&(compra.tipoComprobante!==null)) { compra.tipoComprobante = compra.tipoComprobante._id };
			if ($scope.proveedor !== undefined) { compra.proveedor = $scope.proveedor._id } else if((compra.proveedor !== undefined)&&(compra.proveedor!==null)){ compra.proveedor = compra.proveedor._id };
			if (this.condicionVenta !== undefined) { compra.condicionVenta = this.condicionVenta._id } else if((compra.condicionVenta !== undefined)&&(compra.condicionVenta !==null)){ compra.condicionVenta = compra.condicionVenta._id };
			if (this.caja !== undefined) { compra.caja = this.caja._id } else if ((compra.caja !== undefined)&&(compra.caja !== null)) { compra.caja = compra.caja._id };


			compra.$update(function() {
				// $location.path('compras');
				/*$location.path('compras/' + compra._id);*/
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//comprueba si el numero de comprobante es 0 para que lo cambie
		$scope.comprobarComprobante = function(compra){
			if (compra.comprobante == 0){
				$scope.comprobanteEditado = true;
			}
			else{
				compra.estado = 'cerrado';
				$scope.update(compra);
				$scope.montoTotal();
			}
		};

		$scope.find = function() {
			var promise = asyncCompras();
			promise.then(function(response) {
				$scope.montoTotal();
  			});

		};

		function asyncCompras(item) {
			if ($scope.SEARCH !== undefined) {
				 $rootScope.compras = Compras.query({ e: $scope.SEARCH.enterprise });
			}
		    var deferred = $q.defer();
			setTimeout(function() {
			    if ($rootScope.compras!==undefined) {
			      deferred.resolve('Hello');
			    } else {
			      deferred.reject('Greeting');
			    }
			}, 1000);
			return deferred.promise;
		}

		$scope.comprasFinalizadas = [];

		$scope.montoTotal = function(){
			$scope.totalPendientesPR = 0;
			$scope.totalPendientesPago = 0;
			$scope.totalPendientesRecepcion = 0;
			$scope.totalFinalizadas = 0;
			$scope.totalAnuladas = 0;
			for (var i = 0; i < $scope.compras.length; i++) {
				if (($scope.compras[i].estado === 'Pendiente de pago y recepcion') && ($scope.compras[i].deleted === false)){
					$scope.totalPendientesPR  = $scope.totalPendientesPR  + $scope.compras[i].total;
				}
				if (($scope.compras[i].estado === 'Pendiente de pago2') && ($scope.compras[i].deleted === false)){
					$scope.totalPendientesPago = $scope.totalPendientesPago + $scope.compras[i].total;
				}
				if (($scope.compras[i].estado === 'Pendiente de recepcion') && ($scope.compras[i].deleted === false)){
					$scope.totalPendientesRecepcion = $scope.totalPendientesRecepcion + $scope.compras[i].total;
				}
				if (($scope.compras[i].estado === 'Finalizada') && ($scope.compras[i].deleted === false)){
					$scope.totalFinalizadas = $scope.totalFinalizadas + $scope.compras[i].total;
				}
				if (($scope.compras[i].estado === 'Anulada') && ($scope.compras[i].deleted === false)){
					$scope.totalAnuladas = $scope.totalAnuladas + $scope.compras[i].total;
				}
			}
		};

		// Find existing Compra
		$scope.findOne = function() {
			Compras.get({ compraId: $stateParams.compraId }, function(res){
				$scope.compra = res;
				if($scope.compra.historial!==undefined){
					$http({
					  method: 'GET',
					  url: '/api/users/byId',
					  params: { userId: $scope.compra.historial.modificadoPor }
					}).then(function successCallback(response) {
					    // this callback will be called asynchronously
					    // when the response is available
					    $scope.usuarioDeHistorial = response.data;
					  }, function errorCallback(err) {
					  	console.log('Error' + err);
					    // called asynchronously if an error occurs
					    // or server returns response with an error status.
					  });
				}
			});
			$scope.historialCompra = Compras.get({
				compraId: $stateParams.compraId
			});
		};

		$scope.findTipoComprobante = function() {
			if($scope.SEARCH !== undefined) { $scope.tipoComprobante = Comprobantes.query({ e: $scope.SEARCH.enterprise });}
		};

		// Find a list of Comprobantes
		$scope.findComprobantes = function() {
			// $scope.comprobantes = Comprobantes.query();
			if ($scope.SEARCH !== undefined) {
				var promise = $http({ method: 'GET', url: ('/api/comprobantes/'), params: { e: $scope.SEARCH.enterprise }});
				promise.then(function(response) {
    				$scope.comprobantesFiltro = response.data;
    				for (var i in $scope.comprobantes){
	                   	if ($scope.comprobantesFiltro[i].name === 'Pedido'){
	                   		$scope.comprobantesFiltro.splice(i, 1);
	                   	}
	                }
	                Modal.setComprobantes($scope.comprobantesFiltro);
  				});
			}
		};

		// Find a list of CondicionVentas
		$scope.findCondicionesventas = function() {
			if ($scope.SEARCH !== undefined) { 
				// $scope.condicionesVentas = Condicionventas.query();
				var promise = $http({ method: 'GET', url: ('/api/condicionventas/'), params: { e: $scope.SEARCH.enterprise }});
				promise.then(function(response) {
    				$scope.condicionVentas = response.data;
    				Modal.setCondicionesVentas($scope.condicionVentas);
  				});
			}
		};

		// Find a list of Enterprises
		$scope.findEnterprises = function() {
			if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });}
		};

		$scope.findProductos = function() {
			if($scope.SEARCH !== undefined) { $scope.products = Products.query({ e: $scope.SEARCH.enterprise });}
		};

		$scope.findProveedores = function() {
			if($scope.SEARCH !== undefined) {
				$scope.proveedores = Providers.query({ e: $scope.SEARCH.enterprise });
				Modal.setProveedores($scope.proveedores);
			}
		};

		//autocomplete para seleccionar proveedor
		$scope.searchTextChange = function(text){
			var lowercaseQuery = angular.lowercase(text);
			return $filter('filter')($scope.proveedores, {name: text});
		};

		$scope.sendProvider = function($event, provider) {
            if ($event.keyCode === 13) {
            	$event.preventDefault();
              	if((provider === null) || (provider === undefined)){
              		$scope.mensajeP = 'No seleccionaste un proveedor valido';
              	}else {
					$scope.proveedor = provider;
              	}
            }
        };

		$scope.selectedItemChange = function (item) {
			console.log('entre selected item change');
			if ((item !== null) && (item !== undefined)){
				$scope.idProveedor = item._id;
			}
			$scope.proveedor = item;
			$rootScope.provider = item;
			$scope.descProveedor();
			$scope.tipeando = false;
			//asigno por defecto los campos asociados al proveedor en los select
			if(item!==null){
				Providers.get({ providerId: item._id }, function(prov){
					for(var i=0; i<$scope.condicionVentas.length;i++){
						if($scope.condicionVentas[i]._id == prov.condicionPago._id){
							$scope.condicionV = $scope.condicionVentas[i];
						}
					}
					for(var i=0; i<$scope.comprobantesFiltro.length;i++){
						if($scope.comprobantesFiltro[i]._id == prov.comprobante._id){
							$scope.tipoComprobante = $scope.comprobantesFiltro[i];
						}
					}
				});
			}
		};

		// $scope.searchTextChangeProduct = function(text){
		// 	console.log($scope.idProveedor , 'id prov compras');
		// 	$scope.tipeando = true;
		// 	var lowercaseQuery = angular.lowercase(text);
		// 	if ($scope.SEARCH !== undefined) {
		// 		var promise = $http({ method: 'GET', url: ('/api/products/'), params: { e: $scope.SEARCH.enterprise }});
		// 			promise.then(function(response) {
		// 				$scope.productos = response.data;
		// 				if ($scope.idProveedor === 0){
		// 					$scope.filtrados = $filter('filter')($scope.productos, function(item){
		// 						return (item.esMateriaPrima === true || item.esInsumo === true);
		// 					})
		// 				}
		// 				else{
		// 					$scope.filtrados = $filter('filter')($scope.productos, function(item){
		// 						return (item.esMateriaPrima === true || item.esInsumo === true) && (item.provider._id === $scope.idProveedor); 
		// 					})
		// 				}
		// 			});
		// 		return $scope.filtrados = $filter('filter')($scope.filtrados, {name: text});	
		// 	}	
		// };

		
		$scope.searchTextChangeProduct = function(text){
			console.log($scope.idProveedor , 'id prov compras');
			$scope.tipeando = true;
			var lowercaseQuery = angular.lowercase(text);
			if ($scope.idProveedor === 0){
				$scope.filtrados = $filter('filter')($scope.products, function(item){
					return (item.esMateriaPrima === true || item.esInsumo === true);
				})
			}
			else{
				$scope.filtrados = $filter('filter')($scope.products, function(item){
					return (item.esMateriaPrima === true || item.esInsumo === true) && (item.provider._id === $scope.idProveedor); 
				})
			}
			return $scope.filtrados = $filter('filter')($scope.filtrados, {name: text});
		};


		$scope.selectedItemChangeProduct = function (item) {
			// console.log('cambio prod');
			$scope.errorProd = undefined;
			$scope.producto = item;
			if($scope.producto!==null){
				document.getElementById('inputCantidad').focus();
			}
			if((this.proveedor === null) || (this.proveedor === undefined)){
				if (($scope.producto !== null) && ($scope.producto !== undefined)){
					this.proveedor = $scope.producto.provider;
				}
			}
		};

		//autocomplete para seleccionar producto por codigo
		$scope.searchTextChangeCode = function(text){
			var lowercaseQuery = angular.lowercase(text);
			return $filter('filter')($scope.products, {code: text});
		};

		$scope.selectedItemChangeCode = function (item) {
			$scope.producto = item;
			console.log($scope.producto, 'producto elegido');
		};

		$scope.showAdvanced = function(ev,item) {
		    $mdDialog.show({
		      controller: DialogController,
		      templateUrl: '/modules/compras/views/modal.client.view.html',
		      parent: angular.element(document.body),
		      targetEvent: ev,
		      clickOutsideToClose:true,
		       resolve: {
		         item: function () {
		           return item;
		         }
		       }
		    })
		    .then(function(answer) {
		      $scope.status = 'You said the information was "' + answer + '".';
		    }, function() {
		      $scope.status = 'You cancelled the dialog.';
		    });
		  };

		$scope.showAdvancedProvider = function(ev) {
			$scope.minLenghtProv = 1;
			$scope.textToSearch = undefined;
				$scope.findContacts();
				$scope.findCategories();
				$scope.findTaxConditions();
				Modal.setEmpresa($scope.SEARCH.enterprise);
				$mdDialog.show({
			      controller: CrearController,
			      templateUrl: '/modules/compras/views/create.provider.view.html',
			      parent: angular.element(document.body),
			      targetEvent: ev,
			      clickOutsideToClose: false
			    })
			    .then(function(answer) {
			      $scope.minLenghtProv = 0;
			      $scope.status = 'You said the information was "' + answer + '".';
			    }, function() {
			      $scope.minLenghtProv = 0;	
			      $scope.status = 'You cancelled the dialog.';
			    });
		};

		$scope.findContacts = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.contacts = Contacts.query({e: $scope.SEARCH.enterprise });
				Modal.setContactos($scope.contacts);
			};
		};

		// Find a list of Taxconditions
		$scope.findTaxConditions = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.taxconditions = Taxconditions.query({e: $scope.SEARCH.enterprise });
				Modal.setCondiciones($scope.taxconditions);
			};
		};

		//variables para el control de la ventana del autocomplete
		$scope.minLenghtProd = 0;
		$scope.minLenghtProv = 0;

		$scope.showAdvancedProduct = function(ev) {
			$scope.minLenghtProd = 1;
			$scope.searchText = undefined;
				$scope.findProveedores();
				$scope.findSubs();
				$scope.findMetrics();
				$scope.findSubcategories();
				$scope.findCategories();
				$scope.findTaxes();
				Modal.setEmpresa($scope.SEARCH.enterprise);
				$mdDialog.show({
			      controller: CrearController,
			      templateUrl: '/modules/compras/views/create.product.view.html',
			      parent: angular.element(document.body),
			      targetEvent: ev,
			      clickOutsideToClose: false
			    })
			    .then(function(answer) {
			      $scope.minLenght = 0;
			      $scope.status = 'You said the information was "' + answer + '".';
			    }, function() {
			      $scope.minLenght = 0;	
			      $scope.status = 'You cancelled the dialog.';
			    });
		};

		$scope.findCategories = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.categories = Categories.query({ e: $scope.SEARCH.enterprise });
				Modal.setCategorias($scope.categories);
			}
		};


		// Find a list of SBUs
		$scope.findSubs = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.subs = Subs.query({ e: $scope.SEARCH.enterprise });
				Modal.setSubs($scope.subs);
			}
		};

		$scope.findSubcategories = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.subcategorias = Categories.query({ e: $scope.SEARCH.enterprise });
				Modal.setSubcategorias($scope.subcategorias);
			}
		};

		$scope.findTaxes = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.taxes = [ {value:1, name: 'Iva incluido en el costo'}, {value:10.5, name: '10.50%'}, {value:21, name: '21.00%'}, {value:27, name: '27.00%'}];
				Modal.setTaxes($scope.taxes);
			};
		};

		$scope.findMetrics = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.metrics = Metrics.query();
				Modal.setMetrics($scope.metrics);
			}
		};

		//****PARA LA EXTRACCION DEL PDF

		$scope.extraerCompra = function(item){
			var promise = asyncAsignarCompra(item);
			promise.then(function(response) {
				// console.log(response);
				$scope.printIt();
  			});
		};

		function asyncAsignarCompra(item) {
		    var deferred = $q.defer();
		    $scope.compra = item;
			setTimeout(function() {
			    if ($scope.compra!==undefined) {
			      deferred.resolve('Hello');
			    } else {
			      deferred.reject('Greeting');
			    }
			  }, 1000);
			  return deferred.promise;
		}

		$scope.printIt = function(){
		   var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
		   var b = document.getElementById('printing-css-compra').value;
		   var c = document.getElementById('printing-data-compra').innerHTML;
		   window.frames["print_frame_compra"].document.title = 'IM - Compra';
		   window.frames["print_frame_compra"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
		   window.frames["print_frame_compra"].window.focus();
		   window.frames["print_frame_compra"].window.print();
		};

		function httpGet(theUrl){
		    var xmlHttp = null;
		    xmlHttp = new XMLHttpRequest();
		    xmlHttp.open( "GET", theUrl, false );
		    xmlHttp.send( null );
		    return xmlHttp.responseText;
		}

		//****FIN EXTRACCION DEL PDF

		function DialogController($scope, $mdDialog, item, Ventas) {

			$scope.item = item; //es la venta que tengo que actualizar

			$scope.hide = function() {
			    $mdDialog.hide();
			  };
			$scope.cancel = function() {
			    $mdDialog.cancel();
			  };
			$scope.answer = function(answer) {
			    $mdDialog.hide(answer);
			  };

			$scope.actualizarCompra = function(data){

					var compra = $scope.item;

					if (data === 'pagado'){
						var estado = 'Pendiente de recepcion';
					}
					if (data === 'recibido'){
						var estado = 'Pendiente de pago2';
					}
					if (data === 'pYr'){
						var estado = 'Finalizada';
					}

					compra.estado = estado;

					/* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
					una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
					hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */
					compra.enterprise = compra.enterprise._id;
					compra.tipoComprobante = compra.tipoComprobante._id;
					compra.proveedor = compra.proveedor._id;
					compra.condicionVenta = compra.condicionVenta._id;

					compra.$update(function() {
						$mdDialog.hide();
						// if (data !== undefined){
						// 	location.reload(true);
						// }
						$location.path('compras');
					}, function(errorResponse) {
						$scope.error = errorResponse.data.message;
					});

			};

		};

		function CrearController($scope, $mdDialog, Modal, Products, Contacts){
			if(($rootScope.provider !== undefined) && ($rootScope.provider !== null) ) {
				$scope.provider = $rootScope.provider.name;
			}
			else{
				$scope.provider = undefined;
			}
			$scope.contacts = Modal.getContactos();
			$scope.taxconditions = Modal.getCondiciones();
			$scope.comprobantes = Modal.getComprobantes();
			$scope.categories2 = [ 'Materia Prima', 'Insumo'];
			$scope.categories = Modal.getCategorias();
			$scope.subcategorias= Modal.getSubcategorias();
			$scope.subs = Modal.getSubs();
			$scope.proveedores = Modal.getProveedores();
			$scope.taxes = Modal.getTaxes();
			$scope.metrics = Modal.getMetrics();
			$scope.quantityPerUnit = 0;
			$scope.unitsInStock = 0;
			$scope.idealStock = 0;
			$scope.criticalStock = 0;
			$scope.unitPrice = 0;
			$scope.costPerUnit = 0;
			$scope.condicionPagos = Modal.getCondicionesVentas();
			$scope.banco = {name: undefined, account: undefined, cbu: undefined, identity: undefined};
			$scope.creditLimit = 0;
			$scope.discountRate = 0;
			$scope.country = 'Argentina';
			$scope.city = 'La Plata';
			$scope.region = 'Buenos Aires';
			$scope.postalCode = '1900';

			var marker, map;
			  $scope.$on('mapInitialized', function(evt, evtMap) {
			    map = evtMap;
			    marker = map.markers[0];
			});

			$scope.types = "['address']";

	        $scope.placeChanged = function() {
	        	$scope.errorDir = undefined;
	        	$scope.place = this.getPlace();
	        };

	        $scope.placeChangedContact = function() {
	           $scope.placeContact = this.getPlace();
	        };

			$scope.hide = function() {
				$mdDialog.hide();
			};
			$scope.cancel = function() {
				$mdDialog.cancel();
			};
			$scope.answer = function(answer) {
				$mdDialog.hide(answer);
			};

			$scope.crearMateriaPrima = function(){
				var esMp = false;
				var esI = false;
				for (var i in $scope.categories) {
					if ($scope.categories[i].name === this.category1 ){
						var categoria = $scope.categories[i];
					}
				}
				if (categoria.name === 'Insumo'){
					esI = true;
				}
				else{
					esMp = true;
				}
				for (var i in $scope.taxes){
					if ($scope.taxes[i].name === this.tax){
						var valorTax = $scope.taxes[i].value
					}
				}
				if ($rootScope.provider === undefined){
					for (var i in $scope.proveedores){
						if ($scope.proveedores[i].name === this.provider){
							var idProveedorModal = $scope.proveedores[i]._id
						}
					}
				}
				else{
					var idProveedorModal = $rootScope.provider._id
				}
				var empresa = Modal.getEmpresa();
				if (this.code !== undefined){
						if (this.name !== undefined){
							if (this.tax !== undefined){
								if (categoria.name !== undefined){
									if (this.category2 !== undefined){
										if (this.sub !== undefined){
											if (this.provider !== undefined){
												var product = new Products ({
													name: this.name,
													description: this.description ? this.description : undefined,
													code: this.code,
													//picture: this.picture || undefined,
													brandName: this.brandName ? this.brandName : undefined,
													unitPrice: this.unitPrice,
													costPerUnit: this.costPerUnit,
													// sku: this.sku,
													discontinued: this.discontinued,
													provider: idProveedorModal,
													quantityPerUnit: this.quantityPerUnit,
													unitsInStock: this.unitsInStock,
													idealStock: this.idealStock,
													criticalStock: this.criticalStock,
													unitsOnOrder: this.unitsOnOrder,
													storedIn: this.storedIn ? this.storedIn : undefined,
													metric: this.metric ? this.metric : 'u.',
													reseller: this.reseller,
													visible: this.visible,
													esInsumo: esI,
													esMateriaPrima: esMp,
													tax: this.tax ? valorTax : undefined,
													enterprise: empresa,
													sub: this.sub._id,
													category1: categoria._id,
													category2: this.category2 ? this.category2._id : undefined,
												});

												// Redirect after save
												product.$save(function(response) {

													// Clear form fields
													$scope.name = '';
													$scope.description = '';
													$scope.brandName = '';
													$scope.unitPrice = 0;
													$scope.costPerUnit = 0;
													$scope.sku = '';
													$scope.discontinued = false;
													$scope.quantityPerUnit = 1;
													$scope.unitsInStock = 0;
													$scope.unitsOnOrder = 0;
													$scope.visible = true;
													$scope.storedIn = '';
													$scope.metric = '';
													$scope.reseller = false;
													$scope.hide();
													$rootScope.nuevaMateriaPrima = product;
													// console.log($rootScope.nuevaMateriaPrima);

													}, function(errorResponse) {
														$scope.error = errorResponse.data.message;
													});
												}
											else{
												$scope.errorProv = 'Se debe elegir un proveedor';												
											}	
										}
										else{
											$scope.errorSub = 'Se debe especificar la UEN para el producto';
										}
									}
									else{
										$scope.errorCategory = 'Se debe especificar la subcategoria para el producto';	
									}	
								}
								else{
									$scope.errorCategory2 = 'Indicar la categoria del producto';
								}	
							}
							else{
								$scope.errorTax = 'Se debe especificar el iva para el producto';
							}	
						}
						else{
							$scope.errorName = 'Se debe indicar el nombre del producto';
						}		
					}
					else{
						$scope.errorCode = 'Se debe indicar el codigo del producto';
					}							
			};

			$scope.borrarError = function(){
				$scope.errorCode = undefined;
				$scope.errorProv = undefined;
				$scope.errorName = undefined;
				$scope.errorNameProv = undefined;
				$scope.errorTax = undefined;
				$scope.errorSub = undefined;
				$scope.errorCategory = undefined;
				$scope.errorCategory2 = undefined;
				$scope.errorCondicion = undefined;
				$scope.errorComprobante = undefined;
			}

			// Create new Provider
			$scope.crearProveedor = function() {
				var empresa = Modal.getEmpresa();
				// Create new Provider object
				if (this.name !== undefined){
					if (this.address !== undefined){
						var latitud = $scope.place.geometry.location.lat();
						var longitud = $scope.place.geometry.location.lng();
						if (this.category1 !== undefined){
							if (this.taxcondition !== undefined){
								if (this.condicionPago !== undefined){
									if (this.comprobante !== undefined){
										var provider = new Providers ({
											name: this.name,
											creditLimit: this.creditLimit ? this.creditLimit : 0,
						  					fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
											condicionPago: this.condicionPago ? this.condicionPago._id : undefined,
											comprobante: this.comprobante ? this.comprobante._id : undefined,
											banco: this.banco,
											taxCondition: this.taxcondition ? this.taxcondition._id : undefined,
											discountRate: this.discountRate ? this.discountRate : 0,
											costCenter: this.costCenter,
											paymentMethod: this.paymentMethod,
											contacts: this.contact ? this.contact._id : undefined,  // cambiar por contactos seleccionados
											country: this.country,
											city: this.city,
											region: this.region ? this.region : undefined,
											postalCode: this.postalCode,
											address: this.address,
											phone: this.phone ? this.phone : undefined,
											loc: [latitud, longitud],
											//fax: this.fax,
											web: this.web ? this.web : undefined,
											enterprise: empresa,
											category1: this.category1 ? this.category1._id : undefined,
											//sub: this.sub._id || undefined
										});


										// Redirect after save
										provider.$save(function(response) {
										
						 				// Clear form fields
											$scope.name = '';
											$scope.creditLimit = 0;
											$scope.fiscalNumber = '';
											$scope.discountRate = 0;
											$scope.contacts = [];
											$scope.country = '';
											$scope.city = '';
											$scope.region = '';
											$scope.postalCode = '';
											$scope.address = '';
											$scope.phone = '';
											$scope.fax = '';
											$scope.web = '';
											$scope.hide();
											$rootScope.nuevoProveedor = provider;
										}, function(errorResponse) {
											$scope.error = errorResponse.data.message;
										});
									}
									else{
										$scope.errorComprobante = 'Indicar el tipo de comprobante'
									}	
								}
								else{
									$scope.errorCondicion = 'Indicar condicion de pago'
								}		
							}
							else{
								$scope.errorTax = 'Indicar la condicion de iva'
							}	
						}
						else{
							$scope.errorCategory = 'Indicar la categoria';
						}		
					}
					else{
						$scope.errorDir = 'Indicar la direccion';
					}	
				}
				else{
					$scope.errorNameProv = 'Indicar la razón social';
				}		
			};
		}
	}
]);
angular.module('compras').controller('CreateCompraController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Compras', 'Enterprises','$mdBottomSheet', '$state', '$mdDialog', '$filter', 'compras', 'Products', 'Modal', 'Contacts', 'Taxconditions', 'Categories', 'Subs', 'Metrics', 'Providers', '$http', 'Cajas', 'Impuestos', 'tipoCompra',
	function($scope, $rootScope, $stateParams, $location, Authentication, Compras, Enterprises, $mdBottomSheet, $state, $mdDialog, $filter, compras, Products, Modal, Contacts, Taxconditions, Categories, Subs, Metrics, Providers, $http, Cajas, Impuestos, tipoCompra) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.tipoCompra = tipoCompra;
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.findProductos();
			$scope.findCajas();
			$scope.findProveedores();
			$scope.findComprobantes();
			$scope.findCondicionesventas();
		});

		$scope.$watch('compraVerificada', function (){
		});

		$rootScope.$watch('nuevoProveedor', function(){
			if($rootScope.nuevoProveedor!==undefined){
				$scope.mostrar = true;
				$scope.proveedor = $rootScope.nuevoProveedor;
				$scope.selectedItemChange($scope.proveedor);
				$rootScope.nuevoProveedor = undefined;
			} else {
				$scope.mostrar = false;
			}
		});
		$rootScope.$watch('nuevaMateriaPrima', function(){
			if(($rootScope.nuevaMateriaPrima !==undefined)&&($rootScope.nuevaMateriaPrima !==null)&&($rootScope.nuevaMateriaPrima !== '')){
				$scope.mostrarMateria = true;
				$http({ method: 'GET',
		            url: ('/api/products/' + $rootScope.nuevaMateriaPrima._id),
		            params: {  }
		        })
				.then(function(response) {
		            $scope.producto = response.data;
		        }, function(response) {
		            console.log('error');
		        });
				// $scope.producto = $rootScope.nuevaMateriaPrima ;
				$scope.selectedItemChangeProduct($scope.producto);
			} else {
				$scope.mostrarMateria = false;
			}
		});

		$scope.selectedMode = 'md-scale';
	    $scope.selectedDirection = 'up';

	    $scope.mostrarCaja = true;  //controla si muestra o no caja dependiendo de la condicion de venta

		$scope.compras = compras; // asigno las compras que ya busque en el resolve de las rutas
		// $scope.tipoCompra = tipoCompra;
		// $scope.tipoCompra2 = $stateParams.tipo;
		$scope.idProveedor = 0;
		//controla si el producto esta siendo ingresado para ver si lo borra o no al cambiar el proveedor
		$scope.tipeando = false;
		//vuelve el cursor al primer campo
		$scope.isFocus = false;

		$scope.productoEditado = [];

		//deshabolita el select del proveedor cuando hay productos agregados a la compra
		$scope.deshabilitarProveedor = false;

		$scope.productoCompra = { cantidad: undefined, descuento: undefined, observaciones: ''};

		$rootScope.productosAgregados = [];

		$scope.selectedProduct = [];
		$scope.selectedItem = null;
		$scope.searchText = null;

		//variables para el control de la ventana del autocomplete
		$scope.minLenghtProd = 0;
		$scope.minLenghtProv = 0;

		//Pongo a 0 valores de la vista
		$scope.subtotal = 0;
		$scope.descuentoPorcentaje = 0;
		$scope.descuentoValor = 0;
		$scope.neto = 0;
		$scope.tax1 = 0;
		$scope.tax2 = 0;
		$scope.tax3 = 0;
		$scope.imp1 = 0;
		$scope.imp2 = 0;
		$scope.imp3 = 0;
		$scope.imp4 = 0;
		$scope.total = parseFloat(0);
		$scope.totalTax = 0;
		$scope.totalImp = 0;

		//si la condicion de venta es CC no debe elegir caja
		$scope.verCondicionVenta = function(c){
			$scope.errorCondicion = undefined;
			if (c.name == 'Cuenta Corriente'){
				$scope.mostrarCaja = false;
				$scope.caja = undefined;
			}
			else{
				$scope.mostrarCaja = true;
			}
		};

		$scope.descProveedor = function(){
			if (($scope.proveedor !== null) && ($scope.proveedor !== undefined)){
				$scope.idProveedor = $scope.proveedor._id;
				$scope.errorProv = undefined;
			}
			else{
				$scope.idProveedor = 0;
			}
			if ((this.producto !== undefined) && (this.producto !== null) && ($scope.tipeando === false)){
				this.producto = undefined;
				$scope.searchText = undefined;
			}
		}; //end descProveedor

		$scope.initAutocomplete = function(){
			$scope.findProductos();
			$scope.searchTextChangeProduct('');
		}; //end initAutocomplete

		$scope.searchTextChangeProduct = function(text){
			$scope.tipeando = true;
			var lowercaseQuery = angular.lowercase(text);
			if ($scope.idProveedor === 0){
				$scope.filtrados = $filter('filter')($scope.products, function(item){
					return (item.esMateriaPrima === true || item.esInsumo === true);
				})
			}
			else{
				$scope.filtrados = $filter('filter')($scope.products, function(item){
					return (item.esMateriaPrima === true || item.esInsumo === true) && (item.provider._id === $scope.idProveedor); 
				})
			}
			return $scope.filtrados = $filter('filter')($scope.filtrados, {name: text});
		}; //end searchTextChangeProduct

		$scope.searchTextChange = function(text){
			var lowercaseQuery = angular.lowercase(text);
			return $filter('filter')($scope.proveedores, {name: text});
		}; //end searchText

		$scope.selectedItemChangeProduct = function (item){
			$scope.errorProd = undefined;
			$scope.producto = item;
			if($scope.producto!==null){
				document.getElementById('inputCantidad').focus();
			}
			if((this.proveedor === null) || (this.proveedor === undefined)){
				if (($scope.producto !== null) && ($scope.producto !== undefined)){
					this.proveedor = $scope.producto.provider;
				}
			}
		}; //end selectedItemChangeProduct

		$scope.selectedItemChange = function (item) {
			if ((item !== null) && (item !== undefined)){
				$scope.idProveedor = item._id;
			}
			$scope.proveedor = item;
			$rootScope.provider = item;
			$scope.descProveedor();
			$scope.tipeando = false;
			// asigno por defecto los campos asociados al proveedor en los select
			if(item!==null){
				for(var i=0; i<$scope.condicionVentas.length;i++){
					if (item.condicionPago !== undefined){
						if($scope.condicionVentas[i]._id == item.condicionPago){
							$scope.condicionV = $scope.condicionVentas[i];
						}
					}	
				}
				if ((item.comprobante !== null)&&(item.comprobante !== undefined)){
					for(var i=0; i<$scope.comprobantesFiltro.length;i++){
						if($scope.comprobantesFiltro[i]._id == item.comprobante){
							$scope.tipoComprobante = $scope.comprobantesFiltro[i];
						}
					}
				}
			}
		}; //end selectedItemChange

		$scope.sendProduct = function($event,productoCompra,producto) {
			$scope.mensajeP = undefined;
            if ($event.keyCode === 13) {
            	$event.preventDefault();
              	if((producto === null) || (producto === undefined)){
              		$scope.mensajeP = 'No seleccionaste un producto';
              	}
              	else {
              		$scope.mensajeP = undefined;
              		if(productoCompra === undefined){
              			productoCompra = {cantidad: 0}
              		}
              		if((productoCompra.cantidad === null) || (productoCompra.cantidad === undefined) || (productoCompra.cantidad === 0)){
              			$scope.mensajeP = 'No seleccionaste una cantidad para el producto';
              		}
              		else {
              				$scope.mensajeP = undefined;
              				$scope.producto = producto;
              				$scope.agregarProducto(producto,productoCompra);
              			}

              	}
            }
        }; //end sendProduct

        $scope.sendProvider = function($event, provider) {
            if ($event.keyCode === 13) {
            	$event.preventDefault();
              	if((provider === null) || (provider === undefined)){
              		$scope.mensajeP = 'No seleccionaste un proveedor valido';
              	}else {
					$scope.proveedor = provider;
              	}
            }
        }; //end sendProvider

        $scope.agregarProducto = function(producto,productoCompra) {
			$scope.clicked = false;
			$scope.errorProd = undefined;
			$scope.mensajeP = undefined;
			var p = {product: {}, cantidad: undefined, descuento: undefined, total: undefined, subtotal: undefined, observaciones: undefined};
			if (producto != undefined){
				if(producto.total == undefined){
					producto.total = 0;
				}
				p.product = producto;
				p.cantidad = productoCompra.cantidad;
				if (productoCompra.descuento == undefined){
					p.descuento = 0;
				}
				else{
					p.descuento = productoCompra.descuento;
				}
				if (productoCompra.observaciones == undefined){
					p.observaciones = '';
				}
				else{
					p.observaciones = productoCompra.observaciones;
				}
				p.total = 0;
				p.subtotal = 0;
				var subtotal = calcularSubtotal(p);
				p.total = p.total + subtotal;
				$rootScope.productosAgregados.push(p);
				// $scope.producto = undefined;
				productoCompra = undefined;
				p = undefined;
				$scope.productoCompra = { cantidad: undefined, descuento: undefined, observaciones: ''};
				$scope.selectedProduct = [];
				$scope.selectedItem = null;
				$scope.searchText = '';
				$scope.deshabilitarProveedor = true;
				document.getElementById("buscaP").focus();
			}
			else{
				return 0;
			}
		}; //end agregarProducto

		$scope.reverse = function(array) {
            var copy = [].concat(array);
            return copy.reverse();
        }; //end reverse

        var calcularSubtotal = function(p){
			var total = 0;
			var descuentoPorcentaje = p.descuento;
			var precio = parseFloat(p.product.costPerUnit);
			var cant = parseFloat(p.cantidad);
			var subtotal = parseFloat(precio*cant);
			var descuentoValor = subtotal*descuentoPorcentaje/100;
			p.subtotal = subtotal;
			total = subtotal - descuentoValor;
			$scope.subtotal = $scope.subtotal + total;
			$scope.descuentoValor = $scope.subtotal*$scope.descuentoPorcentaje/100;
			$scope.neto = $scope.subtotal - $scope.descuentoValor;
			if ($scope.provider.impuesto1 !== 0){
				$scope.imp1 = $scope.imp1 + total*$scope.provider.impuesto1/100;
			}
			if ($scope.provider.impuesto2 !== 0){
				$scope.imp2 = $scope.imp2 + total*$scope.provider.impuesto2/100;
			}
			if ($scope.provider.impuesto3 !== 0){
				$scope.imp3 = $scope.imp3 + total*$scope.provider.impuesto3/100;
			}
			if ($scope.provider.impuesto4 !== 0){
				$scope.imp4 = $scope.imp4 + total*$scope.provider.impuesto4/100;
			}
			if (p.product.tax == 10.5){
				$scope.tax1 = $scope.tax1 + (total*10.5/100);
			}
			if (p.product.tax == 21){
				$scope.tax2 = $scope.tax2 + (total*21/100);
			}
			if (p.product.tax == 27){
				$scope.tax3 = $scope.tax3 + total*27/100;
			}
			$scope.total = Math.round(($scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3 + $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4) * 100)/100;
			$scope.totalTax = $scope.tax1 + $scope.tax2 + $scope.tax3;
			var totalI = $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4;
			$scope.totalImp = Math.round(totalI * 100) / 100;
			return total;
		}; //end calcularSubtotal

		$scope.cantProductos = function(){
			if ($rootScope.productosAgregados.length > 0) {return true;}
		}; //end cantProductos

		$scope.showAdvancedProduct = function(ev) {
			$scope.minLenghtProd = 1;
			$scope.searchText = undefined;
				$scope.findProveedores();
				$scope.findSubs();
				$scope.findMetrics();
				$scope.findSubcategories();
				$scope.findCategories();
				$scope.findTaxes();
				Modal.setEmpresa($scope.SEARCH.enterprise);
				$mdDialog.show({
			      controller: CrearController,
			      templateUrl: '/modules/compras/views/create.product.view.html',
			      parent: angular.element(document.body),
			      targetEvent: ev,
			      clickOutsideToClose: false
			    })
			    .then(function(answer) {
			      $scope.minLenght = 0;
			      $scope.status = 'You said the information was "' + answer + '".';
			    }, function() {
			      $scope.minLenght = 0;	
			      $scope.status = 'You cancelled the dialog.';
			    });
		}; //end showAdvancedProduct

		$scope.showAdvancedProvider = function(ev) {
			$scope.minLenghtProv = 1;
			$scope.textToSearch = undefined;
				$scope.findContacts();
				$scope.findCategories();
				$scope.findTaxConditions();
				Modal.setEmpresa($scope.SEARCH.enterprise);
				$mdDialog.show({
			      controller: CrearController,
			      templateUrl: '/modules/compras/views/create.provider.view.html',
			      parent: angular.element(document.body),
			      targetEvent: ev,
			      clickOutsideToClose: false
			    })
			    .then(function(answer) {
			      $scope.minLenghtProv = 0;
			      $scope.status = 'You said the information was "' + answer + '".';
			    }, function() {
			      $scope.minLenghtProv = 0;	
			      $scope.status = 'You cancelled the dialog.';
			    });
		}; //end showAdvancedProvider

		//Habilita form para editar producto
		$scope.editar = function(index){
			$scope.productoEditado[index] = true;
		};//end editar

		//edita un producto
		$scope.editarProducto = function(index,p){
			var subt = 0;
			var tax1 = 0;
			var tax2 = 0;
			var tax3 = 0;
			var descuento = p.product.costPerUnit*p.descuento/100;
			p.subtotal = p.cantidad * p.product.costPerUnit;
			p.total = p.cantidad * (p.product.costPerUnit - descuento);
			/*var subtotal = calcularSubtotal(p);*/
			$rootScope.productosAgregados[index] = p;
			for (var i = 0; i < $rootScope.productosAgregados.length; i++) {
				subt = subt + $rootScope.productosAgregados[i].total;
				var iva = $rootScope.productosAgregados[i].product.tax;
				if (iva == 10.5){
					tax1 = tax1 + $rootScope.productosAgregados[i].total*10.5/100;
				}
				if (iva == 21){
					/*console.log(tax2);*/
					tax2 = tax2 + $rootScope.productosAgregados[i].total*21/100;
				}
				if (iva == 27){
					tax3 = tax3 + $rootScope.productosAgregados[i].total*27/100;
				}
			}
			$scope.descuentoValor = subt * $scope.descuentoPorcentaje/100;
			$scope.subtotal = subt;
			$scope.neto = subt - $scope.descuentoValor;
			if ($scope.provider.impuesto1 !== 0){
				$scope.imp1 = $scope.neto*$scope.provider.impuesto1/100;
			}
			if ($scope.provider.impuesto2 !== 0){
				$scope.imp2 = $scope.neto*$scope.provider.impuesto2/100;
			}
			if ($scope.provider.impuesto3 !== 0){
				$scope.imp3 = $scope.neto*$scope.provider.impuesto3/100;
			}
			if ($scope.provider.impuesto4 !== 0){
				$scope.imp4 = $scope.neto*$scope.provider.impuesto4/100;
			}
			$scope.tax1 = tax1;
			$scope.tax2 = tax2;
			$scope.tax3 = tax3;
			var totalI = $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4;
			$scope.totalImp = Math.round(totalI * 100) / 100;
			$scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3 + $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4;
			this.p = undefined;
			$scope.productoEditado[index] = false;
		}; //end editarProducto

		//Elimina un producto del arreglo de productos
		$scope.borrarProducto = function(producto) {
			var subt = 0;
			var iva = 0;
			var descProd = 0; //descuento del producto
			var descGen = 0; //descuento del proveedor
			var tax1 = 0;
			var tax2 = 0;
			var tax3 = 0;
			var totalIva = 0;
			var totalImpuesto = $scope.provider.impuesto1 + $scope.provider.impuesto2 + $scope.provider.impuesto3 + $scope.provider.impuesto4;
			var restoImpuesto = producto.total*totalImpuesto/100;
			descProd = parseFloat((producto.product.costPerUnit * producto.cantidad)*producto.descuento/100);
			subt = parseFloat((producto.product.costPerUnit * producto.cantidad) - descProd); //subtotal de solo ese prod
			descGen = parseFloat((subt*$scope.descuentoPorcentaje)/100);
			iva = producto.product.tax;
			if (iva == 10.5){
				tax1 = parseFloat(subt*10.5/100);
				$scope.tax1 = parseFloat($scope.tax1 - tax1);
			}
			if (iva == 21){
				tax2 = parseFloat(subt*21/100);
				$scope.tax2 = parseFloat($scope.tax2 - tax2);
			}
			if (iva == 27){
				tax3 = parseFloat(subt*27/100);
				$scope.tax3 = parseFloat($scope.tax3 - tax3);
			}
			$scope.neto = parseFloat($scope.neto - (subt - descGen));
			if ($scope.provider.impuesto1 !== 0){
				$scope.imp1 = $scope.neto*$scope.provider.impuesto1/100;
			}
			if ($scope.provider.impuesto2 !== 0){
				$scope.imp2 = $scope.neto*$scope.provider.impuesto2/100;
			}
			if ($scope.provider.impuesto3 !== 0){
				$scope.imp3 = $scope.neto*$scope.provider.impuesto3/100;
			}
			if ($scope.provider.impuesto4 !== 0){
				$scope.imp4 = $scope.neto*$scope.provider.impuesto4/100;
			}
			var totalI = $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4;
			$scope.totalImp = Math.round(totalI * 100) / 100;
			$scope.subtotal = parseFloat($scope.subtotal - subt);
			totalIva = (subt - descGen + tax1 + tax2 + tax3);
			$scope.descuentoValor = parseFloat($scope.descuentoValor - descGen);
			var restar = totalIva + restoImpuesto;
			$scope.total = $scope.total - restar;
			$scope.totalTax = $scope.totalTax - tax1 - tax2 - tax3;
			$scope.totalImp = totalI;
			$scope.remove(producto);
			// $rootScope.productosAgregados.splice(producto, 1);
			if($rootScope.productosAgregados.length == 0){
				$scope.deshabilitarProveedor = false;
			}
		};//borrarProducto

		$scope.remove = function( producto ) {
			for (var i in $rootScope.productosAgregados) {
				if ($rootScope.productosAgregados [i] === producto) {
					$rootScope.productosAgregados.splice(i,1);
				}
			}	
		}; //end remove

		$scope.clickSubmit = function(){
			if ($scope.tipoCompra == 'compra'){
				var estado = 'Finalizada';
			}
			else{
				if ($scope.tipoCompra == 'pedido'){
					var estado = 'Pendiente de pago y recepcion';
				}
			}
			$scope.clicked = true;
			$scope.create(estado);
		}; //end clickSubmit

		// Create new Compra
		$scope.create = function(e) {
			if($scope.puesto != undefined){
				if ($scope.tipoCompra == 'compra'){
					var caja = $scope.caja;
					var recepcion = this.fechaRecepcion; 
					var pago = this.fechaPago;
					var puesto = $scope.puesto._id;
				}
				else{
					if ($scope.tipoCompra == 'pedido'){
						var caja = 0;
						var recepcion = undefined; 
						var pago = undefined;
						var puesto = $scope.puesto._id;
					}
				}
				if (this.condicionV.name == 'Cuenta Corriente'){
					caja = 0;
				}
				if ($scope.clicked === true){
					if (caja !== undefined){ 
						if ($scope.productosAgregados.length !== 0){
							if ($scope.proveedor !== undefined){
								if($scope.comprobante !== undefined){
									if ($scope.tipoComprobante !== undefined){								
										if(this.condicionV !== undefined){
											if (caja == 0){
												caja = undefined;
											}
											// Create new Compra object
											var compra = new Compras ({
												estado: e,
												created: $scope.created,
												fechaPago: pago,
												fechaRecepcion: recepcion,
												caja: caja,
												comprobante: this.comprobante,
												tipoComprobante: this.tipoComprobante,
												products: $rootScope.productosAgregados,
												proveedor: $scope.proveedor,
												observaciones: this.observaciones,
												subtotal: $scope.subtotal,
												descuentoPorcentaje: this.descuentoPorcentaje,
												descuentoValor: this.descuentoValor,
												neto: $scope.neto,
												tax1: this.tax1,
												tax2: this.tax2,
												tax3: this.tax3,
												totalTax: this.totalTax,
												totalImp: $scope.totalImp,
												total: $scope.total,
												condicionVenta: this.condicionV._id,
												category: this.category ? this.category._id : undefined,
												enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
												puesto: puesto
											});

											// Redirect after save
											compra.$save(function(response) {
												if(response._id) {
	                                                $http.post('/api/impuestos/updateTotal',
	                                                    {
	                                                        month: (new Date()).getMonth(),
	                                                        year: (new Date()).getFullYear()
	                                                    }
	                                                );

													$state.go('home.compras');
													// agregar sub al array
													compra._id = response._id;
													$scope.compras.unshift(compra);
												}

												// Clear form fields
												$scope.comprobante = '';
												$scope.tipoComprobante = '';
												$scope.observaciones = '';
												$scope.subtotal = 0;
												$scope.descuentoPorcentaje = 0;
												$scope.descuentoValor = 0;
												$scope.neto = 0;
												$scope.tax1 = 0;
												$scope.tax2 = 0;
												$scope.tax3 = 0;
												$scope.total = 0;
												$scope.condicionVenta = '';
												$scope.clicked = false;
												$rootScope.nuevoProveedor = '';
												$rootScope.nuevaMateriaPrima = '';
												$scope.proveedor = '';
												$scope.producto = '';

											}, function(errorResponse) {
												console.log(errorResponse, 'erropr');
											});

										}
										else{
											$scope.errorCondicion = 'No elegiste una condicion de compra';
										}
									}
									else{
										$scope.errorTipoC = 'No elegiste un tipo de comprobante';
									}
								}
								else{
									$scope.errorComprobante = 'Se debe especificar un numero de comprobante';
								}
							}
							else{
								$scope.errorProv = 'No elegiste un proveedor';
							}
						}
						else{
							$scope.errorProd = 'Tenes que elegir productos para la compra';
						}
					}	
					else{
						$scope.mensajeCaja = 'Seleccionar la caja';
					}	
				}
				else {
					//prevent defaults
					//prevengo que se haga un submit cuando presiona enter
				}	
			}else{
				$scope.errorCondicion = 'Please assign puesto to user.';
			}
			
		}; //end create

		$scope.findProductos = function() {
			if($scope.SEARCH !== undefined) { $scope.products = Products.query({ e: $scope.SEARCH.enterprise });}
		}; //end findProductos

		$scope.findEnterprises = function() {
			if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });}
		}; //end findEnterprises

		$scope.findProveedores = function() {
			if($scope.SEARCH !== undefined) {
				$scope.proveedores = Providers.query({ e: $scope.SEARCH.enterprise });
				Modal.setProveedores($scope.proveedores);
			}
		}; //end findProveedores

		$scope.findContacts = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.contacts = Contacts.query({e: $scope.SEARCH.enterprise });
				Modal.setContactos($scope.contacts);
			}
		}; //end findContacts

		$scope.findTaxConditions = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.taxconditions = Taxconditions.query({e: $scope.SEARCH.enterprise });
				Modal.setCondiciones($scope.taxconditions);
			}
		}; //end findTaxConditions

		$scope.findCategories = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.categories = Categories.query({ e: $scope.SEARCH.enterprise });
				Modal.setCategorias($scope.categories);
			}
		}; //end findCategories

		$scope.findSubs = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.subs = Subs.query({ e: $scope.SEARCH.enterprise });
				Modal.setSubs($scope.subs);
			}
		}; //end findSubs

		$scope.findCajas = function(){
            if ($scope.SEARCH !== undefined) {
                $scope.cajas = [];
                Cajas.query({e: $scope.SEARCH.enterprise}, function (foundCaja) {
                    foundCaja.forEach(function (entry) {
                        if (entry.deleted === false) {
                            $scope.cajas.push(entry);
                        }

                        if(entry.user._id.toString() == user._id.toString()) {
                            $scope.caja = entry;
                        }
                    });

                    if ($scope.cajas.length === 1) {
                        $scope.caja = $scope.cajas[0]
                    }
                })
            }
		};

		$scope.findSubcategories = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.subcategorias = Categories.query({ e: $scope.SEARCH.enterprise });
				Modal.setSubcategorias($scope.subcategorias);
			}
		}; //end findSubcategories

		$scope.findTaxes = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.taxes = [ {value:1, name: 'Iva incluido en el costo'}, {value:10.5, name: '10.50%'}, {value:21, name: '21.00%'}, {value:27, name: '27.00%'}];
				Modal.setTaxes($scope.taxes);
			}
		}; //end findTaxes

		$scope.findMetrics = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.metrics = Metrics.query();
				Modal.setMetrics($scope.metrics);
			}
		}; //end findMetrics

		$scope.findComprobantes = function() {
			// $scope.comprobantes = Comprobantes.query();
			if ($scope.SEARCH !== undefined) {
				var promise = $http({ method: 'GET', url: ('/api/comprobantes/'), params: { e: $scope.SEARCH.enterprise }});
				promise.then(function(response) {
    				$scope.comprobantesFiltro = response.data;
    				for (var i in $scope.comprobantes){
	                   	if ($scope.comprobantesFiltro[i].name === 'Pedido'){
	                   		$scope.comprobantesFiltro.splice(i, 1);
	                   	}
	                }
	                Modal.setComprobantes($scope.comprobantesFiltro);
  				});
			}
		};//end findComprobantes

		$scope.findCondicionesventas = function() {
			if ($scope.SEARCH !== undefined) { 
				var promise = $http({ method: 'GET', url: ('/api/condicionventas/'), params: { e: $scope.SEARCH.enterprise }});
				promise.then(function(response) {
    				$scope.condicionVentas = response.data;
    				Modal.setCondicionesVentas($scope.condicionVentas);
  				});
			}
		};//end findCondicionesVentas

		function CrearController($scope, $mdDialog, Modal, Products, Contacts){
			if(($rootScope.provider !== undefined) && ($rootScope.provider !== null) ) {
				$scope.provider = $rootScope.provider.name;
			}
			else{
				$scope.provider = undefined;
			}
			$scope.contacts = Modal.getContactos();
			$scope.taxconditions = Modal.getCondiciones();
			$scope.comprobantes = Modal.getComprobantes();
			$scope.categories2 = [ 'Materia Prima', 'Insumo'];
			$scope.categories = Modal.getCategorias();
			$scope.subcategorias= Modal.getSubcategorias();
			$scope.subs = Modal.getSubs();
			$scope.proveedores = Modal.getProveedores();
			$scope.taxes = Modal.getTaxes();
			$scope.metrics = Modal.getMetrics();
			$scope.quantityPerUnit = 0;
			$scope.unitsInStock = 0;
			$scope.idealStock = 0;
			$scope.criticalStock = 0;
			$scope.unitPrice = 0;
			$scope.costPerUnit = 0;
			$scope.condicionPagos = Modal.getCondicionesVentas();
			$scope.banco = {name: undefined, account: undefined, cbu: undefined, identity: undefined};
			$scope.creditLimit = 0;
			$scope.discountRate = 0;
			$scope.country = 'Argentina';
			$scope.city = 'La Plata';
			$scope.region = 'Buenos Aires';
			$scope.postalCode = '1900';

			var marker, map;
			  $scope.$on('mapInitialized', function(evt, evtMap) {
			    map = evtMap;
			    marker = map.markers[0];
			});

			$scope.types = "['address']";

	        $scope.placeChanged = function() {
	        	$scope.errorDir = undefined;
	        	$scope.place = this.getPlace();
	        };

	        $scope.placeChangedContact = function() {
	           $scope.placeContact = this.getPlace();
	        };

			$scope.hide = function() {
				$mdDialog.hide();
			};

			$scope.cancel = function($event) {
				if ($event !== undefined){
					if ($event.keyCode == 0) {
						$mdDialog.cancel();
					}
				}		
			};

			$scope.answer = function(answer) {
				$mdDialog.hide(answer);
			};

			$scope.crearMateriaPrima = function($event){
				if ($event.keyCode == 0){
					var esMp = false;
					var esI = false;
					for (var i in $scope.categories) {
						if ($scope.categories[i].name === this.category1 ){
							var categoria = $scope.categories[i];
						}
					}
					if (categoria.name === 'Insumo'){
						esI = true;
					}
					else{
						esMp = true;
					}
					for (var i in $scope.taxes){
						if ($scope.taxes[i].name === this.tax){
							var valorTax = $scope.taxes[i].value
						}
					}
					if ($rootScope.provider === undefined){
						for (var i in $scope.proveedores){
							if ($scope.proveedores[i].name === this.provider){
								var idProveedorModal = $scope.proveedores[i]._id
							}
						}
					}
					else{
						var idProveedorModal = $rootScope.provider._id
					}
					var empresa = Modal.getEmpresa();
					if (this.code !== undefined){
							if (this.name !== undefined){
								if (this.tax !== undefined){
									if (categoria.name !== undefined){
										if (this.category2 !== undefined){
											if (this.sub !== undefined){
												if (this.provider !== undefined){
													var product = new Products ({
														name: this.name,
														description: this.description ? this.description : undefined,
														code: this.code,
														//picture: this.picture || undefined,
														brandName: this.brandName ? this.brandName : undefined,
														unitPrice: this.unitPrice,
														costPerUnit: this.costPerUnit,
														// sku: this.sku,
														discontinued: this.discontinued,
														provider: idProveedorModal,
														quantityPerUnit: this.quantityPerUnit,
														unitsInStock: this.unitsInStock,
														idealStock: this.idealStock,
														criticalStock: this.criticalStock,
														unitsOnOrder: this.unitsOnOrder,
														storedIn: this.storedIn ? this.storedIn : undefined,
														metric: this.metric ? this.metric : 'u.',
														reseller: this.reseller,
														visible: this.visible,
														esInsumo: esI,
														esMateriaPrima: esMp,
														tax: this.tax ? valorTax : undefined,
														enterprise: empresa,
														sub: this.sub._id,
														category1: categoria._id,
														category2: this.category2 ? this.category2._id : undefined,
													});

													// Redirect after save
													product.$save(function(response) {

														// Clear form fields
														$scope.name = '';
														$scope.description = '';
														$scope.brandName = '';
														$scope.unitPrice = 0;
														$scope.costPerUnit = 0;
														$scope.sku = '';
														$scope.discontinued = false;
														$scope.quantityPerUnit = 1;
														$scope.unitsInStock = 0;
														$scope.unitsOnOrder = 0;
														$scope.visible = true;
														$scope.storedIn = '';
														$scope.metric = '';
														$scope.reseller = false;
														$scope.hide();
														$rootScope.nuevaMateriaPrima = product;
														// console.log($rootScope.nuevaMateriaPrima);

														}, function(errorResponse) {
															$scope.error = errorResponse.data.message;
														});
													}
												else{
													$scope.errorProv = 'Se debe elegir un proveedor';												
												}	
											}
											else{
												$scope.errorSub = 'Se debe especificar la UEN para el producto';
											}
										}
										else{
											$scope.errorCategory = 'Se debe especificar la subcategoria para el producto';	
										}	
									}
									else{
										$scope.errorCategory2 = 'Indicar la categoria del producto';
									}	
								}
								else{
									$scope.errorTax = 'Se debe especificar el iva para el producto';
								}	
							}
							else{
								$scope.errorName = 'Se debe indicar el nombre del producto';
							}		
					}
					else{
						$scope.errorCode = 'Se debe indicar el codigo del producto';
					}		
				}							
			}; //end crearMateriaPrima

			$scope.borrarError = function(){
				$scope.errorCode = undefined;
				$scope.errorProv = undefined;
				$scope.errorName = undefined;
				$scope.errorNameProv = undefined;
				$scope.errorTax = undefined;
				$scope.errorSub = undefined;
				$scope.errorCategory = undefined;
				$scope.errorCategory2 = undefined;
				$scope.errorCondicion = undefined;
				$scope.errorComprobante = undefined;
			}; //end borrarError

			// Create new Provider
			$scope.crearProveedor = function($event) {
				if ($event.keyCode == 0){
					var empresa = Modal.getEmpresa();
					// Create new Provider object
					if (this.name !== undefined){
						if (this.address !== undefined){
							var latitud = $scope.place.geometry.location.lat();
							var longitud = $scope.place.geometry.location.lng();
							if (this.category1 !== undefined){
								if (this.taxcondition !== undefined){
									if (this.condicionPago !== undefined){
										if (this.comprobante !== undefined){
											var provider = new Providers ({
												name: this.name,
												creditLimit: this.creditLimit ? this.creditLimit : 0,
							  					fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
												condicionPago: this.condicionPago ? this.condicionPago._id : undefined,
												comprobante: this.comprobante ? this.comprobante._id : undefined,
												banco: this.banco,
												taxCondition: this.taxcondition ? this.taxcondition._id : undefined,
												discountRate: this.discountRate ? this.discountRate : 0,
												costCenter: this.costCenter,
												paymentMethod: this.paymentMethod,
												contacts: this.contact ? this.contact._id : undefined,  // cambiar por contactos seleccionados
												country: this.country,
												city: this.city,
												region: this.region ? this.region : undefined,
												postalCode: this.postalCode,
												address: this.address,
												phone: this.phone ? this.phone : undefined,
												loc: [latitud, longitud],
												//fax: this.fax,
												web: this.web ? this.web : undefined,
												enterprise: empresa,
												category1: this.category1 ? this.category1._id : undefined,
												//sub: this.sub._id || undefined
											});


											// Redirect after save
											provider.$save(function(response) {
											
							 				// Clear form fields
												$scope.name = '';
												$scope.creditLimit = 0;
												$scope.fiscalNumber = '';
												$scope.discountRate = 0;
												$scope.contacts = [];
												$scope.country = '';
												$scope.city = '';
												$scope.region = '';
												$scope.postalCode = '';
												$scope.address = '';
												$scope.phone = '';
												$scope.fax = '';
												$scope.web = '';
												$scope.hide();
												$rootScope.nuevoProveedor = provider;
											}, function(errorResponse) {
												$scope.error = errorResponse.data.message;
											});
										}
										else{
											$scope.errorComprobante = 'Indicar el tipo de comprobante'
										}	
									}
									else{
										$scope.errorCondicion = 'Indicar condicion de pago'
									}		
								}
								else{
									$scope.errorTax = 'Indicar la condicion de iva'
								}	
							}
							else{
								$scope.errorCategory = 'Indicar la categoria';
							}		
						}
						else{
							$scope.errorDir = 'Indicar la direccion';
						}	
					}
					else{
						$scope.errorNameProv = 'Indicar la razón social';
					}	
				}		
			}; //end crearProveedor
		} //end crearController


	} //end function		
]);
'use strict';

// Compras controller
angular.module('compras').controller('ListComprasController', ['$scope', '$rootScope', '$http', '$stateParams', '$location', 'user', 'Enterprises', '$mdDialog', '$q', '$state', 'Compras', 'comprasPendientes', 'comprasPendientesRecepcion', 'comprasFinalizadas', 'comprasPendienteEvaluacion', 'comprasPendienteAprobacion', 'comprasAnuladas', 'Socket', '$anchorScroll', 'BottomSheetService', 'ComprasExtra', 'Pedidos', 'PedidosExtra', '$timeout',
    function($scope, $rootScope, $http, $stateParams, $location, user, Enterprises, $mdDialog, $q, $state, Compras, comprasPendientes, comprasPendientesRecepcion, comprasFinalizadas, comprasPendienteEvaluacion, comprasPendienteAprobacion, comprasAnuladas, Socket, $anchorScroll, BottomSheetService, ComprasExtra, Pedidos, PedidosExtra, $timeout) {

        $scope.tabParams = $state.params.tab;
        switch ($state.params.tab) {
            case 'pendiente_evaluacion':
                $scope.pendiente_evaluacion = true;
                break;
            case 'realizada':
                $scope.realizada = true;
                break;
            case 'recibidos':
                $scope.recibidos = true;
                break;
            case 'finalizada':
                $scope.finalizada = true;
                break;
            case 'anulada':
                $scope.anulada = true;
            default:
                $scope.pendiente_evaluacion = true;
        }

        var cambio = this;

        this.user = user;
        this.comprasPendientes = comprasPendientes;
        // this.comprasPendientesPago = comprasPendientesPago;
        this.comprasPendientesRecepcion = comprasPendientesRecepcion;
        this.comprasPendienteEvaluacion = comprasPendienteEvaluacion;
        this.comprasPendienteAprobacion = comprasPendienteAprobacion;
        this.comprasFinalizadas = comprasFinalizadas;
        this.comprasAnuladas = comprasAnuladas;
        this.totalPendientesPR = 0;
        this.totalPendientesPago = 0;
        this.totalPendientesRecepcion = 0;
        this.totalFinalizadas = 0;
        this.totalAnuladas = 0;
        this.totalPendienteEvaluacion = 0;
        this.theDate = new Date();
        this.currentPage = 0;
        // definicion de funciones disponibles para la vista
        this.update = update;
        this.evaluarPendienteEvaluacion = evaluarPendienteEvaluacion;
        this.montoTotal = montoTotal;
        this.showConfirm = showConfirm;
        this.showConfirmRecepcion = showConfirmRecepcion;
        this.showAdvanced = showAdvanced;
        this.showAdvancedRecibidos = showAdvancedRecibidos;
        this.extraerCompra = extraerCompra;
        this.printIt = printIt;
        this.extraerListado = extraerListado;
        this.refresh = refresh;
        //this.getPage = getPage;
        this.borrarCompra = borrarCompra;

        this.montoTotal(comprasPendientes, comprasPendientesRecepcion, comprasFinalizadas, comprasAnuladas, comprasPendienteEvaluacion, comprasPendienteAprobacion);

        this.showBottomSheetAnulada = showBottomSheetAnulada;
        this.showBottomSheetFinalizada = showBottomSheetFinalizada;
        this.showBottomSheetRealizada = showBottomSheetRealizada;
        this.showBottomSheetRecebidos = showBottomSheetRecebidos;
        this.showBottomSheetPendienteEvaluacion = showBottomSheetPendienteEvaluacion;


        this.finalTemp = [];
        this.finalCount = 0;
        this.cancelTemp = [];
        this.cancelCount = 0;
        this.receiptTemp = [];
        this.receiptCount = 0;
        this.realTemp = [];
        this.realCount = 0;
        cambio.realStart = null;
        cambio.receiptStart = null;
        cambio.finalStart = null;
        cambio.cancelStart = null;

        cambio.realStart1 = null;
        cambio.realLimit1 = null
        cambio.realCount1 = 0;
        cambio.realTemp1 = [];

        cambio.realStart2 = null;
        cambio.realLimit2 = null
        cambio.realCount2 = 0;
        cambio.realTemp2 = [];

        cambio.loadmorePendienteEvaluacion = function() {
            if (cambio.searchCompras == '' || cambio.searchCompras == undefined) {
                cambio.loadingReal1 = true;
                cambio.realLimit1 = cambio.comprasPendienteEvaluacion.length < 40 ? 40 : 20;
                PedidosExtra.loadMore(cambio.user.enterprise.enterprise, 'compra', 'pendiente evaluacion', cambio.realStart1, cambio.realLimit1).then(
                    angular.bind(cambio, function(data) {
                        $timeout(function() {
                            if (cambio.comprasPendienteEvaluacion) {
                                if (cambio.realCount1 === 1 && cambio.realTemp1.length !== 0) {
                                    cambio.comprasPendienteEvaluacion = cambio.realTemp1.slice();
                                } else {
                                    cambio.comprasPendienteEvaluacion = cambio.comprasPendienteEvaluacion.concat(cambio.realTemp1);
                                }
                            }

                            if (data.data.length === 0 || (cambio.realTemp1.length === 0 && cambio.realCount1 > 2))
                                cambio.doneReal1 = true;

                            cambio.realTemp1 = Pedidos.query({
                                e: cambio.user.enterprise.enterprise,
                                tipoPedido: 'compra',
                                estado: 'pendiente evaluacion',
                                p: cambio.realCount1,
                                pcount: cambio.realLimit1
                            });
                            cambio.realCount1++;
                            cambio.loadingReal1 = false;
                            cambio.realStart1 = cambio.comprasPendienteEvaluacion.length ? cambio.comprasPendienteEvaluacion[cambio.comprasPendienteEvaluacion.length - 1].created : null;
                        }, 1000)
                    })
                )
            }
        };

        cambio.loadmorePendienteAprobacion = function() {
            if (cambio.searchCompras == '' || cambio.searchCompras == undefined) {
                cambio.loadingReal2 = true;
                cambio.realLimit2 = cambio.comprasPendienteAprobacion.length < 40 ? 40 : 20;
                PedidosExtra.loadMore(cambio.user.enterprise.enterprise, 'compra', 'pendiente aprobacion', cambio.realStart2, cambio.realLimit2).then(
                    angular.bind(cambio, function(data) {
                        $timeout(function() {
                            if (cambio.comprasPendienteAprobacion) {
                                if (cambio.realCount2 === 1 && cambio.realTemp2.length !== 0) {
                                    cambio.comprasPendienteAprobacion = cambio.realTemp2.slice();
                                } else {
                                    cambio.comprasPendienteAprobacion = cambio.comprasPendienteAprobacion.concat(cambio.realTemp1);
                                }
                            }

                            if (data.data.length === 0 || (cambio.realTemp2.length === 0 && cambio.realCount2 > 2))
                                cambio.doneReal2 = true;

                            cambio.realTemp2 = Pedidos.query({
                                e: cambio.user.enterprise.enterprise,
                                tipoPedido: 'compra',
                                estado: 'pendiente aprobacion',
                                p: cambio.realCount2,
                                pcount: cambio.realLimit2
                            });
                            cambio.realCount2++;
                            cambio.loadingReal2 = false;
                            cambio.realStart2 = cambio.comprasPendienteAprobacion.length ? cambio.comprasPendienteAprobacion[cambio.comprasPendienteAprobacion.length - 1].created : null;
                        }, 1000)
                    })
                )
            }
        };

        cambio.loadmoreReal = function() {
            if (cambio.searchCompras == '' || cambio.searchCompras == undefined) {
                cambio.loadingReal = true;
                cambio.realLimit = cambio.comprasPendientes.length < 40 ? 40 : 20;
                ComprasExtra.loadMore(cambio.user.enterprise.enterprise, 'Pendiente de pago y recepcion', cambio.comprasPendientes.length ? cambio.comprasPendientes[cambio.comprasPendientes.length - 1].created : null, cambio.realLimit).then(
                    angular.bind(cambio, function(data) {
                        $timeout(function() {
                            if (cambio.comprasPendientes) {
                                if (cambio.realCount === 1 && cambio.realTemp.length != 0) {
                                    cambio.comprasPendientes = cambio.realTemp.slice();
                                } else {
                                    cambio.comprasPendientes = cambio.comprasPendientes.concat(cambio.realTemp);
                                }
                            }

                            if (data.data.length === 0 || (cambio.realTemp.length === 0 && cambio.realCount > 2))
                                cambio.doneReal = true;

                            cambio.realTemp = Compras.query({
                                e: cambio.user.enterprise.enterprise,
                                estado: "Pendiente de pago y recepcion",
                                p: cambio.realCount,
                                pcount: cambio.realLimit
                            });
                            cambio.realCount++;
                            cambio.realStart =
                                cambio.loadingReal = false;
                        }, 1000)
                    })
                )
            }
        };

        cambio.loadmoreReceipt = function() {
            if (cambio.searchCompras == '' || cambio.searchCompras == undefined) {
                cambio.loadingReceipt = true;
                cambio.receiptLimit = cambio.comprasPendientesRecepcion.length < 40 ? 40 : 20;
                ComprasExtra.loadMore(cambio.user.enterprise.enterprise, 'Pendiente de recepcion', cambio.receiptStart, cambio.receiptLimit).then(
                    angular.bind(cambio, function(data) {
                        $timeout(function() {
                            if (cambio.comprasPendientesRecepcion) {
                                if (cambio.receiptCount === 1 && cambio.receiptTemp.length != 0) {
                                    cambio.comprasPendientesRecepcion = cambio.receiptTemp.slice();
                                } else {
                                    cambio.comprasPendientesRecepcion = cambio.comprasPendientesRecepcion.concat(cambio.receiptTemp);
                                }
                            }

                            if (data.data.length === 0 || (cambio.receiptTemp.length === 0 && cambio.receiptCount > 2))
                                cambio.doneReceipt = true;

                            cambio.receiptTemp = Compras.query({
                                e: cambio.user.enterprise.enterprise,
                                estado: 'Pendiente de recepcion',
                                p: cambio.receiptCount,
                                pcount: cambio.receiptLimit
                            });
                            cambio.receiptCount++;
                            cambio.receiptStart = cambio.comprasPendientesRecepcion.length ? cambio.comprasPendientesRecepcion[cambio.comprasPendientesRecepcion.length - 1].created : null;
                            cambio.loadingReceipt = false;
                        }, 1000)
                    })
                )
            }
        };

        cambio.loadmoreFinal = function() {
            if (cambio.searchCompras == '' || cambio.searchCompras == undefined) {
                cambio.loadingFinal = true;
                cambio.finalLimit = cambio.comprasFinalizadas.length < 40 ? 40 : 20;
                ComprasExtra.loadMore(cambio.user.enterprise.enterprise, 'Finalizada', cambio.finalStart, cambio.finalLimit).then(
                    angular.bind(cambio, function(data) {
                        $timeout(function() {
                            if (cambio.comprasFinalizadas) {
                                if (cambio.finalCount === 1 && cambio.finalTemp.length != 0) {
                                    cambio.comprasFinalizadas = cambio.finalTemp.slice();
                                } else {
                                    cambio.comprasFinalizadas = cambio.comprasFinalizadas.concat(cambio.finalTemp);
                                }
                            }

                            if (data.data.length === 0 || (cambio.finalTemp.length === 0 && cambio.finalCount > 2))
                                cambio.doneFinal = true;

                            cambio.finalTemp = Compras.query({
                                e: cambio.user.enterprise.enterprise,
                                estado: 'Finalizada',
                                p: cambio.finalCount,
                                pcount: cambio.finalLimit
                            });
                            cambio.finalCount++;
                            cambio.finalStart = cambio.comprasFinalizadas.length ? cambio.comprasFinalizadas[cambio.comprasFinalizadas.length - 1].created : null;
                            cambio.loadingFinal = false;
                        }, 1000)
                    })
                )
            }
        };

        cambio.loadmoreCancel = function() {
            if (cambio.searchCompras == '' || cambio.searchCompras == undefined) {
                cambio.loadingCancel = true;
                cambio.cancelLimit = cambio.comprasAnuladas.length < 40 ? 40 : 20;
                ComprasExtra.loadMore(cambio.user.enterprise.enterprise, 'Anulada', cambio.cancelStart, cambio.cancelLimit).then(
                    angular.bind(cambio, function(data) {
                        $timeout(function() {
                            if (cambio.comprasAnuladas) {
                                if (cambio.cancelCount === 1 && cambio.cancelTemp.length != 0) {
                                    cambio.comprasAnuladas = cambio.cancelTemp.slice();
                                } else {
                                    cambio.comprasAnuladas = cambio.comprasAnuladas.concat(cambio.cancelTemp);
                                }
                            }

                            if (data.data.length === 0 || (cambio.cancelTemp.length === 0 && cambio.cancelCount > 2))
                                cambio.doneCancel = true;

                            cambio.cancelTemp = Compras.query({
                                e: cambio.user.enterprise.enterprise,
                                estado: 'Anulada',
                                p: cambio.cancelCount,
                                pcount: cambio.cancelLimit
                            });
                            cambio.cancelCount++;
                            cambio.cancelStart = cambio.comprasAnuladas.length ? cambio.comprasAnuladas[cambio.comprasAnuladas.length - 1].created : null;
                            cambio.loadingCancel = false;
                        }, 1000)
                    })
                )
            }
        };

        /*Search Process*/
        cambio.searchComprasProcess = function() {
            if (cambio.searchCompras != '') {
                switch (cambio.selectedTab) {
                    case 'real1':
                        searchReal1();
                        searchReal2();
                        break;
                    case 'real':
                        searchReal();
                        break;
                    case 'reciept':
                        searchReceipt();
                        break;
                    case 'final':
                        searchFinal();
                        break;
                    case 'cancel':
                        searchCancel();
                    default:
                }
            } else {
                refresh();
            }
        };

        cambio.searchComprasProcessDefault = function() {
            if (cambio.searchCompras == '') {
                refresh();
            }
        };

        function searchReal1() {
            cambio.loadingReal1 = true;
            var searchString = cambio.searchCompras;
            PedidosExtra.search(cambio.user.enterprise.enterprise, 'compra', 'pendiente evaluacion', searchString).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        $scope.$apply(function() {
                            cambio.comprasPendienteEvaluacion = data.data;
                            cambio.loadingReal1 = false;
                        })
                    }, 1000)
                })
            )
        }

        function searchReal2() {
            cambio.loadingReal2 = true;
            var searchString = cambio.searchCompras;
            PedidosExtra.search(cambio.user.enterprise.enterprise, 'compra', 'pendiente aprobacion', searchString).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        $scope.$apply(function() {
                            cambio.comprasPendienteAprobacion = data.data;
                            cambio.loadingReal2 = false;
                        })
                    }, 1000)
                })
            )
        }

        function searchReal() {
            cambio.loadingReal = true;
            var searchString = cambio.searchCompras;
            ComprasExtra.search(cambio.user.enterprise.enterprise, 'Pendiente de pago y recepcion', searchString).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        $scope.$apply(function() {
                            cambio.comprasPendientes = data.data;
                            console.log(data.data)
                            cambio.loadingReal = false;
                            console.log(cambio.loadingReal)
                        })
                    }, 1000)
                })
            )
        }

        function searchReceipt() {
            cambio.loadingReceipt = true;
            var searchString = cambio.searchCompras;
            ComprasExtra.search(cambio.user.enterprise.enterprise, 'Pendiente de recepcion', searchString).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        $scope.$apply(function() {
                            console.log(data);
                            cambio.comprasPendientesRecepcion = data.data;
                            cambio.loadingReceipt = false;
                        })
                    }, 1000)
                })
            )
        }

        function searchCancel() {
            cambio.loadingCancel = true;
            var searchString = cambio.searchCompras;
            ComprasExtra.search(cambio.user.enterprise.enterprise, 'Anulada', searchString).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        $scope.$apply(function() {
                            console.log(data);
                            cambio.comprasAnuladas = data.data;
                            cambio.loadingCancel = false;
                        })
                    }, 1000)
                })
            )
        }

        function searchFinal() {
            cambio.loadingFinal = true;
            var searchString = cambio.searchCompras;
            ComprasExtra.search(cambio.user.enterprise.enterprise, 'Finalizada', searchString).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        $scope.$apply(function() {
                            console.log(data);
                            cambio.comprasFinalizadas = data.data;
                            cambio.loadingFinal = false;
                        })
                    }, 1000)
                })
            )
        }

        // actualizar modelos de dato de pedidos
        function refresh() {
            cambio.comprasPendientes = Compras.query({
                e: cambio.user.enterprise.enterprise,
                estado: 'Pendiente de pago y recepcion',
                p: 0,
                pcount: 20
            });
            // this.comprasPendientesPago = Compras.query({e: this.user.enterprise.enterprise, estado: 'Pendiente de pago2', p: 0, pcount: 20 });
            cambio.comprasPendientesRecepcion = Compras.query({
                e: cambio.user.enterprise.enterprise,
                estado: 'Pendiente de recepcion',
                p: 0,
                pcount: 20
            });
            cambio.comprasFinalizadas = Compras.query({
                e: cambio.user.enterprise.enterprise,
                estado: 'Finalizada',
                p: 0,
                pcount: 20
            });
            cambio.comprasAnuladas = Compras.query({
                e: cambio.user.enterprise.enterprise,
                estado: 'Anulada',
                p: 0,
                pcount: 20
            });

            cambio.comprasPendienteEvaluacion = Pedidos.query({
                e: cambio.user.enterprise.enterprise,
                tipoPedido: 'compra',
                estado: 'pendiente evaluacion',
                p: 0,
                pcount: 20
            });

            cambio.comprasPendienteAprobacion = Pedidos.query({
                e: cambio.user.enterprise.enterprise,
                tipoPedido: 'compra',
                estado: 'pendiente aprobacion',
                p: 0,
                pcount: 20
            });
        }

        // Obtener datos paginados del backend
        /*function getPage(pagina, cantidad) {
         if (pagina < 0) {
         pagina = 0;
         }
         ;
         this.currentPage = pagina;
         this.comprasPendientes = Compras.query({
         e: this.user.enterprise.enterprise,
         estado: 'Pendiente de pago y recepcion',
         p: pagina,
         pcount: cantidad
         });
         // this.comprasPendientesPago = Compras.query({e: this.user.enterprise.enterprise, estado: 'Pendiente de pago2', p: pagina, pcount: cantidad });
         this.comprasPendientesRecepcion = Compras.query({
         e: this.user.enterprise.enterprise,
         estado: 'Pendiente de recepcion',
         p: pagina,
         pcount: cantidad
         });
         this.comprasFinalizadas = Compras.query({
         e: this.user.enterprise.enterprise,
         estado: 'Finalizada',
         p: pagina,
         pcount: cantidad
         });
         this.comprasAnuladas = Compras.query({
         e: this.user.enterprise.enterprise,
         estado: 'Anulada',
         p: pagina,
         pcount: cantidad
         });
         };*/

        function showConfirm(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Anular Compra')
                .content('¿Está seguro que desea anular esta compra?')
                .ariaLabel('Lucky day')
                .ok('Anular')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(angular.bind(this, function() {
                item.estado = 'Anulada';
                cambio.update(item);
            }), function() {
                console.log('cancelaste anular');
            });
        }; //end showConfirm

        function showConfirmRecepcion(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Finalizar la compra')
                .content('¿Finalizar la compra?')
                .ariaLabel('Lucky day')
                .ok('Aceptar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(angular.bind(this, function() {
                item.estado = 'Finalizada';
                cambio.update(item);
            }), function() {
                console.log('cancelaste cerrar');
            });
        }; //showConfirmRecepcion

        function borrarCompra(compra) {
            console.log(compra);
            compra.$remove();
            if (compra.estado == 'Finalizada') {
                for (var i in comprasFinalizadas) {
                    if (comprasFinalizadas[i] === compra) {
                        comprasFinalizadas.splice(i, 1);
                    }
                }
            } else {
                for (var i in comprasAnuladas) {
                    if (comprasAnuladas[i] === compra) {
                        comprasAnuladas.splice(i, 1);
                    }
                }
            }
        }
        $scope.sampleAction = function(name, puesto) {
            switch (name) {
                case 'libre':
                    puesto.llamado = true;
                    break;

                case 'ocupado':
                    puesto.llamado = false;
                    break;


            }
            cambio.update(puesto);
        };

        function update(item) {

            var compra = item;

            if (this.enterprise !== undefined) {
                compra.enterprise = this.enterprise._id
            } else if ((compra.enterprise !== undefined) && (compra.enterprise !== null)) {
                compra.enterprise = compra.enterprise._id
            }

            if (this.tipoComprobante !== undefined) {
                compra.tipoComprobante = this.tipoComprobante._id
            } else if ((compra.tipoComprobante !== undefined) && (compra.tipoComprobante !== null)) {
                compra.tipoComprobante = compra.tipoComprobante._id
            }

            if ($scope.proveedor !== undefined) {
                compra.proveedor = $scope.proveedor._id
            } else if ((compra.proveedor !== undefined) && (compra.proveedor !== null)) {
                compra.proveedor = compra.proveedor._id
            };
            if (this.condicionVenta !== undefined) {
                compra.condicionVenta = this.condicionVenta._id
            } else if ((compra.condicionVenta !== undefined) && (compra.condicionVenta !== null)) {
                compra.condicionVenta = compra.condicionVenta._id
            }


            compra.$update(function() {
                // $scope.montoTotal();
                // $state.go('home.pedidos', {"tipo": $scope.tipoPedido});
                console.log("Tenekj");
                console.log(compra);
                Socket.emit('compra.update', compra)
            }, function(errorResponse) {
                // $scope.error = errorResponse.data.message;
            });

        } //end Update

        // actualizaciones en tiempo real.

        Socket.on('compras.update', angular.bind(this, function(message) {
            if (message.enterprise === this.user.enterprise.enterprise) {
                //this.cajas = Cajas.query({e: this.user.enterprise.enterprise})
                //.$promise.then(angular.bind(this, function(data){
                //console.log('cajas:', data);
                this.refresh();
                //montoTotal(cambio.pedidosRealizados, cambio.pedidosAprobados, cambio.pedidosBorrador, cambio.pedidosRechazados);
                //}));
            }
        }));

        function evaluarPendienteEvaluacion(item, n) {
            var pedido = item;
            if (n == 1) {
                pedido.estado = 'aprobada';
            }
            if (n == 2) {
                pedido.estado = 'rechazada';
            }
            if (n == 3) {
                pedido.estado = 'pendiente evaluacion';
            }
            if (n == 4) {
                pedido.deleted = 'true';
            }
            if (n == 5) {
                pedido.estado = 'pendiente aprobacion';
            }
            if (n == 6) {
                pedido.estado = 'borrador';
            }

            if (cambio.enterprise !== undefined) {
                pedido.enterprise = cambio.enterprise._id
            } else if ((pedido.enterprise !== undefined) && (pedido.enterprise !== null)) {
                pedido.enterprise = pedido.enterprise._id
            }

            if (cambio.tipoComprobante !== undefined) {
                pedido.tipoComprobante = cambio.tipoComprobante._id
            } else if (pedido.tipoComprobante !== undefined) {
                pedido.tipoComprobante = pedido.tipoComprobante._id
            }

            if (item.tipoPedido == 'compra') {
                if ($scope.proveedor !== undefined) {
                    pedido.proveedor = $scope.proveedor._id
                } else if ((pedido.proveedor !== undefined) && (pedido.proveedor !== null)) {
                    pedido.proveedor = pedido.proveedor._id
                }

            } else {
                if ($scope.cliente !== undefined) {
                    pedido.cliente = $scope.cliente._id
                } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) {
                    pedido.cliente = pedido.cliente._id
                }

            }
            if (cambio.condicionVenta !== undefined) {
                pedido.condicionVenta = cambio.condicionVenta._id
            } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) {
                pedido.condicionVenta = pedido.condicionVenta._id
            }

            pedido.$update(function() {
                $state.go('home.viewPedido', { pedidoId: item._id });

            }, function(errorResponse) {
                console.log(errorResponse, 'error repsonse');
            });
        } //end evaluar

        Socket.on('pedido.update', angular.bind(this, function(message) {
            if (message.enterprise === this.user.enterprise.enterprise) {
                this.refresh();
            }
        }));

        //abre modal para confirmar/rechazar ordenes pendientes
        function showConfirmPendienteEvaluacion(ev, item, n) {
            if (n == 1) {
                var confirm = $mdDialog.confirm()
                    .title('Aprobar Orden')
                    .content('¿Está seguro que desea aprobar esta orden?')
                    .ariaLabel('Lucky day')
                    .ok('Aprobar')
                    .cancel('Cancelar')
                    .targetEvent(ev);

                $mdDialog.show(confirm).then(function() {
                    cambio.evaluarPendienteEvaluacion(item, n);
                }, function() {
                    $scope.status = 'Cancelaste aprobar';
                });
            } else {
                if (n == 2) {
                    var confirm = $mdDialog.confirm()
                        .title('Rechazar Orden')
                        .content('¿Está seguro que desea rechazar esta orden?')
                        .ariaLabel('Lucky day')
                        .ok('Rechazar')
                        .cancel('Cancelar')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function() {
                        cambio.evaluarPendienteEvaluacion(item, n);
                    }, function() {
                        $scope.status = 'Cancelaste rechazar';
                    });
                }
            }
        }

        function extraerPedidoPendienteEvaluacion(item, n) {
            var promise = asyncAsignarPedido(item);
            promise.then(function(response) {
                // console.log(response);
                if (n == 1) {
                    printIt();
                } else {
                    printItAprobado();
                }

            });
        }

        function montoTotal(comprasPendientes, comprasPendientesRecepcion, comprasFinalizadas, comprasAnuladas, comprasPendienteEvaluacion, comprasPendienteAprobacion) {

            comprasPendientes.$promise.then(angular.bind(this, function(data) {
                this.totalPendientesPR = 0;
                for (var i in data) {
                    if (data[i].deleted === false) {
                        this.totalPendientesPR = this.totalPendientesPR + data[i].total
                    }
                }
            }));

            comprasPendientesRecepcion.$promise.then(angular.bind(this, function(data) {
                this.totalPendientesRecepcion = 0;
                for (var i in data) {
                    if (data[i].deleted === false) {
                        this.totalPendientesRecepcion = this.totalPendientesRecepcion + data[i].total
                    }
                }
            }));

            comprasFinalizadas.$promise.then(angular.bind(this, function(data) {
                this.totalFinalizadas = 0;
                for (var i in data) {
                    if (data[i].deleted === false) {
                        this.totalFinalizadas = this.totalFinalizadas + data[i].total
                    }
                }
            }));

            comprasAnuladas.$promise.then(angular.bind(this, function(data) {
                this.totalAnuladas = 0;
                for (var i in data) {
                    if (data[i].deleted === false) {
                        this.totalAnuladas = this.totalAnuladas + data[i].total
                    }
                }
            }));

            comprasPendienteEvaluacion.$promise.then(angular.bind(this, function(data) {
                this.totalPendienteEvaluacion = 0;
                for (var i in data) {
                    if (data[i].deleted === false) {
                        this.totalPendienteEvaluacion = this.totalPendienteEvaluacion + data[i].total
                    }
                }
            }));
            comprasPendienteAprobacion.$promise.then(angular.bind(this, function(data) {
                for (var i in data) {
                    if (data[i].deleted === false) {
                        this.totalPendienteEvaluacion = this.totalPendienteEvaluacion + data[i].total
                    }
                }
            }));
        }; //end montoTotal


        function showAdvanced(ev, item) {
            $mdDialog.show({
                    controller: DialogController,
                    templateUrl: '/modules/compras/views/modal.client.view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true,
                    resolve: {
                        item: function() {
                            return item;
                        }
                    }
                })
                .then(function(answer) {
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.status = 'You cancelled the dialog.';
                });
        } //end showAdvanced

        function showAdvancedRecibidos(ev, item) {
            $mdDialog.show({
                    controller: DialogController,
                    templateUrl: '/modules/compras/views/modalPagar.client.view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true,
                    resolve: {
                        item: function() {
                            return item;
                        }
                    }
                })
                .then(function(answer) {
                    $http.post('/api/impuestos/updateTotal', {
                        month: (new Date()).getMonth(),
                        year: (new Date()).getFullYear()
                    });
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.status = 'You cancelled the dialog.';
                });
        } //end showAdvanced

        $scope.scrollTo = function(id) {
            console.log('scrolll');
            $location.hash(id);
            $anchorScroll();
        };

        //****PARA LA EXTRACCION DEL PDF

        function extraerCompra(item) {
            var promise = asyncAsignarCompra(item);
            promise.then(function(response) {
                printIt();
            });
        } //end extraerCompra

        function extraerListado(n) {
            if (n === 1) {
                printItListado();
            }

            if (n === 2) {
                printItListadoRecibir();
            }

            if (n === 3) {
                printItListadoPagar();
            }

            if (n === 4) {
                printItListadoFin();
            }


        }

        function asyncAsignarCompra(item) {
            var deferred = $q.defer();
            $scope.compra = item;
            setTimeout(function() {
                if ($scope.compra !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        } //end asyncAsignarCompra

        function printIt() {
            var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-compra').value;
            var c = document.getElementById('printing-data-compra').innerHTML;
            window.frames["print_frame_compra"].document.title = 'IM - Compra';
            window.frames["print_frame_compra"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_compra"].window.focus();
            window.frames["print_frame_compra"].window.print();
        } //end printIt

        function printItListado() {
            var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-listado').value;
            var c = document.getElementById('printing-data-listado').innerHTML;
            window.frames["print_frame_listado"].document.title = 'IM - Pedidos Realizados ';
            window.frames["print_frame_listado"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_listado"].window.focus();
            window.frames["print_frame_listado"].window.print();
        } //end printIt

        function printItListadoRecibir() {
            var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-recibir').value;
            var c = document.getElementById('printing-data-recibir').innerHTML;
            window.frames["print_frame_recibir"].document.title = 'IM - Pedidos a Recibir ';
            window.frames["print_frame_recibir"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_recibir"].window.focus();
            window.frames["print_frame_recibir"].window.print();
        } //end printIt

        function printItListadoPagar() {
            var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-pagar').value;
            var c = document.getElementById('printing-data-pagar').innerHTML;
            window.frames["print_frame_pagar"].document.title = 'IM - Pedidos a Pagar ';
            window.frames["print_frame_pagar"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_pagar"].window.focus();
            window.frames["print_frame_pagar"].window.print();
        } //end printIt

        function printItListadoFin() {
            var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-fin').value;
            var c = document.getElementById('printing-data-fin').innerHTML;
            window.frames["print_frame_fin"].document.title = 'IM - Pedidos Finalizados ';
            window.frames["print_frame_fin"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_fin"].window.focus();
            window.frames["print_frame_fin"].window.print();
        } //end printIt

        function httpGet(theUrl) {
            var xmlHttp = null;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", theUrl, false);
            xmlHttp.send(null);
            return xmlHttp.responseText;
        } //end httpGet

        //****FIN EXTRACCION DEL PDF

        // definicion de funciones BottomSheet
        function showBottomSheetRealizada($event, item) {

            var buttons = [{
                    name: 'edit',
                    label: 'Estado',
                    icon: 'call_made'
                },
                {
                    name: 'view',
                    label: 'Ver',
                    icon: 'visibility'
                },
                {
                    name: 'remove',
                    label: 'Anular',
                    icon: 'remove_circle'
                },
                {
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                }
            ];

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'edit':
                        showAdvanced($event, item);
                        break;
                    case 'view':
                        $state.go('home.viewCompra', { compraId: item._id });
                        break;
                    case 'remove':
                        showConfirm($event, item);
                        break;
                    case 'print':
                        extraerCompra(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetPendienteEvaluacion($event, item) {

            var buttons = [];
            if (item.estado != 'pendiente evaluacion' && this.user.roles[0] != 'compras') {
                buttons.push({
                    name: 'approve',
                    label: 'Aprobado',
                    icon: 'done'
                });
            }

            if (item.estado == 'pendiente evaluacion' && this.user.roles[0] != 'compras') {
                buttons.push({
                    name: 'view1',
                    label: 'Ver',
                    icon: 'visibility'
                });
            } else {
                buttons.push({
                    name: 'view2',
                    label: 'Ver',
                    icon: 'visibility'
                });
            }

            if (item.estado != 'pendiente evaluacion') {
                buttons.push({
                    name: 'clear',
                    label: 'Rechazar',
                    icon: 'delete'
                });
            }

            if ((cambio.user.roles[0] != 'compras') && (cambio.tipoOrden == 'venta')) {
                buttons.push({
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                })
            }

            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'approve':
                        showConfirmPendienteEvaluacion($event, item, 1);
                        break;
                    case 'view1':
                        evaluarPendienteEvaluacion(item, 5);
                        break;
                    case 'view2':
                        $state.go('home.viewPedido', { pedidoId: item._id });
                        break;
                    case 'clear':
                        showConfirmPendienteEvaluacion($event, item, 2);
                        break;
                    case 'print':
                        extraerPedidoPendienteEvaluacion(item, 1);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        }

        function showBottomSheetRecebidos($event, item) {

            var buttons = [{
                    name: 'finalize',
                    label: 'Finalizar',
                    icon: 'done'
                },
                {
                    name: 'view',
                    label: 'Ver',
                    icon: 'visibility'
                },
                {
                    name: 'remove',
                    label: 'Anular',
                    icon: 'close'
                },
                {
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                }
            ];


            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'finalize':
                        showAdvancedRecibidos($event, item);
                        break;
                    case 'view':
                        $state.go('home.viewCompra', { compraId: item._id });
                        break;
                    case 'remove':
                        showConfirm($event, item);
                        break;
                    case 'print':
                        extraerCompra(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetFinalizada($event, item) {

            var buttons = [{
                    name: 'view',
                    label: 'Ver',
                    icon: 'visibility'
                },
                {
                    name: 'remove',
                    label: 'Eliminar',
                    icon: 'remove_circle'
                },
                {
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                }
            ];

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'view':
                        $state.go('home.viewCompra', { compraId: item._id });
                        break;
                    case 'remove':
                        borrarCompra(item);
                        break;
                    case 'print':
                        extraerCompra(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetAnulada($event, item) {

            var buttons = [{
                    name: 'view',
                    label: 'Ver',
                    icon: 'visibility'
                },
                {
                    name: 'remove',
                    label: 'Eliminar',
                    icon: 'remove_circle'
                },
                {
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                }
            ];

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'view':
                        $state.go('home.viewCompra', { compraId: item._id });
                        break;
                    case 'remove':
                        borrarCompra(item);
                        break;
                    case 'print':
                        extraerCompra(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        // TABLA PAGINACION

        /*$scope.selected = [];

         $scope.query = {
         order: 'created',
         limit: 15,
         page: 1
         };

         var page = 1;
         var limit = 15;

         $scope.logPagination = function (page, limit) {
         console.log('page: ', page);
         console.log('limit: ', limit);
         };

         $scope.logOrder = function (order) {
         console.log('order: ', order);
         };*/

        // FIN TABLA PAGINACION


        function DialogController($scope, $mdDialog, item, $rootScope, Socket, Cajas) {

            $scope.itemElegido = false;
            $scope.habilitarFecha = false;
            $scope.habilitarFechaPago = false;

            $scope.item = item; //es la venta que tengo que actualizar

            $scope.error = undefined;
            $scope.errorCaja = undefined;

            $scope.elegido = function(n) {
                $scope.error = undefined;
                $scope.itemElegido = true;
                $scope.habilitarFecha = true;
                if (n === 2) {
                    $scope.habilitarFechaPago = true;
                } else {
                    $scope.habilitarFechaPago = false;
                }
            };

            $scope.hide = function() {
                $scope.itemElegido = false;
                $mdDialog.hide();
            };

            $scope.cancel = function() {
                $scope.itemElegido = false;
                $mdDialog.cancel();
            };

            $scope.findCajas = function() {
                $scope.cajas = Cajas.query({ e: item.enterprise._id });
            }

            $scope.actualizarCompra = function(data) {
                if ($scope.itemElegido === true) {
                    var compra = $scope.item;

                    if (data === 'pagado') { //el nuevo recibido
                        var estado = 'Pendiente de recepcion';
                        if (this.fechaRecepcion !== undefined) {
                            $scope.error = undefined;
                            compra.fechaRecepcion = this.fechaRecepcion;
                            updateCompra(compra, estado);
                        } else {
                            $scope.error = 'Debe seleccionar la fecha de recepcion del pedido';
                        }
                    }
                    if (data === 'recibido2') {
                        var estado = 'Pendiente de pago2';
                        updateCompra(compra, estado);
                    }
                    if (data === 'pYr2') {
                        var estado = 'Finalizada';
                        updateCompra(compra, estado);
                    }
                    if (data === 'pYr') {
                        var estado = 'Finalizada';
                        if (this.fechaRecepcion !== undefined) {
                            $scope.error = undefined;
                            compra.fechaRecepcion = this.fechaRecepcion;
                            if (this.fechaPago !== undefined) {
                                $scope.error = undefined;
                                compra.fechaPago = this.fechaPago;
                                if ($scope.item.condicionVenta.name !== 'Cuenta Corriente') {
                                    if (this.caja !== undefined) {
                                        compra.caja = this.caja;
                                        updateCompra(compra, estado);
                                    } else {
                                        $scope.errorCaja = 'Debe seleccionar la caja';
                                    }
                                } else {
                                    compra.caja = undefined;
                                }
                            } else {
                                $scope.error = 'Debe seleccionar la fecha de pago del pedido';
                            }
                        } else {
                            $scope.error = 'Debe seleccionar la fecha de recepcion del pedido';
                        }

                    }
                }
            }; //end actualizarCompra

            $scope.finalizarCompra = function(item) {
                var estado = 'Finalizada';
                if ($scope.item.condicionVenta.name !== 'Cuenta Corriente') {
                    if (this.caja !== undefined) {
                        item.caja = this.caja._id;
                        updateCompra(item, estado);
                    } else {
                        $scope.errorCaja = 'Debe seleccionar la caja';
                    }
                } else {
                    item.caja = undefined;
                    updateCompra(item, estado);
                }
            };

            function updateCompra(compra, estado) {

                compra.estado = estado;

                compra.enterprise = compra.enterprise._id;
                compra.tipoComprobante = compra.tipoComprobante._id;
                compra.proveedor = compra.proveedor._id;
                compra.condicionVenta = compra.condicionVenta._id;
                if (compra.category !== undefined) {
                    compra.category == compra.category._id
                };

                $mdDialog.hide();
                console.log("Comprice");
                console.log(compra);
                Socket.emit('compra.update', compra);
            };

            $scope.habilitarActualizar = function() {
                $scope.itemElegido = true;
                $scope.errorFecha = undefined;
            }; //end habilitarActualizar

            $scope.actualizarCompraRecepcion = function() {
                if ($scope.itemElegido === true) {
                    var compra = $scope.item;

                    compra.estado = 'Finalizada';
                    if (this.recibida !== undefined) {
                        compra.fechaRecepcion = this.recibida;
                    } else {
                        $scope.errorFecha = 'Seleccionar la fecha de recibo de compra';
                    }

                    //  la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
                    // una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
                    // hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id
                    compra.enterprise = compra.enterprise._id;
                    compra.tipoComprobante = compra.tipoComprobante._id;
                    compra.proveedor = compra.proveedor._id;
                    compra.condicionVenta = compra.condicionVenta._id;

                    compra.$update(function() {
                        $mdDialog.hide();
                        location.reload(true);
                        $location.path('compras');
                    }, function(errorResponse) {
                        $scope.error = errorResponse.data.message;
                    });
                } else {
                    $scope.errorFecha = 'Seleccionar la fecha de recibo de compra';
                }
            }; //end actualizarCompraRecepcion

        }; //end DialogController

    } //end function
]);
angular.module('compras').controller('ViewCompraController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Compras', 'Enterprises', 'Products', '$mdBottomSheet', '$state', '$mdDialog', 'compras', 'compra', '$q', 'HistorialCompras', '$http', 'productos',
    function ($scope, $rootScope, $stateParams, $location, Authentication, Compras, Enterprises, Products, $mdBottomSheet, $state, $mdDialog, compras, compra, $q, HistorialCompras, $http, productos) {
        $scope.authentication = Authentication;

        $scope.$watch('authentication', function () {
            $scope.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
            $scope.findOne();
        });

        $rootScope.compras = compras; // asigno los pedidos que ya busque en el resolve de las rutas
        $scope.compra = compra;

        if(compra.historal == undefined) {
            $scope.historialCompra = compra;
        }        

        $scope.productos = productos;

        $scope.comprobanteEditado = false;
        $scope.modoEdicion = false;
        $scope.modoEdicion2 = false;

        $scope.selectedMode = 'md-scale';
        $scope.selectedDirection = 'left';
    

        // para editar por primera vez
        $scope.activarEdicion = function (compra) {
            $scope.modoEdicion = true;
            $scope.compraVerificada = angular.copy(compra);
            
            if($scope.compraVerificada.fechaRecepcion != undefined){
                var fechaRecepcionDate = new Date($scope.compraVerificada.fechaRecepcion); 
                $scope.compraVerificada.fechaRecepcion = fechaRecepcionDate;
            }
            
            $location.hash('verificacion');
        }; //end activarEdicion

        // para editar la compra verificada
        $scope.activarNuevaEdicion = function (compra) {
            $scope.compraVerificada = angular.copy(compra);
            $scope.modoEdicion2 = true;
        }; //end activarEdicion

        $scope.cerrarEdicion = function (compra) {
            $scope.modoEdicion = false;
            $scope.compraVerificada = undefined;
        }; //end cerrarEdicion

        $scope.cerrarNuevaEdicion = function () {
            $scope.modoEdicion2 = false;
            $scope.compraVerificada = undefined;
        }; //end cerrarEdicion

        $scope.updateCompra = function () {

            $scope.modoEdicion2 = false;
            var compra = $scope.compraVerificada;

            if (compra.enterprise !== undefined) {
                compra.enterprise = compra.enterprise._id
            }
            if (compra.tipoComprobante !== undefined) {
                compra.tipoComprobante = compra.tipoComprobante._id
            }
            if (compra.proveedor !== undefined) {
                compra.proveedor = compra.proveedor._id
            }
            if (compra.condicionVenta !== undefined) {
                compra.condicionVenta = compra.condicionVenta._id
            }

            modificarPrecioProducto(compra);

            compra.$update(function () {
                $scope.findOne();
                $scope.compraVerificada = undefined;
            }, function (errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.eliminarProducto = function (p) {
            for (var i in $scope.compraVerificada.products) {
                if ($scope.compraVerificada.products[i].product._id == p.product._id) {
                    $scope.compraVerificada.products.splice(i, 1);
                }
            }
            console.log($scope.compraVerificada, 'compra');
            $scope.calcularTotalesVerificacion();
        };

        $scope.sumarProductoCompra = function (producto, productoPedido) {
            if (producto !== undefined) {
                if (productoPedido !== undefined) {
                    if (productoPedido.cantidad !== undefined)
                        if (productoPedido.descuento == undefined) {
                            productoPedido.descuento = 0;
                        }
                    var p = {
                        product: {},
                        cantidad: undefined,
                        descuento: 0,
                        total: undefined,
                        subtotal: undefined,
                        observaciones: undefined
                    };
                    var valorDescuento = (producto.costPerUnit * productoPedido.descuento) / 100;
                    var tax1, tax3, tax2 = 0;
                    var totalIva = 0;
                    p.product = producto;
                    p.cantidad = productoPedido.cantidad;
                    p.descuento = productoPedido.descuento;
                    p.observaciones = productoPedido.observaciones;
                    p.subtotal = producto.costPerUnit * productoPedido.cantidad;
                    p.total = (producto.costPerUnit * productoPedido.cantidad) - valorDescuento;
                    $scope.compraVerificada.products.push(p);
                    $scope.calcularTotalesVerificacion();
                    $scope.producto = undefined;
                    $scope.productoPedido.cantidad = undefined;
                    $scope.productoPedido.descuento = undefined;
                    $scope.productoPedido.observaciones = undefined;
                }
                else {
                    $scope.errorCant = 'Se debe indicar una cantidad';
                }
            }
            else {
                $scope.errorProd = 'Se debe seleccionar un producto';
            }
        }; //end sumarProducto

        $scope.showConfirm = function (ev, item, n) {
            switch (n) {
                case 1:
                    var confirm = $mdDialog.confirm()
                        .title('Anular Compra')
                        .content('¿Está seguro que desea anular esta compra?')
                        .ariaLabel('Lucky day')
                        .ok('Anular')
                        .cancel('Cancelar')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function () {
                        item.estado = 'Anulada';
                        $scope.update(item);
                        $scope.montoTotal();
                    }, function () {
                        console.log('cancelaste anular');
                    });
                    break;
                case 2:
                    var confirm = $mdDialog.confirm()
                        .title('Finalizar Compra')
                        .content('¿Confirmar cierre de la compra?')
                        .ariaLabel('Lucky day')
                        .ok('Aceptar')
                        .cancel('Cancelar')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function () {
                        $scope.update(item);
                        $scope.montoTotal();
                    }, function () {
                        console.log('cancelaste pagar');
                    });
                    break;
                case 3:
                    var confirm = $mdDialog.confirm()
                        .title('Guardar Cambios')
                        .content('¿Está seguro que ha terminado?')
                        .ariaLabel('Lucky day')
                        .ok('Guardar')
                        .cancel('Volver')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function () {
                        $scope.historialDeCompra();
                    }, function () {
                        console.log('cancelaste verificar');
                    });
                    break;
            }
        }; //end showConfirm

        $scope.showAdvanced = function (ev, item) {
            $mdDialog.show({
                controller: DialogController,
                templateUrl: '/modules/compras/views/modal.client.view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                resolve: {
                    item: function () {
                        return item;
                    }
                }
            })
                .then(function (answer) {
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });
        }; //end showAdvanced

        $scope.showAdvancedRecibidos = function (ev, item) {
            $mdDialog.show({
                controller: DialogController,
                templateUrl: '/modules/compras/views/modalPagar.client.view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                resolve: {
                    item: function () {
                        return item;
                    }
                }
            })
                .then(function (answer) {
                    // $scope.scrollTo('fin');
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });
        }; //end showAdvanced

        $scope.update = function (item) {
            var compra = item;

            if (this.enterprise !== undefined) {
                compra.enterprise = this.enterprise._id
            } else if ((compra.enterprise !== undefined) && (compra.enterprise !== null)) {
                compra.enterprise = compra.enterprise._id
            }
            ;
            if (this.tipoComprobante !== undefined) {
                compra.tipoComprobante = this.tipoComprobante._id
            } else if ((compra.tipoComprobante !== undefined) && (compra.tipoComprobante !== null)) {
                compra.tipoComprobante = compra.tipoComprobante._id
            }
            ;
            if (this.proveedor !== undefined) {
                compra.proveedor = $scope.proveedor._id
            } else if ((compra.proveedor !== undefined) && (compra.proveedor !== null)) {
                compra.proveedor = compra.proveedor._id
            }
            ;
            if (this.condicionVenta !== undefined) {
                compra.condicionVenta = this.condicionVenta._id
            } else if ((compra.condicionVenta !== undefined) && (compra.condicionVenta !== null)) {
                compra.condicionVenta = compra.condicionVenta._id
            }
            ;

            compra.$update(function () {
                $location.path('compras');
                /*$location.path('compras/' + compra._id);*/
            }, function (errorResponse) {
                $scope.error = errorResponse.data.message;
                console.log($scope.error);
            });
        }; //end update

        $scope.montoTotal = function () {
            $scope.totalPendientesPR = 0;
            $scope.totalPendientesPago = 0;
            $scope.totalPendientesRecepcion = 0;
            $scope.totalFinalizadas = 0;
            $scope.totalAnuladas = 0;
            for (var i = 0; i < $scope.compras.length; i++) {
                if (($scope.compras[i].estado === 'Pendiente de pago y recepcion') && ($scope.compras[i].deleted === false)) {
                    $scope.totalPendientesPR = $scope.totalPendientesPR + $scope.compras[i].total;
                }
                if (($scope.compras[i].estado === 'Pendiente de pago2') && ($scope.compras[i].deleted === false)) {
                    $scope.totalPendientesPago = $scope.totalPendientesPago + $scope.compras[i].total;
                }
                if (($scope.compras[i].estado === 'Pendiente de recepcion') && ($scope.compras[i].deleted === false)) {
                    $scope.totalPendientesRecepcion = $scope.totalPendientesRecepcion + $scope.compras[i].total;
                }
                if (($scope.compras[i].estado === 'Finalizada') && ($scope.compras[i].deleted === false)) {
                    $scope.totalFinalizadas = $scope.totalFinalizadas + $scope.compras[i].total;
                }
                if (($scope.compras[i].estado === 'Anulada') && ($scope.compras[i].deleted === false)) {
                    $scope.totalAnuladas = $scope.totalAnuladas + $scope.compras[i].total;
                }
            }
        }; //end montoTotal

        $scope.historialDeCompra = function () {
            //creo un historial de compra y lo guardo en la bbdd
            var historialCompra = new HistorialCompras({
                compra: $scope.historialCompra,
            });
            // Redirect after save
            historialCompra.$save(function (response) {
                // console.log('se creo el historial con id:', response._id);

                // actualizo la modificacion de la compra despues de guardar el historial
                $scope.modoEdicion = false;
                var compra = $scope.compraVerificada;

                if(compra.historial == undefined) {
                    compra.historial = response;
                }
                
                compra.estado = 'Pendiente de recepcion'; //es el tab recibidos

                /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
                 una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
                 hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

                if (compra.enterprise !== undefined) {
                    compra.enterprise = compra.enterprise._id
                }
                if (compra.tipoComprobante !== undefined) {
                    compra.tipoComprobante = compra.tipoComprobante._id
                }
                if (compra.proveedor !== undefined) {
                    compra.proveedor = compra.proveedor._id
                }
                if (compra.condicionVenta !== undefined) {
                    compra.condicionVenta = compra.condicionVenta._id
                }
                if (compra.caja !== undefined) {
                    compra.caja = compra.caja._id
                }
                if (compra.category !== undefined) {
                    compra.category = compra.category._id
                }

                modificarPrecioProducto(compra);

                compra.$update(function () {
                    $scope.findOne();
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
                $scope.compraVerificada = null;
            }, function (errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        }; //end historialDeCompra

        $scope.findOne = function () {
            Compras.get({compraId: $stateParams.compraId}, function (res) {
                $scope.compra = res;
                if ($scope.compra.historial !== undefined) {
                    $http({
                        method: 'GET',
                        url: '/api/users/byId',
                        params: {userId: $scope.compra.historial.modificadoPor}
                    }).then(function successCallback(response) {
                        // this callback will be called asynchronously
                        // when the response is available
                        $scope.usuarioDeHistorial = response.data;
                    }, function errorCallback(err) {
                        console.log('Error' + err);
                        // called asynchronously if an error occurs
                        // or server returns response with an error status.
                    });
                }
            });
            $scope.historialCompra = Compras.get({
                compraId: $stateParams.compraId
            });
        }; //end findOne

        //modifica productos de una compra ya verificada
        $scope.modificoProducto = function (p) {
            actualizarValoresProducto(p);
            $scope.calcularTotalesVerificacion();
        }; //end modificoProducto

        function actualizarValoresProducto(p) {
            for (var i = 0; i < $scope.compraVerificada.products.length; i++) {
                if ($scope.compraVerificada.products[i]._id == p._id) {
                    console.log($scope.compraVerificada.products[i], 'compra verificada');
                    var total = 0;
                    var desc = $scope.compraVerificada.products[i].descuento * $scope.compraVerificada.products[i].product.costPerUnit / 100;
                    var descTotal = desc * $scope.compraVerificada.products[i].cantidad;
                    total = $scope.compraVerificada.products[i].product.costPerUnit * $scope.compraVerificada.products[i].cantidad;
                    $scope.compraVerificada.products[i].total = total - descTotal;
                    $scope.compraVerificada.products[i].subtotal = total;
                }
            }
        } //end actualizarValoresProducto

        // calcular totales de compra verificada
        $scope.calcularTotalesVerificacion = function () {
            var imp1 = $scope.compraVerificada.proveedor.impuesto1;
            var imp2 = $scope.compraVerificada.proveedor.impuesto2;
            var imp3 = $scope.compraVerificada.proveedor.impuesto3;
            var imp4 = $scope.compraVerificada.proveedor.impuesto4;
            var sub = 0;
            var totTax1 = 0;
            var totTax2 = 0;
            var totTax3 = 0;
            var descP = 0;
            var i;
            var tax1 = [];
            var tax2 = [];
            var tax3 = [];
            if ($scope.compraVerificada.descuentoPorcentaje !== undefined) {
                descP = parseFloat($scope.compraVerificada.descuentoPorcentaje);
            }
            for (i = 0; i < $scope.compraVerificada.products.length; i++) {
                //descuentos
                if ($scope.compraVerificada.products[i].descuento === undefined) {
                    $scope.compraVerificada.products[i].descuento = 0;
                }
                if (($scope.compraVerificada.products[i].cantidad === undefined) || ($scope.compraVerificada.products[i].cantidad === null)) {
                    $scope.compraVerificada.products[i].cantidad = 0;
                }
                if ($scope.compraVerificada.products[i].product.costPerUnit === undefined) {
                    $scope.compraVerificada.products[i].product.costPerUnit = 0;
                }
                var desc = parseFloat($scope.compraVerificada.products[i].descuento) * $scope.compraVerificada.products[i].product.costPerUnit / 100;
                var finalPrice = parseFloat($scope.compraVerificada.products[i].product.costPerUnit) - desc;
                var additionalIva = parseFloat($scope.compraVerificada.products[i].product.tax) * parseFloat(finalPrice) / 100;
                if (parseFloat($scope.compraVerificada.products[i].product.tax) === 10.5) {
                    tax1.push(additionalIva * parseFloat($scope.compraVerificada.products[i].cantidad));
                }
                if (parseFloat($scope.compraVerificada.products[i].product.tax) === 21) {
                    tax2.push(additionalIva * parseFloat($scope.compraVerificada.products[i].cantidad));
                }
                if (parseFloat($scope.compraVerificada.products[i].product.tax) === 27) {
                    tax3.push(additionalIva * parseFloat($scope.compraVerificada.products[i].cantidad));
                }
                sub = sub + parseFloat($scope.compraVerificada.products[i].cantidad) * finalPrice;
            }
            if (tax1.length > 0) {
                for (i = 0; i < tax1.length; i++) {
                    totTax1 = totTax1 + parseFloat(tax1[i]);
                }
            }
            if (tax2.length > 0) {
                for (i = 0; i < tax2.length; i++) {
                    totTax2 = totTax2 + parseFloat(tax2[i]);
                }
            }
            if (tax3.length > 0) {
                for (i = 0; i < tax3.length; i++) {
                    totTax3 = totTax3 + parseFloat(tax3[i]);
                }
            }
            $scope.compraVerificada.subtotal = sub;
            var descV = sub * descP / 100;
            var d = $scope.compraVerificada.descuentoPorcentaje * $scope.compraVerificada.subtotal / 100;
            $scope.compraVerificada.descuentoValor = d;
            $scope.compraVerificada.neto = $scope.compraVerificada.subtotal - d;
            var total1 = $scope.compraVerificada.neto * imp1 / 100;
            var total2 = $scope.compraVerificada.neto * imp2 / 100;
            var total3 = $scope.compraVerificada.neto * imp3 / 100;
            var total4 = $scope.compraVerificada.neto * imp4 / 100;
            $scope.compraVerificada.totalImp = Math.round((total1 + total2 + total3 + total4) * 100) / 100;
            $scope.compraVerificada.tax1 = totTax1;
            $scope.compraVerificada.tax2 = totTax2;
            $scope.compraVerificada.tax3 = totTax3;
            $scope.compraVerificada.totalTax = totTax1 + totTax2 + totTax3;
            $scope.compraVerificada.total = Math.round(($scope.compraVerificada.neto + totTax1 + totTax2 + totTax3 + $scope.compraVerificada.totalImp) * 100) / 100;
        }; //end calcularTotalesV

        //cambia el costo del producto en bbdd cuando se cambia en una compra
        function modificarPrecioProducto(compra) {

            for (var i in compra.products) {
                for (var j in $scope.productos) {
                    if ((compra.products[i].product._id) == $scope.productos[j]._id) {
                        if (compra.products[i].product.costPerUnit != $scope.productos[j].costPerUnit) {
                            $scope.productos[j].costPerUnit = compra.products[i].product.costPerUnit;
                            var product = $scope.productos[j];
                            product.enterprise = product.enterprise._id;
                            product.category2 = product.category2._id;
                            product.provider = product.provider._id;
                            product.$update(function (response) {
                                actualizarReferencias();
                            }, function (errorResponse) {
                                console.log(errorResponse, 'error');
                                $scope.error = errorResponse.data.message;
                            });
                        }

                    }
                }
            }
        } //end modificarPrecioProducto

        //actualiza los productos por si cambio el precio de las MP que lo componen
        function actualizarReferencias() {
            for (var i in $scope.productos) {
                if (($scope.productos[i].esProducto == true) && ($scope.productos[i].reseller == false) && ($scope.productos[i].deleted == false)) {
                    if ($scope.productos[i].produccion.length > 0) {
                        var product = $scope.productos[i];
                        product.enterprise = product.enterprise._id;
                        product.category2 = product.category2._id;
                        product.provider = product.provider._id;
                        product.$update(function (data) {
                            console.log('update referencia ok');
                        }, function (errorResponse) {
                            console.log(errorResponse, 'error');
                            this.error = errorResponse.data.message;
                        });
                    }
                }
            }
        }

        $scope.findProductos = function () {
            if ($scope.SEARCH !== undefined) {
                $scope.products = Products.query({e: $scope.SEARCH.enterprise});
            }
        }; //end findProductos

        //****PARA LA EXTRACCION DEL PDF

        $scope.extraerCompra = function (item) {
            var promise = asyncAsignarCompra(item);
            promise.then(function (response) {
                $scope.printIt();
            });
        }; //end extraerCompra

        function asyncAsignarCompra(item) {
            var deferred = $q.defer();
            $scope.compra = item;
            setTimeout(function () {
                if ($scope.compra !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        } //end asyncAsignarCompra

        $scope.printIt = function () {
            var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-compra').value;
            var c = document.getElementById('printing-data-compra').innerHTML;
            window.frames["print_frame_compra"].document.title = 'IM - Compra';
            window.frames["print_frame_compra"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_compra"].window.focus();
            window.frames["print_frame_compra"].window.print();
        }; //end printIt

        function httpGet(theUrl) {
            var xmlHttp = null;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", theUrl, false);
            xmlHttp.send(null);
            return xmlHttp.responseText;
        } //end httpGet

        //****FIN EXTRACCION DEL PDF

        function DialogController($scope, $mdDialog, item, Ventas, Cajas, Socket, $state) {

            $scope.itemElegido = false;
            $scope.habilitarFecha = false;

            $scope.item = item; //es la venta que tengo que actualizar

            $scope.findCajas = function () {
                $scope.cajas = Cajas.query({e: item.enterprise._id});
            };

            $scope.elegido = function (n) {
                $scope.error = undefined;
                $scope.itemElegido = true;
                $scope.habilitarFecha = true;
                $scope.habilitarFechaPago = n === 2;
            };

            $scope.hide = function () {
                $scope.itemElegido = false;
                $mdDialog.hide();
            };

            $scope.cancel = function () {
                $scope.itemElegido = false;
                $mdDialog.cancel();
            };

            $scope.finalizarCompra = function (item) {
                var estado = 'Finalizada';
                if ($scope.item.condicionVenta.name !== 'Cuenta Corriente') {
                    if (this.caja !== undefined) {
                        item.caja = this.caja._id;
                        updateCompra(item, estado);
                    }
                    else {
                        $scope.errorCaja = 'Debe seleccionar la caja';
                    }
                }
                else {
                    item.caja = undefined;
                    updateCompra(item, estado);
                }
            };

            $scope.actualizarCompra = function (data) {
                if ($scope.itemElegido === true) {
                    var compra = $scope.item;
                    var estado = "";

                    if (data === 'pagado') { //el nuevo recibido
                        estado = 'Pendiente de recepcion';
                        if (this.fechaRecepcion !== undefined) {
                            $scope.error = undefined;
                            compra.fechaRecepcion = this.fechaRecepcion;
                            updateCompra(compra, estado);
                        }
                        else {
                            $scope.error = 'Debe seleccionar la fecha de recepcion del pedido';
                        }
                    }
                    if (data === 'pYr2') {
                        estado = 'Finalizada';
                        updateCompra(compra, estado);
                    }
                    if (data === 'pYr') {
                        estado = 'Finalizada';
                        if (this.fechaRecepcion !== undefined) {
                            $scope.error = undefined;
                            compra.fechaRecepcion = this.fechaRecepcion;
                            if (this.fechaPago !== undefined) {
                                $scope.error = undefined;
                                compra.fechaPago = this.fechaPago;
                                if ($scope.item.condicionVenta.name !== 'Cuenta Corriente') {
                                    if (this.caja !== undefined) {
                                        compra.caja = this.caja;
                                        updateCompra(compra, estado);
                                    }
                                    else {
                                        $scope.errorCaja = 'Debe seleccionar la caja';
                                    }
                                }
                                else {
                                    compra.caja = undefined;
                                }
                            }
                            else {
                                $scope.error = 'Debe seleccionar la fecha de pago del pedido';
                            }
                        }
                        else {
                            $scope.error = 'Debe seleccionar la fecha de recepcion del pedido';
                        }

                    }
                }
            }; //end actualizarCompra

            function updateCompra(compra, estado) {

                compra.estado = estado;

                compra.enterprise = compra.enterprise._id;
                compra.tipoComprobante = compra.tipoComprobante._id;
                compra.proveedor = compra.proveedor._id;
                compra.condicionVenta = compra.condicionVenta._id;
                if (compra.category !== undefined) {
                    compra.category = compra.category._id
                }
                ;

                $mdDialog.hide();
                Socket.emit('compra.update', compra);
                $state.go('home.compras');
            }

            // Socket.on('compra.update', angular.bind(this, function(message) {
            // 	$state.go('home.compras');
            // }));

            $scope.habilitarActualizar = function () {
                $scope.itemElegido = true;
                $scope.errorFecha = undefined;
            }; //end habilitarActualizar

            $scope.actualizarCompraRecepcion = function () {
                if ($scope.itemElegido === true) {
                    var compra = $scope.item;

                    compra.estado = 'Finalizada';
                    if (this.recibida !== undefined) {
                        compra.fechaRecepcion = this.recibida;
                    }
                    else {
                        $scope.errorFecha = 'Seleccionar la fecha de recibo de compra';
                    }

                    //  la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
                    // una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
                    // hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id
                    compra.enterprise = compra.enterprise._id;
                    compra.tipoComprobante = compra.tipoComprobante._id;
                    compra.proveedor = compra.proveedor._id;
                    compra.condicionVenta = compra.condicionVenta._id;

                    compra.$update(function () {
                        $mdDialog.hide();
                        location.reload(true);
                        $location.path('compras');
                    }, function (errorResponse) {
                        $scope.error = errorResponse.data.message;
                    });
                }
                else {
                    $scope.errorFecha = 'Seleccionar la fecha de recibo de compra';
                }
            }; //end actualizarCompraRecepcion

        }//end DialogController

    } //end function
]);

'use strict';

//Compras service used to communicate Compras REST endpoints
angular.module('compras').factory('Compras', ['$resource',
	function($resource) {
		return $resource('api/compras/:compraId', { compraId: '@_id', e: '@enterprise', i: '@product', w: '@filterDate.week', y: '@filterDate.year', estado: '@estado', p: '@p', pcount: '@pcount'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

//Reportes service used to communicate Reportes REST endpoints
angular.module('compras').factory('ComprasExtra', ['$http',
    function($http) {
        return {
            select: function(estado, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/compras/select",
                    params: {
                        e: enterprise,
                        estado: estado
                    }
                });
            },
            loadMore: function (enterprise, estado, last, limit) {
                return $http({
                    method: "get",
                    url: "/api/compras/loadmore",
                    params: {
                        e: enterprise,
                        last: last,
                        limit: limit,
                        estado: estado
                    }
                })
            },
            search: function (enterprise, estado,search ) {
                return $http({
                    method: "get",
                    url: "/api/compras/search",
                    params: {
                        e: enterprise,
                        estado: estado,
                        search: search
                    }
                })
            },
            loadMoreImpuestos: function (impuesto, last, limit, year, month) {
                return $http({
                    method: "get",
                    url: "/api/compras/loadmoreImpuestos",
                    params: {
                        impuesto: impuesto,
                        last: last,
                        limit: limit,
                        year: year,
                        month: month
                    }
                })
            }
        }
    }
]);

'use strict';

// Configuring the Comprobantes module
angular.module('comprobantes').run(['Menus',
	function(Menus) {
		// Add the Comprobantes dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Comprobantes',
			state: 'comprobantes',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'comprobantes', {
			title: 'List Comprobantes',
			state: 'comprobantes.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'comprobantes', {
			title: 'Create Comprobante',
			state: 'comprobantes.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('comprobantes').config(['$stateProvider',
	function($stateProvider) {
		// Comprobantes state routing
		$stateProvider.
		state('__comprobantes', {
			abstract: true,
			url: '/__comprobantes',
			template: '<ui-view/>'
		}).
		state('__comprobantes.list', {
			url: '',
			templateUrl: 'modules/comprobantes/views/list-comprobantes.client.view.html'
		}).
		state('__comprobantes.create', {
			url: '/create',
			templateUrl: 'modules/comprobantes/views/create-comprobante.client.view.html'
		}).
		state('__comprobantes.view', {
			url: '/:comprobanteId',
			templateUrl: 'modules/comprobantes/views/view-comprobante.client.view.html'
		}).
		state('__comprobantes.edit', {
			url: '/:comprobanteId/edit',
			templateUrl: 'modules/comprobantes/views/edit-comprobante.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('comprobantes').controller('ComprobantesCreateController', ['user', 'comprobante', 'enterprises', 'modosFacturacion', '$state', 'comprobantes',
	function(user, comprobante, enterprises, modosFacturacion, $state, comprobantes) {

		// asignacion de modelos
		this.user = user;
		this.comprobante = comprobante;
		this.enterprises = enterprises;
		this.modosFacturacion = modosFacturacion;

		// asignacion de funciones
		this.create = create;

		// definicion de funciones
		// Create new Comprobante
		function create () {
			// Create new Comprobante object
			var comprobante = new comprobantes ({
				name: this.name,
				letra: this.letra,
				puntoDeVenta: this.puntoDeVenta,
				modoFacturacion: this.modo,
				movimientoStock: this.movimientoStock,
				movimientoCC: this.movimientoCC,
				movimientoOperacionInversa: this.movimientoOperacionInversa,
				funcionalidadSituacion: this.funcionalidadSituacion,
				autoAprobar: this.autoAprobar,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id,
			});

			// Redirect after save
			comprobante.$save(function(response) {
				if(response._id) {
					// agregar sub al array
					$state.go('home.comprobantes');

				}
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};

	}
]);

'use strict';

// Comprobantes controller
angular.module('comprobantes').controller('ComprobantesEditController', ['user', 'comprobante', 'enterprises', 'modosFacturacion', '$location',
	function(user, comprobante, enterprises, modosFacturacion, $location) {

		// asignacion de modelos
		this.user = user;
		this.comprobante = comprobante;
		this.enterprises = enterprises;
		this.modosFacturacion = modosFacturacion;

		// asignacion de funciones
		this.update = update;

		// definicion de funciones
		// Update existing Comprobante
		function update () {
			// console.log(this.comprobante.enterprise, 'ent');
			// console.log(this.comprobante, 'comp');
			var comprobante = this.comprobante ;

			if (this.enterprise !== undefined) { comprobante.enterprise = this.enterprise._id } else { comprobante.enterprise = comprobante.enterprise._id };
			if (this.modoFacturacion !== undefined) { comprobante.modoFacturacion = this.modoFacturacion } else { comprobante.modoFacturacion = comprobante.modoFacturacion };

			// comprobante.$update(function() {
			// 	$location.path('comprobantes/view/' + comprobante._id);
			// }, function(errorResponse) {
			// 	this.error = errorResponse.data.message;
			// });
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('comprobantes').controller('ComprobantesListController', ['$location', 'user', 'comprobantes', 'enterprises', '$mdDialog', 'modosFacturacion',
	function($location, user, comprobantes, enterprises, $mdDialog, modosFacturacion) {

		// asignacion de modelos
		this.user = user;
		this.comprobantes = comprobantes;
		this.enterprises = enterprises;
		this.modosFacturacion = modosFacturacion;

		// asignacion de funciones
		this.showConfirm = showConfirm;
		this.remove = remove;

		// definicion de funciones
		function showConfirm (ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar tipo de Comprobante')
	          .content('¿Está seguro que desea eliminar este tipo de Comprobante?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Comprobante
		function remove ( comprobante ) {
			if ( comprobante ) { comprobante.$remove();
			} else {
				this.comprobante.$remove(function() {
					$location.path('comprobantes');
				});
			}
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('comprobantes').controller('ComprobantesViewController', ['user', 'comprobante',
	function(user, comprobante) {

		// asignacion de modelos
		this.user = user;
		this.comprobante = comprobante;

		// asignacion de funciones

		// definicion de funciones


	}
]);

'use strict';

// Comprobantes controller
angular.module('comprobantes').controller('ComprobantesController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Comprobantes', '$mdBottomSheet', 'Enterprises', '$mdDialog',
	function($scope, $rootScope, $stateParams, $location, Authentication, Comprobantes, $mdBottomSheet, Enterprises, $mdDialog) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		// Create new Comprobante
		$scope.create = function() {
			// Create new Comprobante object
			var comprobante = new Comprobantes ({
				name: this.name,
				letra: this.letra,
				puntoDeVenta: this.puntoDeVenta,
				modoFacturacion: this.modo,
				movimientoStock: this.movimientoStock,
				movimientoCC: this.movimientoCC,
				movimientoOperacionInversa: this.movimientoOperacionInversa,
				funcionalidadSituacion: this.funcionalidadSituacion,
				autoAprobar: this.autoAprobar,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
			});

			// Redirect after save
			comprobante.$save(function(response) {
				if(response._id) {
					// agregar sub al array

					comprobante._id = response._id;
					$rootScope.comprobantes.unshift(comprobante);

				}

				// Clear form fields
				$scope.name = '';
				$scope.letra = '';
				$scope.puntoDeVenta = '';
				$scope.modoFacturacion = '';

				$mdBottomSheet.hide();
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un puesto 
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar tipo de Comprobante')
	          .content('¿Está seguro que desea eliminar este tipo de Comprobante?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Comprobante
		$scope.remove = function( comprobante ) {
			if ( comprobante ) { comprobante.$remove();

				for (var i in $scope.comprobantes ) {
					if ($scope.comprobantes [i] === comprobante ) {
						$scope.comprobantes.splice(i, 1);
					}
				}
			} else {
				$scope.comprobante.$remove(function() {
					$location.path('comprobantes');
				});
			}
		};

		// Update existing Comprobante
		$scope.update = function() {
			var comprobante = $scope.comprobante ;

			if (this.enterprise !== undefined) { comprobante.enterprise = this.enterprise._id } else { comprobante.enterprise = comprobante.enterprise._id };

			comprobante.$update(function() {
				$location.path('comprobantes/view/' + comprobante._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Comprobantes
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.comprobantes = Comprobantes.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		// $scope.findEnterprises = function() {
		// 	if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });}			
		// };

		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find a list of Modos de facturacion
		$scope.findModosF = function() {
			if ($scope.SEARCH !== undefined) { $scope.modosF = ['Comprobante interno', 'Talonario fiscal manual o pre-impreso', 'Factura electronica']; } 
		};

		// Find existing Comprobante
		$scope.findOne = function() {
			console.log($stateParams.comprobanteId, 'comprobante id');
			$scope.comprobante = Comprobantes.get({ 
				comprobanteId: $stateParams.comprobanteId
			});
			console.log($scope.comprobante, 'comprobante')
		};
	}
]);
'use strict';

//Comprobantes service used to communicate Comprobantes REST endpoints
angular.module('comprobantes').factory('Comprobantes', ['$resource',
	function($resource) {
		return $resource('api/comprobantes/:comprobanteId', { comprobanteId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

// Configuring the Condicionventas module
angular.module('condicionventas').run(['Menus',
	function(Menus) {
		// Add the Condicionventas dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Condicionventas',
			state: 'condicionventas',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'condicionventas', {
			title: 'List Condicionventas',
			state: 'condicionventas.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'condicionventas', {
			title: 'Create Condicionventa',
			state: 'condicionventas.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('condicionventas').config(['$stateProvider',
	function($stateProvider) {
		// Condicionventas state routing
		$stateProvider.
		state('condicionventas', {
			abstract: true,
			url: '/condicionventas',
			template: '<ui-view/>'
		}).
		state('condicionventas.list', {
			url: '',
			templateUrl: 'modules/condicionventas/views/list-condicionventas.client.view.html'
		}).
		state('condicionventas.create', {
			url: '/create',
			templateUrl: 'modules/condicionventas/views/create-condicionventa.client.view.html'
		}).
		state('condicionventas.view', {
			url: '/:condicionventaId',
			templateUrl: 'modules/condicionventas/views/view-condicionventa.client.view.html'
		}).
		state('condicionventas.edit', {
			url: '/:condicionventaId/edit',
			templateUrl: 'modules/condicionventas/views/edit-condicionventa.client.view.html'
		});
	}
]);
'use strict';

// condicionventas controller
angular.module('condicionventas').controller('CondicionventasCreateController', ['user', 'condicionventa', 'enterprises', '$state', 'condicionventas',
	function(user, condicionventa, enterprises, $state, condicionventas) {

		// asignacion de modelos
		this.user = user;
		this.condicionventa = condicionventa;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.create = create;

		// definicion de funciones
		
		// Create new condicionventa
		function create () {
			// Create new condicionventa object
			var condicionventa = new condicionventas ({
				name: this.name,
				description: this.description,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id,
			});

			// Redirect after save
			condicionventa.$save(function(response) {
				if(response._id) {
					// agregar sub al array
					$state.go('home.condicionVentas');

				}
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};
	}
]);
'use strict';

// condicionventas controller
angular.module('condicionventas').controller('CondicionventasEditController', ['user', 'condicionventa', 'enterprises', '$state',
	function(user, condicionventa, enterprises, $state) {

		// asignacion de modelos
		this.user = user;
		this.condicionventa = condicionventa;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.update = update;

		// definicion de funciones
		// Update existing condicionventa
		function update () {
			var condicionventa = this.condicionventa ;

			if (this.enterprise !== undefined) { condicionventa.enterprise = this.enterprise._id } else { condicionventa.enterprise = condicionventa.enterprise._id };

			condicionventa.$update(function() {
				$state.go('home.condicionVentas');
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};
	}
]);

'use strict';

// Condicionventas controller
angular.module('condicionventas').controller('CondicionventasListController', ['$location', '$state', '$mdDialog', 'user', 'enterprises', 'condicionventas',
	function($location, $state, $mdDialog, user, enterprises, condicionventas) {

		// asignacion de modelos
		this.user = user;
		this.enterprises = enterprises;
		this.condicionventas = condicionventas;

		// asignacion de funciones
		this.showConfirm = showConfirm;
		this.remove = remove;

		// definicion de funciones
		function showConfirm (ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar condicion de venta')
	          .content('¿Está seguro que desea eliminar esta condicion de venta?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Condicionventa
		function remove ( condicionventa ) {
			if ( condicionventa ) { condicionventa.$remove();
			} else {
				this.condicionventa.$remove(function() {
					// $location.path('condicionventas');
				});
			}
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('condicionventas').controller('CondicionventasViewController', ['user', 'condicionventa',
	function(user, condicionventa) {

		// asignacion de modelos
		
		this.user = user;
		this.condicionventa = condicionventa;

		// asignacion de funciones

		// definicion de funciones
	}
]);

'use strict';

// Condicionventas controller
angular.module('condicionventas').controller('CondicionventasController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Condicionventas', '$mdBottomSheet', 'Enterprises', '$mdDialog',
	function($scope, $rootScope, $stateParams, $location, Authentication, Condicionventas, $mdBottomSheet, Enterprises, $mdDialog) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		// Create new Condicionventa
		$scope.create = function() {
			// Create new Condicionventa object
			var condicionventa = new Condicionventas ({
				name: this.name,
				description: this.description,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
			});

			console.log(condicionventa.enterprise, "empresa");

			// Redirect after save
			condicionventa.$save(function(response) {
				if(response._id) {
					// agregar sub al array

					condicionventa._id = response._id;
					$rootScope.condicionventas.unshift(condicionventa);

				}

				// Clear form fields
				$scope.name = '';
				$scope.description = '';

				$mdBottomSheet.hide();

			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un puesto 
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Condicion de pago')
	          .content('¿Está seguro que desea eliminar esta condicion de pago?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Condicionventa
		$scope.remove = function( condicionventa ) {
			if ( condicionventa ) { condicionventa.$remove();

				for (var i in $scope.condicionventas ) {
					if ($scope.condicionventas [i] === condicionventa ) {
						$scope.condicionventas.splice(i, 1);
					}
					console.log($scope.condicionventas, 'array luego de delete');
				}
			} else {
				$scope.condicionventa.$remove(function() {
					$location.path('condicionventas');
				});
			}
		};

		// Update existing Condicionventa
		$scope.update = function() {
			var condicionventa = $scope.condicionventa ;

			/* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
			una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no 
			hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

			if (this.enterprise !== undefined) { condicionventa.enterprise = this.enterprise._id } else { condicionventa.enterprise = condicionventa.enterprise._id };

			condicionventa.$update(function() {
				$location.path('condiciones-pago/view/' + condicionventa._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Condicionventas
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.condicionventas = Condicionventas.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find existing Condicionventa
		$scope.findOne = function() {
			$scope.condicionventa = Condicionventas.get({ 
				condicionventaId: $stateParams.condicionventaId
			});
		};

		//find lista de empresas
		// $scope.findEnterprises = function() {
		// 	if ($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise }); }			
		// };

		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};
	}
]);
'use strict';

//Condicionventas service used to communicate Condicionventas REST endpoints
angular.module('condicionventas').factory('Condicionventas', ['$resource',
	function($resource) {
		return $resource('api/condicionventas/:condicionventaId', { condicionventaId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

//Condicionventas service used to communicate Condicionventas REST endpoints
// angular.module('condicionventas').factory('Condicionventas', ['$resource',
// 	function($resource) {
// 		return $resource('api/condicionventas', { e: '@enterprise'
// 		}, {
// 			update: {
// 				method: 'PUT'
// 			}
// 		});
// 	}
// ]);
'use strict';

// Configuring the Contacts module
angular.module('contacts').run(['Menus',
	function(Menus) {
		// Add the Contacts dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Contacts',
			state: 'contacts',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'contacts', {
			title: 'List Contacts',
			state: 'contacts.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'contacts', {
			title: 'Create Contact',
			state: 'contacts.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('contacts').config(['$stateProvider',
	function($stateProvider) {
		// Contacts state routing
		$stateProvider.
		state('contacts', {
			abstract: true,
			url: '/contacts',
			template: '<ui-view/>'
		}).
		state('contacts.list', {
			url: '',
			templateUrl: 'modules/contacts/views/list-contacts.client.view.html'
		}).
		state('contacts.create', {
			url: '/create',
			templateUrl: 'modules/contacts/views/create-contact.client.view.html'
		}).
		state('contacts.view', {
			url: '/:contactId',
			templateUrl: 'modules/contacts/views/view-contact.client.view.html'
		}).
		state('contacts.edit', {
			url: '/:contactId/edit',
			templateUrl: 'modules/contacts/views/edit-contact.client.view.html'
		});
	}
]);
'use strict';

// Contacts controller
angular.module('contacts').controller('ContactsController', ['$scope', '$rootScope','$stateParams', '$location', 'Authentication', 'Contacts', 'Enterprises', 'Subs', '$mdBottomSheet', '$mdDialog', '$state',
	function($scope, $rootScope,$stateParams, $location, Authentication, Contacts, Enterprises, Subs, $mdBottomSheet, $mdDialog, $state ) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		$scope.selectedMode = 'md-scale';
	    $scope.selectedDirection = 'up';

		var marker, map;
		  $scope.$on('mapInitialized', function(evt, evtMap) {
		    map = evtMap;
		    marker = map.markers[0];
		  });

		  $scope.types = "['address']";
         $scope.placeChanged = function() {
           $scope.place = this.getPlace();
           $scope.error = undefined;
         }

		// Create new Contact
		$scope.create = function() {
			if($scope.place!==undefined){
				var latitud = $scope.place.geometry.location.lat();
				var longitud = $scope.place.geometry.location.lng();
				// Create new Contact object
				var contact = new Contacts ({
					firstName: this.firstName,
					lastName: this.lastName,
					email: this.email,
					observaciones: this.observaciones,
					address: this.address,
					city: this.city,
					region: this.region ? this.region : undefined,
					country: this.country,
					phone: this.phone,
					loc: [latitud, longitud],
					//fax: this.fax,
					web: this.web,
					// postalCode: this.postalCode,
					status: 'active',
					enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise //,
					//sub: this.sub._id

				});

				// Redirect after save
				contact.$save(function(response) {
					//$location.path('contacts/' + response._id);
					if(response._id) {
						// agregar sub al array

						contact._id = response._id;
						$rootScope.contacts.unshift(contact);

					}

					$state.go('home.contacts');

					// Clear form fields
					$scope.firstName = '';
					$scope.lastName = '';
					$scope.email = '';
					$scope.address = '';
					$scope.city = '';
					$scope.region = '';
					$scope.country = '';
					$scope.phone = '';
					$scope.fax = '';
					$scope.web = '';
					$scope.postalCode = '';
					$mdBottomSheet.hide();
				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});
			} else {
				$scope.error = 'Tenes que igresar una ubicacion para el contacto.Ej:"La Plata" ';
			}
		};

		// Update existing Contact
		$scope.update = function() {
			var contact = $scope.contact ;

			if (this.enterprise !== undefined) { contact.enterprise = this.enterprise._id } else if((contact.enterprise!==undefined)&&(contact.enterprise!==null)){ contact.enterprise = contact.enterprise._id};
			if (this.sub !== undefined) { contact.sub = this.sub._id } else if((contact.sub!==undefined)&&(contact.sub!==null)){ contact.sub = contact.sub._id};
			if (this.city !== undefined) { contact.city = this.city } else if((contact.city!==undefined)&&(contact.city!==null)){ contact.city = contact.city};
			if ($scope.place !== undefined) { contact.loc = [ $scope.place.geometry.location.lat(), $scope.place.geometry.location.lng()]} else if((contact.loc!==undefined)&&(contact.loc!==null)){ contact.loc = contact.loc };
			//if (this.sub !== undefined) { contact.sub = this.sub._id };

			contact.$update(function() {
				// console.log('actualice');
				$location.path('contactos');
			}, function(errorResponse) {
				// console.log(errorResponse);
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Contacts
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.contacts = Contacts.query({ e: $scope.SEARCH.enterprise }); }

		};

		// Find a list of SBUs
		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find a list of SBUs
		$scope.findSubs = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.subs = Subs.query({ e: $scope.SEARCH.enterprise });
			}

		};

		// Find a list of Enterprises
		$scope.findCitys = function() {
			if ($scope.SEARCH !== undefined) { $scope.citys = ['Berisso', 'Ensenala', 'La Plata']; } // ToDo:  migrate this to a factory

		};

		// Find existing Contact
		$scope.findOne = function() {
			$scope.contact = Contacts.get({
				contactId: $stateParams.contactId
			});
		};

		$scope.showBottomSheet = function($event, item, model, param) {
			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	//console.log('estadoactual: ', $rootScope.estadoActual);
	    	$mdBottomSheet.show({
	    	  controller: DialogController,
		      templateUrl: template,
		      // controller: 'ListBottomSheetCtrl',
		      targetEvent: $event,
		      resolve: {
		         item: function () {
		           return item;
		         }
		       }

		    }).then(function(clickedItem) {
		    	//$mdBottomSheet.hide();
		    	console.log('por aqui ando');
		    });
	  	};

	  	function DialogController($scope, $mdDialog, item, Areas) {

	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
						$state.go(state, params);
						$mdBottomSheet.hide();
				}
			}

			//abre modal para eliminar un contacto
			$scope.showConfirm = function(ev,item) {
				var confirm = $mdDialog.confirm()
		          .title('Eliminar Contacto')
		          .content('¿Está seguro que desea eliminar este contacto?')
		          .ariaLabel('Lucky day')
		          .ok('Eliminar')
		          .cancel('Cancelar')
		          .targetEvent(ev);
			    $mdDialog.show(confirm).then(function() {
			      $scope.remove(item);
			    }, function() {
			      console.log('cancelaste borrar');
			    });
			};

			// Remove existing Contact
			$scope.remove = function( contact ) {
				if ( contact ) { contact.$remove();

					for (var i in $scope.contacts ) {
						if ($scope.contacts [i] === contact ) {
							$scope.contacts.splice(i, 1);
						}
					}
				} else {
					$scope.contact.$remove(function() {
						$location.path('contacts');
					});
				}
			};
		};		
	}
]);

'use strict';

//Contacts service used to communicate Contacts REST endpoints
angular.module('contacts').factory('Contacts', ['$resource',
	function($resource) {
		return $resource('api/contacts/:contactId', { contactId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Setting up route
angular.module('core').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider, $scope) {
        // Redirect to home view when route not found
        $urlRouterProvider.when('/', '/authentication/signin');
        $urlRouterProvider.otherwise('/authentication/signin');

        // Home state routing
        $stateProvider.state('home', {
                url: '/',
                abstract: true,
                newButton: false,
                templateUrl: 'modules/core/views/home.client.view.html',
                prevState: 'home.welcome',
            })
            .state('home.welcome', {
                url: 'welcome',
                titulo: 'Bienvenido',
                newButton: false,
                templateUrl: 'modules/core/views/welcome.client.view.html',
                resolve: {
                  serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                  }
                },
                controller: function() {}
            })
            // MEETUP related states
            .state('home.meetup', {
                url: 'meetup',
                titulo: '#MEETUP',
                templateUrl: 'modules/chat/views/chat.client.view.html', //'modules/core/views/meetup.client.view.html',
                prevState: 'home.welcome',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                controller: function() {},
            })
            // MI PERFIL related states
            .state('home.editProfile', {
                url: 'editar-perfil',
                titulo: 'Mi Perfil',
                newButton: false,
                prevState: 'home.welcome',
                templateUrl: 'modules/users/views/settings/edit-profile.client.view.html',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                }
            })
            .state('home.changeProfilePicture', {
                url: 'cambiar-imagen-perfil',
                titulo: 'Mi Perfil',
                newButton: false,
                prevState: 'home.welcome',
                templateUrl: 'modules/users/views/settings/change-profile-picture.client.view.html',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                }
            })
            .state('home.changePassword', {
                url: 'cambiar-contraseña',
                titulo: 'Mi Perfil',
                newButton: false,
                prevState: 'home.welcome',
                templateUrl: 'modules/users/views/settings/change-password.client.view.html'
            })
            .state('home.manageSocialAccounts', {
                url: 'cuentas-sociales',
                titulo: 'Mi Perfil',
                newButton: false,
                prevState: 'home.welcome',
                templateUrl: 'modules/users/views/settings/manage-social-accounts.client.view.html'
            })
            // ENTERPRISES related states
            .state('home.enterprises', {
                url: 'empresas',
                titulo: 'Empresas',
                newButton: true,
                prevState: 'home.welcome',
                templateUrl: 'modules/enterprises/views/list-enterprises.client.view.html',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                }
            })
            .state('home.viewEnterprise', {
                url: 'empresas/view/:enterpriseId',
                titulo: 'Empresas',
                newButton: true,
                prevState: 'home.enterprises',
                templateUrl: 'modules/enterprises/views/view-enterprise.client.view.html'
            })
            .state('home.editEnterprise', {
                url: 'empresas/:enterpriseId/edit',
                titulo: 'Empresas',
                newButton: true,
                prevState: 'home.enterprises',
                templateUrl: 'modules/enterprises/views/edit-enterprise.client.view.html'
            })
            // PRODUCTOS related states
            .state('home.products', {
                url: 'productos?tipo',
                titulo: 'Productos',
                newButton: true,
                prevState: 'home.welcome',
                controller: 'ProductsListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    products: function(Authentication, Products) {
                        return Products.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    tipoProducto: function($stateParams) {
                        return $stateParams.tipo;
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/products/views/list-products.client.view.html'
            })
            .state('home.viewProduct', {
                url: 'productos/view/:productId?back?tipo',
                titulo: '',
                newButton: false,
                prevState: 'home.products',
                controller: 'ProductsViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    product: function($stateParams, Products) {
                        return Products.get({
                            productId: $stateParams.productId
                        });
                    }
                },
                templateUrl: 'modules/products/views/view-product.client.view.html'
            })
            .state('home.editProduct', {
                url: 'productos/:productId/edit?tipo',
                titulo: '',
                newButton: false,
                prevState: 'home.products',
                controller: 'ProductosEditController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    product: function($stateParams, Products) {
                        return Products.get({
                            productId: $stateParams.productId
                        });
                    },
                    productos: function(Authentication, Products) {
                        return Products.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    providers: function(Authentication, Providers) {
                        return Providers.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    tipoProducto: function($stateParams) {
                        return $stateParams.tipo;
                    }
                },
                templateUrl: 'modules/products/views/edit-product.client.view.html'
            })
            .state('home.editValores', {
                url: 'productos/editValores',
                titulo: 'Editar Precios Productos',
                newButton: false,
                prevState: 'home.products',
                templateUrl: 'modules/products/views/edit-valores.client.view.html'
            })
            // CATEGORIES related states
            .state('home.createProduct', {
                url: 'productos/create?tipo',
                prevState: 'home.products',
                titulo: 'Nuevo',
                newButton: false,
                controller: 'ProductosCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    products: function(Products) {
                        return Products;
                    },
                    product: function() {
                        return {}
                    },
                    productos: function(Authentication, Products) {
                        return Products.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    providers: function(Authentication, Providers) {
                        return Providers.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    tipoProducto: function($stateParams) {
                        return $stateParams.tipo;
                    }
                },
                templateUrl: 'modules/products/views/create-product.client.view.html'
            })
            // Categories related states
            .state('home.categories', {
                url: 'categorias',
                titulo: 'Categorias',
                newButton: true,
                prevState: 'home.welcome',
                controller: 'CategoriesListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    // category: function(Authentication, Categories){
                    // 	return Categories.get({
                    // 		categoryId: $stateParams.categoryId
                    // 	});
                    // },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    categoryTypes: function() {
                        return ['cliente', 'contacto', 'Insumo', 'Materia Prima', 'Producto', 'producto venta', 'proveedor', 'tipo producto', 'uen', 'venta', 'Remuneracione'];
                    },
                     serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/categories/views/list-categories.client.view.html'
            })
            .state('home.createCategory', {
                url: 'categories/view/create',
                titulo: 'Crear Categoria',
                prevState: 'home.categories',
                newButton: false,
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    }
                },
                templateUrl: 'modules/categories/views/create-category.client.view.html'
            })
            .state('home.viewCategory', {
                url: 'categorias/view/:categoryId',
                titulo: 'Categoria',
                newButton: true,
                prevState: 'home.categories',
                templateUrl: 'modules/categories/views/view-category.client.view.html'
            })
            .state('home.editCategory', {
                url: 'categorias/:categoryId/edit',
                titulo: 'Categoria',
                newButton: true,
                prevState: 'home.categories',
                templateUrl: 'modules/categories/views/edit-category.client.view.html'
            })
            // UENS related states
            .state('home.subs', {
                url: 'UENs',
                titulo: 'UENs',
                newButton: true,
                prevState: 'home.welcome',
                templateUrl: 'modules/subs/views/list-subs.client.view.html'
            })
            .state('home.viewSub', {
                url: 'UENs/view/:subId',
                titulo: 'UEN',
                newButton: true,
                prevState: 'home.subs',
                templateUrl: 'modules/subs/views/view-sub.client.view.html'
            })
            .state('home.editSub', {
                url: 'UENs/:subId/edit',
                titulo: 'UEN',
                newButton: true,
                prevState: 'home.subs',
                templateUrl: 'modules/subs/views/edit-sub.client.view.html'
            })
            // CLIENT related states
            .state('home.clients', {
                url: 'clientes',
                titulo: 'Clientes',
                newButton: true,
                prevState: 'home.welcome',
                controller: 'ClientsListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    clientes: function(Authentication, Clients) {
                        if (Authentication.user.enterprise.enterprise) {
                            return Clients.query({ e: Authentication.user.enterprise.enterprise });
                        }
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/_clients/views/list-clients.client.view.html'
            })
            .state('home.viewClient', {
                url: 'clientes/view/:clientId',
                titulo: 'Cliente',
                newButton: true,
                prevState: 'home.clients',
                controller: 'ClientsViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    client: function($stateParams, Clients) {
                        return Clients.get({
                            clientId: $stateParams.clientId
                        });
                    },
                    products: function(Authentication, Products) {
                        return Products.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    pedidos: function(Authentication, Pedidos) {
                        return Pedidos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    ventas: function(Authentication, Ventas) {
                        return Ventas.query({ e: Authentication.user.enterprise.enterprise, w: 0, y: 0 });
                    },
                },
                templateUrl: 'modules/_clients/views/view-client.client.view.html'
            })
            .state('home.editClient', {
                url: 'clientes/:clientId/edit',
                titulo: 'Cliente',
                newButton: false,
                prevState: 'home.clients',
                controller: 'ClientsEditController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    clientes: function(Clients) {
                        return Clients;
                    },
                    client: function($stateParams, Clients) {
                        return Clients.get({
                            clientId: $stateParams.clientId
                        });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    uens: function(Authentication, Subs) {
                        return Subs.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    condicionventas: function(Authentication, Condicionventas) {
                        return Condicionventas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    categorias: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    contactos: function(Authentication, Contacts) {
                        return Contacts.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    condicionesdeiva: function(Authentication, Taxconditions) {
                        return Taxconditions.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    comprobantes: function(Authentication, Comprobantes) {
                        return Comprobantes.query({ e: Authentication.user.enterprise.enterprise });
                    }
                },
                templateUrl: 'modules/_clients/views/edit-client.client.view.html'
            })
            .state('home.createClient', {
                url: '_clients/view/create',
                titulo: 'Nuevo Cliente',
                newButton: false,
                prevState: 'home.clients',
                controller: 'ClientsCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    clientes: function(Clients) {
                        return Clients;
                    },
                    users: function(Users) {
                        return Users;
                    },
                    client: function() {
                        return {}
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    uens: function(Authentication, Subs) {
                        return Subs.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    condicionventas: function(Authentication, Condicionventas) {
                        return Condicionventas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    categorias: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    contactos: function(Authentication, Contacts) {
                        return Contacts.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    condicionesdeiva: function(Authentication, Taxconditions) {
                        return Taxconditions.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    comprobantes: function(Authentication, Comprobantes) {
                        return Comprobantes.query({ e: Authentication.user.enterprise.enterprise });
                    }
                },
                templateUrl: 'modules/_clients/views/create-client.client.view.html'
            })
            // PROVIDERS related Stated
            .state('home.providers', {
                url: 'proveedores',
                titulo: 'Proveedores',
                newButton: true,
                prevState: 'home.welcome',
                controller: 'ProvidersListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    providers: function(Authentication, Providers) {
                        return Providers.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/providers/views/list-providers.client.view.html'
            })
            .state('home.viewProvider', {
                url: 'proveedores/view/:providerId',
                titulo: 'Proveedor',
                newButton: true,
                prevState: 'home.providers',
                controller: 'ProvidersViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    provider: function($stateParams, Providers) {
                        return Providers.get({
                            providerId: $stateParams.providerId
                        });
                    },
                    products: function(Authentication, Products) {
                        return Products.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    pedidos: function(Authentication, Pedidos) {
                        return Pedidos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    compras: function(Authentication, Compras) {
                        return Compras.query({ e: Authentication.user.enterprise.enterprise, w: 0, y: 0 });
                    }
                },
                templateUrl: 'modules/providers/views/view-provider.client.view.html'
            })
            .state('home.editProvider', {
                url: 'proveedores/:providerId/edit',
                titulo: 'Proveedor',
                newButton: true,
                prevState: 'home.providers',
                controller: 'ProvidersEditController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    provider: function($stateParams, Providers) {
                        return Providers.get({
                            providerId: $stateParams.providerId
                        });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    contacts: function(Authentication, Contacts) {
                        return Contacts.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    taxconditions: function(Authentication, Taxconditions) {
                        return Taxconditions.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    condicionPagos: function(Authentication, Condicionventas) {
                        return Condicionventas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    comprobantes: function(Authentication, Comprobantes) {
                        return Comprobantes.query({ e: Authentication.user.enterprise.enterprise });
                    },
                },
                templateUrl: 'modules/providers/views/edit-provider.client.view.html'
            })
            .state('home.createProvider', {
                url: 'providers/view/create',
                titulo: 'Nuevo Proveedor',
                newButton: false,
                prevState: 'home.providers',
                controller: 'ProvidersCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    provider: function() {
                        return {}
                    },
                    providers: function(Providers) {
                        return Providers;
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    contacts: function(Authentication, Contacts) {
                        return Contacts.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    taxconditions: function(Authentication, Taxconditions) {
                        return Taxconditions.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    condicionPagos: function(Authentication, Condicionventas) {
                        return Condicionventas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    comprobantes: function(Authentication, Comprobantes) {
                        return Comprobantes.query({ e: Authentication.user.enterprise.enterprise });
                    },
                },
                templateUrl: 'modules/providers/views/create-provider.client.view.html'
            })
            // CONTACTS related states
            .state('home.contacts', {
                url: 'contactos',
                titulo: 'Contactos',
                newButton: true,
                prevState: 'home.welcome',
                templateUrl: 'modules/contacts/views/list-contacts.client.view.html',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                }
            })
            .state('home.createContact', {
                url: 'contactos/view/create',
                titulo: 'Contactos',
                newButton: true,
                prevState: 'home.contacts',
                templateUrl: 'modules/contacts/views/create-contact.client.view.html'
            })
            .state('home.viewContact', {
                url: 'contactos/view/:contactId',
                titulo: 'Contactos',
                newButton: false,
                prevState: 'home.contacts',
                templateUrl: 'modules/contacts/views/view-contact.client.view.html'
            })
            .state('home.editContact', {
                url: 'contactos/:contactId/edit',
                titulo: 'Contactos',
                newButton: false,
                prevState: 'home.contacts',
                templateUrl: 'modules/contacts/views/edit-contact.client.view.html'
            })
            // TaxConditions related states
            .state('home.taxConditions', {
                url: 'condiciones-impuesto',
                titulo: 'Condiciones de impuesto',
                newButton: true,
                prevState: 'home.welcome',
                templateUrl: 'modules/taxconditions/views/list-taxconditions.client.view.html',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                }
            })
            .state('home.viewTaxCondition', {
                url: 'condiciones-impuesto/view/:taxconditionId',
                titulo: 'Condicion de impuesto',
                newButton: true,
                prevState: 'home.taxConditions',
                templateUrl: 'modules/taxconditions/views/view-taxcondition.client.view.html'
            })
            .state('home.editTaxCondition', {
                url: 'condiciones-impuesto/:taxconditionId/edit',
                titulo: 'Condicion de impuesto',
                newButton: true,
                prevState: 'home.taxConditions',
                templateUrl: 'modules/taxconditions/views/edit-taxcondition.client.view.html'
            })
            // Condicion Ventas related states
            .state('home.condicionVentas', {
                url: 'condiciones-pago',
                titulo: 'Condicion de pago',
                newButton: true,
                prevState: 'home.welcome',
                controller: 'CondicionventasListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    condicionventas: function(Authentication, Condicionventas) {
                        return Condicionventas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/condicionventas/views/list-condicionventas.client.view.html'
            })
            .state('home.createCondicionventa', {
                url: 'condiciones-pago/create',
                titulo: 'Crear Condicion de pago',
                prevState: 'home.condicionVentas',
                newButton: false,
                controller: 'CondicionventasCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    condicionventa: function() {
                        return {}
                    },
                    condicionventas: function(Condicionventas) {
                        return Condicionventas;
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/condicionventas/views/create-condicionventa.client.view.html',
            })
            .state('home.viewCondicionVenta', {
                url: 'condiciones-pago/view/:condicionventaId',
                newButton: true,
                titulo: 'Condicion de pago',
                prevState: 'home.condicionVentas',
                controller: 'CondicionventasViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    condicionventa: function($stateParams, Condicionventas) {
                        return Condicionventas.get({
                            condicionventaId: $stateParams.condicionventaId
                        });
                    }
                },
                templateUrl: 'modules/condicionventas/views/view-condicionventa.client.view.html'
            })
            .state('home.editCondicionVenta', {
                url: 'condiciones-pago/:condicionventaId/edit',
                titulo: 'Condicion de pago',
                newButton: true,
                prevState: 'home.condicionVentas',
                controller: 'CondicionventasEditController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    condicionventa: function($stateParams, Condicionventas) {
                        return Condicionventas.get({
                            condicionventaId: $stateParams.condicionventaId
                        });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/condicionventas/views/edit-condicionventa.client.view.html'
            })
            // Condicion Ventas related states
            .state('home.comprobantes', {
                url: 'comprobantes',
                titulo: 'Comprobantes',
                newButton: true,
                prevState: 'home.welcome',
                controller: 'ComprobantesListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    comprobantes: function(Authentication, Comprobantes) {
                        return Comprobantes.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    modosFacturacion: function() {
                        return ['Comprobante interno', 'Talonario fiscal manual o pre-impreso', 'Factura electronica'];
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/comprobantes/views/list-comprobantes.client.view.html'
            })
            .state('home.createComprobante', {
                url: 'comprobantes/create',
                titulo: 'Crear Comprobante',
                prevState: 'home.comprobantes',
                newButton: false,
                controller: 'ComprobantesCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    comprobante: function() {
                        return {}
                    },
                    comprobantes: function(Comprobantes) {
                        return Comprobantes;
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    modosFacturacion: function() {
                        return ['Comprobante interno', 'Talonario fiscal manual o pre-impreso', 'Factura electronica'];
                    }
                },
                templateUrl: 'modules/comprobantes/views/create-comprobante.client.view.html',
            })
            .state('home.viewComprobante', {
                url: 'comprobantes/view/:comprobanteId',
                titulo: 'Comprobante',
                newButton: true,
                prevState: 'home.comprobantes',
                controller: 'ComprobantesViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    comprobante: function($stateParams, Comprobantes) {
                        return Comprobantes.get({
                            comprobanteId: $stateParams.comprobanteId
                        });
                    }
                },
                templateUrl: 'modules/comprobantes/views/view-comprobante.client.view.html'
            })
            .state('home.editComprobante', {
                url: 'comprobantes/:comprobanteId/edit',
                titulo: 'Comprobante',
                newButton: true,
                prevState: 'home.comprobantes',
                controller: 'ComprobantesEditController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    comprobante: function($stateParams, Comprobantes) {
                        return Comprobantes.get({
                            comprobanteId: $stateParams.comprobanteId
                        });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    modosFacturacion: function() {
                        return ['Comprobante interno', 'Talonario fiscal manual o pre-impreso', 'Factura electronica'];
                    }
                },
                templateUrl: 'modules/comprobantes/views/edit-comprobante.client.view.html'
            })
            // Costcenters related states
            .state('home.costcenters', {
                url: 'centros-costo',
                titulo: 'Costos Indirectos',
                newButton: true,
                prevState: 'home.welcome',
                templateUrl: 'modules/costcenters/views/list-costcenters.client.view.html',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                }
            })
            .state('home.viewCostcenter', {
                url: 'centros-costo/view/:costcenterId',
                titulo: 'Centro de costo',
                newButton: true,
                prevState: 'home.costcenters',
                templateUrl: 'modules/costcenters/views/view-costcenter.client.view.html'
            })
            .state('home.editCostcenter', {
                url: 'centros-costo/:costcenterId/edit',
                titulo: 'Centro de costo',
                newButton: true,
                prevState: 'home.costcenters',
                templateUrl: 'modules/costcenters/views/edit-costcenter.client.view.html'
            })
            // Tareas related states
            .state('home.tareas', {
                url: 'tareas',
                titulo: 'Tareas',
                newButton: true,
                prevState: 'home.welcome',
                templateUrl: 'modules/tareas/views/list-tareas.client.view.html',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                }
            })
            .state('home.viewTarea', {
                url: 'tareas/view/:tareaId',
                titulo: 'Tareas',
                newButton: true,
                prevState: 'home.tareas',
                templateUrl: 'modules/tareas/views/view-tarea.client.view.html'
            })
            .state('home.editTarea', {
                url: 'tarea/:tareaId/edit',
                titulo: 'Tarea',
                newButton: true,
                prevState: 'home.tareas',
                templateUrl: 'modules/tareas/views/edit-tarea.client.view.html'
            })
            //empleados
            .state('home.empleados', {
                url: 'empleados',
                titulo: 'Personal',
                newButton: true,
                controller: 'EmpleadosCentrodecostoListController',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    }, 
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/empleados/views/list-empleados-centrodecosto.client.view.html'
            })
            .state('home.listEmpleado', {
                url: 'empleados/:costcenterId',
                newButton: true,
                controller: 'EmpleadosListController',
                titulo: 'Personal',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    }
                },
                templateUrl: 'modules/empleados/views/list-empleados.client.view.html'
            })
            .state('home.viewEmpleado', {
                url: 'empleados/view/:empleadoId',
                titulo: 'Detalle del Personal',
                newButton: true,
                controller: 'EmpleadosController',
                controllerAs: 'vm',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    empleado: function($stateParams, Empleados) {
                        return Empleados.get({
                            empleadoId: $stateParams.empleadoId
                        });
                    },
                    puestos: function(Authentication, Puestos) {
                        return Puestos.query({ e: Authentication.user.enterprise.enterprise });
                    }
                },
                templateUrl: 'modules/empleados/views/view-empleado.client.view.html'
            })
            .state('home.editEmpleado', {
                url: 'empleado/:empleadoId/edit',
                titulo: 'Editar Personal',
                newButton: false,
                controller: 'EmpleadosController',
                controllerAs: 'vm',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    empleado: function($stateParams, Empleados) {
                        return Empleados.get({
                            empleadoId: $stateParams.empleadoId
                        });
                    },
                    puestos: function(Authentication, Puestos) {
                        return Puestos.query({ e: Authentication.user.enterprise.enterprise });
                    }
                },
                templateUrl: 'modules/empleados/views/form-empleado.client.view.html'
            })
            .state('home.createEmpleado', {
                url: 'personas/view/create',
                titulo: 'Nuevo Personal',
                newButton: false,
                prevState: 'home.personal',
                templateUrl: 'modules/personas/views/create-persona.client.view.html'
            })
            // VENTAS related states
            .state('home.ventas', {
                url: 'ventas?tab',
                titulo: 'Ventas',
                newButton: true,
                prevState: 'home.welcome',
                controller: 'ListVentasController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/ventas/views/list-ventas.client.view.html'
            })
            .state('home.createVenta', {
                url: 'ventas/view/create',
                titulo: 'Nueva Venta',
                newButton: false,
                prevState: 'home.ventas',
                templateUrl: 'modules/ventas/views/create-venta.client.view.html',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                }
            })
            .state('home.viewVenta', {
                url: 'ventas/view/:ventaId',
                titulo: 'Venta',
                newButton: true,
                prevState: 'home.ventas',
                templateUrl: 'modules/ventas/views/view-venta.client.view.html'
            })
            .state('home.editVenta', {
                url: 'ventas/:ventaId/edit',
                titulo: 'Venta',
                newButton: true,
                prevState: 'home.ventas',
                templateUrl: 'modules/ventas/views/edit-venta.client.view.html'
            })
            .state('home.ventasMostrador', {
                url: 'ventas/mostrador',
                titulo: 'Venta por mostrador',
                newButton: false,
                prevState: 'home.welcome',
                controller: 'VentasMostradorController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/ventas/views/ventas-mostrador.client.view.html'
            })
            // COMPRAS related states
            .state('home.compras', {
                url: 'compras',
                titulo: 'Compras',
                newButton: false,
                prevState: 'home.welcome',
                controller: 'ListComprasController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    comprasPendientes: function(Authentication, Compras, $stateParams) {
                        return Compras.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Pendiente de pago y recepcion',
                            p: 0,
                            pcount: 20
                        });
                    },
                    comprasPendientesRecepcion: function(Authentication, Compras, $stateParams) {
                        return Compras.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Pendiente de recepcion',
                            p: 0,
                            pcount: 20
                        });
                    },
                    comprasFinalizadas: function(Authentication, Compras, $stateParams) {
                        return Compras.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Finalizada',
                            p: 0,
                            pcount: 20
                        });
                    },
                    comprasAnuladas: function(Authentication, Compras, $stateParams) {
                        return Compras.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Anulada',
                            p: 0,
                            pcount: 20
                        });
                    },
                    comprasPendienteEvaluacion: function(Authentication, Pedidos, $stateParams) {
                        return Pedidos.query({
                            e: Authentication.user.enterprise.enterprise,
                            tipoPedido: 'compra',
                            estado: 'pendiente evaluacion',
                            p: 0,
                            pcount: 20
                        });
                    },
                    comprasPendienteAprobacion: function(Authentication, Pedidos, $stateParams) {
                        return Pedidos.query({
                            e: Authentication.user.enterprise.enterprise,
                            tipoPedido: 'compra',
                            estado: 'pendiente aprobacion',
                            p: 0,
                            pcount: 20
                        });
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/compras/views/list-compras.client.view.html'
            })
            .state('home.createCompra', {
                url: 'compras/create?tipo',
                titulo: 'Nueva Compra',
                newButton: false,
                prevState: 'home.compras',
                controller: 'CreateCompraController',
                resolve: {
                    compras: function(Authentication, Compras) {
                        return Compras.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    tipoCompra: function($stateParams) {
                        return $stateParams.tipo;
                    }
                },
                templateUrl: 'modules/compras/views/create-compra.client.view.html'
            })
            .state('home.viewCompra', {
                url: 'compras/view/:compraId',
                titulo: 'View Compra',
                newButton: false,
                prevState: 'home.compras',
                controller: 'ViewCompraController',
                resolve: {
                    compras: function(Authentication, Compras) {
                        return Compras.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    productos: function(Authentication, Products) {
                        return Products.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    compra: function($stateParams, Compras) {
                        return Compras.get({
                            compraId: $stateParams.compraId
                        });
                    }
                },
                templateUrl: 'modules/compras/views/view-compra.client.view.html'
            })
            .state('home.editCompra', {
                url: 'compras/:compraId/edit',
                titulo: 'Edit Compra',
                newButton: true,
                prevState: 'home.compras',
                templateUrl: 'modules/compras/views/edit-compra.client.view.html'
            })
            // STOCK related states
            .state('home.stock', {
                url: 'stocks?tipo',
                titulo: 'Stock',
                prevState: 'home.welcome',
                templateUrl: 'modules/stocks/views/list-stocks.client.view.html',
                resolve: {
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                }
            })
            .state('home.viewStock', {
                url: 'stocks/view/:stockId',
                titulo: 'Stock',
                prevState: 'home.stocks',
                templateUrl: 'modules/stocks/views/view-stock.client.view.html'
            })
            .state('home.editStock', {
                url: 'stocks/:stockId/edit',
                titulo: 'Stock',
                prevState: 'home.stocks',
                templateUrl: 'modules/stocks/views/edit-stock.client.view.html'
            })
            // PEDIDOS related states
            .state('home.pedidos', {
                url: 'pedidos?tipo',
                titulo: 'Pedidos Realizados',
                prevState: 'home.welcome',
                newButton: true,
                controller: 'ListPedidosController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    pedidosEvaluacion: function(Authentication, Pedidos, $stateParams) {
                        //console.log('authentication: ', Authentication.user);
                        return Pedidos.query({
                            e: Authentication.user.enterprise.enterprise,
                            tipoPedido: $stateParams.tipo,
                            estado: 'pendiente evaluacion',
                            p: 0,
                            pcount: 20
                        });
                    },
                    pedidosRealizados: function(Authentication, Pedidos, $stateParams) {
                        //console.log('authentication: ', Authentication.user);
                        return Pedidos.query({
                            e: Authentication.user.enterprise.enterprise,
                            tipoPedido: $stateParams.tipo,
                            estado: 'pendiente aprobacion',
                            p: 0,
                            pcount: 20
                        });
                    },
                    pedidosAprobados: function(Authentication, Pedidos, $stateParams) {
                        //console.log('authentication: ', Authentication.user);
                        return Pedidos.query({
                            e: Authentication.user.enterprise.enterprise,
                            tipoPedido: $stateParams.tipo,
                            estado: 'aprobada',
                            p: 0,
                            pcount: 20
                        });
                    },
                    pedidosRechazados: function(Authentication, Pedidos, $stateParams) {
                        //console.log('authentication: ', Authentication.user);
                        return Pedidos.query({
                            e: Authentication.user.enterprise.enterprise,
                            tipoPedido: $stateParams.tipo,
                            estado: 'rechazada',
                            p: 0,
                            pcount: 20
                        });
                    },
                    pedidosBorrador: function(Authentication, Pedidos, $stateParams) {
                        //console.log('authentication: ', Authentication.user);
                        return Pedidos.query({
                            e: Authentication.user.enterprise.enterprise,
                            tipoPedido: $stateParams.tipo,
                            estado: 'borrador',
                            p: 0,
                            pcount: 20
                        });
                    },
                    tipoOrden: function($stateParams) {
                        return $stateParams.tipo;
                    },
                    tipoPedido: function($stateParams) {
                        return $stateParams.tipo;
                    },
                    ventasPendientesEntrega: function(Authentication, Ventas, $stateParams) {
                        return Ventas.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Pendiente de entrega',
                            p: 0,
                            pcount: 20
                        });
                    },
                    ventasFinalizadas: function(Authentication, Ventas, $stateParams) {
                        return Ventas.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Finalizada',
                            p: 0,
                            pcount: 20
                        });
                    },
                    ventasPendientes: function(Authentication, Ventas, $stateParams) {
                        return Ventas.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Pendiente de pago y entrega',
                            p: 0,
                            pcount: 20
                        });
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/pedidos/views/list-pedidos.client.view.html'
            })
            .state('home.createPedido', {
                url: 'pedidos/create?tipo',
                titulo: 'Nueva Solicitud',
                prevState: 'home.pedidos',
                newButton: false,
                controller: 'CreatePedidosController',
                resolve: {
                    pedidos: function(Authentication, Pedidos) {
                        //console.log('authentication: ', Authentication.user);
                        return Pedidos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    tipoOrden: function($stateParams) {
                        return $stateParams.tipo;
                    },
                    tipoPedido: function($stateParams) {
                        return $stateParams.tipo;
                    },
                     serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }

                },
                templateUrl: 'modules/pedidos/views/create-pedido.client.view.html'
            })
            .state('home.viewPedido', {
                url: 'pedidos/view/:pedidoId',
                titulo: 'Orden',
                prevState: 'home.pedidos',
                newButton: false,
                controller: 'ViewPedidosController',
                resolve: {
                    pedidos: function(Authentication, Pedidos) {
                        //console.log('authentication: ', Authentication.user);
                        return Pedidos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    tipoOrden: function($stateParams) {
                        return $stateParams.tipo;
                    },
                    tipoPedido: function($stateParams) {
                        return $stateParams.tipo;
                    }
                },
                templateUrl: 'modules/pedidos/views/view-pedido.client.view.html'
            })
            .state('home.editPedido', {
                url: 'pedidos/:pedidoId/edit?tipo',
                titulo: 'Orden',
                prevState: 'home.pedidos',
                newButton: true,
                controller: 'PedidosController',
                resolve: {
                    pedidos: function(Authentication, Pedidos) {
                        //console.log('authentication: ', Authentication.user);
                        return Pedidos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    tipoOrden: function($stateParams) {
                        return $stateParams.tipo;
                    },
                    tipoPedido: function($stateParams) {
                        return $stateParams.tipo;
                    }
                },
                templateUrl: 'modules/pedidos/views/edit-pedido.client.view.html'
            })
            // Finanzas related states
            .state('home.finanzas', {
                url: 'finanzas?tipo',
                titulo: 'Finanzas',
                prevState: 'home.welcome',
                newButton: false,
                controller: 'ListFinanzasController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    movimientos: function(Authentication, Movimientos) {
                        //console.log('authentication: ', Authentication.user);
                        return Movimientos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    tipoFinanza: function($stateParams) {
                        console.log($stateParams.tipo, 'state params');
                        return $stateParams.tipo;
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }

                },
                templateUrl: 'modules/finanzas/views/list-finanzas.client.view.html'
            })
            .state('home.createFinanza', {
                url: 'finanzas/create?tipo',
                titulo: 'Nueva Solicitud',
                prevState: 'home.finanzas',
                newButton: false,
                controller: 'CreateFinanzasController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    finanzas: function(Authentication, Finanzas) {
                        //console.log('authentication: ', Authentication.user);
                        return Finanzas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    finanza: function($stateParams, Finanzas) {
                        return Finanzas.get({
                            finanzasId: $stateParams.finanzaId
                        });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    tipoFinanza: function($stateParams) {
                        return $stateParams.tipo;
                    }
                },
                templateUrl: 'modules/finanzas/views/create-finanza.client.view.html'
            })
            .state('home.viewFinanza', {
                url: 'finanzas/view/:finanzaId?tipo',
                titulo: 'Finanza',
                prevState: 'home.finanzas',
                newButton: false,
                controller: 'FinanzasViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    finanzas: function(Authentication, Finanzas) {
                        return Finanzas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    finanza: function($stateParams, Finanzas) {
                        return Finanzas.get({
                            finanzaId: $stateParams.finanzaId
                        });
                    },
                    movimientos: function(Authentication, Movimientos) {
                        //console.log('authentication: ', Authentication.user);
                        return Movimientos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    tipoFinanza: function($stateParams) {
                        return $stateParams.tipo;
                    }
                },
                templateUrl: 'modules/finanzas/views/view-finanza.client.view.html'
            })
            .state('home.editFinanza', {
                url: 'finanzas/:finanzaId/edit?tipo',
                titulo: 'Orden',
                prevState: 'home.finanzas',
                newButton: false,
                controller: 'EditFinanzasController',
                controllerAs: 'ctrl',
                resolve: {
                    finanzas: function(Authentication, Finanzas) {
                        //console.log('authentication: ', Authentication.user);
                        return Finanzas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    tipoFinanza: function($stateParams) {
                        return $stateParams.tipo;
                    }
                },
                templateUrl: 'modules/finanzas/views/edit-finanza.client.view.html'
            }).state('home.resumenList', {
                url: 'resumen',
                titulo: 'Resumen económico',
                newButton: false,
                controller: 'ResumenListController',
                resolve: {
                    costcenters: function(Authentication, Costcenters) {
                        return Costcenters.query({ e: Authentication.user.enterprise.enterprise });
                    }
                },
                templateUrl: 'modules/finanzas/views/resumen-list.client.view.html'
            }).state('home.resumen', {
                url: 'resumen/:centroDeCosto',
                titulo: 'Resumen económico',
                prevState: 'home.resumenList',
                newButton: false,
                controller: 'ResumenController',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    }
                },
                templateUrl: 'modules/finanzas/views/resumen.client.view.html'
            })

        // PEDIDOS related states
        .state('home.movimientos', {
                url: 'movimientos',
                titulo: 'Movimientos',
                prevState: 'home.welcome',
                newButton: true,
                controller: 'ListMovimientosController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    movimientos: function(Authentication, Movimientos) {
                        //console.log('authentication: ', Authentication.user);
                        return Movimientos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/movimientos/views/list-movimientos.client.view.html'
            })
            .state('home.createMovimientos', {
                url: 'movimientos/create?tipo',
                titulo: 'Nuevo Movimiento',
                prevState: 'home.movimientos',
                newButton: false,
                controller: 'CreateMovimientosController',
                controllerAs: 'ctrl',
                resolve: {
                    movimientos: function(Authentication, Movimientos) {
                        //console.log('authentication: ', Authentication.user);
                        return Movimientos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/movimientos/views/create-movimiento.client.view.html'
            })
            .state('home.viewMovimiento', {
                url: 'movimientos/view/:movimientoId',
                titulo: 'Orden',
                prevState: 'home.movimientos',
                newButton: false,
                controller: 'ViewMovimientoController',
                controllerAs: 'ctrl',
                resolve: {
                    movimientos: function(Authentication, Movimientos) {
                        //console.log('authentication: ', Authentication.user);
                        return Movimientos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/movimientos/views/view-movimiento.client.view.html'
            })
            .state('home.editMovimiento', {
                url: 'movimientos/:movimientoId/edit',
                titulo: 'Movimiento',
                prevState: 'home.movimientos',
                newButton: true,
                controller: 'EditMovimientosController',
                controllerAs: 'ctrl',
                resolve: {
                    movimientos: function(Authentication, Movimientos) {
                        //console.log('authentication: ', Authentication.user);
                        return Movimientos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/movimientos/views/edit-movimiento.client.view.html'
            })
            // SUCURSALES related states
            .state('home.sucursales', {
                url: 'sucursales',
                titulo: 'Tesorería',
                newButton: false,
                prevState: 'home.welcome',
                controller: 'SucursalesListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    sucursales: function(Authentication, Sucursales) {
                        return Sucursales.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    cajas: function(Authentication, Cajas) {
                        return Cajas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/sucursales/views/list-sucursales.client.view.html'
            })
            .state('home.createSucursal', {
                url: 'sucursales/view/create',
                titulo: 'Crear Tesorería',
                prevState: 'home.sucursales',
                newButton: false,
                controller: 'SucursalesCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    sucursal: function() {
                        return {}
                    },
                    sucursales: function(Sucursales) {
                        return Sucursales;
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/sucursales/views/create-sucursal.client.view.html'
            })
            .state('home.viewSucursal', {
                url: 'sucursales/view/:sucursalId',
                titulo: 'Tesorería',
                newButton: false,
                prevState: 'home.sucursales',
                controller: 'SucursalesViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    cajas: function(Authentication, Cajas) {
                        return Cajas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    sucursal: function($stateParams, Sucursales) {
                        return Sucursales.get({
                            sucursalId: $stateParams.sucursalId
                        });
                    }
                },
                templateUrl: 'modules/sucursales/views/view-sucursal.client.view.html'
            })
            .state('home.editSucursal', {
                url: 'sucursales/:sucursalId/edit',
                titulo: 'Editar Tesorería',
                newButton: false,
                prevState: 'home.sucursales',
                controller: 'SucursalesEditController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    sucursal: function($stateParams, Sucursales) {
                        return Sucursales.get({
                            sucursalId: $stateParams.sucursalId
                        });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/sucursales/views/edit-sucursal.client.view.html'
            })
            // CAJAS related states
            .state('home.cajas', {
                url: 'cajas',
                titulo: 'Cajas',
                newButton: true,
                prevState: 'home.welcome',
                controller: 'CajasListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    cajas: function(Authentication, Cajas) {
                        return Cajas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    puestos: function(Authentication, Puestos) {
                        return Puestos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/cajas/views/list-cajas.client.view.html'
            })
            .state('home.createCaja', {
                url: 'cajas/view/create',
                titulo: 'Crear Caja',
                prevState: 'home.cajas',
                newButton: false,
                controller: 'CajasCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    caja: function() {
                        return {}
                    },
                    cajas: function(Cajas) {
                        return Cajas;
                    },
                    puestos: function(Authentication, Puestos) {
                        return Puestos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    totalCajas: function(Authentication, Cajas) {
                        return Cajas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/cajas/views/create-caja.client.view.html'
            })
            .state('home.viewCaja', {
                url: 'cajas/view/:cajaId',
                titulo: 'Caja',
                newButton: false,
                // prevState: 'home.sucursales'
                prevState: false,
                controller: 'CajasViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    caja: function($stateParams, Cajas) {
                        return Cajas.get({
                            cajaId: $stateParams.cajaId
                        });
                    },
                    transferencias: function(Authentication, Transferencias) {
                        return Transferencias.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    arqueos: function(Authentication, Arqueos) {
                        return Arqueos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    movimientos: function(Authentication, Movimientos) {
                        return Movimientos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    comprasFinalizadas: function(Authentication, Compras, $stateParams) {
                        return Compras.query({ e: Authentication.user.enterprise.enterprise, estado: 'Finalizada' });
                    },
                    ventasPendientes: function(Authentication, Ventas, $stateParams) {
                        return Ventas.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Pendiente de pago y entrega'
                        });
                    },
                    ventasPendientesEntrega: function(Authentication, Ventas, $stateParams) {
                        return Ventas.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Pendiente de entrega'
                        });
                    },
                    ventasFinalizadas: function(Authentication, Ventas, $stateParams) {
                        return Ventas.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Finalizada',
                            p: "0",
                            pcount: 20
                        });
                    },
                    condicionventas: function(Authentication, Condicionventas) {
                        return Condicionventas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    pagosService: function(Authentication, PagosService) {
                        return PagosService.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    ventasAnuladas: function(Authentication, Ventas, $stateParams) {
                        return Ventas.query({
                            e: Authentication.user.enterprise.enterprise,
                            estado: 'Anulada',
                            pcount: 200000000
                        });
                    },
                },
                templateUrl: 'modules/cajas/views/view-caja.client.view.html'
            })
            .state('home.editCaja', {
                url: 'cajas/:cajaId/edit',
                titulo: 'Caja',
                newButton: false,
                prevState: 'home.cajas',
                controller: 'CajasEditController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    caja: function($stateParams, Cajas) {
                        return Cajas.get({
                            cajaId: $stateParams.cajaId
                        });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/cajas/views/edit-caja.client.view.html'
            })
            //TRANSFERENCIAS states
            .state('home.transferencias', {
                url: 'transferencias',
                titulo: 'Transferencias',
                prevState: 'home.welcome',
                newButton: true,
                controller: 'ListTransferenciasController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    transferencias: function(Authentication, Transferencias) {
                        //console.log('authentication: ', Authentication.user);
                        return Transferencias.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/transferencias/views/list-transferencias.client.view.html',
            })
            .state('home.createTransferencias', {
                url: 'transferencias/view/create',
                titulo: 'Nueva Transferencia',
                prevState: 'home.transferencias',
                newButton: false,
                controller: 'CreateTransferenciasController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    transferencias: function(Authentication, Transferencias) {
                        //console.log('authentication: ', Authentication.user);
                        return Transferencias.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    transferencia: function() {
                        return {}
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/transferencias/views/create-transferencia.client.view.html',
            })
            .state('home.viewTransferencia', {
                url: 'transferencias/view/:transferenciaId',
                titulo: 'Orden',
                prevState: 'home.transferencias',
                newButton: false,
                controller: 'ViewTransferenciaController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    transferencias: function(Authentication, Transferencias) {
                        //console.log('authentication: ', Authentication.user);
                        return Transferencias.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    transferencia: function($stateParams, Transferencias) {
                        return Transferencias.get({
                            transferenciaId: $stateParams.transferenciaId
                        });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/transferencias/views/view-transferencia.client.view.html'
            })
            .state('home.editTransferencia', {
                url: 'transferencias/:transferenciaId/edit',
                titulo: 'Transferencia',
                prevState: 'home.transferencias',
                newButton: true,
                controller: 'EditTransferenciasController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    transferencias: function(Authentication, Transferencias) {
                        //console.log('authentication: ', Authentication.user);
                        return Transferencias.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/transferencias/views/edit-transferencia.client.view.html'
            })
            //Arqueos states
            .state('home.arqueos', {
                url: 'arqueos',
                titulo: 'arqueos',
                prevState: 'home.welcome',
                newButton: true,
                controller: 'ListArqueosController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    arqueos: function(Authentication, Arqueos) {
                        //console.log('authentication: ', Authentication.user);
                        return Arqueos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/arqueos/views/list-arqueos.client.view.html',
            })
            .state('home.createArqueos', {
                url: 'arqueos/view/create',
                titulo: 'Nuevo Arqueo',
                prevState: 'home.arqueos',
                newButton: false,
                controller: 'CreateArqueosController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    arqueos: function(Authentication, Arqueos) {
                        //console.log('authentication: ', Authentication.user);
                        return Arqueos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    arqueo: function() {
                        return {}
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/arqueos/views/create-arqueo.client.view.html',
            })
            .state('home.viewArqueo', {
                url: 'arqueos/view/:arqueoId',
                titulo: 'Orden',
                prevState: 'home.arqueos',
                newButton: false,
                controller: 'ViewArqueoController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    arqueos: function(Authentication, Arqueos) {
                        //console.log('authentication: ', Authentication.user);
                        return Arqueos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    arqueo: function($stateParams, Arqueos) {
                        return Arqueos.get({
                            arqueo: $stateParams.arqueo
                        });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/arqueos/views/view-arqueo.client.view.html'
            })
            .state('home.editArqueo', {
                url: 'arqueos/:arqueoId/edit',
                titulo: 'Arqueos',
                prevState: 'home.arqueos',
                newButton: true,
                controller: 'EditArqueoController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    arqueos: function(Authentication, Arqueos) {
                        //console.log('authentication: ', Authentication.user);
                        return Arqueos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/arqueos/views/edit-arqueo.client.view.html'
            })
            // PROCESOS related states
            .state('home.procesos', {
                url: 'procesos',
                titulo: 'Procesos y Manuales',
                newButton: true,
                prevState: 'home.welcome',
                controller: 'ProcesosListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    procesos: function(Authentication, Procesos) {
                        return Procesos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise, type1: "Proceso" });
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/procesos/views/list-procesos.client.view.html'
            })
            .state('home.createProceso', {
                url: 'procesos/view/create',
                titulo: 'Nuevo Proceso',
                newButton: false,
                prevState: 'home.procesos',
                controller: 'ProcesosCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise, type1: "Proceso" });
                    },
                    proceso: function() {
                        return {}
                    },
                    procesos: function(Procesos) {
                        return Procesos;
                    },
                    procedimientos: function(Authentication, Procedimientos) {
                        return Procedimientos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/procesos/views/create-proceso.client.view.html'
            })
            .state('home.viewProceso', {
                url: 'procesos/view/:procesoId',
                titulo: 'Mis Procesos',
                newButton: true,
                prevState: 'home.procesos',
                controller: 'ProcesosViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    proceso: function($stateParams, Procesos) {
                        return Procesos.get({
                            procesoId: $stateParams.procesoId
                        });
                    }
                },
                templateUrl: 'modules/procesos/views/view-proceso.client.view.html'
            })
            .state('home.editProceso', {
                url: 'procesos/:procesoId/edit',
                titulo: 'Mis Procesos',
                newButton: true,
                prevState: 'home.procesos',
                controller: 'ProcesosEditController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    proceso: function($stateParams, Procesos) {
                        return Procesos.get({
                            procesoId: $stateParams.procesoId
                        });
                    },
                    procesos: function(Authentication, Procesos) {
                        return Procesos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    procedimientos: function(Authentication, Procedimientos) {
                        return Procedimientos.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise, type1: "Proceso" });
                    }
                },
                templateUrl: 'modules/procesos/views/edit-proceso.client.view.html'
            })

        // PROCEDIMIENTOS related states
        .state('home.procedimientos', {
                url: 'procedimientos',
                titulo: 'Mis Procedimientos',
                newButton: false,
                prevState: 'home.welcome',
                resolve: {                    
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/procedimientos/views/list-procedimientos.client.view.html'
            })
            .state('home.viewProcedimiento', {
                url: 'procedimientos/view/:procedimientoId',
                titulo: 'Mis Procedimientos',
                newButton: false,
                prevState: 'home.procedimientos',
                templateUrl: 'modules/procedimientos/views/view-procedimiento.client.view.html'
            })
            .state('home.editProcedimiento', {
                url: 'procedimientos/:procedimientoId/edit',
                titulo: 'Mis Procedimientos',
                newButton: false,
                prevState: 'home.procedimientos',
                templateUrl: 'modules/procedimientos/views/edit-procedimiento.client.view.html'
            })
            // personal related states
            .state('home.personal', {
                url: 'personal',
                titulo: 'Usuarios',
                newButton: false,
                prevState: 'home.welcome',
                resolve: {                    
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/personas/views/list-personas.client.view.html'
            })
            .state('home.editUser', {
                url: 'editar-usuario/:personaId',
                titulo: 'Personal',
                newButton: true,
                prevState: 'home.personal',
                templateUrl: 'modules/users/views/settings/edit-user.client.view.html'
            })
            .state('home.createPersonal', {
                url: 'personas/view/create',
                titulo: 'Nuevo Empleado',
                newButton: false,
                prevState: 'home.personal',
                templateUrl: 'modules/personas/views/create-persona.client.view.html'
            })
            .state('home.viewPersona', {
                url: 'personas/view/{personaId}',
                params: {
                    centroDeCosto: "",
                    sueldo: ""
                },
                titulo: 'Personal',
                newButton: true,
                prevState: 'home.personal',
                templateUrl: 'modules/personas/views/view-persona.client.view.html'
            })
            .state('home.editPersonal', {
                url: 'editar-persona/:personaId',
                titulo: 'Personal',
                newButton: true,
                prevState: 'home.personal',
                templateUrl: 'modules/users/views/view-user.client.view.html'
            })
            // rrhh related states
            .state('home.rrhh', {
                url: 'rrhh',
                titulo: 'Organigrama',
                newButton: true,
                prevState: 'home.welcome',
                resolve: {

                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/rrhhs/views/list-rrhhs.client.view.html'
            })
            .state('home.viewRRHH', {
                url: 'rrhh/view/:rrhhId',
                titulo: 'RRHH',
                newButton: true,
                prevState: 'home.rrhh',
                templateUrl: 'modules/rrhhs/views/view-rrhh.client.view.html'
            })
            .state('home.editRRHH', {
                url: 'rrhh/:rrhhId/edit',
                titulo: 'RRHH',
                newButton: true,
                prevState: 'home.rrhh',
                templateUrl: 'modules/rrhhs/views/edit-rrhh.client.view.html'
            })
            // Impuestos related states
            .state('home.impuestos', {
                url: 'impuestos',
                titulo: 'Impuestos',
                prevState: 'home.welcome',
                controller: 'ImpuestosListController',
                controllerAs: 'ctrl',
                resolve: {
                    costcenters: function(Authentication, Costcenters) {
                        return Costcenters.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/impuestos/views/list-impuesto.client.view.html'
            })
            .state('home.viewImpuesto', {
                url: 'impuestos/view/:centroDeCosto',
                titulo: 'Impuestos',
                newButton: false,
                prevState: 'home.impuestos',
                controller: 'ImpuestosViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    }
                },
                templateUrl: 'modules/impuestos/views/view-impuesto.client.view.html'
            })
            .state('home.detailsImpuesto', {
                url: 'impuestos/details/{impuestosId}&{impuestosName}',
                titulo: 'Detalle de Impuesto',
                prevState: 'home.viewImpuesto',
                controller: 'ImpuestosDetailsController',
                controllerAs: 'ctrl',
                templateUrl: 'modules/impuestos/views/details-impuesto.client.view.html'
            })
            .state('home.detailsImpuestoAut', {
                url: 'impuestos/details/{impuestosId}&{impuestosName}&{impuestosType}',
                titulo: 'Detalle de Impuesto',
                prevState: 'home.viewImpuesto',
                controller: 'ImpuestosDetailsController',
                controllerAs: 'ctrl',
                templateUrl: 'modules/impuestos/views/details-impuesto.client.view.html'
            })
            .state('home.createImpuesto', {
                url: 'impuestos/create/:centroDeCosto',
                titulo: 'Crear Impuesto',
                prevState: 'home.viewImpuesto',
                controller: 'ImpuestosCreateController',
                controllerAs: 'ctrl',
                templateUrl: 'modules/impuestos/views/create-impuesto.client.view.html'
            })
            // area related states
            .state('home.area', {
                url: 'areas',
                titulo: 'Áreas',
                newButton: true,
                prevState: 'home.welcome',
                resolve: {                    
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/areas/views/list-areas.client.view.html'
            })
            .state('home.createArea', {
                url: 'areas/view/create',
                titulo: 'Nueva Área',
                newButton: false,
                prevState: 'home.area',
                templateUrl: 'modules/areas/views/create-area.client.view.html'
            })
            .state('home.viewArea', {
                url: 'areas/view/:areaId',
                titulo: 'Áreas',
                newButton: true,
                prevState: 'home.area',
                templateUrl: 'modules/areas/views/view-area.client.view.html'
            })
            .state('home.editArea', {
                url: 'areas/:areaId/edit',
                titulo: 'Áreas',
                newButton: true,
                prevState: 'home.area',
                templateUrl: 'modules/areas/views/edit-area.client.view.html'
            }) // puesto related states
            .state('home.puesto', {
                url: 'puestos',
                titulo: 'Puestos',
                newButton: true,
                prevState: 'home.welcome',
                resolve: {                    
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/puestos/views/list-puestos.client.view.html'
            })
            .state('home.createPuesto', {
                url: 'puestos/view/create',
                titulo: 'Nuevo Puesto De Trabajo',
                newButton: false,
                prevState: 'home.puesto',
                templateUrl: 'modules/puestos/views/create-puesto.client.view.html'
            })
            .state('home.viewPuesto', {
                url: 'puestos/view/{puestoId}',
                params: {
                    personal: "false",
                    centroDeCosto: ""
                },
                titulo: 'Puesto',
                newButton: true,
                prevState: 'home.puesto',
                templateUrl: 'modules/puestos/views/view-puesto.client.view.html'
            })
            .state('home.editPuesto', {
                url: 'puestos/:puestoId/edit',
                titulo: 'Puesto',
                newButton: true,
                prevState: 'home.puesto',
                templateUrl: 'modules/puestos/views/edit-puesto.client.view.html'
            })
            // entregas related states
            .state('home.entregas', {
                url: 'entregas',
                titulo: 'Entregas',
                newButton: true,
                prevState: 'home.welcome',
                resolve: {                    
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/entregas/views/list-entregas.client.view.html'
            })
            .state('home.viewEntrega', {
                url: 'entregas/view/:entregaId',
                titulo: 'Entrega',
                newButton: true,
                prevState: 'home.entregas',
                templateUrl: 'modules/entregas/views/view-entrega.client.view.html'
            })
            .state('home.editEntrega', {
                url: 'entregas/:entregaId/edit',
                titulo: 'Entrega',
                newButton: true,
                prevState: 'home.entregas',
                templateUrl: 'modules/entregas/views/edit-entrega.client.view.html'
            })
            // reportes related Routes
            .state('home.reportes', {
                url: 'reportes?tipo',
                titulo: 'Reportes',
                newButton: false,
                controller: 'ReportesController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    reportesVentas: function(ReportesVentas) {
                        return ReportesVentas;
                    },
                    tipoReporte: function($stateParams) {
                        return $stateParams.tipo;
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/reportes/views/dashboard-reportes.client.view.html'
            })
            .state('home.costosIndirectos', {
                url: 'costosIndirectos/:centroId',
                titulo: 'Costos Indirectos',
                newButton: false,
                prevState: 'home.welcome',
                controller: 'CostosindirectosListController',
                controllerAs: 'ctrl',
                name: null,
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    costosindirectosService: function($stateParams, CostosindirectosService) {

                        localStorage.setItem("centroId", $stateParams.centroId);
                        var filterData = {};                        
                        filterData.centroId = $stateParams.centroId;
                        if (localStorage.search_postos) {
                            var data = JSON.parse(localStorage.search_postos);
                            if (data.year)
                                filterData.year = data.year;
                            if (data.month)
                                filterData.month = data.month;
                        }
                        
                        return CostosindirectosService.query(filterData);


                    },
                    cajas: function(Authentication, Cajas) {
                        return Cajas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    },
                    costosLastMonthTotal: function($stateParams, LastMonthTotal) {
                        console.log($stateParams.centroId);
                        return LastMonthTotal.costosLastMonthTotal($stateParams.centroId);
                    },
                    
                   
                },
                templateUrl: 'modules/costosindirectos/views/list-costosindirectos.client.view.html'
            })
            .state('home.createCostosIndirectos', {
                url: 'costosindirectos/view/create',
                titulo: 'Crear costo indirecto',
                prevState: 'home.costosIndirectos',
                newButton: false,
                controller: 'CostosIndirectosCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    costosindirectosService: function(Authentication, CostosindirectosService) {
                        return CostosindirectosService.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    cajas: function(Authentication, Cajas) {
                        return Cajas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    enterprises: function(Enterprises) {
                        return Enterprises.query();
                    }
                },
                templateUrl: 'modules/costosindirectos/views/create-costosindirecto.client.view.html'
            })
            .state('home.viewCostosIndirectos', {
                url: 'costosindirectos/view/:costosindirectoId',
                titulo: 'Costos Indirectos',
                newButton: false,
                prevState: 'home.costosIndirectos',
                controller: 'CostosIndirectosViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    serviciosService: function(Authentication, ServiciosService) {                        
                        //search_postos = JSON.parse(localStorage.getItem("search_postos"));
                        var filterData = {};
                        if (localStorage.search_postos)
                            filterData = JSON.parse(localStorage.search_postos);
                        else
                            filterData = { e: Authentication.user.enterprise.enterprise };
                        return ServiciosService.query(filterData);
                    },
                    cajas: function(Authentication, Cajas) {
                        return Cajas.query({ e: Authentication.user.enterprise.enterprise });
                    },
                    costosindirectos: function($stateParams, CostosindirectosService) {
                        return CostosindirectosService.get({
                            costosindirectoId: $stateParams.costosindirectoId
                        });
                    },
                    serviciosLastMonthTotal: function($stateParams, LastMonthTotal) {
                        return LastMonthTotal.serviciosLastMonthTotal();
                    }
                },
                templateUrl: 'modules/costosindirectos/views/view-costosindirecto.client.view.html'

            })
            .state('home.serviceDetails', {
                url: 'costosindirectos/view/',
                titulo: 'Costos Indirectos',
                newButton: false,
                prevState: false,
                //prevState: false,
                controller: 'FinanzasController',
                controllerAs: 'ctrl', 
                resolve: {
                  getServiceDetials: function(Finanzas){
                    console.log($stateParams)
                    return Finanzas.query({serviceId: $stateParams.servicosId,type:"serviceDetials"})
                  }
                },                     
                templateUrl: 'modules/finanzas/views/list-service-details.client.view.html'
            })
            .state('home.viewPago', {
                url: 'pagos/view/{servicosId}&{impuestosId}&{empleadoId}',
                params: {
                  displayName: "",
                  centroDeCosto: ""
                },
                titulo: '',
                newButton: false,
                prevState: false,
                controller: 'PagosViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    pago: function($stateParams, PagosService) {
                        if($stateParams.servicosId) {                            
                            var toList = $stateParams.servicosId.split('/'),
                                serviceDetails = toList[toList.length - 1];
                        }

                        if(toList.length === 1) {
                            var date = $stateParams.empleadoId ? JSON.parse(localStorage.getItem("dateEmpleados")) : JSON.parse(localStorage.getItem("dateImpuestos"));
                            localStorage.removeItem('serviceName');
                            if (date && (date.month || date.year)) {
                                return PagosService.query({
                                    servicosId: ($stateParams.servicosId) ? toList[0] : undefined,
                                    impuestosId: $stateParams.impuestosId,
                                    empleadoId: $stateParams.empleadoId,
                                    month: date.month || null,
                                    year: date.year || null
                                });
                            } else {
                                return PagosService.query({
                                    servicosId: ($stateParams.servicosId) ? toList[0] : undefined,
                                    impuestosId: $stateParams.impuestosId,
                                    empleadoId: $stateParams.empleadoId
                                });
                            }
                        } else {
                            localStorage.setItem('serviceName',toList[1])        
                            return PagosService.query({
                                servicosId: toList[0],
                                type: "serviceDetails"     
                            });
                        }
                    },
                    servicios: function($stateParams, ServiciosService) {
                        if($stateParams.servicosId) {
                            var toList = $stateParams.servicosId.split('/'),
                                serviceDetails = toList[toList.length - 1];
                        }

                       
                        if ($stateParams.servicosId !== '') {
                            return ServiciosService.get({
                                servicioId: toList[0],

                            });
                        } else {
                            return [];
                        }
                        
                    },
                               
                },
                templateUrl: 'modules/pagos/views/view-pago.client.view.html'
            })
            .state('home.listcentroDeCosto', {
                url: 'costosindirectos/listcentroDeCosto/',
                titulo: 'Costos Indirectos',
                newButton: false,
                // prevState: 'home.sucursales'
                prevState: false,
                controller: 'CostocentersListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    centrodecosto: function(Authentication, CustomServicios) {
                        localStorage.removeItem("centroId");
                        localStorage.removeItem("search_postos");
                        var e = Authentication.user.enterprise.enterprise;
                        return CustomServicios.getCentroByServicios(e);
                    },
                },
                templateUrl: 'modules/costosindirectos/views/list-centrodecosto.client.view.html'
            })
            .state('home.remuneraciones', {
                url: 'remuneraciones',
                titulo: 'Remuneraciones',
                newButton: true,
                prevState: false,
                controller: 'RemuneracioneListController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    remuneraciones: function(Remuneraciones) {
                        return Remuneraciones.query({});
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/remuneraciones/views/list-remuneraciones.client.view.html'
            }).state('home.viewRemuneracione', {
                url: 'remuneraciones/view/:remuneracioneId',
                titulo: 'Remuneraciones',
                newButton: false,
                prevState: 'home.remuneraciones',
                controller: 'RemuneracioneViewController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    remuneracione: function($stateParams, Remuneraciones) {
                        return Remuneraciones.get({
                            remuneracioneId: $stateParams.remuneracioneId
                        });
                    }
                },
                templateUrl: 'modules/remuneraciones/views/view-remuneracione.client.view.html'
            }).state('home.createRemuneracione', {
                url: 'remuneraciones/create',
                titulo: 'Crear Remuneración',
                newButton: false,
                prevState: 'home.remuneraciones',
                controller: 'RemuneracioneCreateController',
                controllerAs: 'ctrl',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise, type1: 'Remuneracione' });
                    },
                    serviceNav: function(ServiceNavigation) {
                        ServiceNavigation.navInit();
                    }
                },
                templateUrl: 'modules/remuneraciones/views/create-remuneracione.client.view.html'
            }).state('home.editRemuneracione', {
                url: 'remuneraciones/:remuneracioneId/edit',
                titulo: 'Editar Remuneración',
                newButton: false,
                prevState: 'home.remuneraciones',
                controller: 'RemuneracioneEditController',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    },
                    remuneracione: function($stateParams, Remuneraciones) {
                        return Remuneraciones.get({
                            remuneracioneId: $stateParams.remuneracioneId
                        });
                    },
                    categories: function(Authentication, Categories) {
                        return Categories.query({ e: Authentication.user.enterprise.enterprise, type1: 'Remuneracione' });
                    }
                },
                templateUrl: 'modules/remuneraciones/views/edit-remuneracione.client.view.html'
            }).state('home.actividades', {
                url: 'actividades',
                params: {
                    empleadoId: null,
                    displayName: "",
                    centroDeCosto: ""
                },
                titulo: 'Actividad',
                newButton: false,
                prevState: false,
                controller: 'ActividadListController',
                templateUrl: 'modules/actividades/views/list-actividades.client.view.html'
            }).state('home.liquidaciones', {
                url: 'liquidaciones',
                params: {
                    empleadoId: null,
                    displayName: "",
                    centroDeCosto: ""
                },
                titulo: 'Liquidaciones',
                newButton: true,
                prevState: false,
                controller: 'LiquidacionListController',
                templateUrl: 'modules/liquidaciones/views/list-liquidacion.client.view.html'
            }).state('home.createLiquidacion', {
                url: 'liquidaciones/create',
                params: {
                    empleadoId: null,
                    liquidacionId: null
                },
                titulo: 'Crear Liquidación',
                newButton: false,
                prevState: 'home.liquidaciones',
                controller: 'LiquidacionCreateController',
                resolve: {
                    user: function(Authentication) {
                        return Authentication.user;
                    }
                },
                templateUrl: 'modules/liquidaciones/views/create-liquidacion.client.view.html'
            })
    }
]);
'use strict';

angular.module('core').controller('HeaderController', ['$scope', '$state', 'Authentication', 'Menus',
	function($scope, $state, Authentication, Menus) {
		// Expose view variables
		$scope.$state = $state;
		$scope.authentication = Authentication;

		// Get the topbar menu
		$scope.menu = Menus.getMenu('topbar');

		// Toggle the menu items
		$scope.isCollapsed = false;
		$scope.toggleCollapsibleMenu = function() {
			$scope.isCollapsed = !$scope.isCollapsed;
		};

		// Collapsing the menu after navigation
		$scope.$on('$stateChangeSuccess', function() {
			$scope.isCollapsed = false;
		});
	}
]);

'use strict';

angular.module('core').controller('HomeController', ['$scope', '$rootScope', 'Authentication', '$state', '$mdBottomSheet', '$mdSidenav', '$mdUtil', 'Menu', 'FindUserById', 'Areas', '$http', 'Puestos', '$stateParams', 'ShowAreaInfo', '$mdDialog', 'Tareas', 'Users', '$filter', '$timeout', 'Empleados', 'Actividades','ServiceNavigation',
    function ($scope, $rootScope, Authentication, $state, $mdBottomSheet, $mdSidenav, $mdUtil, Menu, FindUserById, Areas, $http, Puestos, $stateParams, ShowAreaInfo, $mdDialog, Tareas, Users, $filter, $timeout, Empleados, Actividades,ServiceNavigation) {
        // This provides Authentication context.
        $scope.authentication = Authentication;

        // watch for SEARCH to update value
        $scope.$watch('authentication', function () {
            if ($scope.authentication.user !== undefined) {
                $scope.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
                $scope.findTareas();
            }
        });

        $rootScope.$watch('estadoActualParams', function () {
            if ($rootScope.estadoActualParams !== undefined) {
                $scope.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
            }
        });

        //console.log($scope.authentication.user);

        if (!$scope.authentication.user) {
            $state.transitionTo('authentication.signin');
        }
        var vm = this;

        //functions for menu-link and menu-toggle
        vm.isOpen = isOpen;
        vm.toggleOpen = toggleOpen;
        vm.autoFocusContent = false;
        vm.menu = Menu;

        //gets the list of sub nav for display in the view
        $rootScope.$on("nav change",function(val){
            //console.log(JSON.parse(window.localStorage.getItem("subNav")))
            $rootScope.titles = ServiceNavigation.getNav();
        })

        $rootScope.$on('hide nav',function(val){
            $rootScope.titles = [];
        })
        
        $rootScope.$broadcast("nav change",true);
        vm.status = {
            isFirstOpen: true,
            isFirstDisabled: false
        };


        function isOpen(section) {
            return Menu.isSectionSelected(section);
        }

        function toggleOpen(section) {
            Menu.toggleSelectSection(section);
        }

        $scope.toggle = toggleSidenav('left');

        function toggleSidenav(navID) {
            var debounceFn = $mdUtil.debounce(function () {
                $mdSidenav(navID)
                    .toggle()
                    .then(function () {
                        console.log("toggle " + navID + " is done");
                    });
            }, 300);
            return debounceFn;
        }

        $scope.showBottomSheet = function ($event) {
            var template = '';
            switch ($rootScope.estadoActual) {
                case 'home.enterprises':
                    template = 'modules/enterprises/views/create-enterprise.client.view.html';
                    break;

                case 'home.products':
                    $state.go('home.createProduct', $rootScope.estadoActualParams);
                    break;

                case 'home.viewProduct':
                    $state.go('home.createProduct', $rootScope.estadoActualParams);
                    break;

                case 'home.editProduct':
                    $state.go('home.createProduct', $rootScope.estadoActualParams);
                    break;

                case 'home.editValores':
                    $state.go('home.editValores', $rootScope.estadoActualParams);
                    break;

                case 'home.categories':
                    $state.go('home.createCategory');
                    // template = 'modules/categories/views/create-category.client.view.html';
                    break;

                case 'home.viewCategory':
                    $state.go('home.createCategory');
                    // template = 'modules/categories/views/create-category.client.view.html';
                    break;

                case 'home.editCategory':
                    $state.go('home.createCategory');
                    // template = 'modules/categories/views/create-category.client.view.html';
                    break;

                case 'home.subs':
                    template = 'modules/subs/views/create-sub.client.view.html';
                    break;

                case 'home.viewSub':
                    template = 'modules/subs/views/create-sub.client.view.html';
                    break;

                case 'home.editSub':
                    template = 'modules/subs/views/create-sub.client.view.html';
                    break;

                case 'home.tareas':
                    template = 'modules/tareas/views/create-tarea.client.view.html';
                    break;

                case 'home.viewTarea':
                    template = 'modules/tareas/views/create-tarea.client.view.html';
                    break;

                case 'home.editTarea':
                    template = 'modules/tareas/views/create-tarea.client.view.html';
                    break;

                case 'home.finanzas':
                    template = 'modules/finanzas/views/list-finanzas.client.view.html';
                    break;

                case 'home.viewFinanza':
                    template = 'modules/finanzas/views/view-finanza.client.view.html';
                    break;

                case 'home.editComprobante':
                    template = 'modules/finanzas/views/create-finanza.client.view.html';
                    break;

                case 'home.viewTarea':
                    template = 'modules/tareas/views/create-tarea.client.view.html';
                    break;

                case 'home.editTarea':
                    template = 'modules/tareas/views/create-tarea.client.view.html';
                    break;

                case 'home.clients':
                    // template = 'modules/_clients/views/create-client.client.view.html';
                    $state.go('home.createClient');
                    break;

                case 'home.viewClient':
                    $state.go('home.createClient');
                    // template = 'modules/_clients/views/create-client.client.view.html';
                    break;

                case 'home.editClient':
                    template = 'modules/_clients/views/create-client.client.view.html';
                    break;

                case 'home.providers':
                    $state.go('home.createProvider');
                    break;

                case 'home.viewProvider':
                    $state.go('home.createProvider');
                    break;

                case 'home.editProvider':
                    $state.go('home.createProvider');
                    break;

                case 'home.contacts':
                    $state.go('home.createContact');
                    break;

                case 'home.viewContact':
                    template = 'modules/contacts/views/create-contact.client.view.html';
                    break;

                case 'home.editContact':
                    template = 'modules/contacts/views/create-contact.client.view.html';
                    break;

                case 'home.taxConditions':
                    template = 'modules/taxconditions/views/create-taxcondition.client.view.html';
                    break;

                case 'home.viewTaxCondition':
                    template = 'modules/taxconditions/views/create-taxcondition.client.view.html';
                    break;

                case 'home.editTaxCondition':
                    template = 'modules/taxconditions/views/create-taxcondition.client.view.html';
                    break;

                case 'home.condicionVentas':
                    $state.go('home.createCondicionventa');
                    break;

                case 'home.viewCondicionVenta':
                    template = 'modules/condicionventas/views/create-condicionventa.client.view.html';
                    break;

                case 'home.editCondicionVenta':
                    template = 'modules/condicionventas/views/create-condicionventa.client.view.html';
                    break;

                case 'home.comprobantes':
                    //template = 'modules/comprobantes/views/create-comprobante.client.view.html';
                    $state.go('home.createComprobante');
                    break;

                case 'home.viewComprobante':
                    template = 'modules/comprobantes/views/create-comprobante.client.view.html';
                    break;

                case 'home.costcenters':
                    template = 'modules/costcenters/views/create-costcenter.client.view.html';
                    break;

                case 'home.viewCostcenter':
                    template = 'modules/costcenters/views/create-costcenter.client.view.html';
                    break;

                case 'home.editCostcenter':
                    template = 'modules/costcenters/views/create-costcenter.client.view.html';
                    break;

                case 'home.createVenta':
                    $state.go('home.createVenta');
                    break;

                case 'home.ventasMostrador':
                    $state.go('home.ventasMostrador');
                    break;

                case 'home.compras':
                    $state.go('home.createCompra');
                    break;

                case 'home.viewCompra':
                    $state.go('home.createCompra');
                    break;

                case 'home.editCompra':
                    $state.go('home.createCompra');
                    break;

                case 'home.ventas':
                    $state.go('home.createVenta');
                    break;

                case 'home.viewVenta':
                    $state.go('home.createVenta');
                    break;

                case 'home.editVenta':
                    $state.go('home.createVenta');
                    break;

                case 'home.personal':
                    $state.go('home.createPersonal');
                    break;

                case 'home.viewPersona':
                    $state.go('home.createPersonal');
                    break;

                case 'home.editPersona':
                    $state.go('home.createPersonal');
                    break;

                case 'home.empleados':
                    $state.go('home.createPersonal');
                    break;

                case 'home.pedidos':
                    $state.go('home.createPedido', $rootScope.estadoActualParams);
                    break;

                case 'home.viewPedido':
                    $state.go('home.createPedido', $rootScope.estadoActualParams);
                    break;

                case 'home.editPedido':
                    $state.go('home.createPedido', $rootScope.estadoActualParams);
                    break;

                case 'home.finanzas':
                    $state.go('home.createFinanza', $rootScope.estadoActualParams);
                    break;

                case 'home.viewFinanza':
                    $state.go('home.createFinanza', $rootScope.estadoActualParams);
                    break;

                case 'home.sucursales':
                    $state.go('home.createSucursal');
                    break;

                case 'home.cajas':
                    $state.go('home.createCaja');
                    break;

                case 'home.procesos':
                    $state.go('home.createProceso');
                    break;

                case 'home.viewProceso':
                    $state.go('home.createProceso');
                    break;

                case 'home.editProceso':
                    $state.go('home.createProceso');
                    break;

                case 'home.procedimientos':
                    template = 'modules/procedimientos/views/create-procedimiento.client.view.html';
                    break;

                case 'home.viewProcedimiento':
                    template = 'modules/procedimientos/views/create-procedimiento.client.view.html';
                    break;

                case 'home.editProcedimiento':
                    template = 'modules/procedimientos/views/edit-procedimiento.client.view.html';
                    break;

                case 'home.rrhh':
                    $state.go('home.createArea');
                    break;

                case 'home.area':
                    $state.go('home.createArea');
                    break;

                case 'home.viewArea':
                    $state.go('home.createArea');
                    break;

                case 'home.editArea':
                    $state.go('home.createArea');
                    break;

                case 'home.puesto':
                    $state.go('home.createPuesto');
                    break;

                case 'home.viewPuesto':
                    $state.go('home.createPuesto');
                    break;

                case 'home.editPuesto':
                    $state.go('home.createPuesto');
                    break;

                case 'home.viewImpuesto':
                    $state.go('home.createImpuesto');
                    break;

                case 'home.remuneraciones':
                    $state.go('home.createRemuneracione');
                    break;

                case 'home.viewRemuneracione':
                    $state.go('home.createRemuneracione');
                    break;

                case 'home.editRemuneracione':
                    $state.go('home.createRemuneracione');
                    break;

                case 'home.listEmpleado':
                    $state.go('home.createEmpleado');
                    break;

                case 'home.liquidaciones':
                    $state.go('home.createLiquidacion', {empleadoId: $rootScope.empleadoId});
                    break;

                case 'home.actividades':
                    $state.go('home.actividades');
                    break;

                default:
                    template = '';
                    break;

            }

            if (template === '') {
                // console.log('No existe un estado configurado para esta acción!');
                // console.log($rootScope.estadoActual);
            } else {
                //console.log('estadoactual: ', $rootScope.estadoActual);
                $mdBottomSheet.show({
                    templateUrl: template,
                    // controller: 'ListBottomSheetCtrl',
                    targetEvent: $event
                }).then(function (clickedItem) {
                    //$mdBottomSheet.hide();
                    /*console.log('por aqui ando');*/
                });
            }
            ;
        };

        $scope.backButtom = function ($event) {
            if (($stateParams.back !== undefined) && ($stateParams.tipo !== undefined)) {
                $rootScope.estadoActualParams.tipo = $stateParams.tipo;
                $state.go($stateParams.back, $rootScope.estadoActualParams);
            } else {
                if (($rootScope.estadoActual == 'home.viewProduct') || ($rootScope.estadoActual == 'home.editProduct')) {
                    if ($rootScope.tipoProducto !== undefined) {
                        switch ($rootScope.tipoProducto) {
                            case 'p':
                                $rootScope.estadoActualParams.tipo = 'p';
                                break;
                            case 'm':
                                $rootScope.estadoActualParams.tipo = 'm';
                                break;
                            case 'i':
                                $rootScope.estadoActualParams.tipo = 'i';
                                break;
                        }
                    } else {
                        console.log("[+] rootScope.tipoProducto es indefinido");
                    }
                } else if (($rootScope.estadoActual == 'home.viewPedido') || ($rootScope.estadoActual == 'home.editPedido')) {
                    if ($rootScope.tipoPedido !== undefined) {
                        switch ($rootScope.tipoPedido) {
                            case 'venta':
                                $rootScope.estadoActualParams.tipo = 'venta';
                                // console.log($rootScope.estadoActualParams);
                                break;
                            case 'compra':
                                $rootScope.estadoActualParams.tipo = 'compra';
                                // console.log($rootScope.estadoActualParams);
                                break;
                        }
                    }
                }
                else if (($rootScope.estadoActual == 'home.viewFinanza') || ($rootScope.estadoActual == 'home.editFinanza')) {
                    if ($rootScope.tipoFinanza !== undefined) {
                        switch ($rootScope.tipoFinanza) {
                            case 'debe':
                                $rootScope.estadoActualParams.tipo = 'debe';
                                break;
                            case 'haber':
                                $rootScope.estadoActualParams.tipo = 'haber';
                                // console.log($rootScope.estadoActualParams);
                                break;
                        }
                    }
                }
                // console.log($rootScope.estadoActualParams, 'estado actual params');
                $state.go($rootScope.prevState, $rootScope.estadoActualParams);
            }
        };

        $scope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
            switch (to.name) {
                case('home.createPedido'):
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = toParams;
                    if (toParams.tipo !== undefined) {
                        var tipo = toParams.tipo.charAt(0).toUpperCase() + toParams.tipo.slice(1);
                        $rootScope.tituloActual = to.titulo + ' ' + 'De' + ' ' + tipo;
                    } else {
                        $rootScope.tituloActual = to.titulo;
                    }
                    if ($scope.authentication.user.roles[0] === 'cliente') {
                        $rootScope.tituloActual = 'Nuevo Pedido'
                    }
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    // console.log($rootScope.tituloActual);
                    break;
                case('home.pedidos'):
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = toParams;
                    if (toParams.tipo !== undefined) {
                        var tipo = toParams.tipo.charAt(0).toUpperCase() + toParams.tipo.slice(1);
                        if (tipo == 'Compra') {
                            $rootScope.tituloActual = 'Compras';
                        } else {
                            $rootScope.tituloActual = 'Ventas';
                        }
                        if ($scope.authentication.user.roles[0] === 'cliente') {
                            $rootScope.tituloActual = 'Pedidos'
                        }
                    } else {
                        $rootScope.tituloActual = to.titulo;
                    }
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    // console.log($rootScope.tituloActual);
                    break;
                case('home.finanzas'):
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = toParams;
                    if (toParams.tipo !== undefined) {
                        if (toParams.tipo == 'debe') {
                            $rootScope.tituloActual = 'Cuentas a pagar';
                        } else {
                            $rootScope.tituloActual = 'Cuentas a cobrar';
                        }
                    } else {
                        $rootScope.tituloActual = to.titulo;
                    }
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    // console.log($rootScope.tituloActual);
                    break;
                case('home.stock'):
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = toParams;
                    if (toParams.tipo !== undefined) {
                        if (toParams.tipo == 'p') {
                            $rootScope.tituloActual = 'Stock de Productos';
                        } else {
                            $rootScope.tituloActual = 'Stock de Materias Primas';
                        }
                    } else {
                        $rootScope.tituloActual = to.titulo;
                    }
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    // console.log($rootScope.tituloActual);
                    break;
                case('home.viewFinanza'):
                    if (toParams.tipo == 'debe') {
                        $rootScope.tituloActual = 'Cuentas a pagar';
                    } else if (toParams.tipo == 'haber') {
                        $rootScope.tituloActual = 'Cuentas a cobrar';
                    }
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = toParams;
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    break;
                case('home.products'):
                    if (toParams.tipo == 'm') {
                        $rootScope.tituloActual = 'Materia Prima';
                    } else if (toParams.tipo == 'i') {
                        $rootScope.tituloActual = 'Insumos';
                    } else if (toParams.tipo == 'p') {
                        $rootScope.tituloActual = 'Productos';
                    }
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = toParams;
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    break;
                case('home.createProduct'):
                    if (toParams.tipo == 'm') {
                        $rootScope.tituloActual = 'Creacion De Materia Prima';
                    } else if (toParams.tipo == 'i') {
                        $rootScope.tituloActual = 'Creacion De Insumo';
                    } else if (toParams.tipo == 'p') {
                        $rootScope.tituloActual = 'Creacion De Producto';
                    }
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = toParams;
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    break;
                case('home.viewProduct'):
                    if (toParams.tipo == 'm') {
                        $rootScope.tituloActual = 'Creacion De Materia Prima';
                    } else if (toParams.tipo == 'i') {
                        $rootScope.tituloActual = 'Creacion De Insumo';
                    } else if (toParams.tipo == 'p') {
                        $rootScope.tituloActual = 'Producto';
                    }
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = toParams;
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    break;
                case('home.editProduct'):
                    //if(toParams.tipo=='m'){
                    if (fromParams.tipo == 'm') {
                        $rootScope.tituloActual = 'Editar Materia Prima';
                        $rootScope.tipoProducto = 'm';
                    } else if (fromParams.tipo == 'i') {
                        $rootScope.tituloActual = 'Editar Insumo';
                        $rootScope.tipoProducto = 'i';
                    } else if (fromParams.tipo == 'p') {
                        $rootScope.tituloActual = 'Editar Producto';
                        $rootScope.tipoProducto = 'p';
                    }
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = fromParams;
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    break;
                default:
                    $rootScope.tituloActual = to.titulo;
                    $rootScope.estadoActual = to.name;
                    $rootScope.estadoActualParams = toParams;
                    $rootScope.prevState = to.prevState;
                    $rootScope.newButton = to.newButton;
                    break;
            }
            ;
        });

        //asigna el puesto de trabajo al rootScope
        $http({
            method: 'GET',
            url: ('/api/users/byId'),
            params: {userId: $scope.authentication.user._id}
        })
            .then(function (response) {
                /*console.log('user', response.data);
                console.log('puesto', response.data.puesto);*/
                if ((response.data.puesto !== null) && (response.data.puesto !== undefined)) {
                    Puestos.get({puestoId: response.data.puesto._id}, function (res) {
                        $rootScope.puesto = res;
                    }, function (err) {

                    });
                }

            }, function (response) {
                console.log('error');
            });

        $scope.showAdvancedArea = function (ev) {
            var areaActive = ev.toElement.id;
            // console.log('value:', areaActive);
            ShowAreaInfo.setArea($scope.puesto.area._id);
            $mdDialog.show({
                controller: AreaModalController,
                templateUrl: '/modules/areas/views/view-area.client.view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            })
                .then(function (answer) {
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });
        };

        $scope.showDialog = function ($event, item) {
            var parentEl = angular.element(document.body);
            var template = 'modules/tareas/views/create-tarea.client.view.html';
            $mdDialog.show({
                parent: angular.element(document.body),
                targetEvent: $event,
                templateUrl: template,
                locals: {
                    item: item,
                    SEARCH: $scope.SEARCH
                },
                controller: DialogController
            })
                .then(function (answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                }, function () {
                    //$scope.alert = 'You cancelled the dialog.';
                });
        }; //end showDialod

        $scope.showDialogActividad = function ($event) {
            console.log($scope.authentication.user._id);
            $http.post('/api/empleados/user', {
                user: $scope.authentication.user._id
            }).then(function(empleado) {
                $mdDialog.show({
                    targetEvent: $event,
                    templateUrl: 'modules/actividades/views/create-actividad.client.view.html',
                    locals: {
                        item: empleado.data[0]
                    },
                    controller: ActividadDialogController
                });
            })
        };

        $rootScope.arrayTareas = [];
        $rootScope.arrayTareasAsignadas = [];

        $scope.findTareas = function () {
            $rootScope.arrayTareas = [];
            $rootScope.arrayTareasAsignadas = [];
            if ($scope.SEARCH !== undefined) {
                $scope.tareas = Tareas.query({e: $scope.SEARCH.enterprise});
                $timeout(function () {
                    $rootScope.arrayTareas = $filter('filter')($scope.tareas, function (item) {
                        return ((item.usuario._id === $scope.authentication.user._id) && (item.deleted === false));
                    });
                    $rootScope.arrayTareasAsignadas = $filter('filter')($scope.tareas, function (item) {
                        return ((item.user._id === $scope.authentication.user._id) && (item.deleted === false) && (item.forMe === false));
                    });
                }, 5000)
            }
        };

        $scope.findUsuarios = function () {
            if ($scope.SEARCH !== undefined) {
                $rootScope.usuarios = Users.query({e: $scope.SEARCH.enterprise});
            }
        };

        $scope.update = function (item) {
            var tarea = item;
            tarea.$update(function () {
            }, function (errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        }; //end update

        $scope.borrarRealizadas = function (n) {
            if (n == 1) {
                for (var i in $rootScope.arrayTareas) {
                    if ($rootScope.arrayTareas[i].realizado == true) {
                        $rootScope.arrayTareas[i].deleted = true;
                        $scope.update($rootScope.arrayTareas[i]);
                        $rootScope.arrayTareas.splice(i, 1);
                    }
                }
            }
            else {
                for (var i in $rootScope.arrayTareasAsignadas) {
                    if ($rootScope.arrayTareasAsignadas[i].realizado == true) {
                        $rootScope.arrayTareasAsignadas[i].deleted = true;
                        $scope.update($rootScope.arrayTareasAsignadas[i]);
                        $rootScope.arrayTareasAsignadas.splice(i, 1);
                    }
                }
            }
        }; //end borrarRealizadas

        function DialogController($scope, $rootScope, $mdDialog, $timeout, item, SEARCH, Tareas, Users, Authentication) {

            $scope.prioridad = false;

            $scope.findUsers = function () {
                if (SEARCH !== undefined) {
                    $scope.usuarios = Users.query({e: SEARCH.enterprise});
                }
            };

            $scope.borrarError = function () {
                $scope.errorTarea = undefined;
            };

            $scope.closeDialog = function () {
                $mdDialog.hide();
            };

            $scope.create = function ($event) {
                var autoAsignado = false;
                if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                    if (($scope.descripcion != undefined) && ($scope.descripcion != null)) {
                        if (($scope.user != undefined) && ($scope.user != null)) {
                            if ($scope.user._id === Authentication.user._id) {
                                autoAsignado = true;
                            }
                            var tarea = new Tareas({
                                descripcion: $scope.descripcion,
                                prioridad: $scope.prioridad,
                                usuario: $scope.user._id,
                                forMe: autoAsignado,
                                enterprise: SEARCH.enterprise
                            });

                            if (tarea.usuario === Authentication.user._id) {
                                tarea.user = $scope.user.displayName;
                                $rootScope.arrayTareas.push(tarea);
                                tarea.user = undefined;
                            }
                            else {
                                if (tarea.forMe === false) {
                                    tarea.usuario = $scope.user.displayName;
                                    ;
                                    $rootScope.arrayTareasAsignadas.push(tarea);
                                    tarea.usuario = $scope.user._id;
                                }
                            }

                            // Redirect after save
                            tarea.$save(function (response) {
                                // Clear form fields
                                $scope.closeDialog();
                                //$mdBottomSheet.hide();
                            }, function (errorResponse) {
                                $scope.error = errorResponse.data.message;
                            });
                        }
                        else {
                            $scope.errorTarea = 'Se debe indicar la persona a asignar la tarea';
                        }
                    }
                    else {
                        $scope.errorTarea = 'Se debe indicar la descripcion de la tarea';
                    }
                }
                ;
            }; //end Create

        };//end DialogController

        function ActividadDialogController($scope, $mdDialog, $state, item) {
            $scope.item = item;
            $scope.item.name = item.userLogin.displayName;

            $scope.closeDialog = function () {
                $mdDialog.hide();
            };

            $scope.createActividad = function ($event, item) {
                var actividad = new Actividades({
                    enterprise: item.enterprise,
                    operacion: $scope.operacion,
                    observaciones: $scope.observaciones,
                    empleado: item._id
                });

                actividad.$save(function () {
                    $scope.closeDialog();
                    $state.go('home.welcome', {}, {reload: true})
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            };
        }

        function AreaModalController($scope, $mdDialog, ShowAreaInfo) {
            // console.log('area modal');
            var areaActive = ShowAreaInfo.getArea();
            // console.log(areaActive);
            $http({
                method: 'GET',
                url: ('/api/findAreaById'),
                params: {areaId: areaActive}
            })
                .then(function (response) {
                    $scope.areaActive = response.data;
                    // console.log($scope.areaActive);
                    $scope.parent = $scope.areaActive.parent;
                    $http({
                        method: 'GET',
                        url: ('/api/puestoByAreaId'),
                        params: {areaId: $scope.areaActive._id}
                    })
                        .then(function (res) {
                            if (res.data[0] == null) {
                                $scope.puestosActive = null;
                            } else {
                                $scope.puestosActive = res.data;
                            }
                            // console.log('puestos', $scope.puestosActive);
                        }, function (response) {
                            console.log('error');
                        });
                }, function (response) {
                    console.log('error');
                });
            $scope.hide = function () {
                $mdDialog.hide();
            };
            $scope.cancel = function () {
                $mdDialog.cancel();
            };
            $scope.answer = function (answer) {
                $mdDialog.hide(answer);
            };
        };


    }
]);

'use strict';
angular.module('core').run(['$templateCache', function ($templateCache) {
      $templateCache.put('partials/menu-link.tmpl.html',
        '<md-button ui-sref-active="active" \n' +
        '  ui-sref="{{section.state}}" ng-click="focusSection()">\n' +
        '<ng-md-icon icon="{{section.icon}}" ng-if="section.icon"></ng-md-icon>\n' +
        '  {{section | humanizeDoc}}\n' +
        '  <span  class="md-visually-hidden "\n' +
        '    ng-if="isSelected()">\n' +
        '    current page\n' +
        '  </span>\n' +
        '</md-button>\n' +
        '');
    }]);

angular.module('core').directive('menuLink', [
	function() {
		return {
        scope: {
          section: '='
        },
        templateUrl: 'partials/menu-link.tmpl.html',
        link: function ($scope, $element) {
          var controller = $element.parent().controller();

          $scope.focusSection = function () {
            // set flag to be used later when
            // $locationChangeSuccess calls openPage()
            controller.autoFocusContent = true;
          };
        }
      };
	}
]);

'use strict';

angular.module('core').run(['$templateCache', function ($templateCache) {
      $templateCache.put('partials/menu-toggle.tmpl.html',
        '<md-button class="md-button-toggle"\n' +
        '  ng-click="toggle()"\n' +
        '  aria-controls="docs-menu-{{section.name | nospace}}"\n' +
        '  ng-class="{\'toggled\' : isOpen()}"\n' +
        '  flex layout="row"\n' +
        '  aria-expanded="{{isOpen()}}">\n' +
        '  {{section.name}}\n' +
        '  <ng-md-icon icon="keyboard_arrow_right" class=" pull-right md-toggle-icon"\n' +
        '  ng-class="{\'toggled\' : isOpen()}"></ng-md-icon>\n' +
        '</md-button>\n' +
        '<ul ng-show="isOpen()" id="docs-menu-{{section.name | nospace}}" class="menu-toggle-list">\n' +
        '  <li ng-repeat="page in section.pages">\n' +
        '    <menu-link section="page"></menu-link>\n' +
        '  </li>\n' +
        '</ul>\n' +
        '');
    }]);

angular.module('core').directive('menuToggle', ['$timeout',
	function($timeout) {
		return {
        scope: {
          section: '='
        },
        templateUrl: 'partials/menu-toggle.tmpl.html',
        link: function (scope, element) {
          var controller = element.parent().controller();

          scope.isOpen = function () {
            return controller.isOpen(scope.section);
          };
          scope.toggle = function () {
            controller.toggleOpen(scope.section);
          };

          var parentNode = element[0].parentNode.parentNode.parentNode;
          if (parentNode.classList.contains('parent-list-item')) {
            var heading = parentNode.querySelector('h2');
            console.log(element, 'elemnt');
            element[0].firstChild.setAttribute('aria-describedby', heading.id);
          }
        }
      };
	}
]);

'use strict';

angular.module('core')
  .directive('panelWidget', function() {
    return {
      restrict: 'E',
      replace: true,
      transclude: true,
      scope: { title: '@', template: '@', options: '@' },
      template: '' +
      '<section layout-margin class="md-whiteframe-5dp panel-widget">' +
      '  <md-toolbar md-theme="custom" class="panel-widget-toolbar">' +
      '    <div class="md-toolbar-tools">' +
      '      <h3 class="panel-widget-tittle">{{title}}</h3>' +
      '      <span flex></span>' +
      '      <md-button ng-show="options" ng-click="$showOptions = !$showOptions" class="md-icon-button" aria-label="Show options">' +
      '        <div style="padding-top:8px"><ng-md-icon icon="more_vert"></ng-md-icon></div>' +
      '      </md-button>' +
      '    </div>' +
      '  </md-toolbar>' +
      '  <div class="md-padding" ng-include="template"></div>' +
      '</section>',
      compile: function(element, attrs, linker) {
        return function(scope, element) {
          linker(scope, function(clone) {
            element.append(clone);
          });
        };
      }
    };
  });

'use strict';

angular.module('core').filter('humanizeDoc', [
	function() {
		return function(doc) {
        if (!doc) return;
        if (doc.type === 'directive') {
          return doc.name.replace(/([A-Z])/g, function ($1) {
            return '-' + $1.toLowerCase();
          });
        }
        
        return doc.label || doc.name;
      };
	}
]);
'use strict';

angular.module('core').filter('nospace', [
	function() {
		return function(value) {
        return (!value) ? '' : value.replace(/ /g, '');
      };
	}
]);
'use strict';

/*
  ~~~~~~ buttons array model

  buttons = [
    {
      name: 'view',
      label: 'View',
      icon: 'viewIcon'
    }
  ]
*/

// Create the Socket.io wrapper service
angular.module('core').service('BottomSheetService', ['$mdBottomSheet',
  function($mdBottomSheet) {

    var sheet = function($event, buttons, callback) {
      $mdBottomSheet.show({
        controller: BottomSheetController,
        templateUrl: '/modules/core/views/dynamic-bottomsheet.html',
        // controller: 'ListBottomSheetCtrl',
        targetEvent: $event,
        resolve: {
          buttons: function() {
            return buttons;
          }
        }

      }).then(function(clickedItem) {
        callback(null, clickedItem)
      }, function() {
        console.log('rejected!!!');
        callback('rejected');
      })
    };

    function BottomSheetController($scope, buttons) {

      $scope.items = buttons;

      $scope.clickHandler = function(name) {
        $mdBottomSheet.hide(name);
      }
    }

    return {
      sheet: function($event, buttons, callback) {
        sheet($event, buttons, callback);
      }
    }
  }

]);

'use strict';

angular.module('core').factory('Menu', ['$location', '$rootScope', 'Authentication', '$timeout',
    function ($location, $rootScope, Authentication, $timeout) {
        var authentication = Authentication.user;
        var sections = [];

        // var session_menu = {
        //       name: 'Sesión',
        //       type: 'toggle',
        //       pages: [{
        //         name: 'Cerrar Sesión',
        //         type: 'link',
        //         state: 'home.logout',
        //         icon: 'logout'
        //       }]
        // };

        // var config_menu = {
        //       name: 'Mi Perfil',
        //       type: 'toggle',
        //       pages: [{
        //         name: 'Editar Perfil',
        //         type: 'link',
        //         state: 'home.editProfile',
        //         icon: 'person'
        //       }, {
        //         name: 'Cambiar Imagen de Perfil',
        //         state: 'home.changeProfilePicture',
        //         type: 'link',
        //         icon: 'insert_photo'
        //       },
        //       {
        //         name: 'Cambiar Contraseña',
        //         state: 'home.changePassword',
        //         type: 'link',
        //         icon: 'lock'
        //       }, {
        //           name: 'Cuentas Sociales',
        //           state: 'home.manageSocialAccounts',
        //           type: 'link',
        //           icon: 'people'
        //         }]
        //     };

        var ventas_staff_menu = {
            name: 'Ventas',
            type: 'toggle',
            state: 'home.ventas',
            pages: [{
                name: 'Venta por mostrador',
                state: 'home.ventasMostrador',
                type: 'link',
                icon: 'dashboard',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Nueva Venta',
                state: 'home.createVenta',
                type: 'link',
                icon: 'add_circle_outline',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Ventas',
                state: 'home.ventas',
                type: 'link',
                icon: 'remove_red_eye',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Nuevo Presupuesto',
                type: 'link',
                state: 'home.createPedido({ tipo: "venta" })',
                icon: 'add'
            }, {
                name: 'Presupuestos',
                state: 'home.pedidos({ tipo: "venta" })',
                type: 'link',
                icon: 'assignment',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Productos',
                state: 'home.products({tipo: "p"})',
                type: 'link',
                icon: 'store',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Stock de Productos',
                state: 'home.stock({tipo: "p"})',
                type: 'link',
                icon: 'dashboard',
                adminOnly: true,
                staffOnly: false                
            }, {
                name: 'Clientes',
                state: 'home.clients',
                type: 'link',
                icon: 'perm_contact_cal',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Reportes',
                state: 'home.reportes({ tipo: "venta"})',
                type: 'link',
                icon: 'insert_chart',
                adminOnly: true,
                staffOnly: false
            }, ]
        };

        var ventas_user_menu = {
            name: 'Ventas',
            type: 'toggle',
            state: 'home.ventas',
            pages: [{
                name: 'Nueva Orden',
                type: 'link',
                state: 'home.createPedido({ tipo: "venta" })',
                icon: 'add'
            }, {
                name: 'Nuevo Presupuesto',
                state: 'home.pedidos({ tipo: "venta" })',
                type: 'link',
                icon: 'assignment',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Consultar Stock',
                state: 'home.stock({tipo: "p"})',
                type: 'link',
                icon: 'dashboard',
                adminOnly: true,
                staffOnly: false
            }]
        };

        var compras_staff_menu = {
            name: 'Compras',
            type: 'toggle',
            state: 'home.compras',
            pages: [{
                name: 'Nuevo Pedido',
                state: 'home.createPedido({ tipo: "compra" })',
                type: 'link',
                icon: 'add',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Nueva Compra',
                state: 'home.createCompra({ tipo: "compra" })',
                type: 'link',
                icon: 'add_circle_outline',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Solicitudes',
                state: 'home.pedidos({ tipo: "compra" })',
                type: 'link',
                icon: 'assignment',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Compras',
                state: 'home.compras',
                type: 'link',
                icon: 'remove_red_eye',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Proveedores',
                state: 'home.providers',
                type: 'link',
                icon: 'local_shipping',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Materia Prima',
                state: 'home.products({tipo: "m"})',
                type: 'link',
                icon: 'grain',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Insumos',
                state: 'home.products({tipo: "i"})',
                type: 'link',
                icon: 'gesture',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Reportes',
                state: 'home.reportes({ tipo: "compra"})',
                type: 'link',
                icon: 'insert_chart',
                adminOnly: true,
                staffOnly: false
            }]
        };

        var compras_user_menu = {
            name: 'Compras',
            type: 'toggle',
            state: 'home.compras',
            pages: [{
                name: 'Nuevo Pedido',
                state: 'home.createPedido({ tipo: "compra" })',
                type: 'link',
                icon: 'add',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Nueva Compra',
                state: 'home.createCompra({ tipo: "compra" })',
                type: 'link',
                icon: 'add_circle_outline',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Solicitudes',
                state: 'home.pedidos({ tipo: "compra" })',
                type: 'link',
                icon: 'assignment',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Compras',
                state: 'home.compras',
                type: 'link',
                icon: 'remove_red_eye',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Proveedores',
                state: 'home.providers',
                type: 'link',
                icon: 'local_shipping',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Materia Prima',
                state: 'home.products({tipo: "m"})',
                type: 'link',
                icon: 'grain',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Insumos',
                state: 'home.products({tipo: "i"})',
                type: 'link',
                icon: 'gesture',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Stock de Materias Primas',
                state: 'home.stock({tipo: "m"})',
                type: 'link',
                icon: 'dashboard',
                adminOnly: true,
                staffOnly: false
            }]
        };

        var ventas_user_menu = {
            name: 'Ventas',
            type: 'toggle',
            state: 'home.ventas',
            pages: [{
                name: 'Venta por mostrador',
                state: 'home.ventasMostrador',
                type: 'link',
                icon: 'dashboard',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Nueva Venta',
                state: 'home.createVenta',
                type: 'link',
                icon: 'add_circle_outline',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Nuevo Presupuesto',
                type: 'link',
                state: 'home.createPedido({ tipo: "venta" })',
                icon: 'add'
            }, {
                name: 'Presupuestos',
                state: 'home.pedidos({ tipo: "venta" })',
                type: 'link',
                icon: 'assignment',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Consultar Stock',
                state: 'home.stock({tipo: "p"})',
                type: 'link',
                icon: 'dashboard',
                adminOnly: true,
                staffOnly: false
            }]
        };

        var produccion_menu = {
            name: 'Produccion',
            type: 'toggle',
            state: 'home.produccion',
            pages: [{
                name: 'Nueva Solicitud',
                type: 'link',
                state: 'home.createPedido({ tipo: "compra" })',
                icon: 'add'
            }, {
                name: 'Solicitudes',
                state: 'home.pedidos({ tipo: "compra" })',
                type: 'link',
                icon: 'assignment',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Stock de Materias Primas',
                state: 'home.stock({tipo: "m"})',
                type: 'link',
                icon: 'dashboard',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Productos y Fórmulas',
                state: 'home.products({tipo: "p"})',
                type: 'link',
                icon: 'store',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Costos Indirectos',
                state: 'home.listcentroDeCosto',
                type: 'link',
                icon: 'select_all',
                adminOnly: true,
                staffOnly: false
            }]
        };

        var produccion_user_menu = {
            name: 'Produccion',
            type: 'toggle',
            state: 'home.produccion',
            pages: [{
                name: 'Nueva Solicitud',
                type: 'link',
                state: 'home.createPedido({ tipo: "compra" })',
                icon: 'add'
            }, {
                name: 'Solicitudes',
                state: 'home.pedidos({ tipo: "compra" })',
                type: 'link',
                icon: 'assignment',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Stock de Materias Primas',
                state: 'home.stock({tipo: "m"})',
                type: 'link',
                icon: 'dashboard',
                adminOnly: true,
                staffOnly: false
            }]
        };

        var finanzas_menu = {
            name: 'Finanzas',
            state: 'home.finanzas',
            type: 'toggle',
            icon: 'account_circle',
            adminOnly: true,
            staffOnly: false,
            pages: [
                {
                    name: 'Tesoreria',
                    state: 'home.sucursales',
                    type: 'link',
                    icon: 'account_balance',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Cuentas a pagar',
                    state: 'home.finanzas({ tipo: "debe" })',
                    type: 'link',
                    icon: 'trending_down',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Cuentas a cobrar',
                    state: 'home.finanzas({ tipo: "haber" })',
                    type: 'link',
                    icon: 'trending_up',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Resumen económico',
                    state: 'home.resumenList',
                    type: 'link',
                    icon: 'dashboard'
                }]
        };

        var finanzas_user_menu = {
            name: 'Finanzas',
            state: 'home.finanzas',
            type: 'toggle',
            icon: 'account_circle',
            adminOnly: true,
            staffOnly: false,
            pages: [
                {
                    name: 'Tesoreria',
                    state: 'home.sucursales',
                    type: 'link',
                    icon: 'store',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Cuentas a pagar',
                    state: 'home.finanzas({ tipo: "debe" })',
                    type: 'link',
                    icon: 'trending_down',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Cuentas a cobrar',
                    state: 'home.finanzas({ tipo: "haber" })',
                    type: 'link',
                    icon: 'trending_up',
                    adminOnly: true,
                    staffOnly: false
                }]
        };

        var rrhh_menu = {
            name: 'RRHH',
            state: 'home.rrhh',
            type: 'toggle',
            icon: 'account_circle',
            adminOnly: true,
            staffOnly: false,
            pages: [
                {
                    name: 'Organigrama',
                    type: 'link',
                    state: 'home.rrhh',
                    icon: 'location_city',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Areas',
                    type: 'link',
                    state: 'home.area',
                    icon: 'view_agenda',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Puestos',
                    type: 'link',
                    state: 'home.puesto',
                    icon: 'recent_actors',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Procesos y Manuales',
                    state: 'home.procesos',
                    type: 'link',
                    icon: 'settings'
                }, {
                    name: 'Personal',
                    type: 'link',
                    state: 'home.empleados',
                    icon: 'people'
                }, {
                    name: 'Remuneraciones',
                    type: 'link',
                    state: 'home.remuneraciones',
                    icon: 'folder_shared'
                }, {
                    name: 'Nueva Liquidacion',
                    type: 'link',
                    state: 'home.createLiquidacion',
                    icon: 'note_add'
                }
            ]
        };

        var rrhh_user_menu = {
            name: 'RRHH',
            state: 'home.rrhh',
            type: 'toggle',
            icon: 'account_circle',
            adminOnly: true,
            staffOnly: false,
            pages: [
                {
                    name: 'Organigrama',
                    type: 'link',
                    state: 'home.rrhh',
                    icon: 'location_city',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Areas',
                    type: 'link',
                    state: 'home.area',
                    icon: 'view_agenda',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Puestos',
                    type: 'link',
                    state: 'home.puesto',
                    icon: 'recent_actors',
                    adminOnly: true,
                    staffOnly: false
                }, {
                    name: 'Procesos y Manuales',
                    state: 'home.procesos',
                    type: 'link',
                    icon: 'settings'
                }
            ]
        };

        var impuestos_menu = {
            name: 'Impuestos',
            state: 'home.impuestos',
            type: 'toggle',
            icon: 'gavel',
            pages: [
                {
                    name: 'Impuestos',
                    type: 'link',
                    state: 'home.impuestos',
                    icon: 'local_atm',
                    adminOnly: false,
                    staffOnly: false
                }]
        };

        var config_groso_staff_menu = {
            name: 'Torre de Control',
            type: 'toggle',
            pages: [{
                name: 'Mi Empresa',
                type: 'link',
                state: 'home.enterprises',
                icon: 'business'
            }, {
                name: 'Usuarios',
                state: 'home.personal',
                type: 'link',
                icon: 'group_add',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Comprobantes',
                state: 'home.comprobantes',
                type: 'link',
                icon: 'view_list'
            }, {
                name: 'Condiciones de IVA',
                state: 'home.taxConditions',
                type: 'link',
                icon: 'view_list'
            }, {
                name: 'Condiciones de Pago',
                state: 'home.condicionVentas',
                type: 'link',
                icon: 'receipt'
            }, {
                name: 'UENs',
                type: 'link',
                state: 'home.subs',
                icon: 'panorama_fisheye',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Categorías',
                state: 'home.categories',
                type: 'link',
                icon: 'apps',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Contactos',
                state: 'home.contacts',
                type: 'link',
                icon: 'person',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Centros de Costo',
                state: 'home.costcenters',
                type: 'link',
                icon: 'view_list',
                adminOnly: true,
                staffOnly: false
            }]
        };

        var config_admin_staff_menu = {
            name: 'Torre de Control',
            type: 'toggle',
            pages: [{
                name: 'Usuarios',
                state: 'home.personal',
                type: 'link',
                icon: 'group_add',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'UENs',
                type: 'link',
                state: 'home.subs',
                icon: 'panorama_fisheye',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Categorías',
                state: 'home.categories',
                type: 'link',
                icon: 'apps',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Contactos',
                state: 'home.contacts',
                type: 'link',
                icon: 'person',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Centros de Costo',
                state: 'home.costcenters',
                type: 'link',
                icon: 'view_list',
                adminOnly: true,
                staffOnly: false
            }]
        };

        var cliente_user_menu = {
            name: 'Pedidos',
            type: 'toggle',
            state: 'home.pedidos',
            pages: [{
                name: 'Nuevo Pedido',
                type: 'link',
                state: 'home.createPedido({ tipo: "venta" })',
                icon: 'add'
            }, {
                name: 'Pedidos',
                state: 'home.pedidos({ tipo: "venta" })',
                type: 'link',
                icon: 'assignment',
                adminOnly: true,
                staffOnly: false
            }, {
                name: 'Lista de Precios',
                state: 'home.products({tipo: "p"})',
                type: 'link',
                icon: 'style',
                adminOnly: true,
                staffOnly: false
            }]
        };

        var presupuestos_menu = {
            name: 'Ventas',
            type: 'toggle',
            state: 'home.ventas',
            pages: [{
                name: 'Nuevo Presupuesto',
                type: 'link',
                state: 'home.createPedido({ tipo: "venta" })',
                icon: 'add'
            }, {
                name: 'Presupuestos',
                state: 'home.pedidos({ tipo: "venta" })',
                type: 'link',
                icon: 'assignment',
                adminOnly: true,
                staffOnly: false
            }]
        }

        var ventas_menu = {
            name: 'Ventas',
            state: 'home.ventas',
            type: 'link'
        };

        var compras_menu = {
            name: 'Compras',
            state: 'home.compras',
            type: 'link'
        };

        var stock_menu = {
            name: 'Stock',
            state: 'home.stock',
            type: 'link'
        };

        var meetup_menu = {
            name: '#meetUP',
            state: 'home.meetup',
            type: 'link'
        };

        var procesos_menu = {
            name: 'Mis Procesos',
            state: 'home.procesos',
            type: 'link'
        };

        var entregas_menu = {
            name: 'Entregas',
            state: 'home.entregas',
            type: 'link'
        };


        $timeout(function () {
            if (authentication !== '') {
                switch (authentication.roles[0]) {
                    case 'groso':
                        sections.push(ventas_staff_menu);
                        sections.push(compras_staff_menu);
                        sections.push(produccion_menu);
                        sections.push(rrhh_menu);
                        sections.push(impuestos_menu);
                        sections.push(finanzas_menu);
                        sections.push(config_groso_staff_menu);
                        // sections.push(meetup_menu);
                        // sections.push(config_menu);
                        // sections.push(admin_staff_menu);
                        // sections.push(rrhh_menu);
                        // sections.push(ordenes_menu);
                        // sections.push(ventas_menu);
                        // sections.push(compras_menu);
                        // sections.push(entregas_menu);
                        // sections.push(stock_menu);
                        // sections.push(procesos_menu);
                        break;

                    case 'admin':
                        sections.push(ventas_staff_menu);
                        sections.push(compras_staff_menu);
                        sections.push(produccion_menu);
                        sections.push(rrhh_menu);
                        sections.push(impuestos_menu);
                        sections.push(finanzas_menu);
                        sections.push(config_admin_staff_menu);
                        break;

                    case 'user':
                        sections.push(ventas_user_menu);
                        sections.push(compras_user_menu);
                        sections.push(rrhh_user_menu);
                        sections.push(impuestos_menu);
                        sections.push(finanzas_user_menu);
                        break;

                    case 'rrhh':
                        sections.push(rrhh_menu);
                        break;

                    case 'compras':
                        sections.push(compras_user_menu);
                        break;

                    case 'ventas':
                        sections.push(ventas_user_menu);
                        break;

                    case 'produccion':
                        sections.push(presupuestos_menu);
                        sections.push(produccion_user_menu);
                        break;

                    case 'cliente':
                        sections.push(cliente_user_menu);
                        break;

                    default:
                    // sections.push(session_menu);
                }
                ;
            }
        }, 500);

        var self;

        return self = {
            sections: sections,

            toggleSelectSection: function (section) {
                self.openedSection = (self.openedSection === section ? null : section);
            },
            isSectionSelected: function (section) {
                return self.openedSection === section;
            },
            sectionSelected: function () {
                return self.openedSection;
            },
            selectPage: function (section, page) {
                page && page.url && $location.path(page.url);
                self.currentSection = section;
                self.currentPage = page;
            }
        };

        function sortByHumanName(a, b) {
            return (a.humanName < b.humanName) ? -1 :
                (a.humanName > b.humanName) ? 1 : 0;
        }

    }
]);
'use strict';

//Menu service used for managing  menus
angular.module('core').service('Menus', [

    function() {
        // Define a set of default roles
        this.defaultRoles = ['*'];

        // Define the menus object
        this.menus = {};

        // A private function for rendering decision 
        var shouldRender = function(user) {
            if (user) {
                if (!!~this.roles.indexOf('*')) {
                    return true;
                } else {
                    for (var userRoleIndex in user.roles) {
                        for (var roleIndex in this.roles) {
                            if (this.roles[roleIndex] === user.roles[userRoleIndex]) {
                                return true;
                            }
                        }
                    }
                }
            } else {
                return this.isPublic;
            }

            return false;
        };

        // Validate menu existance
        this.validateMenuExistance = function(menuId) {
            if (menuId && menuId.length) {
                if (this.menus[menuId]) {
                    return true;
                } else {
                    throw new Error('Menu does not exists');
                }
            } else {
                throw new Error('MenuId was not provided');
            }

            return false;
        };

        // Get the menu object by menu id
        this.getMenu = function(menuId) {
            // Validate that the menu exists
            this.validateMenuExistance(menuId);

            // Return the menu object
            return this.menus[menuId];
        };

        // Add new menu object by menu id
        this.addMenu = function(menuId, options) {
            options = options || {};

            // Create the new menu
            this.menus[menuId] = {
                isPublic: ((options.isPublic === null || typeof options.isPublic === 'undefined') ? true : options.isPublic),
                roles: options.roles || this.defaultRoles,
                items: options.items || [],
                shouldRender: shouldRender
            };

            // Return the menu object
            return this.menus[menuId];
        };

        // Remove existing menu object by menu id
        this.removeMenu = function(menuId) {
            // Validate that the menu exists
            this.validateMenuExistance(menuId);

            // Return the menu object
            delete this.menus[menuId];
        };

        // Add menu item object
        this.addMenuItem = function(menuId, options) {
            options = options || {};

            // Validate that the menu exists
            this.validateMenuExistance(menuId);

            // Push new menu item
            this.menus[menuId].items.push({
                title: options.title || '',
                state: options.state || '',
                type: options.type || 'item',
                class: options.class,
                isPublic: ((options.isPublic === null || typeof options.isPublic === 'undefined') ? this.menus[menuId].isPublic : options.isPublic),
                roles: ((options.roles === null || typeof options.roles === 'undefined') ? this.menus[menuId].roles : options.roles),
                position: options.position || 0,
                items: [],
                shouldRender: shouldRender
            });

            // Add submenu items
            if (options.items) {
                for (var i in options.items) {
                	this.addSubMenuItem(menuId, options.link, options.items[i]);
                }
            }

            // Return the menu object
            return this.menus[menuId];
        };

        // Add submenu item object
        this.addSubMenuItem = function(menuId, parentItemState, options) {
            options = options || {};

            // Validate that the menu exists
            this.validateMenuExistance(menuId);

            // Search for menu item
            for (var itemIndex in this.menus[menuId].items) {
                if (this.menus[menuId].items[itemIndex].state === parentItemState) {
                    // Push new submenu item
                    this.menus[menuId].items[itemIndex].items.push({
                        title: options.title || '',
                        state: options.state|| '',
                        isPublic: ((options.isPublic === null || typeof options.isPublic === 'undefined') ? this.menus[menuId].items[itemIndex].isPublic : options.isPublic),
                        roles: ((options.roles === null || typeof options.roles === 'undefined') ? this.menus[menuId].items[itemIndex].roles : options.roles),
                        position: options.position || 0,
                        shouldRender: shouldRender
                    });
                }
            }

            // Return the menu object
            return this.menus[menuId];
        };

        // Remove existing menu object by menu id
        this.removeMenuItem = function(menuId, menuItemURL) {
            // Validate that the menu exists
            this.validateMenuExistance(menuId);

            // Search for menu item to remove
            for (var itemIndex in this.menus[menuId].items) {
                if (this.menus[menuId].items[itemIndex].link === menuItemURL) {
                    this.menus[menuId].items.splice(itemIndex, 1);
                }
            }

            // Return the menu object
            return this.menus[menuId];
        };

        // Remove existing menu object by menu id
        this.removeSubMenuItem = function(menuId, submenuItemURL) {
            // Validate that the menu exists
            this.validateMenuExistance(menuId);

            // Search for menu item to remove
            for (var itemIndex in this.menus[menuId].items) {
                for (var subitemIndex in this.menus[menuId].items[itemIndex].items) {
                    if (this.menus[menuId].items[itemIndex].items[subitemIndex].link === submenuItemURL) {
                        this.menus[menuId].items[itemIndex].items.splice(subitemIndex, 1);
                    }
                }
            }

            // Return the menu object
            return this.menus[menuId];
        };

        //Adding the topbar menu
        this.addMenu('topbar', {
            isPublic: false
        });
    }
]);

'use strict';

// Create the Socket.io wrapper service
angular.module('core').service('Socket', ['Authentication', '$state', '$timeout',
    function(Authentication, $state, $timeout) {
    	// Connect to the Socket.io server only when authenticated
        if (Authentication.user) {
            this.socket = io({
                transports: ['websocket'],
            });
        } else {
            $state.go('home');
        }

        // Wrap the Socket.io 'on' method
        this.on = function(eventName, callback) {
            if (this.socket) {
                this.socket.on(eventName, function(data) {
                    $timeout(function() {
                        callback(data);
                    });
                });
            }
        };

        // Wrap the Socket.io 'emit' method
        this.emit = function(eventName, data) {
            if (this.socket) {
                this.socket.emit(eventName, data);
            }
        };

        // Wrap the Socket.io 'removeListener' method
        this.removeListener = function(eventName) {
            if (this.socket) {
                this.socket.removeListener(eventName);
            }
        };
    }
]);

'use strict';

// Configuring the Costcenters module
angular.module('costcenters').run(['Menus',
	function(Menus) {
		// Add the Costcenters dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Costcenters',
			state: 'costcenters',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'costcenters', {
			title: 'List Costcenters',
			state: 'costcenters.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'costcenters', {
			title: 'Create Costcenter',
			state: 'costcenters.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('costcenters').config(['$stateProvider',
	function($stateProvider) {
		// Costcenters state routing
		$stateProvider.
		state('costcenters', {
			abstract: true,
			url: '/costcenters',
			template: '<ui-view/>'
		}).
		state('costcenters.list', {
			url: '',
			templateUrl: 'modules/costcenters/views/list-costcenters.client.view.html'
		}).
		state('costcenters.create', {
			url: '/create',
			templateUrl: 'modules/costcenters/views/create-costcenter.client.view.html'
		}).
		state('costcenters.view', {
			url: '/:costcenterId',
			templateUrl: 'modules/costcenters/views/view-costcenter.client.view.html'
		}).
		state('costcenters.edit', {
			url: '/:costcenterId/edit',
			templateUrl: 'modules/costcenters/views/edit-costcenter.client.view.html'
		});
	}
]);
'use strict';

// Costcenters controller
angular.module('costcenters').controller('CostcentersController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Costcenters', 'Enterprises', '$mdBottomSheet', '$mdDialog', 'Categories', '$filter', 'Impuestos',
    function($scope, $rootScope, $stateParams, $location, Authentication, Costcenters, Enterprises, $mdBottomSheet, $mdDialog, Categories, $filter, Impuestos) {
        $scope.authentication = Authentication;

        // watch for SEARCH to update value
        $scope.$watch('authentication', function() {
            $scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
            $scope.find();
            //console.log('search: ', $scope.SEARCH);
        });

        // Create new Costcenter
        $scope.create = function() {
            // Create new Costcenter object

            var costcenter = new Costcenters({
                name: this.name,
                description: this.description,
                category: this.category.value,
                category1: this.category1.id,
                enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
            });

            // Redirect after save
            costcenter.$save(function(response) {
                //$location.path('costcenters/' + response._id);

                if (response._id) {
                    // agregar sub al array
                    var impuestoCompras = new Impuestos({
                        name: "IVA Compras",
                        type: "Default",
                        total: 0.0,
                        centroDeCosto: response._id,
                        month: (new Date()).getMonth(),
                        year: (new Date()).getFullYear()
                    });

                    var impuestoVentas = new Impuestos({
                        name: "IVA Ventas",
                        type: "Default",
                        total: 0.0,
                        centroDeCosto: response._id,
                        month: (new Date()).getMonth(),
                        year: (new Date()).getFullYear()
                    });

                    impuestoCompras.$save(function(response) {
                        console.log("Compras");
                        console.log(response);
                    }, function(errorResponse) {
                        $scope.error = errorResponse.data.message;
                    });

                    impuestoVentas.$save(function(response) {
                        console.log("Ventas");
                        console.log(response);
                    }, function(errorResponse) {
                        $scope.error = errorResponse.data.message;
                    });

                    costcenter._id = response._id;
                    $rootScope.costcenters.unshift(costcenter);

                }

                // Clear form fields
                $scope.name = '';
                $scope.description = '';


                $mdBottomSheet.hide();
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        //abre modal para eliminar un centro de costo
        $scope.showConfirm = function(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Eliminar Centro de Costo')
                .content('¿Está seguro que desea eliminar este centro de costo?')
                .ariaLabel('Lucky day')
                .ok('Eliminar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(function() {
                $scope.remove(item);
            }, function() {
                console.log('cancelaste borrar');
            });
        };

        // Remove existing Costcenter
        $scope.remove = function(costcenter) {
            if (costcenter) {
                costcenter.$remove();

                for (var i in $scope.costcenters) {
                    if ($scope.costcenters[i] === costcenter) {
                        $scope.costcenters.splice(i, 1);
                    }
                }
            } else {
                $scope.costcenter.$remove(function() {
                    $location.path('costcenters');
                });
            }
        };

        // Update existing Costcenter
        $scope.update = function() {
            var costcenter = $scope.costcenter;

            if (this.enterprise !== undefined) { costcenter.enterprise = this.enterprise._id } else { costcenter.enterprise = costcenter.enterprise._id }
            if (this.category !== undefined) { costcenter.category = this.category.value } else if ((costcenter.category !== undefined) && (costcenter.category !== null)) { costcenter.category = costcenter.category }
            if (this.category1 !== undefined) { costcenter.category1 = this.category1.id } else if ((costcenter.category1 !== undefined) && (costcenter.category1 !== null)) { costcenter.category1 = costcenter.category1 }
            costcenter.$update(function() {
                $location.path('centros-costo');
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        // Find a list of Costcenters
        $scope.find = function() {
            if ($scope.SEARCH !== undefined) { $rootScope.costcenters = Costcenters.query({ e: $scope.SEARCH.enterprise }); }
        };

        // Find a list of Enterprises
        $scope.findEnterprises = function() {
            if ($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise }); }

        };

        // Find a list of Enterprises
        $scope.findCategories = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.categories = [
                    { name: 'Activo', value: 'activo' },
                    { name: 'Pasivo', value: 'pasivo' },
                    { name: 'Patrimonio Neto', value: 'patrimonio neto' },
                    { name: 'Negativo', value: 'negativo' },
                    { name: 'Ganancia', value: 'ganancia' }
                ];
            }

        };
        // Fills the select input list with categories
        $scope.findCategories2 = function() {
            Categories.query({ e: $scope.SEARCH.enterprise }, function(data) {
                $scope.categories2 = $filter('filter')(data, function(item) {
                    return item.type1 === 'Centro de Costo';
                });
                // Modal.setCategorias($scope.categories2);
            });
        };

        // Find existing Costcenter
        $scope.findOne = function() {
            $scope.costcenter = Costcenters.get({
                costcenterId: $stateParams.costcenterId
            });
            Categories.query({}, function(data) {
                $scope.relatedCategory = $filter('filter')(data, function(item) {
                    return item.id === $scope.costcenter.category1;
                })[0];
            });

        };
    }
]);
'use strict';

//Costcenters service used to communicate Costcenters REST endpoints
angular.module('costcenters').factory('Costcenters', ['$resource',
	function($resource) {
		return $resource('api/costcenters/:costcenterId', { costcenterId: '@_id'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

//Setting up route
angular.module('costosindirectos').config(['$stateProvider',
  function($stateProvider) {
    // Comprobantes state routing
    $stateProvider.
    state('costosindirectos', {
      abstract: true,
      url: '/costosindirectos',
      template: '<ui-view/>'
    }).
    state('costosindirectos.list', {
      url: '',
      templateUrl: 'modules/costosindirectos/client/views/list-costosindirectos.client.view.html'
    }).
    state('costosindirectos.create', {
      url: '/create',
      templateUrl: 'modules/costosindirectos/client/views/form-costosindirecto.client.view.html'
    }).
    state('costosindirectos.view', {
      url: '/:costosindirectoId',
      templateUrl: 'modules/costosindirectos/client/views/view-costosindirecto.client.view.html'
    }).
    state('costosindirectos.edit', {
      url: '/:costosindirectoId/edit',
      templateUrl: 'modules/costosindirectos/client/views/form-costosindirecto.client.view.html'
    })
  }
]);
'use strict';

// costosindirectos controller
angular.module('costosindirectos')
.controller('CostocentersListController', ['$rootScope','$location', 'user', '$scope', 'centrodecosto', 'PagosService','ServiceNavigation','FacturaService',
	function($rootScope, $location, user, $scope, centrodecosto, PagosService, ServiceNavigation,FacturaService) {

		// asignacion de modelos
		this.user = user;	
		this.searchCostosIndirectos = searchCostosIndirectos;
		$scope.year = new Date().getFullYear();
		$scope.month = new Date().getMonth();
		
		
		//$scope.centrodecosto = centrodecosto.data;		
		this.searchCostosIndirectos();

		
		ServiceNavigation.navInit();

		
		$scope.getName = function(name) {
			ServiceNavigation.addNav({name:name});
			$rootScope.$broadcast("nav change",true);
		}


		$scope.$watch("year",function(newVal,oldval){			
			localStorage.setItem("year",JSON.stringify({yearName : newVal}))
			//$rootScope.period.year = newVal;
		})

		$scope.$watch("month",function(newVal,oldval){
			var elemPos = $scope.monthList.map(function(x){return x.id}).indexOf(newVal);
			localStorage.setItem("month",JSON.stringify({monthName : $scope.monthList[elemPos].name}))
			//$rootScope.period.month = newVal;
		})

		// definicion de funciones
		$scope.monthList = 
[
    { id: 0, name: 'enero' },
    { id: 1, name: 'febrero' },
    { id: 2, name: 'marzo' },
    {id:  3, name: 'abril'},
    {id:  4, name:  'mayo'},
    {id: 5, name:   'junio'},
    {id: 6, name: 'julio'},
    {id:7, name:'agosto'},
    {id:8, name:'septiembre'},
    {id:9, name: 'octubre'},
    {id:10, name:'noviembre'},
    {id:11, name:'diciembre'}
  ];

 // {1:"enero",2:"febrero",3:"marzo",4:"abril",5:"mayo",6:"junio",7:"julio",8:"agosto",9:"septiembre",10:"octubre",11:"noviembre",12:"diciembre"};
		$scope.yearList = ["2016","2017"];
		function searchCostosIndirectos(){
			if($scope.year != "" ||  $scope.month != ""){
				var data = PagosService.query({year:$scope.year, month:$scope.month, e:user.enterprise._id});
				localStorage.setItem("search_postos", JSON.stringify({year:$scope.year, month:$scope.month}));
				$scope.centrodecosto = data;				
			}
		};
}]);




'use strict';

// costosindirectos controller
angular.module('costosindirectos').controller('CostosIndirectosCreateController', ['$location', 'user',  '$mdDialog','CostosindirectosService',	'$state',
	function($location, user, $mdDialog, costosindirectosService, $state) {
		
		var centroId = localStorage.getItem("centroId");
		console.log(centroId);
		// asignacion de modelos
		this.user = user;
		// asignacion de funciones
		this.create = create;

		// definicion de funciones
		// Create new costosindirectos
		function create () {
			// Create new costosindirectos object
			var costosindirectos = new costosindirectosService ({
				name: this.name,
				descripcion: this.descripcion ? this.descripcion : undefined,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id,
				costcenters:centroId
			});

			// Redirect after save
			costosindirectos.$save(function(response) {
				if(response._id) {
					// agregar sub al array
					$state.go('home.costosIndirectos',{centroId:centroId});

				}
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};

	}]);


'use strict';

// Comprobantes controller
angular.module('costosindirectos').controller('CostosIndirectosViewController', ['$rootScope','user', '$mdDialog', 'Socket', 'ServiciosService', 'PagosService', 'costosindirectos', 'serviciosService', 'cajas', 'serviciosLastMonthTotal', 'ServiceNavigation','$location',
    function ($rootScope, user, $mdDialog, Socket, ServiciosService, PagosService, costosindirectos, serviciosService, cajas, serviciosLastMonthTotal, ServiceNavigation,$location) {
        this.user = user;
        this.costo = true;
        this.showDialog = showDialog;
        this.costosindirectos = costosindirectos;
        this.serviciosService = serviciosService;
        this.serviciosLastMonthTotal = serviciosLastMonthTotal;
        this.openMenu = openMenu;
        this.showConfirm = showConfirm;
        this.serviciosIDArray = [];
        this.cajas = cajas;
        var originatorEv;
        this.editing = false;
        this.editingServicios = editingServicios;
        this.editServicios = editServicios;
        this.selectedMode = 'md-scale';
        this.selectedDirection = 'up';
        this.showDialog = showDialog;
        this.showDialogPago = showDialogPago;
        this.findCostosIndirectos = findCostosIndirectos;
        this.showDialogFactura = showDialogFactura;
        this.findFromArray = findFromArray;
        if (localStorage.getItem("centroId") !== undefined) {
            this.centroId = localStorage.getItem("centroId");
        }

        

        
        this.findCostosIndirectos(serviciosService);

        // definicion de funciones
         $rootScope.$broadcast("nav change",true);
       
        
        //removes the last nav from the list always.
        this.removeSubNav = function(){           
            ServiceNavigation.back();
            $rootScope.$broadcast("nav change",true);         
        }




        var getMonth = JSON.parse(localStorage.getItem("month"));
        var getYear = JSON.parse(localStorage.getItem("year"));
        $rootScope.getPeriod = getMonth.monthName + ", " + getYear.yearName;      
        

        function findFromArray(array, object) {

            if (!array) return false;
            if (!object) return false;

            var checker = false;

            array.forEach(function (entry) {
                if (entry._id === object._id) checker = true;
            });

            return checker;
        }

        function findCostosIndirectos(serviciosService) {
            
            if ((this.user.roles[0] !== 'admin') && (this.user.roles[0] !== 'groso')) {

                ServiciosService.$promise.then(angular.bind(this, function (data) {
                    for (var i in data) {
                        this.serviciosIDArray.push(data[i]);
                    }
                }));
            }
            else {
                this.serviciosIDArray = serviciosService;
            }
        }

        function openMenu($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        }

        function showConfirm(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('¿Eliminar la servicios?')
                .ariaLabel('Lucky day')
                .targetEvent(ev)
                .ok('Aceptar')
                .cancel('Cancelar');
            $mdDialog.show(confirm).then(function () {
                deleteServicios(item);
            }, function () {
                //cancelo
            });
        }

        //habilito edicion
        function editingServicios(item) {
            this.editing = item;
        }

        //edita nombre de la Servicios
        function editServicios(item) {
            this.editing = false;
            item.enterprise = item.enterprise._id;
            for (var i in item.puestos) {
                item.puestos[i] = item.puestos[i]._id;
            }

            item.$update(function () {
                console.log('todo ok');
            }, function (errorResponse) {
                console.log('error');
            });
        }

        function deleteServicios(item) {
            console.log(serviciosService);
            if (item) {
                //item.$remove();
                item.deleted = true;                    

                PagosService.query({
                                servicosId: item._id,
                                /*impuestosId: $stateParams.impuestosId,
                                empleadoId: $stateParams.empleadoId,
                                month: date.month || null,
                                year: date.year || null*/
                            }, function(pagos) {                     
                                for (var i in pagos) {                                    
                                    pagos[i].deleted = true;
                                    pagos[i].$update();
                                }

                            });

                item.$update(function () {
                    for (var i in serviciosService) {
                        if (serviciosService[i] === item) {
                            //serviciosService.splice(i, 1);
                            serviciosService[i].deleted = true;
                        }
                    }
                }, function (errorResponse) {
                    console.log('error');
                });                
            } else {
                serviciosService.$remove(function () {

                });
            }
        }

        function showDialog($event, item) {
            var parentEl = angular.element(document.body);
            $mdDialog.show({
                parent: parentEl,
                targetEvent: $event,
                templateUrl: 'modules/servicios/views/create-servicio.client.view.html',
                locals: {
                    item: item,
                    user: this.user
                },
                controller: DialogController
            })
                .then(function (answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                    // $scope.find();
                }, function () {
                    //$scope.alert = 'You cancelled the dialog.';
                });
        } //end showDialog
        // actualizaciones en tiempo real.

        function showDialogPago($event, item) {
            $mdDialog.show({
                targetEvent: $event,
                templateUrl: 'modules/pagos/views/create-pago.client.view.html',
                locals: {
                    item: item,
                    user: this.user
                },
                controller: DialogController
            })
                .then(function (answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                    // $scope.find();
                }, function () {
                    //$scope.alert = 'You cancelled the dialog.';
                });
        } //end showDialog

        function showDialogFactura($event, item) {
            $mdDialog.show({
                targetEvent: $event,
                templateUrl: 'modules/costosindirectos/views/create-factura.client.view.html',
                locals: {
                    item: item,
                    user: this.user
                },
                controller: DialogController
            })
                .then(function (answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                    // $scope.find();
                }, function () {
                    //$scope.alert = 'You cancelled the dialog.';
                });
        } //end showDialog



        Socket.on('costosindirecto.update', angular.bind(this, function (message) {
            if (message.enterprise === this.user.enterprise.enterprise) {
                this.serviciosService = ServiciosService.query({e: this.user.enterprise.enterprise})
                    .$promise.then(angular.bind(this, function (data) {                       
                        console.log(data)
                        this.findCostosIndirectos(data);
                    }));
            }
        }));

        // fin actualizaciones en tiempo real.
        function DialogController($scope, $mdDialog, item, user, PagosService, Arqueos, $filter, $location, Socket, ServiciosService, Costcenters, Cajas, CostosindirectosService) {
            $scope.apagarBoton = false; //desahbilita boton de crear para evitar que se presione dos veces
            $scope.$watch('ServiciosService', function () {
                $scope.findServicios();
                $scope.findServiciosTotal();
                $scope.findPago();
            });
            $scope.$watch('Cajas', function () {
                $scope.findCajas();
            });

            var subNav = ServiceNavigation.getNav();
           
            $scope.costosName = (subNav.length > 0) ? subNav[subNav.length - 1].name : "Factura";

            $scope.facturaDate = new Date();
            $scope.pagoDate = new Date();
            $scope.mostrar = true;

            $scope.item = item;
            $scope.costCenterAgregados = [];

            $scope.montoE = 0;
            $scope.montoC = 0;
            $scope.pagosAcumulados = item.pagosAcumulados;

            $scope.errorCaja = undefined;

            $scope.findCajas = function () {
                Cajas.query({e: user.enterprise._id}, function (data) {
                    $scope.cajas = $filter('filter')(data, function (item) {
                        return (item._id !== $scope.item._id);
                    })
                });
            };
            $scope.findCostCenter = function () {
                $scope.costcenters = Costcenters.query({e: user.enterprise._id});
            };

            $scope.closeDialog = function () {
                $mdDialog.hide();
            };

            $scope.findServicios = function () {
                ServiciosService.query({e: user.enterprise._id}, function (data) {
                    $scope.servicios = $filter('filter')(data, function (item) {
                        return (item._id !== $scope.item._id);
                    })
                });
            };
            $scope.serviciosIDArray = [];
            //devuelve todas la Servicios
            $scope.findServiciosTotal = function () {
                $scope.serviciosTotal = ServiciosService.query({e: user.enterprise._id});
            };

            $scope.findPago = function () {
                $scope.pagos = PagosService.query({e: user.enterprise._id});
            };


            $scope.createServicio = function ($event) {

                $scope.apagarBoton = true; //desahbilita boton de crear para evitar que se presione dos veces
                var c = {Servicios: {}};
                //var name = 'Servicios '
                var num = $scope.serviciosTotal.length + 1;
                //var res = name.concat(num);

                var servicios = {
                    name: this.name,
                    descripcion: this.descripcion,
                    costcenters: $scope.costCenterAgregados,
                    costosindirectos: $scope.item._id,
                    enterprise: user.enterprise._id
                };

                var costosindirectosService = $scope.item;
                costosindirectosService.enterprise = costosindirectosService.enterprise._id;

                Socket.emit('servicios.create', servicios);
                $mdDialog.hide();
                ServiciosService.query({e: user.enterprise._id}, function (data) {
                    for (var i in data) {
                        if (data[i].costosindirectos == $scope.item._id && data[i].deleted == false) {
                            $scope.serviciosIDArray.push(data[i]._id);
                        }
                    }
                    costosindirectosService.servicio = $scope.serviciosIDArray;
                    costosindirectosService.$update(function () {
                        console.log('costos indirectos ok');
                    }, function (errorResponse) {
                        console.log('costos indirectos error');
                    });

                });
            };
            //agrega puestos en el create de caja
            $scope.agregarCostCenter = function (puesto) {
                var ok = false;
                if ((puesto !== undefined) && (puesto !== null)) {
                    for (var i in $scope.costCenterAgregados) {
                        if ($scope.costCenterAgregados[i]._id === puesto._id) {
                            var ok = true;
                        }
                    }
                    if (!ok) {
                        $scope.costCenterAgregados.push(puesto);
                    }
                }
            };
            
            $scope.createFactura = function($event,item) {
               if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                  console.log(item);

                  var facturaDate = new Date($scope.facturaDate);
                  var facturaMonth = facturaDate.getMonth();
                  var facturaYear = facturaDate.getFullYear();
                   

                    var navList = ServiceNavigation.getNav();//t o get sub nav which will be used to create titles for the factura navigation extend
                    var t1 = navList[0].name;
                    var t2 = navList[1].name;
                    var factura = {
                      title1: t1,
                      title2: t2, 
                      numero: $scope.numero,
                      servicios: item._id,
                      serviceName: item.name,
                      montoE: $scope.montoE,
                      facturaDate: facturaDate,
                      month:facturaMonth,
                      year:facturaYear,
                      observaciones: $scope.observaciones,
                      enterprise: user.enterprise._id,
                      type: 'costosIndirectos'
                    };                   
                    
                    var actualBill;
                    CostosindirectosService.get({costosindirectoId: item.costosindirectos}, function (costo) {
                        
                        actualBill = $scope.montoE; 

                        if(!item.facturado)
                          item.facturado = 0;
                
                        item.facturado += actualBill; //update the view of the real bill 

                        factura._id = item.costosindirectos;
                        factura.isFactura = true;        
                        factura.total = item.facturado;
                        CostosindirectosService.update(factura, function () {                                                      
                            console.log('costo ok');
                        }, function (errorResponse) {
                            console.log('costo error');
                        });

                    });

                    $mdDialog.hide();
               }
            };

            $scope.createPago = function ($event, item) {
                if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                    if (($scope.caja !== undefined) && ($scope.caja !== null)) {

                        $scope.apagarBoton = true; //desahbilita boton de crear para evitar que se presione dos veces

                        var numero = $scope.pagos.length + 1;
                        
                        var pagoDate = new Date($scope.pagoDate);
                        var pagoMonth = pagoDate.getMonth();
                        var pagoYear = pagoDate.getFullYear();
                        var balance = $scope.caja.total - ($scope.montoE + $scope.montoC);
                        var newFacturado = item.facturado - $scope.montoE;
                        
                        var pago = {
                            numero: numero,
                            servicios: item._id,
                            cajaD: $scope.caja._id,
                            montoE: $scope.montoE,
                            montoC: $scope.montoC,
                            pagoDate: pagoDate,
                            month:pagoMonth,
                            year:pagoYear,
                            saldo: balance,
                            observaciones: $scope.observaciones,
                            enterprise: user.enterprise._id,
                            facturado: newFacturado, //
                            type: 'costosIndirectos'
                        };

                        Socket.emit('pago.create', pago);
                        var total = 0;
                        CostosindirectosService.get({costosindirectoId: item.costosindirectos}, function (costo) {
                            total = costo.total + $scope.montoE + $scope.montoC;
                            CostosindirectosService.update({
                                _id: item.costosindirectos, total: total
                            }, function () {
                                console.log('costo ok');
                            }, function (errorResponse) {
                                console.log('costo error');
                            });

                        });


                        $mdDialog.hide();
                    }
                    else {
                        $scope.errorCaja = 'Se debe seleccionar la caja origin'
                    }
                }
            };			//agrega puestos en el edit de caja


            //funcion que rendondea a 2 decimales
            function roundToTwo(num) {
                return +(Math.round(num + "e+2") + "e-2");
            }
            $scope.pagosAcumulados = item.pagoAcumulados;
            $scope.addPagoAcumulados = function (value) {
                $scope.errorCaja = false;
                console.log($scope.caja);
                if ($scope.caja) {
                    if ($scope.caja.efectivo >= value) {
                        $scope.montoE = value;
                        $scope.pagosAcumulados = item.pagoAcumulados + $scope.montoC + $scope.montoE;
                    } else {
                        $scope.errorCaja = 'amount is not available in selected caja';
                    }
                } else {
                    $scope.errorCaja = 'Se debe seleccionar la caja origin';
                }
            }
            $scope.addCheque = function (value) {
                $scope.errorCaja = false;
                if ($scope.caja) {
                    if ($scope.caja.cheques >= value) {
                        $scope.montoC = value;
                        $scope.pagosAcumulados = item.pagoAcumulados + $scope.montoC + $scope.montoE;

                    } else {
                        $scope.errorCaja = 'amount is not available in selected caja';
                    }
                } else {
                    $scope.errorCaja = 'Se debe seleccionar la caja origin';
                }
            }

            function updateConstoIndirectos() {
                console.log(this.serviciosIDArray);
            }

        }

    }]);

'use strict';

// costosindirectos controller
angular.module('costosindirectos').controller('CostosindirectosListController', ['$location', 'user', '$mdDialog','costosindirectosService', '$state', 'enterprises', '$scope', 'PagosService', 'CostosindirectosService', 'costosLastMonthTotal',
 'ServiciosService','ServiceNavigation','$rootScope',
	function($location, user, $mdDialog, costosindirectosService, $state, enterprises, $scope, PagosService, CostosindirectosService, costosLastMonthTotal, ServiciosService,ServiceNavigation, $rootScope) {
		// asignacion de modelos
		this.user = user;
		console.log(costosindirectosService);
		$scope.costosindirectosService = costosindirectosService;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.showConfirm = showConfirm;
		this.editingCaja = editingCaja;
		this.lastMonthTotal = costosLastMonthTotal;
		this.editCostosindirectos = editCostosindirectos;
		//this.searchCostosIndirectos = searchCostosIndirectos;
/*		$scope.year = new Date().getFullYear();
		$scope.month = new Date().getMonth();
*/
		
		//gets subnav name for page
		this.getName = function(name) {            
            ServiceNavigation.addNav({name:name});
            $rootScope.$broadcast("nav change",true);
        }
        
        
        this.removeSubNav = function(){           
            ServiceNavigation.back();
            $rootScope.$broadcast("nav change",true);         
        }

        this.getServiceId = function(id,name) {
        	$rootScope.serviceInfo = {
        		id: id,
        		name: name
        	}
        }

        var getMonth = JSON.parse(localStorage.getItem("month"));
        var getYear = JSON.parse(localStorage.getItem("year"));
        $rootScope.getPeriod = getMonth.monthName + ", " + getYear.yearName;
        
      

/*		// definicion de funciones
		$scope.monthList = 
[
    { id: 0, name: 'enero' },
    { id: 1, name: 'febrero' },
    { id: 2, name: 'marzo' },
    {id:  3, name: 'abril'},
    {id:  4, name:  'mayo'},
    {id: 5, name:   'junio'},
    {id: 6, name: 'julio'},
    {id:7, name:'agosto'},
    {id:8, name:'septiembre'},
    {id:9, name: 'octubre'},
    {id:10, name:'noviembre'},
    {id:11, name:'diciembre'}
  ];
*/
 // {1:"enero",2:"febrero",3:"marzo",4:"abril",5:"mayo",6:"junio",7:"julio",8:"agosto",9:"septiembre",10:"octubre",11:"noviembre",12:"diciembre"};
//		$scope.yearList = ["2016","2017"];
//		localStorage.removeItem('search_postos');
		// Remove existing Comprobante
		function showConfirm (ev,item) {
		    var confirm = $mdDialog.confirm()
		        .title('¿Eliminar la Costos Indirectos?')
		        .ariaLabel('Lucky day')
		        .targetEvent(ev)
		        .ok('Aceptar')
		        .cancel('Cancelar');
		    $mdDialog.show(confirm).then(function() {
		      deleteCostosIndirectos(item);
		    }, function() {
		      //cancelo
		    });
		};

		function deleteCostosIndirectos(item) {
			if (item) {
				item.deleted = true;
				item = new CostosindirectosService(item);				
				//item.$remove();
				item.$update();

				for (var i in $scope.costosindirectosService) {
					if ($scope.costosindirectosService[i]._id === item._id) {
						$scope.costosindirectosService[i].deleted = true;
						//$scope.costosindirectosService.splice(i, 1);
					}
				}

				ServiciosService.query({}, function(servicios) {
					for (var i in servicios) {    
						if (servicios[i].costosindirectos == item._id){
	                        servicios[i].deleted = true;
	                        servicios[i].$update();

	                        PagosService.query({servicosId: servicios[i]._id}, function(pagos) {                     
                                for (var j in pagos) {                                    
                                    pagos[j].deleted = true;
                                    pagos[j].$update();
                                }
                            });
                    	}
                    }					
				});
			} else {
				$scope.costosindirectosService.$remove(function() {
				});
			}
		};

		//habilito edicion
		function editingCaja(item){
			this.editing = item;
		};

		//edita nombre de la caja
		function editCostosindirectos (item){
			this.editing = false;
			item = new CostosindirectosService(item);
			item.enterprise = item.enterprise._id;
			item.$update(function() {
				console.log('todo ok');
			}, function(errorResponse) {
				console.log('error');
			});
		};
/*		function searchCostosIndirectos(){
			if($scope.year != "" ||  $scope.month != ""){
				var data = PagosService.query({year:$scope.year, month:$scope.month});
				localStorage.setItem("search_postos", JSON.stringify({year:$scope.year, month:$scope.month}));
				$scope.costosindirectosService = data;
			}
		};
*/	}]);


(function () {
  'use strict';

  // Costosindirectos controller
  angular
    .module('costosindirectos')
    .controller('CostosindirectosController', CostosindirectosController);

  CostosindirectosController.$inject = ['$scope', '$state', '$window', 'Authentication', 'costosindirectoResolve'];

  function CostosindirectosController ($scope, $state, $window, Authentication, costosindirecto) {
    var vm = this;
    vm.authentication = Authentication;
    vm.costosindirecto = costosindirecto;
    vm.error = null;
    vm.form = {};
    vm.remove = remove;
    vm.save = save;

    // Remove existing Costosindirecto
    function remove() {
      if ($window.confirm('Are you sure you want to delete?')) {
        vm.costosindirecto.$remove($state.go('costosindirectos.list'));
      }
    }

    // Save Costosindirecto
    function save(isValid) {
      if (!isValid) {
        $scope.$broadcast('show-errors-check-validity', 'vm.form.costosindirectoForm');
        return false;
      }

      // TODO: move create/update logic to service
      if (vm.costosindirecto._id) {
        vm.costosindirecto.$update(successCallback, errorCallback);
      } else {
        vm.costosindirecto.$save(successCallback, errorCallback);
      }

      function successCallback(res) {
        $state.go('costosindirectos.view', {
          costosindirectoId: res._id
        });
      }

      function errorCallback(res) {
        vm.error = res.data.message;
      }
    }
  }
}());

'use strict';
(function(){

//Comprobantes service used to communicate Comprobantes REST endpoints
angular.module('costosindirectos')
.factory('CostosindirectosService', ['$resource',
  function($resource) {
    return $resource('api/costosindirectos/:costosindirectoId', { costosindirectoId: '@_id', e: '@enterprise'
    }, {
      update: {
        method: 'PUT'
      }
    });
  }
]).factory('ServiceNavigation', ['$location',
  function($location) {
  	var inneNavList = [];
    return {
      addNav : function(navObj) { 
        if(inneNavList.length > 0) {      
          var elempos = inneNavList.map(function(x){return x.name}).indexOf(navObj.name);
          if(elempos === -1)
            inneNavList.push(navObj);
        } else {
          inneNavList.push(navObj);
        }         
          
        window.localStorage.setItem("subNav",JSON.stringify(inneNavList));              
      },
      getNav : function() {        
        return (inneNavList.length > 0 ) ? inneNavList : JSON.parse(window.localStorage.getItem("subNav"));
      },
      navInit: function(val){
       inneNavList.splice(0);
       window.localStorage.removeItem("subNav");
      },
      back: function() {        
        if(window.localStorage.getItem("subNav")){
          inneNavList = JSON.parse(window.localStorage.getItem("subNav"))
          window.localStorage.removeItem("subNav");
        }      
        inneNavList.splice(inneNavList.length - 1, 1);
        window.localStorage.setItem("subNav",JSON.stringify(inneNavList)); 
      }
    }
  }
]).factory('FacturaService',["$resource",function($resource){
  return $resource("api/factura/:costosindirectoId")
}])

})();


(function () {
  'use strict';

  angular
    .module('empleados')
    .config(routeConfig);

  routeConfig.$inject = ['$stateProvider'];

  function routeConfig($stateProvider) {
    $stateProvider
      .state('empleados', {
        abstract: true,
        url: '/empleados',
        template: '<ui-view/>'
      })
      .state('empleados.create', {
        url: '/create',
        templateUrl: 'modules/empleados/client/views/form-empleado.client.view.html',
        controller: 'EmpleadosController',
        controllerAs: 'vm',
        resolve: {
          empleadoResolve: newEmpleado
        },
        data: {
          roles: ['user', 'admin'],
          pageTitle : 'Empleados Create'
        }
      })
      .state('empleados.edit', {
        url: '/:empleadoId/edit',
        templateUrl: 'modules/empleados/client/views/form-empleado.client.view.html',
        controller: 'EmpleadosController',
        controllerAs: 'vm',
        resolve: {
          empleadoResolve: getEmpleado
        },
        data: {
          roles: ['user', 'admin'],
          pageTitle: 'Edit Empleado {{ empleadoResolve.name }}'
        }
      })
      .state('empleados.view', {
        url: '/:empleadoId',
        templateUrl: 'modules/empleados/client/views/view-empleado.client.view.html',
        controller: 'EmpleadosController',
        controllerAs: 'vm',
        resolve: {
          empleadoResolve: getEmpleado
        },
        data:{
          pageTitle: 'Empleado {{ articleResolve.name }}'
        }
      });
  }

  getEmpleado.$inject = ['$stateParams', 'EmpleadosService'];

  function getEmpleado($stateParams, EmpleadosService) {
    return EmpleadosService.get({
      empleadoId: $stateParams.empleadoId
    }).$promise;
  }

  newEmpleado.$inject = ['EmpleadosService'];

  function newEmpleado(EmpleadosService) {
    return new EmpleadosService();
  }
})();

(function () {
    'use strict';

    // Empleados controller
    angular
        .module('empleados')
        .controller('EmpleadosController', EmpleadosController);

    EmpleadosController.$inject = ['$scope', '$state', 'Authentication', 'empleado', 'user', 'puestos', 'ServiceNavigation'];

    function EmpleadosController($scope, $state, Authentication, empleado, user, puestos, ServiceNavigation) {
        var vm = this;
        var list;
        vm.authentication = Authentication;
        vm.empleado = empleado;
        vm.puestos = puestos;
        vm.error = null;
        vm.update = update;
        vm.roles = $scope.roles = ['user', 'admin', 'rrhh', 'compras', 'ventas', 'produccion', 'cliente'];
       
        //removes the last nav from the list always.
        /*vm.removeSubNav = function(){
        alert("They said close")           
            list = ServiceNavigation.getNav();
            list.splice(list.length - 1);
        }*/      

        function update() {
          if (confirm("are you sure to change? changing the puesto will change the puesto for other personell with same puesto")) {
            vm.empleado.puesto = vm.nuevoPuesto;
            vm.empleado.userLogin.roles[0] = vm.rol;
            vm.empleado.enterprise = vm.empleado.enterprise._id;
            vm.empleado.$update(successCallback, errorCallback);

            function successCallback(res) {
              $state.go('home.viewEmpleado', {
                empleadoId: res._id
              });
            }

            function errorCallback(res) {
              console.log('error');
              vm.error = res.data.message;
            }
          }
        }
    }
})();

(function () {
    'use strict';

    angular.module('empleados').controller('EmpleadosCentrodecostoListController', EmpleadosListCentrodecostoController);

    EmpleadosListCentrodecostoController.$inject = ['Costcenters', 'user', '$scope', '$http', 'PagosService', 'ServiceNavigation'];

    function EmpleadosListCentrodecostoController(Costcenters, user, $scope, $http, PagosService, ServiceNavigation) {

        if (localStorage.getItem("dateEmpleados")) {
            var date = JSON.parse(localStorage.getItem("dateEmpleados"));
            $scope.year = Object.keys(date).length !== 0 ? date.year : (new Date()).getFullYear();
            $scope.month = Object.keys(date).length !== 0 ? date.month : (new Date()).getMonth();
        } else {
            $scope.year = (new Date()).getFullYear();
            $scope.month = (new Date()).getMonth();
        }

        $scope.year = (new Date()).getFullYear();
        $scope.month = (new Date()).getMonth();

        ServiceNavigation.navInit();

        $scope.getName = function(name) {            
          ServiceNavigation.addNav({name:name});
        }

        $scope.$watch("year",function(newVal,oldval){           
            localStorage.setItem("year",JSON.stringify({yearName : newVal}))
           
        })

        $scope.$watch("month",function(newVal,oldval){
            var elemPos = $scope.monthList.map(function(x){return x.id}).indexOf(newVal);
            localStorage.setItem("month",JSON.stringify({monthName : $scope.monthList[elemPos].name}))
           
        })

        $scope.monthList = [
            {id: 0, name: 'enero'},
            {id: 1, name: 'febrero'},
            {id: 2, name: 'marzo'},
            {id: 3, name: 'abril'},
            {id: 4, name: 'mayo'},
            {id: 5, name: 'junio'},
            {id: 6, name: 'julio'},
            {id: 7, name: 'agosto'},
            {id: 8, name: 'septiembre'},
            {id: 9, name: 'octubre'},
            {id: 10, name: 'noviembre'},
            {id: 11, name: 'diciembre'}
        ];
        $scope.yearList = [];

        // It returns current year. And fill the yearList array with options from 2016 to the current year.
        var endYear = (new Date()).getFullYear();
        for (var startYear = 2016; startYear <= endYear; startYear++) {
            $scope.yearList.push(String(startYear));
        }

        var getEmpleados = function(index, costcenter) {
            $http.put('/api/empleados', {
                enterprise: user.enterprise._id,
                centrodecosto: costcenter._id
            }).success(function (response) {
                var empleados = response;
                costcenter.activo = empleados.length;
                for (var j = 0; j < empleados.length; j++) {
                    $scope.countActividades(index, empleados[j]);
                    $scope.summLiquidaciones(index, empleados[j]);
                    $scope.summPagos(index, empleados[j]);
                }
            }).error(function (err) {
                console.log("Error: " + err);
            });
        };

        $scope.findEmpleados = function () {
            localStorage.setItem("dateEmpleados", JSON.stringify({year: $scope.year, month: $scope.month}));
            Costcenters.query({e: user.enterprise.enterprise}, function (costcenters) {
                $scope.costcenters = costcenters;

                for (var i = 0; i < costcenters.length; i++) {
                    if (!$scope.costcenters[i].hasOwnProperty("activo")) {
                        $scope.costcenters[i]["activo"] = 0;
                    }

                    getEmpleados(i, $scope.costcenters[i]);
                }
            });
        };

        $scope.findEmpleados();


        $scope.countActividades = function (index, empleado) {
            var date = JSON.parse(localStorage.getItem("dateEmpleados"));
            if (date && (date.month || date.year)) {
                $http.put('/api/actividades', {
                    empleadoId: empleado._id,
                    month: date.month || null,
                    year: date.year || null
                }).success(function (response) {
                    var hourDiff;
                    var minuteDiff;
                    if(!$scope.costcenters[index].hasOwnProperty("faltas")) {
                        $scope.costcenters[index]["faltas"] = 0;
                    }

                    for (var i = 0; i < response.length; i++) {
                        hourDiff = new Date(response[i].created).getHours() - Number(empleado.puesto.horarioE.split(":")[0]);
                        minuteDiff = new Date(response[i].created).getMinutes() - Number(empleado.puesto.horarioE.split(":")[1]);

                        if (response[i].operacion == "Falta") {
                            $scope.costcenters[index].faltas += 1;
                        }
                    }
                });
            } else {
                $http.put('/api/actividades', {
                    empleadoId: empleado._id
                }).success(function (response) {
                    var hourDiff;
                    var minuteDiff;
                    if(!$scope.costcenters[index].hasOwnProperty("faltas")) {
                        $scope.costcenters[index]["faltas"] = 0;
                    }

                    for (var i = 0; i < response.length; i++) {
                        hourDiff = new Date(response[i].created).getHours() - Number(empleado.puesto.horarioE.split(":")[0]);
                        minuteDiff = new Date(response[i].created).getMinutes() - Number(empleado.puesto.horarioE.split(":")[1]);

                        if (response[i].operacion == "Falta") {
                            $scope.costcenters[index].faltas += 1;
                        }
                    }
                });
            }
        };

        $scope.summLiquidaciones = function (index, empleado) {
            var date = JSON.parse(localStorage.getItem("dateEmpleados"));

            if (date && (date.month || date.year)) {
                $http.put('/api/liquidaciones', {
                    empleadoId: empleado._id,
                    month: date.month || null,
                    year: date.year || null
                }).success(function (response) {
                    if (!$scope.costcenters[index].hasOwnProperty("liquidacion")) {
                        $scope.costcenters[index]["liquidacion"] = 0;
                    }

                    for (var i = 0; i < response.length; i++) {
                        $scope.costcenters[index].liquidacion += response[i].total;
                    }
                });
            } else {
                $http.put('/api/liquidaciones', {
                    empleadoId: empleado._id
                }).success(function (response) {
                    if (!$scope.costcenters[index].hasOwnProperty("liquidacion")) {
                        $scope.costcenters[index]["liquidacion"] = 0;
                    }

                    for (var i = 0; i < response.length; i++) {
                        $scope.costcenters[index].liquidacion += response[i].total;
                    }
                });
            }
        };

        $scope.summPagos = function (index, empleado) {
            var date = JSON.parse(localStorage.getItem("dateEmpleados"));
            if(!$scope.costcenters[index].hasOwnProperty("pago")) {
                $scope.costcenters[index]["pago"] = 0;
            }

            if (date && (date.month || date.year)) {
                PagosService.query({
                    empleadoId: empleado._id,
                    month: date.month || null,
                    year: date.year || null
                }, function (response) {
                    for (var i = 0; i < response.length; i++) {
                        $scope.costcenters[index].pago += (response[i].montoE + response[i].montoC);
                    }
                });
            } else {
                PagosService.query({
                    empleadoId: empleado._id
                }, function (response) {
                    for (var i = 0; i < response.length; i++) {
                        $scope.costcenters[index].pago += (response[i].montoE + response[i].montoC);
                    }
                });
            }
        };
    }
})();
  
(function () {
    'use strict';

    angular.module('empleados').controller('EmpleadosListController', EmpleadosListController);

    EmpleadosListController.$inject = ['$http', '$stateParams', 'user',  '$scope', '$mdDialog', '$rootScope', 'PagosService', 'ServiceNavigation'];

    function EmpleadosListController($http, $stateParams, user, $scope, $mdDialog, $rootScope, PagosService, ServiceNavigation) {

        $scope.empleados = [];
        $scope.concepto = "";
        $scope.centroDeCosto = $stateParams.costcenterId;

        $http.put('/api/empleados',
            {
                enterprise: user.enterprise._id,
                centrodecosto: $scope.centroDeCosto
            })
            .success(function(response) {
                $scope.empleados = response;
                for(var i=0; i < $scope.empleados.length; i++) {
                    $scope.countActividades(i);
                    $scope.summLiquidaciones(i);
                    $scope.summPagos(i);
                }

            }).error(function(err) {
                console.log("Error: " + err);
            });

        $scope.getName = function(name) {            
          ServiceNavigation.addNav({name:name});
        }

        var getMonth = JSON.parse(localStorage.getItem("month"));
        var getYear = JSON.parse(localStorage.getItem("year"));
        $rootScope.getPeriod = getMonth.monthName + ", " + getYear.yearName;      

      
        $scope.countActividades = function(index) {
            var date = JSON.parse(localStorage.getItem("dateEmpleados"));
            if (date && (date.month || date.year)) {
                $http.put('/api/actividades', {
                    empleadoId: $scope.empleados[index]._id,
                    month: date.month || null,
                    year: date.year || null
                }).success(function (response) {
                    var hourDiff;
                    var minuteDiff;
                    if(!$scope.empleados[index].hasOwnProperty("faltas")) {
                        $scope.empleados[index]["faltas"] = 0;
                    }

                    if(!$scope.empleados[index].hasOwnProperty("llegasTardes")) {
                        $scope.empleados[index]["llegasTardes"] = 0;
                    }

                    for(var i = 0; i < response.length; i++) {

                        hourDiff = Number(response[i].created.split("T")[1].split(":")[0]) - Number($scope.empleados[index].puesto.horarioE.split(":")[0]) - 3;
                        minuteDiff = Number(response[i].created.split("T")[1].split(":")[1]) - Number($scope.empleados[index].puesto.horarioE.split(":")[1]);

                        if(response[i].operacion == "Falta") {
                            $scope.empleados[index].faltas += 1;
                        } else if(response[i].operacion == "Hola" && (hourDiff < -2 || hourDiff > 0 || (hourDiff == 0 && minuteDiff > 15))) {
                            $scope.empleados[index].llegasTardes += 1;
                        }
                    }
                });
            } else {
                $http.put('/api/actividades', {
                    empleadoId: $scope.empleados[index]._id
                }).success(function (response) {
                    var hourDiff;
                    var minuteDiff;
                    if(!$scope.empleados[index].hasOwnProperty("faltas")) {
                        $scope.empleados[index]["faltas"] = 0;
                    }

                    if(!$scope.empleados[index].hasOwnProperty("llegasTardes")) {
                        $scope.empleados[index]["llegasTardes"] = 0;
                    }

                    for(var i = 0; i < response.length; i++) {
                        hourDiff = Number(response[i].created.split("T")[1].split(":")[0]) - Number($scope.empleados[index].puesto.horarioE.split(":")[0]) - 3;
                        minuteDiff = Number(response[i].created.split("T")[1].split(":")[1]) - Number($scope.empleados[index].puesto.horarioE.split(":")[1]);

                        if(response[i].operacion == "Falta") {
                            $scope.empleados[index].faltas += 1;
                        } else if(response[i].operacion == "Hola" && (hourDiff < -2 || hourDiff > 0 || (hourDiff == 0 && minuteDiff > 15))) {
                            $scope.empleados[index].llegasTardes += 1;
                        }
                    }
                });
            }
        };

        $scope.summLiquidaciones = function(index) {
            var date = JSON.parse(localStorage.getItem("dateEmpleados"));

            if (date && (date.month || date.year)) {
                $http.put('/api/liquidaciones', {
                    empleadoId: $scope.empleados[index]._id,
                    month: date.month || null,
                    year: date.year || null
                }).success(function (response) {
                    if(!$scope.empleados[index].hasOwnProperty("liquidacion")) {
                        $scope.empleados[index]["liquidacion"] = 0;
                    }

                    for(var i = 0; i < response.length; i++) {
                        $scope.empleados[index].liquidacion += response[i].total;
                    }
                });
            } else {
                $http.put('/api/liquidaciones', {
                    empleadoId: $scope.empleados[index]._id
                }).success(function (response) {
                    if(!$scope.empleados[index].hasOwnProperty("liquidacion")) {
                        $scope.empleados[index]["liquidacion"] = 0;
                    }

                    for(var i = 0; i < response.length; i++) {
                        $scope.empleados[index].liquidacion += response[i].total;
                    }
                });
            }
        };

        $scope.summPagos = function (index) {
            var date = JSON.parse(localStorage.getItem("dateEmpleados"));
            if(!$scope.empleados[index].hasOwnProperty("pago")) {
                $scope.empleados[index]["pago"] = 0;
            }

            if (date && (date.month || date.year)) {
                PagosService.query({
                    empleadoId: $scope.empleados[index]._id,
                    month: date.month || null,
                    year: date.year || null
                }, function(response) {
                    for(var i = 0; i < response.length; i++) {
                        $scope.empleados[index].pago += (response[i].montoE + response[i].montoC);
                    }
                });
            } else {
                PagosService.query({
                    empleadoId: $scope.empleados[index]._id
                }, function(response) {
                    for(var i = 0; i < response.length; i++) {
                        $scope.empleados[index].pago += (response[i].montoE + response[i].montoC);
                    }
                });
            }
        };

        if(!$rootScope.$$listenerCount.callAddPago) {
            $rootScope.$on("callAddPago", function (event, data) {
                $scope.showDialogPago(data.event, data.item);
            });
        }

        $scope.showDialogPago = function ($event, item) {
            $mdDialog.cancel();
            $mdDialog.show({
                targetEvent: $event,
                templateUrl: 'modules/pagos/views/create-pago.client.view.html',
                locals: {
                    item: item,
                    user: user
                },
                controller: DialogController
            })
        }; //end showDialog

        function DialogController($scope, $mdDialog, $state, item, user, PagosService, $filter, Socket, Cajas) {
            $scope.apagarBoton = false; //desahbilita boton de crear para evitar que se presione dos veces
            $scope.$watch('ServiciosService', function () {
                $scope.findPago();
            });
            $scope.$watch('Cajas', function () {
                $scope.findCajas();
            });

            $scope.item = item;
            $scope.item.name = item.userLogin.displayName;
            $scope.item.personal = true;

            $scope.montoE = 0;
            $scope.montoC = 0;

            $scope.errorCaja = undefined;

            $scope.assignConcepto = function (concepto) {
                $scope.concepto = concepto;
            };

            $scope.findCajas = function () {
                Cajas.query({e: user.enterprise._id}, function (data) {
                    $scope.cajas = $filter('filter')(data, function (item) {
                        return (item._id !== $scope.item._id);
                    })
                });
            };

            $scope.closeDialog = function () {
                $mdDialog.hide();
            };

            $scope.findPago = function () {
                $scope.pagos = PagosService.query({e: user.enterprise._id});
            };

            $scope.createPago = function ($event, item) {
                console.log($scope.concepto);
                if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                    if (($scope.caja !== undefined) && ($scope.caja !== null)) {

                        $scope.apagarBoton = true; //desahbilita boton de crear para evitar que se presione dos veces

                        var numero = $scope.pagos.length + 1;

                        var pago = {
                            numero: numero,
                            personal: item._id,
                            cajaD: $scope.caja._id,
                            montoE: $scope.montoE,
                            montoC: $scope.montoC,
                            pagoDate: $scope.pagoDate,
                            concepto: $scope.concepto,
                            saldo: $scope.caja.total - ($scope.montoE + $scope.montoC),
                            observaciones: $scope.observaciones,
                            enterprise: user.enterprise._id,
                            user: item.userLogin._id,
                            type: 'personal'
                        };

                        Socket.emit('pago.create', pago);
                        $state.go('home.viewPago', {empleadoId: item._id, displayName: item.userLogin.displayName}, {reload: true});
                        $mdDialog.hide();
                    }
                    else {
                        $scope.errorCaja = 'Se debe seleccionar la caja origin'
                    }
                }
            };
        }
    }
})();
//Empleados service used to communicate Empleados REST endpoints
(function () {
  'use strict';

  angular
    .module('empleados')
    .factory('Empleados', Empleados);

  Empleados.$inject = ['$resource'];

  function Empleados($resource) {
    return $resource('api/empleados/:empleadoId', {
      empleadoId: '@_id'
    }, {
      update: {
        method: 'PUT'
      }
    });
  }
})();

// 'use strict';

// //Costcenters service used to communicate Costcenters REST endpoints
// angular.module('empleados').factory('Empleados', ['$resource',
//   function($resource) {
//     return $resource('api/empleados/:empleadoId', { empleadoId: '@_id'
//     }, {
//       update: {
//         method: 'PUT'
//       }
//     });
//   }
// ]);

'use strict';

// Configuring the Enterprises module
angular.module('enterprises').run(['Menus',
	function(Menus) {
		// Add the Enterprises dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Enterprises',
			state: 'enterprises',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'enterprises', {
			title: 'List Enterprises',
			state: 'enterprises.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'enterprises', {
			title: 'Create Enterprise',
			state: 'enterprises.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('enterprises').config(['$stateProvider',
	function($stateProvider) {
		// Enterprises state routing
		$stateProvider.
		state('enterprises', {
			abstract: true,
			url: '/enterprises',
			template: '<ui-view/>'
		}).
		state('enterprises.list', {
			url: '',
			templateUrl: 'modules/enterprises/views/list-enterprises.client.view.html'
		}).
		state('enterprises.create', {
			url: '/create',
			templateUrl: 'modules/enterprises/views/create-enterprise.client.view.html'
		}).
		state('enterprises.view', {
			url: '/:enterpriseId',
			templateUrl: 'modules/enterprises/views/view-enterprise.client.view.html'
		}).
		state('enterprises.edit', {
			url: '/:enterpriseId/edit',
			templateUrl: 'modules/enterprises/views/edit-enterprise.client.view.html'
		});
	}
]);
'use strict';

// Enterprises controller
angular.module('enterprises').controller('EnterprisesController', ['$scope', '$rootScope','$stateParams', '$location', 'Authentication', 'Enterprises', '$mdBottomSheet', '$mdDialog', 'Comprobantes', 'Categories', 'Condicionventas', 'Taxconditions', 'Clients', '$q', 'Areas',
	function($scope, $rootScope, $stateParams, $location, Authentication, Enterprises, $mdBottomSheet, $mdDialog, Comprobantes, Categories, Condicionventas, Taxconditions, Clients, $q, Areas ) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.authentication.user.roles[0]);
		});

		var marker, map;
		  $scope.$on('mapInitialized', function(evt, evtMap) {
		    map = evtMap;
		    marker = map.markers[0];
		  });

		  $scope.types = "['address']";
         $scope.placeChanged = function() {
           $scope.place = this.getPlace();
         }

		// Create new Enterprise
		$scope.create = function() {
			// Create new Enterprise object
			var enterprise = new Enterprises ({
				name: this.name,
				description: this.description,
				email: this.email,
				fiscalNumber: this.fiscalNumber,
				taxCondition: this.taxCondition,
				// country: this.country,
				// city: this.city,
				region: this.region,
				postalCode: this.postalCode,
				address: this.address,
				loc: [ $scope.place.geometry.location.lat(), $scope.place.geometry.location.lng()],
				phone: this.phone,
				fax: this.fax,
				web: this.web
			});

			// Redirect after save
			enterprise.$save(function(response) {
				// $location.path('enterprises/' + response._id);
				if(response._id) {
					enterprise._id = response._id;
					$rootScope.enterprises.unshift(enterprise);
				}

				//*** Crea toda la configuracion necesaria para la nueva empresa
				
				//*** CREA DIRECTORIO

				var area = new Areas ({
					name: 'Directorio',
					nivel: 0,
					enterprise: enterprise._id,
				});
				// Redirect after save
				area.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				//*** FIN CREA DIRECTORIO

				//*** CREA COMPROBANTES

				var facturaA = new Comprobantes ({
					name: 'Factura A',
					letra: 'A',
					puntoDeVenta: '1',
					modoFacturacion: 'Talonario fiscal manual o pre-impreso',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				facturaA.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var facturaB = new Comprobantes ({
					name: 'Factura B',
					letra: 'B',
					puntoDeVenta: '1',
					modoFacturacion: 'Talonario fiscal manual o pre-impreso',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});


				function asyncGuardarFacturaB() {
				    var deferred = $q.defer();
				    facturaB.$save(function(response) {
						if(response._id) {
							facturaB._id = response._id;
						}
					}, function(errorResponse) {
						$scope.error = errorResponse.data.message;
					});
					setTimeout(function() {
					    if (facturaB!==undefined) {
					      deferred.resolve('Hello');
					    } else {
					      deferred.reject('Greeting');
					    }
					  }, 1000);
					  return deferred.promise;
				}


				var facturaC = new Comprobantes ({
					name: 'Factura C',
					letra: 'C',
					puntoDeVenta: '1',
					modoFacturacion: 'Talonario fiscal manual o pre-impreso',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				facturaC.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var ordenDePago = new Comprobantes ({
					name: 'Orden De Pago',
					letra: 'O',
					puntoDeVenta: '',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				ordenDePago.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var notaDeCredito = new Comprobantes ({
					name: 'Nota De Credito',
					letra: 'NC',
					puntoDeVenta: '',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				notaDeCredito.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var notaDeDebito = new Comprobantes ({
					name: 'Nota De Debito',
					letra: 'ND',
					puntoDeVenta: '',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				notaDeDebito.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var remitoDevolucion = new Comprobantes ({
					name: 'Remito De Devolucion',
					letra: 'RD',
					puntoDeVenta: '',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				remitoDevolucion.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var pedido = new Comprobantes ({
					name: 'Pedido',
					letra: 'P',
					puntoDeVenta: '',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				pedido.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var presupuesto = new Comprobantes ({
					name: 'Presupuesto',
					letra: 'X1',
					puntoDeVenta: '',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				presupuesto.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var reciboPago = new Comprobantes ({
					name: 'Recibo De Pago',
					letra: 'X2',
					puntoDeVenta: '',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				reciboPago.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var remito = new Comprobantes ({
					name: 'Remito',
					letra: 'R',
					puntoDeVenta: '1',
					modoFacturacion: 'Comprobante interno',
					movimientoStock: false,
					movimientoCC: false,
					movimientoOperacionInversa: false,
					funcionalidadSituacion: false,
					autoAprobar: false,
					enterprise: enterprise._id,
				});

				remito.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				//*** FIN CREA COMPROBANTES

				//*** CREA CATEGORIAS

				var materiaPrima = new Categories ({
					name: 'Materia Prima',
					description: 'MP para lavar y cortar',
					type1: 'Materia Prima',
					enterprise: enterprise._id
				});
				// Redirect after save
				materiaPrima.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var insumo = new Categories ({
					name: 'Insumo',
					description: 'Insumo para desarrollo de actividades',
					type1: 'Insumo',
					enterprise: enterprise._id
				});
				// Redirect after save
				insumo.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var productosTerminados = new Categories ({
					name: 'Productos Terminados',
					description: 'Productos Elaborados',
					type1: 'Producto',
					enterprise: enterprise._id
				});
				// Redirect after save
				productosTerminados.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				//*** FIN CREA CATEGORIAS

				//*** CREA CONDICIONES DE PAGO

				var cuentaCorriente = new Condicionventas ({
					name: 'Cuenta Corriente',
					description: '',
					enterprise: enterprise._id
				});

				// Redirect after save
				cuentaCorriente.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var cheque = new Condicionventas ({
					name: 'Cheque',
					description: '',
					enterprise: enterprise._id
				});

				// Redirect after save
				cheque.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var efectivo = new Condicionventas ({
					name: 'Efectivo',
					description: '',
					enterprise: enterprise._id
				});

				// Redirect after save
				// efectivo.$save(function(response) {
				// 	if(response._id) {
				// 		efectivo._id = response._id;
				// 	}
				// }, function(errorResponse) {
				// 	$scope.error = errorResponse.data.message;
				// });

				function asyncGuardarEfectivo() {
				    var deferred = $q.defer();
				    efectivo.$save(function(response) {
						if(response._id) {
							efectivo._id = response._id;
						}
					}, function(errorResponse) {
						$scope.error = errorResponse.data.message;
					});
					setTimeout(function() {
					    if (efectivo!==undefined) {
					      deferred.resolve('Hello');
					    } else {
					      deferred.reject('Greeting');
					    }
					  }, 1000);
					  return deferred.promise;
				}

				var transferencia = new Condicionventas ({
					name: 'Transferencia',
					description: '',
					enterprise: enterprise._id
				});

				// Redirect after save
				transferencia.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var tarjetaDeCredito = new Condicionventas ({
					name: 'Tarjeta De Credito',
					description: '',
					enterprise: enterprise._id
				});

				// Redirect after save
				tarjetaDeCredito.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var tarjetaDeDebito = new Condicionventas ({
					name: 'Tarjeta De Debito',
					description: '',
					enterprise: enterprise._id
				});

				// Redirect after save
				tarjetaDeDebito.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				//*** FIN CREA CONDICIONES DE PAGO

				//*** CREA CONDICIONES DE IVA

				var responsableInscripto = new Taxconditions ({
					name: 'Responsable Inscripto',
					enterprise: enterprise._id
				});

				// Redirect after save
				responsableInscripto.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var monotributo = new Taxconditions ({
					name: 'Monotributo',
					enterprise: enterprise._id
				});

				// Redirect after save
				monotributo.$save(function(response) {

				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});

				var consumidorFinal = new Taxconditions ({
					name: 'Consumidor Final',
					enterprise: enterprise._id
				});

				// Redirect after save
				// consumidorFinal.$save(function(response) {
				// 	if(response._id) {
				// 		consumidorFinal._id = response._id;
				// 	}
				// }, function(errorResponse) {
				// 	$scope.error = errorResponse.data.message;
				// });
				function asyncGuardarConsumidorFinal() {
				    var deferred = $q.defer();
				    consumidorFinal.$save(function(response) {
						if(response._id) {
							consumidorFinal._id = response._id;
						}
					}, function(errorResponse) {
						$scope.error = errorResponse.data.message;
					});
					setTimeout(function() {
					    if (consumidorFinal!==undefined) {
					      deferred.resolve('Hello');
					    } else {
					      deferred.reject('Greeting');
					    }
					  }, 1000);
					  return deferred.promise;
				}

				//*** FIN CREA CONDICIONES DE IVA

				//*** CREA CLIENTES
				var promiseFacturaB = asyncGuardarFacturaB();
				var promiseEfectivo = asyncGuardarEfectivo();
				var promiseConsumidorFinal = asyncGuardarConsumidorFinal();
				promiseFacturaB.then(function(response) {
					promiseEfectivo.then(function(response) {
						promiseConsumidorFinal.then(function(response) {
							// console.log(consumidorFinal._id, "id consumidor final");
							// console.log(efectivo._id, "id efectivo");
							// console.log(facturaB._id, "id facturaB");
							var cliente = new Clients ({
								name: 'Consumidor Final',
								taxCondition: consumidorFinal._id,
								condicionPago: efectivo._id,
								comprobante: facturaB._id,
								loc: [ -34.9204948000000002, -57.9535657000000128 ],
								enterprise: enterprise._id
							});
							// Redirect after save
							cliente.$save(function(response) {
							}, function(errorResponse) {
								$scope.error = errorResponse.data.message;
							});
  						});
  					});
  				});

				//*** FIN CREA CLIENTES

				// Clear form fields
				$scope.name = '';
				$scope.description = '';

				$mdBottomSheet.hide();
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un puesto
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Empresa')
	          .content('¿Está seguro que desea eliminar esta empresa?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Enterprise
		$scope.remove = function( enterprise ) {
			if ( enterprise ) { enterprise.$remove();

				for (var i in $scope.enterprises ) {
					if ($scope.enterprises [i] === enterprise ) {
						$scope.enterprises.splice(i, 1);
					}
				}
			} else {
				$scope.enterprise.$remove(function() {
					$location.path('enterprises');
				});
			}
		};

		// Update existing Enterprise
		$scope.update = function() {
			var enterprise = $scope.enterprise ;

			if($scope.place !== undefined) { enterprise.loc = [ $scope.place.geometry.location.lat(), $scope.place.geometry.location.lng()]} else { enterprise.loc = enterprise.loc};

			enterprise.$update(function() {
				$location.path('empresas');
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Enterprises
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.enterprises = Enterprises.query(); };

		};

		// Find existing Enterprise
		$scope.findOne = function() {
			$scope.enterprise = Enterprises.get({
				enterpriseId: $stateParams.enterpriseId
			});
		};
	}


]);

'use strict';

//Enterprises service used to communicate Enterprises REST endpoints
angular.module('enterprises').factory('Enterprises', ['$resource',
	function($resource) {
		return $resource('api/enterprises/:enterpriseId', { enterpriseId: '@_id'/*, e: '@enterprise'*/
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

// Configuring the Entregas module
angular.module('entregas').run(['Menus',
	function(Menus) {
		// Add the Entregas dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Entregas',
			state: 'entregas',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'entregas', {
			title: 'List Entregas',
			state: 'entregas.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'entregas', {
			title: 'Create Entrega',
			state: 'entregas.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('entregas').config(['$stateProvider',
	function($stateProvider) {
		// Entregas state routing
		$stateProvider.
		state('entregas', {
			abstract: true,
			url: '/entregas',
			template: '<ui-view/>'
		}).
		state('entregas.list', {
			url: '',
			templateUrl: 'modules/entregas/views/list-entregas.client.view.html'
		}).
		state('entregas.create', {
			url: '/create',
			templateUrl: 'modules/entregas/views/create-entrega.client.view.html'
		}).
		state('entregas.view', {
			url: '/:entregaId',
			templateUrl: 'modules/entregas/views/view-entrega.client.view.html'
		}).
		state('entregas.edit', {
			url: '/:entregaId/edit',
			templateUrl: 'modules/entregas/views/edit-entrega.client.view.html'
		});
	}
]);
'use strict';

// Entregas controller
angular.module('entregas').controller('EntregasController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Entregas', 'ClientsLocation',
	function($scope, $rootScope, $stateParams, $location, Authentication, Entregas, ClientsLocation ) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			$scope.findClients()
		});

		  var marker, map;
		  $scope.$on('mapInitialized', function(evt, evtMap) {
		    map = evtMap;
		    marker = map.markers[0];
		  });

		  $scope.types = "['address']";
         $scope.placeChanged = function() {
           $scope.place = this.getPlace();
         }

		// Create new Entrega
		$scope.create = function() {
			// Create new Entrega object
			var entrega = new Entregas ({
				name: this.name
			});

			// Redirect after save
			entrega.$save(function(response) {
				$location.path('entregas/' + response._id);

				// Clear form fields
				$scope.name = '';
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Remove existing Entrega
		$scope.remove = function( entrega ) {
			if ( entrega ) { entrega.$remove();

				for (var i in $scope.entregas ) {
					if ($scope.entregas [i] === entrega ) {
						$scope.entregas.splice(i, 1);
					}
				}
			} else {
				$scope.entrega.$remove(function() {
					$location.path('entregas');
				});
			}
		};

		// Update existing Entrega
		$scope.update = function() {
			var entrega = $scope.entrega ;

			entrega.$update(function() {
				$location.path('entregas/' + entrega._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Entregas
		$scope.find = function() {
			if($scope.SEARCH !== undefined) {
				$rootScope.entregas = Entregas.query({ e: $scope.SEARCH.enterprise });
			}
			
		};

		// $scope.findClients = function() {
		// 	if ($scope.SEARCH !== undefined) { 
		// 		$scope.clients = Clients.query({ e: $scope.SEARCH.enterprise });
				
		// 	};
			
		// };

		// Find existing Entrega
		$scope.findOne = function() {
			$scope.entrega = Entregas.get({ 
				entregaId: $stateParams.entregaId
			});
		};

		$scope.findClients = function(product) {
			if ($scope.SEARCH !== undefined) { 
				console.log('<<<<< ', $scope.authentication);
				ClientsLocation.getClientsByLocation($scope.authentication.user.enterprise.loc, $scope.SEARCH.enterprise)
				.success(function(data){
					// OK
					$scope.clients = data;
				})
				.error(function(error){
					// FUCK!
					console.error('Fuck!!! -> ', error);
				}); 
				console.log('clients: ', $scope.clients)
			};
			
		};
	}
]);
'use strict';

//Entregas service used to communicate Entregas REST endpoints
angular.module('entregas').factory('Entregas', ['$resource',
	function($resource) {
		return $resource('api/entregas/:entregaId', { entregaId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

angular.module('entregas').factory('ClientsLocation', [ '$http',
	function($http) {
		// Stock factory service logic
		// ...

		// Public API
		return {
			getClientsByLocation: function (location, enterpriseID) {
		         if(location && enterpriseID){
		         	if(location !== null || location !== undefined)
		        	return $http({
			            url: '/api/clients/bylocation',
			            method: 'GET',
			            params: {e: enterpriseID, p: location},
			            headers: {},
			            data: {}
			        }).success(function(data){
			        	//OK
			            }
			        ).error(function(data){
						// FUCK!
			            });
		        } else {
		            return [];
		        }
	     	}
		};
	}
]);
'use strict';

// Configuring the Comprobantes module
angular.module('finanzas').run(['Menus',
	function(Menus) {
		// Add the Comprobantes dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Finanzas',
			state: 'finanzas',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'finanzas', {
			title: 'List Finanzas',
			state: 'finanzas.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'finanzas', {
			title: 'Create Finanza',
			state: 'finanzas.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('finanzas').config(['$stateProvider',
	function($stateProvider) {
		// Comprobantes state routing
		$stateProvider.
		state('finanzas', {
			abstract: true,
			url: '/finanzas',
			template: '<ui-view/>'
		}).
		state('finanzas.list', {
			url: '',
			templateUrl: 'modules/finanzas/views/list-finanzas.client.view.html'
		}).
		state('finanzas.create', {
			url: '/create',
			templateUrl: 'modules/finanzas/views/create-finanza.client.view.html'
		}).
		state('finanzas.view', {
			url: '/:finanzaId',
			templateUrl: 'modules/finanzas/views/view-finanza.client.view.html'
		}).
		state('finanzas.edit', {
			url: '/:finanzaId/edit',
			templateUrl: 'modules/finanzas/views/edit-finanza.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('finanzas').controller('FinanzasCreateController', ['user', 'finanza', 'enterprises', '$state', 'finanzas',
	function(user, finanza, enterprises, $state, finanzas) {

		// asignacion de modelos
		this.user = user;
		this.finanza = finanza;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.create = create;

		// definicion de funciones
		// Create new finanza
		function create () {
			// Create new finanza object
			var finanza = new finanzas ({
				name: this.name,
				letra: this.letra,
				puntoDeVenta: this.puntoDeVenta,
				modoFacturacion: this.modo,
				movimientoStock: this.movimientoStock,
				movimientoCC: this.movimientoCC,
				movimientoOperacionInversa: this.movimientoOperacionInversa,
				funcionalidadSituacion: this.funcionalidadSituacion,
				autoAprobar: this.autoAprobar,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id,
			});

			// Redirect after save
			finanza.$save(function(response) {
				if(response._id) {
					// agregar sub al array
					$state.go('home.finanzas');

				}
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};

	}
]);

'use strict';

// Comprobantes controller
angular.module('finanzas').controller('FinanzasEditController', ['user', 'finanza', 'enterprises', 'modosFacturacion', '$location',
	function(user, finanza, enterprises, modosFacturacion, $location) {

		// asignacion de modelos
		this.user = user;
		this.finanza = finanza;
		this.enterprises = enterprises;
		this.modosFacturacion = modosFacturacion;

		// asignacion de funciones
		this.update = update;

		// definicion de funciones
		// Update existing Comprobante
		function update () {
			// console.log(this.comprobante.enterprise, 'ent');
			// console.log(this.comprobante, 'comp');
			var finanza = this.finanza ;

			if (this.enterprise !== undefined) { finanza.enterprise = this.enterprise._id } else { finanza.enterprise = finanza.enterprise._id };
			if (this.modoFacturacion !== undefined) { finanza.modoFacturacion = this.modoFacturacion } else { finanza.modoFacturacion = finanza.modoFacturacion };

			finanza.$update(function() {
				$location.path('finanzas/view/' + finanza._id);
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};
	}
]);

'use strict';

// finanzas controller
angular.module('finanzas').controller('ListFinanzasController', ['$location', 'user', 'enterprises', 'movimientos', 'tipoFinanza', '$rootScope', 'Finanzas', '$state',
	function($location, user, enterprises, movimientos, tipoFinanza, $rootScope, Finanzas, $state) {

		var self = this;

		// asignacion de modelos
		this.user = user;
		this.finanzas = [];
		this.costosIndirectos = [];
		this.enterprises = enterprises;
		this.movimientos = movimientos;
		this.tipoFinanza = tipoFinanza;
		this.daFilter = undefined;
		this.loading = false;
		this.finished = false;

		// finanzas: function(Authentication, Finanzas) {
		// 	//console.log('authentication: ', Authentication.user);
		// 	return Finanzas.query({e: Authentication.user.enterprise.enterprise});
		// }

		this.loadCompras = function() {

			if (user && user.enterprise && user.enterprise.enterprise) {
				self.loading = true;
				Finanzas.query({e: user.enterprise.enterprise, last: self.finanzas.length ? {created: self.finanzas[self.finanzas.length - 1].created, saldo: self.finanzas[self.finanzas.length - 1].saldo} : null, limit: 10, type: self.tipoFinanza === 'debe' ? 'debe' : 'haber'}, function (data) {
					self.loading = false;
					self.finanzas = self.finanzas.concat(data);

					if (data.length === 0) {
						self.finished = true;
					}
				})
			}

			this.loadmore = function () {
				
			}


			

			// this.getFinanzas = function () {
			// 	if (user && user.enterprise && user.enterprise.enterprise) {
			// 		Finanzas.query({e: user.enterprise.enterprise, last: null, limit: 10, type: self.tipoFinanza === 'debe' ? 'debe' : 'haber'}, function (data) {
			// 			self.finanzas = data;
			// 		})
			// 	}
			// }

			$rootScope.tipoFinanza = tipoFinanza;

			// asignacion de funciones
			// this.filtrar = filtrar;
			this.remove = remove;

			// this.filtrar();
			//
			//
			// function filtrar (){
			// 	if (this.tipoFinanza == 'debe'){
			// 		this.daFilter = { tipoFinanza : 'debe'};
			// 	}
			// 	else{
			// 		this.daFilter = { tipoFinanza : 'haber'};
			// 	}
			// }

			// Remove existing finanza
			function remove ( finanza ) {
				if ( finanza ) { finanza.$remove();
				} else {
					this.finanza.$remove(function() {
						$location.path('finanzas');
					});
				}
			};

			// this.getFinanzas();
			// into finanzas
			this.getIntoFinanzaDetail = function(item) {
			  $state.go("home.viewFinanza", {finanzaId: item._id});
			};
		}


		this.loadCostIndirecto = function() {
			if(self.costosIndirectos.length <= 0) {						
				self.loading = true;
				Finanzas.query({enterprise: user.enterprise._id,type: "facturas"}, function (data) {
					self.loading = false;
					self.costosIndirectos = self.costosIndirectos.concat(data);
					console.log(self.costosIndirectos);
					console.log(data);

					if (data.length === 0) {
						self.finished = true;
					}
				})
			}

			this.loadmoreFactura = function () {
				
			}

		}
	}

]);
'use strict';

// Comprobantes controller
angular.module('finanzas').controller('FinanzasViewController', ['user', 'finanza', '$mdDialog', 'Movimientos', 'movimientos', 'tipoFinanza', '$rootScope', '$state',
	function(user, finanza, $mdDialog, Movimientos, movimientos, tipoFinanza, $rootScope, $state) {

		// asignacion de modelos
		this.user = user;
		this.finanza = finanza;
		this.tipoFinanza = tipoFinanza;
		// this.movimientos = movimientos;
		this.movimientos = Movimientos.query({ e: this.user.enterprise.enterprise});

		// asignacion de funciones

		this.showDialog = showDialog;
		this.rutaVolver = rutaVolver;

	    this.selectedMode = 'md-scale';
	    this.selectedDirection = 'up';

		// definicion de funciones
	
		function rutaVolver(){
			if (finanza.tipoFinanza == 'debe'){
				$rootScope.estadoActualParams.tipo = 'debe';
				$state.go('home.finanzas', $rootScope.estadoActualParams);
			}
			else{
				if (finanza.tipoFinanza == 'haber'){
					$rootScope.estadoActualParams.tipo = 'haber';
					$state.go('home.finanzas', $rootScope.estadoActualParams);
				}
			}
		}

		function showDialog($event,item,movimientos) {
	       $mdDialog.show({
	         targetEvent: $event,
	         templateUrl: 'modules/finanzas/views/add-asiento.client.view.html',
	         locals: {
	         	movimientosD: this.movimientosDebe,
	         	movimientosH: this.movimientosHaber,
	         	movimientos: this.movimientos,
	            item: item,
	            user : this.user
	         },
	         controller: DialogController
	      })
	       .then(function(answer) {
		      //$scope.alert = 'You said the information was "' + answer + '".';
		      // $scope.find();
		    }, function() {
		      //$scope.alert = 'You cancelled the dialog.';
		    });;
	  	}; //end showDialog

	   	function DialogController($scope, $mdDialog, item, user, Comprobantes, Movimientos, movimientos, Cajas, Condicionventas,$filter) {

	   		$scope.item = item;

	   		$scope.arrayMovs = movimientos;

	   		$scope.botonApagado = false;

	   		$scope.closeDialog = function() {
	         	$mdDialog.hide();
	        };

			$scope.findComprobantes = function(){
				$scope.comprobantes = Comprobantes.query({ e: $scope.item.enterprise._id });
			};

			$scope.findCajas = function(){
				$scope.cajas = Cajas.query({ e: $scope.item.enterprise._id });
			};

			$scope.findCondiciones = function(){
				$scope.condiciones = Condicionventas.query({ e: $scope.item.enterprise._id });
				$scope.filtrados = $filter('filter')($scope.condiciones, function(item){
					return (item.nombre !== 'Cuenta Corriente');
				})
			};

			$scope.add = function(saldo, monto){
				$scope.newSaldoDebe = saldo - monto;
				$scope.newSaldoHaber = saldo - monto;
			}

			$scope.createAsiento = function($event){
				if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)){
					if (($scope.monto !== undefined) && ($scope.monto !== null) && ($scope.monto !== 0)){
						if (($scope.caja !== undefined) && ($scope.caja !== null)){
							if (($scope.condicionVenta !== undefined) && ($scope.condicionVenta !== null)){
								if (($scope.comprobante !== undefined)&&($scope.comprobante !== null)){
									if (($scope.numComprobante == undefined) || ($scope.numComprobante == null)){
										$scope.numComprobante = 0;
									}
									$scope.botonApagado = true;

									var nuevoSaldo = $scope.item.saldo - $scope.monto; //saldo de la deuda de cliente/proveedor

									if ($scope.item.tipoFinanza == 'debe'){

										var nuevoSaldoCaja = $scope.caja.total - $scope.monto;

										var movimiento = new Movimientos({
											provider: $scope.item.provider._id,
											comprobante: $scope.comprobante,
											numero: $scope.numComprobante,
											estado: 'haber',
											finanza: $scope.item._id,
											monto: $scope.monto,
											saldo: nuevoSaldo,
											saldoCaja: nuevoSaldoCaja,
											caja: $scope.caja._id,
											condicion: $scope.condicionVenta._id,
											enterprise: user.enterprise._id,
										});

										$scope.item.saldo = nuevoSaldo;
										var finanza = $scope.item;
										finanza.enterprise = finanza.enterprise._id;
										finanza.provider = finanza.provider._id;

										movimiento.$save(function(response) {
											if(response._id) {
												movimientos.push(movimiento);
												$mdDialog.hide();
												finanza.$update(function() {
													console.log('saldo finanza ok');
												}, function(errorResponse) {
													console.log('saldo finanza error');
												});
											}
										}, function(errorResponse) {
											console.log(errorResponse);
										});
									}
									else{
										var nuevoSaldoCaja = $scope.caja.total + $scope.monto;

										var movimiento = new Movimientos({
											client: $scope.item.client._id,
											comprobante: $scope.comprobante,
											numero: $scope.numComprobante,
											estado: 'debe',
											finanza: $scope.item._id,
											monto: $scope.monto,
											saldo: nuevoSaldo,
											saldoCaja: nuevoSaldoCaja,
											caja: $scope.caja._id,
											condicion: $scope.condicionVenta._id,
											enterprise: user.enterprise._id,
										});

										$scope.item.saldo = nuevoSaldo;
										var finanza = $scope.item;
										finanza.enterprise = finanza.enterprise._id;
										finanza.client = finanza.client._id;

										movimiento.$save(function(response) {
											if(response._id) {
												movimientos.push(movimiento);
												$mdDialog.hide();
												finanza.$update(function() {
													console.log('saldo finanza ok');
												}, function(errorResponse) {
													console.log('saldo finanza error');
												});
											}
										}, function(errorResponse) {
											console.log(errorResponse);
										});

									}
								}
								else{
									$scope.errorPago = 'Debe indicar el tipo de comprobante';
								}
							}
							else{
								$scope.errorPago = 'Debe indicar la condicion de pago';
							}
						}
						else{
							$scope.errorPago = 'Debe indicar la caja a utilizar';
						}
					}
					else{
						$scope.errorPago = 'Debe indicar un monto valido';
					}
				}
			}
	    };
	    //end DialogController

	}
]);

'use strict';

// Comprobantes controller
angular.module('finanzas').controller('FinanzasController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Comprobantes', '$mdBottomSheet', 'Enterprises', '$mdDialog',"getServiceDetials",
	function($scope, $rootScope, $stateParams, $location, Authentication, Comprobantes, $mdBottomSheet, Enterprises, $mdDialog, getServiceDetials) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		var ctrl = this;
		$rootScope.tipoFinanza = $stateParams.tipo;

		// $scope.$watch('tipoFinanza', function(){
		// 	console.log($rootScope.tipoFinanza, 'tipo');
		// 	if($rootScope.tipoFinanza == 'debe') {
		// 		$scope.daFilter = { tipoFinanza: 'debe' };
		// 	} else if ($rootScope.tipoFinanza === 'haber') {
		// 		console.log('entre');
		// 		$scope.daFilter = { tipoFinanza: 'haber' };
		// 	}
		// 	console.log($scope.daFilter, 'filter');
		// });	
		
		
		
		// Create new Comprobante
		$scope.create = function() {
			// Create new Comprobante object
			var comprobante = new Comprobantes ({
				name: this.name,
				letra: this.letra,
				puntoDeVenta: this.puntoDeVenta,
				modoFacturacion: this.modo,
				movimientoStock: this.movimientoStock,
				movimientoCC: this.movimientoCC,
				movimientoOperacionInversa: this.movimientoOperacionInversa,
				funcionalidadSituacion: this.funcionalidadSituacion,
				autoAprobar: this.autoAprobar,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
			});

			// Redirect after save
			comprobante.$save(function(response) {
				if(response._id) {
					// agregar sub al array

					comprobante._id = response._id;
					$rootScope.comprobantes.unshift(comprobante);

				}

				// Clear form fields
				$scope.name = '';
				$scope.letra = '';
				$scope.puntoDeVenta = '';
				$scope.modoFacturacion = '';

				$mdBottomSheet.hide();
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un puesto 
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar tipo de Comprobante')
	          .content('¿Está seguro que desea eliminar este tipo de Comprobante?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Comprobante
		$scope.remove = function( comprobante ) {
			if ( comprobante ) { comprobante.$remove();

				for (var i in $scope.comprobantes ) {
					if ($scope.comprobantes [i] === comprobante ) {
						$scope.comprobantes.splice(i, 1);
					}
				}
			} else {
				$scope.comprobante.$remove(function() {
					$location.path('comprobantes');
				});
			}
		};

		// Update existing Comprobante
		$scope.update = function() {
			var comprobante = $scope.comprobante ;

			if (this.enterprise !== undefined) { comprobante.enterprise = this.enterprise._id } else { comprobante.enterprise = comprobante.enterprise._id };

			comprobante.$update(function() {
				$location.path('comprobantes/view/' + comprobante._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Comprobantes
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.comprobantes = Comprobantes.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		// $scope.findEnterprises = function() {
		// 	if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });}			
		// };

		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find a list of Modos de facturacion
		$scope.findModosF = function() {
			if ($scope.SEARCH !== undefined) { $scope.modosF = ['Comprobante interno', 'Talonario fiscal manual o pre-impreso', 'Factura electronica']; } 
		};

		// Find existing Comprobante
	
		$scope.findOne = function() {
			Finanzas.get({finanzaId: $stateParams.finanzaId}, function(res){
				$scope.finanza = res;
				$rootScope.tipoFinanza = $scope.finanza.tipoFinanza;
			});
		};
	}
]);
'use strict';

// Comprobantes controller
angular.module('finanzas').controller('ResumenListController', ['$scope', '$http', 'costcenters', 'Impuestos', 'PagosService','ServiceNavigation',"$rootScope",
    function($scope, $http, costcenters, Impuestos, PagosService, ServiceNavigation,$rootScope) {
        $scope.costcenters = costcenters;

        if(localStorage.getItem("dateResumen")) {
            var date = JSON.parse(localStorage.getItem("dateResumen"));
            $scope.year = Object.keys(date).length !== 0 ? date.year : (new Date()).getFullYear();
            $scope.month = Object.keys(date).length !== 0 ? date.month : (new Date()).getMonth();
        } else {
            $scope.year = (new Date()).getFullYear();
            $scope.month = (new Date()).getMonth();
        }

        ServiceNavigation.navInit();

        
        $scope.getName = function(name) {
            ServiceNavigation.addNav({name:name});
            $rootScope.$broadcast("nav change",true);
        }

        
        $scope.monthList = [
            {id: 0, name: 'enero'},
            {id: 1, name: 'febrero'},
            {id: 2, name: 'marzo'},
            {id: 3, name: 'abril'},
            {id: 4, name: 'mayo'},
            {id: 5, name: 'junio'},
            {id: 6, name: 'julio'},
            {id: 7, name: 'agosto'},
            {id: 8, name: 'septiembre'},
            {id: 9, name: 'octubre'},
            {id: 10, name: 'noviembre'},
            {id: 11, name: 'diciembre'}
        ];

        $scope.yearList = [];

        $scope.ventasTotal = {};
        $scope.otrosIngresosTotal = {};
        $scope.comprasTotal = {};
        $scope.costosIndirectosTotal = {};
        $scope.rrhhTotal = {};
        $scope.impuestosTotal = {};
        $scope.ventasTotales = {};

        $scope.totalResumen = {};
        $scope.totalRatioResumen = {};

        // It returns current year. And fill the yearList array with options from 2016 to the current year.
        var endYear = (new Date()).getFullYear();
        for (var startYear = 2016; startYear <= endYear; startYear++) {
            $scope.yearList.push(String(startYear));
        }

        $scope.findResumen = function () {
            localStorage.setItem("dateResumen", JSON.stringify({year: $scope.year, month: $scope.month}));
            costcenters.forEach(function(costcenter) {
                $scope.ventasTotal[costcenter._id] = 0;
                $scope.otrosIngresosTotal[costcenter._id] = 0;
                $scope.comprasTotal[costcenter._id] = 0;
                $scope.costosIndirectosTotal[costcenter._id] = 0;
                $scope.rrhhTotal[costcenter._id] = 0;
                $scope.impuestosTotal[costcenter._id] = 0;
                $scope.ventasTotales[costcenter._id] = 0;

                $scope.totalResumen[costcenter._id] = 0;
                $scope.totalRatioResumen[costcenter._id] = 0;

                Promise.all([
                    findVentas(costcenter._id),
                    findCompras(costcenter._id),
                    findCostosIndirectos(costcenter._id).$promise,
                    findRRHH(costcenter._id),
                    findImpuestos(costcenter._id)
                ]).then(function(result) {
                    calculateResumen(costcenter._id);
                }).catch(function (error) {
                    console.log(error);
                });
            });
        };

        $scope.findResumen();

        function calculateResumen(costcenter) {
            return new Promise(function() {
                $scope.ventasTotales[costcenter] = $scope.ventasTotal[costcenter] + $scope.otrosIngresosTotal[costcenter];
                $scope.totalResumen[costcenter] = $scope.ventasTotales[costcenter] - $scope.comprasTotal[costcenter] - $scope.costosIndirectosTotal[costcenter] - $scope.rrhhTotal[costcenter] - $scope.impuestosTotal[costcenter];

                if($scope.ventasTotales[costcenter]) {
                    $scope.totalRatioResumen[costcenter] = Math.round(($scope.totalResumen[costcenter] / $scope.ventasTotales[costcenter]) * 10000) / 100;
                } else {
                    $scope.totalRatioResumen[costcenter] = 0;
                }

                $scope.$apply();
            });
        }

        function findVentas(centroDeCosto) {
            return $http.put('/api/ventas', {
                year: $scope.year,
                month: $scope.month,
                enterprise: user.enterprise.enterprise._id,
                centroDeCosto: centroDeCosto
            }).success(function (ventas) {
                ventas.forEach(function(venta) {
                    if(venta.tipoComprobante && (venta.tipoComprobante.name === "Factura A" || venta.tipoComprobante.name === "Factura B" || venta.tipoComprobante.name === "Factura C"))
                        $scope.ventasTotal[centroDeCosto] += venta.total;
                    else
                        $scope.otrosIngresosTotal[centroDeCosto] += venta.total;
                });
            });
        }

        function findCompras(centroDeCosto) {
            return $http.put('/api/compras', {
                year: $scope.year,
                month: $scope.month,
                enterprise: user.enterprise._id,
                centroDeCosto: centroDeCosto
            }).success(function (compras) {
                compras.forEach(function(compra) {
                    $scope.comprasTotal[centroDeCosto] += compra.total;
                });
            });
        }

        function findCostosIndirectos(centroDeCosto) {
            if($scope.year != "" || $scope.month != ""){
                return PagosService.query({year: $scope.year, month: $scope.month, e: user.enterprise._id, centroId: centroDeCosto}, function(pagos) {
                    pagos.forEach(function(pago) {
                        $scope.costosIndirectosTotal[centroDeCosto] += pago.total;
                    });
                });
            }
        }

        function findRRHH(centroDeCosto) {
            return $http.put('/api/empleados', {
                enterprise: user.enterprise._id,
                centrodecosto: centroDeCosto
            }).success(function (response) {
                var empleados = response;
                for (var i = 0; i < empleados.length; i++) {
                    $http.put('/api/liquidaciones', {
                        empleadoId: empleados[i]._id,
                        month: $scope.month,
                        year: $scope.year
                    }).success(function (response) {
                        for (var j = 0; j < response.length; j++) {
                            $scope.rrhhTotal[centroDeCosto] += response[j].total;
                        }
                    });
                }
            }).error(function (err) {
                console.log("Error: " + err);
            });
        }

        function findImpuestos(centroDeCosto) {
            return $http.post('/api/impuestos/updateTotal', {
                month: $scope.month,
                year: $scope.year
            }).then(function () {
                Impuestos.query({centroDeCosto: centroDeCosto}, function (impuestos) {
                    impuestos.forEach(function(impuesto) {
                        if(impuesto.name === 'IVA Compras') {
                            $scope.impuestosTotal[centroDeCosto] -= impuesto.total;
                        } else {
                            $scope.impuestosTotal[centroDeCosto] += impuesto.total;
                        }
                    });
                });
            }).catch(function (error) {
                console.log("Error: " + error);
            });
        }
    }
]);
'use strict';

// Comprobantes controller
angular.module('finanzas').controller('ResumenController', ['$scope', '$stateParams', '$state', '$http', 'user', 'PagosService', 'Impuestos',
    function($scope, $stateParams, $state, $http, user, PagosService, Impuestos) {
        $scope.ventasTotal = 0;
        $scope.otrosIngresosTotal = 0;
        $scope.comprasTotal = 0;
        $scope.costosIndirectosTotal = 0;
        $scope.rrhhTotal = 0;
        $scope.impuestosTotal = 0;
        $scope.ventasTotales = 0;
        $scope.resultadoBruto = 0;
        $scope.resultadoNeto = 0;

        $scope.ventasRatio = 0;
        $scope.otrosIngresosRatio = 0;
        $scope.comprasRatio = 0;
        $scope.costosIndirectosRatio = 0;
        $scope.rrhhRatio = 0;
        $scope.impuestosRatio = 0;
        $scope.resultadoRatio = 0;

        var year = (new Date()).getFullYear();
        var month = (new Date()).getMonth();
        if(localStorage.getItem("dateResumen")) {
            var date = JSON.parse(localStorage.getItem("dateResumen"));
            year = Object.keys(date).length !== 0 ? date.year : (new Date()).getFullYear();
            month = Object.keys(date).length !== 0 ? date.month : (new Date()).getMonth();
        }

        $scope.$watch('authentication', function () {
            if (!sessionStorage.getItem('centroDeCosto')) {
                sessionStorage.setItem('centroDeCosto', $stateParams.centroDeCosto);
            } else if ($stateParams.centroDeCosto !== '' && $stateParams.centroDeCosto !== sessionStorage.getItem('centroDeCosto')) {
                sessionStorage.setItem('centroDeCosto', $stateParams.centroDeCosto);
            }

            $scope.centroDeCosto = sessionStorage.getItem('centroDeCosto');

            Promise.all([
                findVentas(),
                findCompras(),
                findCostosIndirectos().$promise,
                findRRHH(),
                findImpuestos()
            ]).then(function(result) {
                calculateResumen();
            }).catch(function (error) {
                console.log(error);
            });
        });

        function findVentas() {
            return $http.put('/api/ventas', {
                year: year,
                month: month,
                enterprise: user.enterprise._id,
                centroDeCosto: $scope.centroDeCosto
            }).success(function (ventas) {
                ventas.forEach(function(venta) {
                    if(venta.tipoComprobante && (venta.tipoComprobante.name === "Factura A" || venta.tipoComprobante.name === "Factura B" || venta.tipoComprobante.name === "Factura C"))
                        $scope.ventasTotal += venta.total;
                    else
                        $scope.otrosIngresosTotal += venta.total;
                });
            });
        }

        function findCompras() {
            return $http.put('/api/compras', {
                year: year,
                month: month,
                enterprise: user.enterprise._id,
                centroDeCosto: $scope.centroDeCosto
            }).success(function (compras) {
                compras.forEach(function(compra) {
                    $scope.comprasTotal += compra.total;
                });
            });
        }

        function findCostosIndirectos() {
            if(year != "" || month != ""){
                return PagosService.query({year: year, month: month, e: user.enterprise._id, centroId: $scope.centroDeCosto}, function(pagos) {
                    pagos.forEach(function(pago) {
                        $scope.costosIndirectosTotal += pago.total;
                    });
                });
            }
        }

        function findRRHH() {
            return $http.put('/api/empleados', {
                enterprise: user.enterprise._id,
                centrodecosto: $scope.centroDeCosto
            }).success(function (response) {
                var empleados = response;
                for (var i = 0; i < empleados.length; i++) {
                    $http.put('/api/liquidaciones', {
                        empleadoId: empleados[i]._id,
                        month: month,
                        year: year
                    }).success(function (response) {
                        for (var j = 0; j < response.length; j++) {
                            $scope.rrhhTotal += response[j].total;
                        }
                    });
                }
            }).error(function (err) {
                console.log("Error: " + err);
            });
        }

        function findImpuestos() {
            return $http.post('/api/impuestos/updateTotal', {
                month: month,
                year: year
            }).then(function () {
                Impuestos.query({centroDeCosto: $scope.centroDeCosto}, function (impuestos) {
                    impuestos.forEach(function(impuesto) {
                        if(impuesto.name === 'IVA Compras') {
                            $scope.impuestosTotal -= impuesto.total;
                        } else {
                            $scope.impuestosTotal += impuesto.total;
                        }
                    });
                });
            }).catch(function (error) {
                console.log("Error: " + error);
            });
        }

        function calculateResumen() {
            return new Promise(function() {
                $scope.ventasTotales = $scope.ventasTotal + $scope.otrosIngresosTotal;
                $scope.resultadoBruto = $scope.ventasTotales - $scope.comprasTotal - $scope.costosIndirectosTotal - $scope.rrhhTotal;
                $scope.resultadoNeto = $scope.resultadoBruto - $scope.impuestosTotal;

                if($scope.ventasTotales) {
                    $scope.ventasRatio = $scope.ventasTotales && Math.round(($scope.ventasTotal / $scope.ventasTotales) * 10000) / 100;
                    $scope.otrosIngresosRatio = Math.round(($scope.otrosIngresosTotal / $scope.ventasTotales) * 10000) / 100;
                    $scope.comprasRatio = Math.round(($scope.comprasTotal / $scope.ventasTotales) * 10000) / 100;
                    $scope.costosIndirectosRatio = Math.round(($scope.costosIndirectosTotal / $scope.ventasTotales) * 10000) / 100;
                    $scope.rrhhRatio = Math.round(($scope.rrhhTotal / $scope.ventasTotales) * 10000) / 100;
                    $scope.impuestosRatio = Math.round(($scope.impuestosTotal / $scope.ventasTotales) * 10000) / 100;
                    $scope.resultadoRatio = Math.round(($scope.resultadoNeto / $scope.ventasTotales) * 10000) / 100;
                }

                $scope.$apply();
            });
        }
    }
]);
'use strict';

//Comprobantes service used to communicate Comprobantes REST endpoints
angular.module('finanzas').factory('Finanzas', ['$resource',
	function($resource) {
		return $resource('api/finanzas/:finanzaId', { finanzaId: '@_id', e: '@enterprise', last: '@last', limit: '@limit', type: '@type'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]).factory('ServiceNavigation', ['$location',
 function($location) {
    var inneNavList = [];
    return {
      addNav : function(navObj) { 
        if(inneNavList.length > 0) {      
          var elempos = inneNavList.map(function(x){return x.name}).indexOf(navObj.name);
          if(elempos === -1)
            inneNavList.push(navObj);
        } else {
          inneNavList.push(navObj);
        }         
          
        window.localStorage.setItem("subNav",JSON.stringify(inneNavList));              
      },
      getNav : function() {        
        return (inneNavList.length > 0 ) ? inneNavList : JSON.parse(window.localStorage.getItem("subNav"));
      },
      navInit: function(val){      
        inneNavList.splice(0);
       window.localStorage.removeItem("subNav");
      },
      back: function() {        
        if(window.localStorage.getItem("subNav")){
          inneNavList = JSON.parse(window.localStorage.getItem("subNav"))
          window.localStorage.removeItem("subNav");
        }      
        inneNavList.splice(inneNavList.length - 1, 1);
        window.localStorage.setItem("subNav",JSON.stringify(inneNavList)); 
      }
    }
  }
])
'use strict';

// Configuring the Compras module
angular.module('historialCompras').run(['Menus',
	function(Menus) {
		// Add the Compras dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Historial Compras',
			state: 'historialCompras',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'historialCompras', {
			title: 'List Historial Compras',
			state: 'historialCompras.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'historialCompras', {
			title: 'Create Historial Compra',
			state: 'historialCompras.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('historialCompras').config(['$stateProvider',
	function($stateProvider) {
		// Compras state routing
		$stateProvider.
		state('historialCompras', {
			abstract: true,
			url: '/historialCompras',
			template: '<ui-view/>'
		})
		.
		state('historialCompras.list', {
			url: '',
			templateUrl: 'modules/historialCompras/client/views/list-historialCompras.client.view.html'
		})
		// .
		// state('historialCompras.create', {
		// 	url: '/create',
		// 	templateUrl: 'modules/historialCompras/views/create-compra.client.view.html'
		// }).
		// state('historialCompras.view', {
		// 	url: '/:compraId',
		// 	templateUrl: 'modules/historialCompras/views/view-compra.client.view.html'
		// }).
		// state('historialCompras.edit', {
		// 	url: '/:compraId/edit',
		// 	templateUrl: 'modules/historialCompras/views/edit-compra.client.view.html'
		// })
		;
	}
]);
'use strict';

// Compras controller
angular.module('historialCompras').controller('HistorialComprasController', ['$scope',
	function($scope) {
		
	}	
]);
'use strict';

//Compras service used to communicate Compras REST endpoints
angular.module('historialCompras').factory('HistorialCompras', ['$resource',
	function($resource) {
		return $resource('api/historialCompras', {}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Rrhhs module
angular.module('impuestos').run(['Menus',
    function(Menus) {
        // Add the Rrhhs dropdown item
        Menus.addMenuItem('topbar', {
            title: 'Impuestos',
            state: 'impuestos',
            type: 'dropdown'
        });

        // Add the dropdown list item
        Menus.addSubMenuItem('topbar', 'impuestos', {
            title: 'List Impuestos',
            state: 'impuestos.list'
        });

        // Add the dropdown create item
        Menus.addSubMenuItem('topbar', 'impuestos', {
            title: 'Create Impuesto',
            state: 'impuestos.create'
        });
    }
]);
'use strict';

//Setting up route
angular.module('impuestos').config(['$stateProvider',
    function($stateProvider) {
        // Rrhhs state routing
        $stateProvider.
        state('impuestos', {
            abstract: true,
            url: '/impuestos',
            template: '<ui-view/>'
        }).
        state('impuestos.list', {
            url: '',
            templateUrl: 'modules/impuestos/views/list-impuestos.client.view.html'
        }).
        state('impuestos.create', {
            url: '/create',
            templateUrl: 'modules/impuestos/views/create-impuesto.client.view.html'
        }).
        state('impuestos.view', {
            url: '/:impuestoId',
            templateUrl: 'modules/impuestos/views/view-impuesto.client.view.html'
        });
    }
]);
'use strict';

// Create Impuesto controller
angular.module('impuestos').controller('ImpuestosCreateController', ['$state', '$scope', '$stateParams', 'Impuestos',
    function ($state, $scope, $stateParams, Impuestos) {


        $scope.resetCoefficient = function resetCoefficient() {
            if(!$scope.type) {
                $scope.coefficient = undefined;
                $scope.automaticoType = undefined;
            }
        };

        // Create new impuesto
        $scope.create = function create() {
            var impuesto = new Impuestos({
                name: $scope.name,
                descripcion: $scope.descripcion ? $scope.descripcion : undefined,
                total: 0.0,
                coefficient: $scope.coefficient,
                type: $scope.type,
                automaticoType: $scope.automaticoType,
                centroDeCosto: $stateParams.centroDeCosto,
                month: (new Date()).getMonth(),
                year: (new Date()).getFullYear()
            });

            // Redirect after save
            impuesto.$save(function (response) {
                if (response._id) {
                    $state.go('home.viewImpuesto', {centroDeCosto: $stateParams.centroDeCosto});
                }
            }, function (errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        }
    }]);


'use strict';

// Create Impuesto controller
angular.module('impuestos').controller('ImpuestosDetailsController', ['$state', '$scope', '$http', '$stateParams', 'VentasExtra', 'ComprasExtra', 'ImpuestosTax',
    function($state, $scope, $http, $stateParams, VentasExtra, ComprasExtra, ImpuestosTax) {
        var year = (new Date()).getFullYear();
        var month = (new Date()).getMonth();

        if (localStorage.getItem("dateImpuestos")) {
            var date = JSON.parse(localStorage.getItem("dateImpuestos"));
            year = Object.keys(date).length !== 0 ? date.year : (new Date()).getFullYear();
            month = Object.keys(date).length !== 0 ? date.month : (new Date()).getMonth();
        }

        $scope.impuestosName = $stateParams.impuestosName;
        $scope.impuestosType = $stateParams.impuestosType;
        console.log($stateParams, $scope.impuestosType);
        $scope.start = true;
        $scope.impuestos = [];
        $scope.ajustars = [];

        $scope.loadmore = function() {
            console.log($scope.impuestosName, $scope.impuestosType);

            $scope.loading = true;
            $scope.start = false;
            var last = $scope.impuestos.length ? $scope.impuestos[$scope.impuestos.length - 1].created : null;
            var limit = $scope.impuestos.length < 40 ? 40 : 20;
            // if ($scope.impuestosName == 'IVA Ventas') {
            //     VentasExtra.loadMoreImpuestos($stateParams.impuestosId, last, limit, year, month).then(
            //         function(data) {

            //             $scope.impuestos = $scope.impuestos.concat(data.data);
            //             $scope.loading = false;
            //             $scope.start = false;
            //             if (data.data.length === 0)
            //                 $scope.done = true;
            //             else {
            //                 $http.get('/api/impuestos/ajustar', {
            //                     params: {
            //                         impuestoId: $stateParams.impuestosId,
            //                         year: year,
            //                         month: month,
            //                         last: data.data[data.data.length - 1].created
            //                     }
            //                 }).then(function(data) {
            //                     console.log("QQQQQ", data);

            //                     $scope.impuestos = $scope.impuestos.concat(data.data);
            //                 });
            //             }
            //         }
            //     )
            // } else if ($scope.impuestosName == 'IVA Compras') {
            //     ComprasExtra.loadMoreImpuestos($stateParams.impuestosId, last, limit, year, month).then(
            //         function(data) {
            //             console.log(data);
            //             $scope.impuestos = $scope.impuestos.concat(data.data);
            //             $scope.loading = false;
            //             $scope.start = false;
            //             if (data.data.length === 0)
            //                 $scope.done = true;
            //             else {
            //                 $http.get('/api/impuestos/ajustar', {
            //                     params: {
            //                         impuestoId: $stateParams.impuestosId,
            //                         year: year,
            //                         month: month,
            //                         last: data.data[data.data.length - 1].created
            //                     }
            //                 }).then(function(data) {
            //                     console.log(data.data)
            //                     $scope.impuestos = $scope.impuestos.concat(data.data);
            //                 });
            //             }
            //         }
            //     )
            // }
            if ($scope.impuestosName == 'IVA Ventas') {
                ImpuestosTax.loadMoreImpuestos($stateParams.impuestosId, last, limit, year, month).then(
                    function(data) {
                        console.log("HEEEREEE", data);

                        $scope.impuestos = $scope.impuestos.concat(data.data);
                        $scope.loading = false;
                        $scope.start = false;
                        if (data.data.length === 0)
                            $scope.done = true;
                        else {
                            $http.get('/api/impuestos/ajustar', {
                                params: {
                                    impuestoId: $stateParams.impuestosId,
                                    year: year,
                                    month: month,
                                    last: data.data[data.data.length - 1].created
                                }
                            }).then(function(data) {
                                $scope.impuestos = $scope.impuestos.concat(data.data);
                            });
                        }
                    }
                )
            } else if ($scope.impuestosName == 'IVA Compras') {
                ImpuestosTax.loadMoreImpuestos($stateParams.impuestosId, last, limit, year, month).then(
                    function(data) {
                        console.log("HEEEREEE", data);

                        $scope.impuestos = $scope.impuestos.concat(data.data);
                        $scope.loading = false;
                        $scope.start = false;
                        if (data.data.length === 0)
                            $scope.done = true;
                        else {
                            $http.get('/api/impuestos/ajustar', {
                                params: {
                                    impuestoId: $stateParams.impuestosId,
                                    year: year,
                                    month: month,
                                    last: data.data[data.data.length - 1].created
                                }
                            }).then(function(data) {
                                $scope.impuestos = $scope.impuestos.concat(data.data);
                            });
                        }
                    }
                )
            } else {
                ImpuestosTax.loadMoreImpuestos($stateParams.impuestosId, last, limit, year, month).then(
                    function(data) {
                        console.log("HEEEREEE", data);

                        $scope.impuestos = $scope.impuestos.concat(data.data);
                        $scope.loading = false;
                        $scope.start = false;
                        if (data.data.length === 0)
                            $scope.done = true;
                        else {
                            $http.get('/api/impuestos/ajustar', {
                                params: {
                                    impuestoId: $stateParams.impuestosId,
                                    year: year,
                                    month: month,
                                    last: data.data[data.data.length - 1].created
                                }
                            }).then(function(data) {
                                $scope.impuestos = $scope.impuestos.concat(data.data);
                            });
                        }
                    }
                )
            }
        };

    }
]);
'use strict';

// puestosList controller
angular.module('impuestos').controller('ImpuestosListController', ['$scope', '$http', 'costcenters', 'Impuestos','ServiceNavigation',"$rootScope",
    function($scope, $http, costcenters, Impuestos, ServiceNavigation,$rootScope) {
        this.costcenters = costcenters;

        if(localStorage.getItem("dateImpuestos")) {
            var date = JSON.parse(localStorage.getItem("dateImpuestos"));
            $scope.year = Object.keys(date).length !== 0 ? date.year : (new Date()).getFullYear();
            $scope.month = Object.keys(date).length !== 0 ? date.month : (new Date()).getMonth();
        } else {
            $scope.year = (new Date()).getFullYear();
            $scope.month = (new Date()).getMonth();
        }

        //it initializes and gets the current name of inner page in view.
       //ServiceNavigation.navInit();

        
        $scope.getName = function(name) {
            ServiceNavigation.addNav({name:name});
            $rootScope.$broadcast("nav change",true);
        }

        $scope.$watch("year",function(newVal,oldval){           
            localStorage.setItem("year",JSON.stringify({yearName : newVal}))
           
        })

        $scope.$watch("month",function(newVal,oldval){
            var elemPos = $scope.monthList.map(function(x){return x.id}).indexOf(newVal);
            localStorage.setItem("month",JSON.stringify({monthName : $scope.monthList[elemPos].name}))
           
        })

        $scope.monthList = [
            {id: 0, name: 'enero'},
            {id: 1, name: 'febrero'},
            {id: 2, name: 'marzo'},
            {id: 3, name: 'abril'},
            {id: 4, name: 'mayo'},
            {id: 5, name: 'junio'},
            {id: 6, name: 'julio'},
            {id: 7, name: 'agosto'},
            {id: 8, name: 'septiembre'},
            {id: 9, name: 'octubre'},
            {id: 10, name: 'noviembre'},
            {id: 11, name: 'diciembre'}
        ];
        $scope.yearList = [];
        $scope.totalImpuestos = {};

        // It returns current year. And fill the yearList array with options from 2016 to the current year.
        var endYear = (new Date()).getFullYear();
        for (var startYear = 2016; startYear <= endYear; startYear++) {
            $scope.yearList.push(String(startYear));
        }

        $scope.findImpuestos = function () {
            $scope.totalImpuestos = {};
            $http.post('/api/impuestos/updateTotal', {
                month: $scope.month,
                year: $scope.year
            }).then(function () {
                localStorage.setItem("dateImpuestos", JSON.stringify({year:$scope.year, month:$scope.month}));
                costcenters.forEach(function(costcenter) {
                    Impuestos.query({centroDeCosto: costcenter._id}, function (impuestos) {
                        $scope.totalImpuestos[costcenter.name] = 0;
                        impuestos.forEach(function(impuesto) {
                            $scope.totalImpuestos[costcenter.name] += impuesto.total;
                        });
                        $scope.totalImpuestos[costcenter.name] = Math.round($scope.totalImpuestos[costcenter.name] * 100) / 100;
                    });
                })
            }).catch(function (error) {
                console.log("Error: " + error);
            });
        };

        $scope.findImpuestos();
    }
]);

'use strict';

// puestosList controller
angular.module('impuestos').controller('ImpuestosViewController', ['$rootScope','$state', '$scope', '$http', '$stateParams', '$mdDialog', 'user', 'Impuestos',
    function($rootScope, $state, $scope, $http, $stateParams, $mdDialog, user, Impuestos) {
        var originatorEv;
        var year = (new Date()).getFullYear();
        var month = (new Date()).getMonth();
        if (localStorage.getItem("dateImpuestos")) {
            var date = JSON.parse(localStorage.getItem("dateImpuestos"));
            year = Object.keys(date).length !== 0 ? date.year : (new Date()).getFullYear();
            month = Object.keys(date).length !== 0 ? date.month : (new Date()).getMonth();
        }

        $scope.editing = false;
        $scope.coefficient = 0;
        $scope.ajustarPrice = 0;

        $scope.$watch('authentication', function() {
            if (!sessionStorage.getItem('centroDeCosto')) {
                sessionStorage.setItem('centroDeCosto', $stateParams.centroDeCosto);
            } else if ($stateParams.centroDeCosto !== '' && $stateParams.centroDeCosto !== sessionStorage.getItem('centroDeCosto')) {
                sessionStorage.setItem('centroDeCosto', $stateParams.centroDeCosto);
            }

            $scope.findImpuestos();
        });

        var getMonth = JSON.parse(localStorage.getItem("month"));
        var getYear = JSON.parse(localStorage.getItem("year"));
        $rootScope.getPeriod = getMonth.monthName + ", " + getYear.yearName; 

        $scope.findImpuestos = function() {
            Impuestos.query({ centroDeCosto: sessionStorage.getItem('centroDeCosto') }, function(res) {
                $scope.impuestos = res;
            });
        };

        $scope.openMenu = function($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        };

        $scope.deleteImpuesto = function(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('¿Eliminar la impuesto?')
                .ariaLabel('Lucky day')
                .targetEvent(ev)
                .ok('Aceptar')
                .cancel('Cancelar');
            $mdDialog.show(confirm).then(function() {
                deleteImpuestoFromDB(item);
            }, function() {
                //cancelo
            });
        };

        function deleteImpuestoFromDB(item) {
            if (item) {
                item.$remove();
                $state.go('home.viewImpuesto', { centroDeCosto: item.centroDeCosto }, { reload: true });
            }
        }

        $scope.editImpuesto = function(item) {
            $scope.coefficient = item.coefficient;
            $scope.editing = item;
        };

        $scope.updateImpuesto = function(item) {
            $scope.editing = false;
            item.total = (item.total / $scope.coefficient) * item.coefficient;

            item.$update(function() {
                console.log('todo ok');
            }, function(errorResponse) {
                console.log('error');
            });
        };

        $scope.createNewImpuesto = function() {
            $state.go("home.createImpuesto", { centroDeCosto: sessionStorage.getItem('centroDeCosto') });
        };

        $scope.showDialogAjustar = function($event, item) {
            $mdDialog.show({
                targetEvent: $event,
                templateUrl: 'modules/impuestos/views/ajustar-impuesto.client.view.html',
                locals: {
                    item: item
                },
                controller: DialogControllerAjustar
            })
        };

        $scope.showDialogPago = function($event, item) {
            $mdDialog.show({
                targetEvent: $event,
                templateUrl: 'modules/pagos/views/create-pago.client.view.html',
                locals: {
                    item: item,
                    user: user
                },
                controller: DialogController
            })
        }; //end showDialog

        function DialogControllerAjustar($scope, $mdDialog, $http, item) {
            $scope.item = item;
            $scope.apagarBoton = false;

            $scope.closeDialog = function() {
                $mdDialog.hide();
            };

            $scope.addAjustar = function($event, item) {
                if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                    if (($scope.ajustarPrice !== undefined) && ($scope.ajustarPrice !== null)) {
                        $http.put('/api/impuestos/ajustar', {
                                impuestoId: item._id,
                                month: month,
                                year: year,
                                price: $scope.ajustarPrice,
                                observacion: $scope.observaciones
                            })
                            .success(function(response) {
                                console.log(response, "2222222");
                                $state.go('home.viewImpuesto', { centroDeCosto: item.centroDeCosto }, { reload: true });
                            }).error(function(err) {
                                console.log("Error: " + err);
                            });

                        $scope.apagarBoton = true;
                    }

                    $mdDialog.hide();
                }
            }
        }

        function DialogController($scope, $mdDialog, item, user, PagosService, $filter, Socket, Cajas) {
            $scope.apagarBoton = false; //desahbilita boton de crear para evitar que se presione dos veces
            $scope.$watch('ServiciosService', function() {
                $scope.findPago();
            });
            $scope.$watch('Cajas', function() {
                $scope.findCajas();
            });

            $scope.item = item;

            $scope.montoE = 0;
            $scope.montoC = 0;

            $scope.errorCaja = undefined;

            $scope.findCajas = function() {
                Cajas.query({ e: user.enterprise._id }, function(data) {
                    $scope.cajas = $filter('filter')(data, function(item) {
                        return (item._id !== $scope.item._id);
                    })
                });
            };

            $scope.closeDialog = function() {
                $mdDialog.hide();
            };

            $scope.findPago = function() {
                $scope.pagos = PagosService.query({ e: user.enterprise._id });
            };

            $scope.createPago = function($event, item) {
                if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                    if (($scope.caja !== undefined) && ($scope.caja !== null)) {

                        $scope.apagarBoton = true; //desahbilita boton de crear para evitar que se presione dos veces

                        var numero = $scope.pagos.length + 1;

                        var pago = {
                            numero: numero,
                            impuestos: item._id,
                            cajaD: $scope.caja._id,
                            montoE: $scope.montoE,
                            montoC: $scope.montoC,
                            pagoDate: $scope.pagoDate,
                            saldo: $scope.caja.total - ($scope.montoE + $scope.montoC),
                            observaciones: $scope.observaciones,
                            enterprise: user.enterprise._id,
                            type: 'impuesto'
                        };

                        Socket.emit('pago.create', pago);
                        var total = 0;
                        Impuestos.get({ impuestoId: item._id }, function(impuesto) {
                            total = impuesto.total + $scope.montoE + $scope.montoC;
                            Impuestos.update({
                                _id: item._id,
                                total: total
                            }, function() {
                                $state.go('home.viewImpuesto', { centroDeCosto: item.centroDeCosto }, { reload: true });
                            }, function(errorResponse) {
                                console.log('costo error');
                            });
                        });

                        $mdDialog.hide();
                    } else {
                        $scope.errorCaja = 'Se debe seleccionar la caja origin'
                    }
                }
            }; //agrega puestos en el edit de caja

            $scope.addCheque = function(value) {
                $scope.errorCaja = false;
                if ($scope.caja) {
                    if ($scope.caja.cheques >= value) {
                        $scope.montoC = value;
                    } else {
                        $scope.errorCaja = 'amount is not available in selected caja';
                    }
                } else {
                    $scope.errorCaja = 'Se debe seleccionar la caja origin';
                }
            };
        }
    }
]);
'use strict';

//Categories service used to communicate Categories REST endpoints
angular.module('impuestos').factory('Impuestos', ['$resource', '$http',
    function($resource, $http) {
        return $resource('api/impuestos/:impuestoId', {
            impuestoId: '@_id'
        }, {
            update: {
                method: 'PUT'
            }
        });
    }
]).factory('ImpuestosTax', ['$http',
    function($http) {
        return {

            loadMoreImpuestos: function(impuesto, last, limit, year, month) {
                return $http({
                    method: "get",
                    url: "/api/impuestos/ajustar",
                    params: {
                        impuestoId: impuesto,
                        last: last,
                        limit: limit,
                        year: year,
                        month: month
                    }
                })
            }
        }
    }
]).factory('ServiceNavigation', ['$location',
    function($location) {
    var inneNavList = [];
    return {
      addNav : function(navObj) { 
        if(inneNavList.length > 0) {      
          var elempos = inneNavList.map(function(x){return x.name}).indexOf(navObj.name);
          if(elempos === -1)
            inneNavList.push(navObj);
        } else {
          inneNavList.push(navObj);
        }         
          
        window.localStorage.setItem("subNav",JSON.stringify(inneNavList));              
      },
      getNav : function() {        
        return (inneNavList.length > 0 ) ? inneNavList : JSON.parse(window.localStorage.getItem("subNav"));
      },
      navInit: function(val){
        
       inneNavList.splice(0);
       window.localStorage.removeItem("subNav");
      },
      back: function() {        
        if(window.localStorage.getItem("subNav")){
          inneNavList = JSON.parse(window.localStorage.getItem("subNav"))
          window.localStorage.removeItem("subNav");
        }      
        inneNavList.splice(inneNavList.length - 1, 1);
        window.localStorage.setItem("subNav",JSON.stringify(inneNavList)); 
      }
    }
  }
]);
'use strict';

// Configuring the liquidaciones module
angular.module('liquidaciones').run(['Menus',
	function(Menus) {
		// Add the liquidaciones dropdown item
		Menus.addMenuItem('topbar', {
			title: 'liquidaciones',
			state: 'liquidaciones',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'liquidaciones', {
			title: 'List liquidaciones',
			state: 'liquidaciones.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'liquidaciones', {
			title: 'Create Liquidacion',
			state: 'liquidaciones.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('liquidaciones').config(['$stateProvider',
	function($stateProvider) {
		// liquidaciones state routing
		$stateProvider.
		state('liquidaciones', {
			abstract: true,
			url: '/liquidaciones',
			template: '<ui-view/>'
		}).
		state('liquidaciones.list', {
			url: '',
			templateUrl: 'modules/liquidaciones/views/list-liquidaciones.client.view.html'
		}).
		state('liquidaciones.create', {
			url: '/create',
			templateUrl: 'modules/liquidaciones/views/create-liquidacion.client.view.html'
		}).
		state('liquidaciones.view', {
			url: '/:liquidacionId',
			templateUrl: 'modules/liquidaciones/views/view-liquidacion.client.view.html'
		}).
		state('liquidaciones.edit', {
			url: '/:liquidacionId/edit',
			templateUrl: 'modules/liquidaciones/views/edit-liquidacion.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('liquidaciones').controller('LiquidacionCreateController', ['user', '$state', '$filter', '$scope', '$http', '$stateParams', 'Empleados', 'Authentication', 'Liquidaciones',
    function (user, $state, $filter, $scope, $http, $stateParams, Empleados, Authentication, Liquidaciones) {

        $scope.authentication = Authentication;
        $scope.minLengthPersonal = 0;
        $scope.remuneraciones = [];
        $scope.modoEditar = [];
        $scope.addedConceptos = [];
        $scope.totalLiqudacion = 0;
        $scope.fechaDeLiquidacion = new Date();
        $scope.fechaDeLiquidacion2 = new Date();
        $scope.rrhh = undefined;
        $scope.editing = false;
        $scope.fromPersonal = false;

        $scope.$watch('authentication', function () {
            $scope.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
            $scope.findPersonal();

            if($stateParams.empleadoId) {
                $scope.fromPersonal = true;
            }

            if ($stateParams.liquidacionId) {
                $scope.editing = true;
                $scope.findOne();
            }
        });

        $scope.searchTextChangePersonal = function (text) {
            return $filter('filter')($scope.personal, {deleted: false, $: text});
        };

        $scope.searchTextChangeConcepto = function (text) {
            return $filter('filter')($scope.remuneraciones, {$: text});
        };

        $scope.selectedItemChange = function (item) {
            $scope.rrhh = item;
            $scope.remuneraciones = item && item.userLogin && item.userLogin.remuneraciones || [];
        };

        $scope.selectedItemChangeConcepto = function (item) {
            $scope.concepto = item;
        };

        $scope.findOne = function () {
            $http({
                method: 'GET',
                url: ('/api/liquidaciones/' + $stateParams.liquidacionId)
            }).then(function successCallback(res) {
                $scope.liquidacion = res.data;

                $scope.findPersonal($scope.liquidacion.empleado._id);
                $scope.observaciones = $scope.liquidacion.observaciones;
                $scope.fechaDeLiquidacion = new Date($scope.liquidacion.fechaDeLiquidacion);
                $scope.fechaDeLiquidacion2 = new Date($scope.liquidacion.fechaDeLiquidacion2);
                $scope.totalLiqudacion = $scope.liquidacion.total;
                $scope.addedConceptos = $scope.liquidacion.remuneraciones;
                $scope.modoEditar = new Array($scope.addedConceptos.length).fill(false);

                for(var i = 0; i < $scope.addedConceptos.length; i++) {
                    $scope.addedConceptos[i].totalAll = $scope.addedConceptos[i].cantidad * $scope.addedConceptos[i].total
                }
            }, function errorCallback(err) {
                console.log('Error' + err);
            });
        };

        $scope.findPersonal = function (empleadoId) {
            var empleado = empleadoId || null;
            if ($scope.SEARCH !== undefined) {
                Empleados.query({e: $scope.SEARCH.enterprise}, function (response) {
                    $scope.personal = response;
                    if ($stateParams.empleadoId || empleado) {
                        for (var i = 0; i < $scope.personal.length; i++) {
                            if ($scope.personal[i]._id == $stateParams.empleadoId || $scope.personal[i]._id == empleado) {
                                $scope.rrhh = $scope.personal[i];
                            }
                        }
                    }
                });
            } else {
                Empleados.query({}, function (response) {
                    $scope.personal = response;
                    if ($stateParams.empleadoId || empleado) {
                        for (var i = 0; i < $scope.personal.length; i++) {
                            if ($scope.personal[i]._id == $stateParams.empleadoId || $scope.personal[i]._id == empleado) {
                                $scope.rrhh = $scope.personal[i];
                            }
                        }
                    }
                });
            }
        };

        $scope.sendRRHH = function ($event, rrhh) {
            if ($event.keyCode === 13) {
                $event.preventDefault();
                if ((rrhh === null) || (rrhh === undefined)) {
                    $scope.mensajePer = 'No seleccionaste un personal valido';
                } else {
                    $scope.rrhh = personal;
                }
            }
        };

        $scope.addConcepto = function (concepto) {

            concepto.totalAll = concepto.total * concepto.cantidad;
            $scope.modoEditar.push(false);

            // If the remuneracion is not our list we add it
            if (!checkIfAlreadyIn(concepto)) {
                $scope.addedConceptos.push(concepto);
                $scope.totalLiqudacion += concepto.totalAll;
            } else {
                $scope.error = 'The concepto is already in the list';
            }
        };

        // Check if concepto is already in our list
        var checkIfAlreadyIn = function (concepto) {
            for (var i = 0; i < $scope.addedConceptos.length; i++) {
                if ($scope.addedConceptos[i]._id == concepto._id) {
                    return true;
                }
            }

            return false;
        };

        $scope.editTrue = function (index) {
            $scope.modoEditar[index] = true;
        };

        $scope.updateP = function (index, p) {
            $scope.addedConceptos[index].cantidad = p.cantidad;
            $scope.totalLiqudacion -= $scope.addedConceptos[index].totalAll;
            $scope.addedConceptos[index].totalAll = $scope.addedConceptos[index].total * p.cantidad;
            $scope.totalLiqudacion += $scope.addedConceptos[index].totalAll;

            $scope.modoEditar[index] = false;
        };

        $scope.eliminarProducto = function (index) {
            $scope.totalLiqudacion -= $scope.addedConceptos[index].totalAll;
            $scope.addedConceptos.splice(index, 1);
        };

        $scope.showAdvancedRRHH = function () {
            $state.go('home.createPersonal');
        };

        $scope.showAdvancedConcepto = function () {
            $state.go('home.viewPersona', {personaId: $scope.rrhh._id});
        };

        $scope.clickSubmit = function () {
            if ($scope.rrhh !== undefined) {
                if ($scope.totalLiqudacion !== 0) {
                    if ($scope.fechaDeLiquidacion <= $scope.fechaDeLiquidacion2) {
                        var liquidacion = new Liquidaciones({
                            empleado: $scope.rrhh,
                            enterprise: $scope.rrhh.enterprise,
                            created: new Date(),
                            fechaDeLiquidacion: $scope.fechaDeLiquidacion,
                            fechaDeLiquidacion2: $scope.fechaDeLiquidacion2,
                            total: $scope.totalLiqudacion,
                            remuneraciones: $scope.addedConceptos,
                            observaciones: $scope.observaciones
                        });

                        liquidacion.$save(function (response) {
                            if (response._id) {
                                $state.go('home.liquidaciones', {
                                    empleadoId: $scope.rrhh._id,
                                    displayName: $scope.rrhh.userLogin.displayName,
                                    centroDeCosto: $scope.rrhh.userLogin.centroDeCosto
                                });
                            }
                        }, function (errorResponse) {
                            $scope.error = errorResponse.data.message;
                        });
                    } else {
                        $scope.error = 'La primer fecha no puede ser mayor que la segunda';
                    }
                } else {
                    $scope.error = 'Por favor agregar las liquidaciones';
                }
            } else {
                $scope.error = 'Por favor seleccione personal';
            }
        };

        $scope.clickUpdate = function () {
            if ($scope.rrhh !== undefined) {
                if ($scope.totalLiqudacion !== 0) {
                    if ($scope.fechaDeLiquidacion <= $scope.fechaDeLiquidacion2) {
                        var liquidacion = $scope.liquidacion;
                        liquidacion.empleado = $scope.rrhh;
                        liquidacion.enterprise = $scope.rrhh.enterprise;
                        liquidacion.created = new Date();
                        liquidacion.fechaDeLiquidacion = $scope.fechaDeLiquidacion;
                        liquidacion.fechaDeLiquidacion2 = $scope.fechaDeLiquidacion2;
                        liquidacion.total = $scope.totalLiqudacion;
                        liquidacion.remuneraciones = $scope.addedConceptos;
                        liquidacion.observaciones = $scope.observaciones;

                        $http.put('/api/liquidaciones/' + liquidacion._id, liquidacion)
                            .then(function(response) {
                                $state.go('home.liquidaciones', {
                                    empleadoId: $scope.rrhh._id,
                                    displayName: $scope.rrhh.userLogin.displayName,
                                    centroDeCosto: $scope.rrhh.userLogin.centroDeCosto
                                });
                            }).catch(function (errorResponse) {
                                $scope.error = errorResponse.data.message;
                            });
                    } else {
                        $scope.error = 'La primer fecha no puede ser mayor que la segunda';
                    }
                } else {
                    $scope.error = 'Por favor agregar las liquidaciones';
                }
            } else {
                $scope.error = 'Por favor seleccione personal';
            }
        };
    }
]);
'use strict';

// Liquidaciones controller
angular.module('liquidaciones').controller('LiquidacionListController', ['$scope', '$http', '$stateParams', '$rootScope', '$mdDialog', '$state',
    function ($scope, $http, $stateParams, $rootScope, $mdDialog, $state) {

        $scope.centroDeCosto = $stateParams.centroDeCosto;
        $rootScope.empleadoId = $stateParams.empleadoId;

        $scope.findLiquidaciones = function() {
            var date = JSON.parse(localStorage.getItem("dateEmpleados"));
            if (date && (date.month || date.year)) {
                $http.put('/api/liquidaciones', {
                    empleadoId: $stateParams.empleadoId,
                    month: date.month,
                    year: date.year
                }).success(function (response) {
                    $scope.liquidaciones = response;
                    $scope.name = $stateParams.displayName;
                });
            } else {
                $http.put('/api/liquidaciones', {
                    empleadoId: $stateParams.empleadoId
                }).success(function (response) {
                    $scope.liquidaciones = response;
                    $scope.name = $stateParams.displayName;
                });
            }
        };

        $scope.findLiquidaciones();

        $scope.showAlert = function(ev, obs) {
            $mdDialog.show(
                $mdDialog.alert()
                    .parent(angular.element(document.querySelector('#popupContainer')))
                    .clickOutsideToClose(true)
                    .title(obs)
                    .ariaLabel('Alert Dialog Demo')
                    .targetEvent(ev)
                    .ok('Cerrar')
            );
        };

        $scope.openMenu = function($mdOpenMenu, ev) {
            $mdOpenMenu(ev);
        };

        $scope.removeLiquidacion = function(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('¿Eliminar la liquidacion?')
                .ariaLabel('Lucky day')
                .targetEvent(ev)
                .ok('Aceptar')
                .cancel('Cancelar');
            $mdDialog.show(confirm).then(function () {
                $http.delete('/api/liquidaciones/' + item._id)
                    .then(function(res) {
                        $state.go('home.liquidaciones', {
                            empleadoId: $stateParams.empleadoId,
                            displayName: $stateParams.displayName,
                            centroDeCosto: $stateParams.centroDeCosto
                        });
                    }).catch(function (err) {
                        console.log(err);
                    });
            }, function () {
                console.log("Error in the liquidacion deletion");
            });
        };
    }
]);
'use strict';

//Liquidaciones service used to communicate Liquidaciones REST endpoints
angular.module('liquidaciones').factory('Liquidaciones', ['$resource',
	function($resource) {
		return $resource('api/liquidaciones/:liquidacionId', { liquidacionId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Comprobantes module
angular.module('movimientos').run(['Menus',
	function(Menus) {
		// Add the Comprobantes dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Movimiento',
			state: 'movimiento',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'movimientos', {
			title: 'List movimientos',
			state: 'movimientos.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'movimientos', {
			title: 'Create Movimiento',
			state: 'movimientos.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('movimientos').config(['$stateProvider',
	function($stateProvider) {
		// finanzas state routing
		$stateProvider.
		state('movimientos', {
			abstract: true,
			url: '/movimientos',
			template: '<ui-view/>'
		}).
		state('movimientos.list', {
			url: '',
			templateUrl: 'modules/movimientos/views/list-movimientos.client.view.html'
		}).
		state('movimiento.create', {
			url: '/create',
			templateUrl: 'modules/movimientos/views/create-movimiento.client.view.html'
		}).
		state('movimientos.view', {
			url: '/:movimientoId',
			templateUrl: 'modules/movimientos/views/view-movimiento.client.view.html'
		}).
		state('movimientos.edit', {
			url: '/:movimientoId/edit',
			templateUrl: 'modules/movimientos/views/edit-movimiento.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('movimientos').controller('MovimientosController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Comprobantes', '$mdBottomSheet', 'Enterprises', '$mdDialog',
	function($scope, $rootScope, $stateParams, $location, Authentication, Comprobantes, $mdBottomSheet, Enterprises, $mdDialog) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		// Create new Comprobante
		$scope.create = function() {
			// Create new Comprobante object
			var comprobante = new Comprobantes ({
				name: this.name,
				letra: this.letra,
				puntoDeVenta: this.puntoDeVenta,
				modoFacturacion: this.modo,
				movimientoStock: this.movimientoStock,
				movimientoCC: this.movimientoCC,
				movimientoOperacionInversa: this.movimientoOperacionInversa,
				funcionalidadSituacion: this.funcionalidadSituacion,
				autoAprobar: this.autoAprobar,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
			});

			// Redirect after save
			comprobante.$save(function(response) {
				if(response._id) {
					// agregar sub al array

					comprobante._id = response._id;
					$rootScope.comprobantes.unshift(comprobante);

				}

				// Clear form fields
				$scope.name = '';
				$scope.letra = '';
				$scope.puntoDeVenta = '';
				$scope.modoFacturacion = '';

				$mdBottomSheet.hide();
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un puesto 
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar tipo de Comprobante')
	          .content('¿Está seguro que desea eliminar este tipo de Comprobante?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Comprobante
		$scope.remove = function( comprobante ) {
			if ( comprobante ) { comprobante.$remove();

				for (var i in $scope.comprobantes ) {
					if ($scope.comprobantes [i] === comprobante ) {
						$scope.comprobantes.splice(i, 1);
					}
				}
			} else {
				$scope.comprobante.$remove(function() {
					$location.path('comprobantes');
				});
			}
		};

		// Update existing Comprobante
		$scope.update = function() {
			var comprobante = $scope.comprobante ;

			if (this.enterprise !== undefined) { comprobante.enterprise = this.enterprise._id } else { comprobante.enterprise = comprobante.enterprise._id };

			comprobante.$update(function() {
				$location.path('comprobantes/view/' + comprobante._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Comprobantes
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.comprobantes = Comprobantes.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		// $scope.findEnterprises = function() {
		// 	if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });}			
		// };

		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find a list of Modos de facturacion
		$scope.findModosF = function() {
			if ($scope.SEARCH !== undefined) { $scope.modosF = ['Comprobante interno', 'Talonario fiscal manual o pre-impreso', 'Factura electronica']; } 
		};

		// Find existing Comprobante
		$scope.findOne = function() {
			console.log($stateParams.comprobanteId, 'comprobante id');
			$scope.comprobante = Comprobantes.get({ 
				comprobanteId: $stateParams.comprobanteId
			});
			console.log($scope.comprobante, 'comprobante')
		};
	}
]);
'use strict';

// Finanzas controller
angular.module('movimientos').controller('MovimientosCreateController', ['user', 'movimiento', 'enterprises', 'modosFacturacion', '$state', 'movimientos',
	function(user, movimiento, enterprises, modosFacturacion, $state, movimientos) {

		// asignacion de modelos
		this.user = user;
		this.movimiento = movimiento;
		this.enterprises = enterprises;
		this.modosFacturacion = modosFacturacion;

		// asignacion de funciones
		this.create = create;

		// definicion de funciones
		// Create new Comprobante
		function create () {
			// Create new Comprobante object
			var movimiento = new movimientos ({
				name: this.name,
				letra: this.letra,
				puntoDeVenta: this.puntoDeVenta,
				modoFacturacion: this.modo,
				movimientoStock: this.movimientoStock,
				movimientoCC: this.movimientoCC,
				movimientoOperacionInversa: this.movimientoOperacionInversa,
				funcionalidadSituacion: this.funcionalidadSituacion,
				autoAprobar: this.autoAprobar,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id,
			});

			// Redirect after save
			movimiento.$save(function(response) {
				if(response._id) {
					// agregar sub al array
					$state.go('home.movimientos');

				}
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};

	}
]);

'use strict';

// Comprobantes controller
angular.module('movimientos').controller('MovimientoEditController', ['user', 'movimiento', 'enterprises', 'modosFacturacion', '$location',
	function(user, movimiento, enterprises, modosFacturacion, $location) {

		// asignacion de modelos
		this.user = user;
		this.movimiento = movimiento;
		this.enterprises = enterprises;
		this.modosFacturacion = modosFacturacion;

		// asignacion de funciones
		this.update = update;

		// definicion de funciones
		// Update existing Comprobante
		function update () {
			// console.log(this.comprobante.enterprise, 'ent');
			// console.log(this.comprobante, 'comp');
			var movimiento = this.movimiento ;

			if (this.enterprise !== undefined) { movimiento.enterprise = this.enterprise._id } else { movimiento.enterprise = movimiento.enterprise._id };
			if (this.modoFacturacion !== undefined) { movimiento.modoFacturacion = this.modoFacturacion } else { movimiento.modoFacturacion = movimiento.modoFacturacion };

			movimiento.$update(function() {
				$location.path('movimientos/view/' + movimiento._id);
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('movimientos').controller('ListMovimientosController', ['$location', 'user', 'movimientos', 'enterprises',
	function($location, user, movimientos, enterprises) {

		// asignacion de modelos
		this.user = user;
		this.movimientos = movimientos;
		this.enterprises = enterprises;
		// asignacion de funciones
		this.remove = remove;

		// definicion de funciones

		// Remove existing Comprobante
		function remove ( movimiento ) {
			if ( movimiento ) { movimiento.$remove();
			} else {
				this.movimiento.$remove(function() {
					$location.path('movimientos');
				});
			}
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('movimientos').controller('MovimientosViewController', ['user', 'movimiento',
	function(user, movimiento) {

		// asignacion de modelos
		this.user = user;
		this.movimiento = movimiento;

		// asignacion de funciones

		// definicion de funciones


	}
]);

'use strict';

//Comprobantes service used to communicate Comprobantes REST endpoints
angular.module('movimientos').factory('Movimientos', ['$resource',
	function($resource) {
		return $resource('api/movimientos/:movimientoId', { movimientoId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

(function () {
  'use strict';

  angular
    .module('pagos')
    .config(routeConfig);

  routeConfig.$inject = ['$stateProvider'];

  function routeConfig($stateProvider) {
    $stateProvider
      .state('pagos', {
        abstract: true,
        url: '/pagos',
        template: '<ui-view/>'
      })
      .state('pagos.list', {
        url: '',
        templateUrl: 'modules/pagos/client/views/list-pagos.client.view.html',
        controller: 'PagosListController',
        controllerAs: 'vm',
        data: {
          pageTitle: 'Pagos List'
        }
      })
      .state('pagos.create', {
        url: '/create',
        templateUrl: 'modules/pagos/client/views/form-pago.client.view.html',
        controller: 'PagosController',
        controllerAs: 'vm',
        resolve: {
          pagoResolve: newPago
        },
        data: {
          roles: ['user', 'admin'],
          pageTitle: 'Pagos Create'
        }
      })
      .state('pagos.edit', {
        url: '/:pagoId/edit',
        templateUrl: 'modules/pagos/client/views/form-pago.client.view.html',
        controller: 'PagosController',
        controllerAs: 'vm',
        resolve: {
          pagoResolve: getPago
        },
        data: {
          roles: ['user', 'admin'],
          pageTitle: 'Edit Pago {{ pagoResolve.name }}'
        }
      })
      .state('pagos.view', {
        url: '/:pagoId',
        templateUrl: 'modules/pagos/client/views/view-pago.client.view.html',
        controller: 'PagosController',
        controllerAs: 'vm',
        resolve: {
          pagoResolve: getPago
        },
        data: {
          pageTitle: 'Pago {{ pagoResolve.name }}'
        }
      });
  }

  getPago.$inject = ['$stateParams', 'PagosService'];

  function getPago($stateParams, PagosService) {
    return PagosService.get({
      pagoId: $stateParams.pagoId
    }).$promise;
  }

  newPago.$inject = ['PagosService'];

  function newPago(PagosService) {
    return new PagosService();
  }
}());

(function () {
  'use strict';

  angular
    .module('pagos')
    .controller('PagosListController', PagosListController);

  PagosListController.$inject = ['PagosService'];

  function PagosListController(PagosService) {
    var vm = this;

    vm.pagos = PagosService.query();
  }
}());

(function () {
  'use strict';

  // Pagos controller
  angular
    .module('pagos')
    .controller('PagosController', PagosController);

  PagosController.$inject = ['$scope', '$state', '$window', 'Authentication', 'pagoResolve'];

  function PagosController ($scope, $state, $window, Authentication, pago) {
    var vm = this;

    vm.authentication = Authentication;
    vm.pago = pago;
    vm.error = null;
    vm.form = {};
    vm.remove = remove;
    vm.save = save;

    // Remove existing Pago
    function remove() {
      if ($window.confirm('Are you sure you want to delete?')) {
        vm.pago.$remove($state.go('pagos.list'));
      }
    }

    // Save Pago
    function save(isValid) {
      if (!isValid) {
        $scope.$broadcast('show-errors-check-validity', 'vm.form.pagoForm');
        return false;
      }

      // TODO: move create/update logic to service
      if (vm.pago._id) {
        vm.pago.$update(successCallback, errorCallback);
      } else {
        vm.pago.$save(successCallback, errorCallback);
      }

      function successCallback(res) {
        $state.go('pagos.view', {
          pagoId: res._id
        });
      }

      function errorCallback(res) {
        vm.error = res.data.message;
      }
    }
  }
}());

'use strict';

// Comprobantes controller
angular.module('pagos').controller('PagosViewController', ['$stateParams', '$state', 'user', 'Authentication', '$mdDialog', '$scope', 'pago', 'servicios', 'Cajas', 'CostosindirectosService', 'Empleados', 'Impuestos', '$rootScope',"ServiceNavigation",
    function ($stateParams, $state, user, authentication, $mdDialog, $scope, pago, servicios, Cajas, CostosindirectosService, Empleados, Impuestos, $rootScope,ServiceNavigation) {

        // asignacion de modelos
        var global = this;
        this.user = user;
        this.pago = pago;
        this.servicios = servicios;
        this.waiting = false;
        this.movimientos = [];
        this.movimientosList = [];
        this.pagoType = null;
        this.openMenu = openMenu;
        this.showConfirm = showConfirm;
        var originatorEv;
        // asignacion de funciones
     
        this.findMovimientos = findMovimientos;
        this.showAlert = showAlert;
        this.showDialogPago = showDialogPago;
        this.findMovimientos(pago);

        if ($stateParams.servicosId !== '') {
            this.pagoType = 'costosIndirectos';
        } else if ($stateParams.impuestosId !== '') {
            this.pagoType = 'impuestos';
        } else if ($stateParams.empleadoId !== '') {
            this.pagoType = 'personal';
            this.displayName = $stateParams.displayName;
            this.centroDeCosto = $stateParams.centroDeCosto;
            Empleados.get({empleadoId: $stateParams.empleadoId}, function (response) {
                $scope.empleado = response;
            });
        }

        
        this.serviceDetailList = pago;
        //alert(localStorage.getItem('serviceName'))
        this.serviceName = localStorage.getItem('serviceName');

        $rootScope.$broadcast('hide nav',true);

        function openMenu($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        }

        // definicion de funciones

        function findMovimientos(pago) {
            this.waiting = true;
            this.movimientosList = pago;
            this.waiting = false;
        }

        $scope.callAddPago = function ($event, item) {
            $rootScope.$emit("callAddPago", {event: $event, item: item});
        };

        function showAlert(ev, obs) {
            $mdDialog.show(
                $mdDialog.alert()
                    .parent(angular.element(document.querySelector('#popupContainer')))
                    .clickOutsideToClose(true)
                    .title(obs)
                    .ariaLabel('Alert Dialog Demo')
                    .targetEvent(ev)
                    .ok('Cerrar')
            );
        }

        function showConfirm(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('¿Eliminar la pago?')
                .ariaLabel('Lucky day')
                .targetEvent(ev)
                .ok('Aceptar')
                .cancel('Cancelar');
            $mdDialog.show(confirm).then(function () {
                deletePago(item);
            }, function () {
                //cancelo
            });
        }

        function deletePago(item) {
            if (item) {
                item.deleted = true;
                item.$update(function () {               // code for update pago
                    var total = 0;
                    var cheques = 0;
                    var efectivo = 0;
                    Cajas.get({cajaId: item.cajaD}, function (caja) {
                        caja.total = caja.total + item.montoE + item.montoC;
                        
                        caja.cheques = caja.cheques + item.montoC;
                        caja.efectivo = caja.efectivo + item.montoE;

                        caja.enterprise = caja.enterprise._id;
                        item.cajaD = caja;
                        caja.$update(function () {
                            if ($stateParams.impuestosId !== '') {
                                Impuestos.get({impuestoId: item.impuestos._id}, function (impuesto) {
                                    impuesto.total = impuesto.total - (item.montoE + item.montoC);
                                    impuesto.$update(function () {
                                        $state.go('home.viewImpuesto', {centroDeCosto: item.impuestos.centroDeCosto});
                                    }, function (errorResponse) {
                                        console.log('costo error');
                                    });
                                });
                            } else if ($stateParams.empleadoId !== '') {
                                console.log("liquid");
                            } else {
                                servicios.pagoAcumulados = servicios.pagoAcumulados - (item.montoC + item.montoE);
                                servicios.$update(function () {           //  minus pago amount from servicios
                                    CostosindirectosService.get({costosindirectoId: servicios.costosindirectos}, function (costo) {
                                        total = costo.total - (item.montoC + item.montoE);
                                        costo.total = total;
                                        costo.enterprise = costo.enterprise.id;
                                        costo.$update(function () {
                                            $state.go('home.viewPago', {servicosId: $stateParams.servicosId});
                                        }, function (errorResponse) {
                                            console.log(errorResponse);
                                        });
                                    });
                                }, function (errorResponse) {
                                    console.log('servicios error');
                                });
                            }
                        }, function (errorResponse) {
                            console.log('caja error');
                        });

                    });
                }, function (errorResponse) {
                    console.log('pago error');
                });
            }
        }

        function showDialogPago($event, item) {
            $mdDialog.show({
                targetEvent: $event,
                templateUrl: 'modules/pagos/views/edit-pago.client.view.html',
                locals: {
                    item: item,
                    user: global.user
                },
                controller: DialogController
            })
                .then(function (answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                    // $scope.find();
                }, function () {
                    //$scope.alert = 'You cancelled the dialog.';
                });
        } //end showDialog
        // fin actualizaciones en tiempo real.
        function DialogController($scope, $mdDialog, item, user, PagosService, $filter, ServiciosService, Cajas, CostosindirectosService) {
            $scope.apagarBoton = false; //desahbilita boton de crear para evitar que se presione dos veces
            $scope.$watch('ServiciosService', function () {
                $scope.findPago();
            });

            $scope.$watch('Cajas', function () {
                $scope.findCajas();
            });


            $scope.mostrar = true;

            $scope.item = item;
            $scope.caja = item.cajaD;
            //$scope.
            $scope.costCenterAgregados = [];

            $scope.montoE = item.montoE;
            $scope.montoC = item.montoC;
            $scope.observaciones = item.observaciones;
            $scope.pagoDate = new Date(item.pagoDate);

            $scope.errorCaja = undefined;

            $scope.findCajas = function () {
                Cajas.query({e: user.enterprise._id}, function (data) {
                    $scope.cajas = $filter('filter')(data, function (item) {
                        return (item._id !== $scope.item._id);
                    })
                });
            };

            $scope.closeDialog = function () {
                $mdDialog.hide();
            };

            $scope.serviciosIDArray = [];
            //devuelve todas la Servicios

            $scope.findPago = function () {
                $scope.pagos = PagosService.query({e: user.enterprise._id});
            };


            $scope.editPago = function ($event, values) {
                if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                    if (($scope.caja !== undefined) && ($scope.caja !== null)) {

                        $scope.apagarBoton = true; //desahbilita boton de crear para evitar que se presione dos veces
                        var diffMontoE = $scope.montoE - item.montoE;
                        var diffMontoC = $scope.montoC - item.montoC;
                        item.montoE = (diffMontoE != 0) ? item.montoE + diffMontoE : item.montoE;
                        item.montoC = (diffMontoC != 0) ? item.montoC + diffMontoC : item.montoC;
                        item.saldo = (diffMontoE != 0) ? item.saldo - diffMontoE : item.saldo;
                        item.saldo = (diffMontoC != 0) ? item.saldo - diffMontoC : item.saldo;
                        item.pagoDate = $scope.pagoDate;
                        item.observaciones = $scope.observaciones;

                        item.$update(function () {
                            Cajas.get({cajaId: item.cajaD}, function (caja) {
                                caja.total = (diffMontoE != 0) ? caja.total - diffMontoE : caja.total;
                                caja.total = (diffMontoC != 0) ? caja.total - diffMontoC : caja.total;
                                caja.cheques = (diffMontoC != 0) ? caja.cheques - diffMontoC : caja.cheques;
                                caja.efectivo = (diffMontoE != 0) ? caja.efectivo - diffMontoE : caja.efectivo;
                                caja.enterprise = caja.enterprise.id;
                                item.cajaD = caja;
                                caja.$update(function () {
                                    console.log('caja updated');
                                    if ($stateParams.impuestosId !== '') {
                                        Impuestos.get({impuestoId: item.impuestos._id}, function (impuesto) {
                                            impuesto.total = impuesto.total + (diffMontoE || 0) + (diffMontoC || 0);
                                            impuesto.$update(function () {
                                                $state.go('home.viewImpuesto', {centroDeCosto: item.impuestos.centroDeCosto});
                                            }, function (errorResponse) {
                                                console.log('costo error');
                                            });
                                        });
                                    } else {
                                        servicios.pagoAcumulados = (diffMontoE != 0) ? servicios.pagoAcumulados + diffMontoE : servicios.pagoAcumulados;
                                        servicios.pagoAcumulados = (diffMontoC != 0) ? servicios.pagoAcumulados + diffMontoC : servicios.pagoAcumulados;
                                        servicios.$update(function () {           //  minus pago amount from servicios
                                            console.log('servicios updated');
                                            CostosindirectosService.get({costosindirectoId: servicios.costosindirectos}, function (costo) {
                                                costo.total = (diffMontoE != 0) ? costo.total + diffMontoE : costo.total;
                                                costo.total = (diffMontoC != 0) ? costo.total + diffMontoC : costo.total;
                                                costo.enterprise = costo.enterprise.id;
                                                costo.$update(function () {
                                                    console.log('costo updated');
                                                    $state.go('home.viewPago', {servicosId: $stateParams.servicosId});
                                                }, function (errorResponse) {
                                                    console.log(errorResponse);
                                                });
                                            });
                                        }, function (errorResponse) {
                                            console.log('servicios error');
                                        });
                                    }
                                }, function (errorResponse) {
                                    console.log('caja error');
                                });

                            });

                        }, function (error) {
                            console.log(error);
                        });
                        $mdDialog.hide();
                    }
                    else {
                        $scope.errorCaja = 'Se debe seleccionar la caja origin'
                    }
                }
            };          //agrega puestos en el edit de caja


            //funcion que rendondea a 2 decimales
            function roundToTwo(num) {
                return +(Math.round(num + "e+2") + "e-2");
            }

            $scope.pagosAcumulados = item.pagoAcumulados;
            $scope.addPagoAcumulados = function (value) {
                $scope.errorCaja = false;
                if ($scope.caja) {
                    if ($scope.caja.efectivo + item.montoE >= value) {
                        $scope.montoE = value;
                        $scope.pagosAcumulados = item.pagoAcumulados + $scope.montoC + $scope.montoE;
                    } else {
                        $scope.errorCaja = 'amount is not available in selected caja';
                    }
                } else {
                    $scope.errorCaja = 'Se debe seleccionar la caja origin';
                }
            };
            $scope.addCheque = function (value) {
                $scope.errorCaja = false;
                if ($scope.caja) {
                    if ($scope.caja.cheques >= value) {
                        $scope.montoC = value;
                        $scope.pagosAcumulados = item.pagoAcumulados + $scope.montoC + $scope.montoE;

                    } else {
                        $scope.errorCaja = 'amount is not available in selected caja';
                    }
                } else {
                    $scope.errorCaja = 'Se debe seleccionar la caja origin';
                }
            }

        }
    }
]);

// Pagos service used to communicate Pagos REST endpoints
(function () {
  'use strict';

  angular
    .module('pagos')
    .factory('PagosService', PagosService);

  PagosService.$inject = ['$resource'];

  function PagosService($resource) {
    return $resource('api/pagos/:pagoId', {
      pagoId: '@_id', e: '@enterprise'
    }, {
      update: {
        method: 'PUT'
      }
    });
  }
}());
angular.module('pagos').factory('LastMonthTotal', ['$http',
  function($http) {
    return {
      costosLastMonthTotal: function(controId) {
        console.log("costor id "+controId);
        return $http({
          method: "get",
          url: "api/pagos/getCostoLastMonthTotal",
          params:{
            controId:controId
          }
        });
      },
      serviciosLastMonthTotal: function() {
        return $http({
          method: "get",
          url: "api/pagos/getServiciosLastMonthTotal",
        });
      },
    }
  }
]).factory('ServiceNavigation', ['$location',
  function($location) {
    var inneNavList = [];
    return {
      addNav : function(navObj) { 
        if(inneNavList.length > 0) {      
          var elempos = inneNavList.map(function(x){return x.name}).indexOf(navObj.name);
          if(elempos === -1)
            inneNavList.push(navObj);
        } else {
          inneNavList.push(navObj);
        }         
          
        window.localStorage.setItem("subNav",JSON.stringify(inneNavList));              
      },
      getNav : function() {        
        return (inneNavList.length > 0 ) ? inneNavList : JSON.parse(window.localStorage.getItem("subNav"));
      },
      navInit: function(val){      
        inneNavList.splice(0);   
        window.localStorage.removeItem("subNav");
      },
      back: function() {        
        if(window.localStorage.getItem("subNav")){
          inneNavList = JSON.parse(window.localStorage.getItem("subNav"))
          window.localStorage.removeItem("subNav");
        }      
        inneNavList.splice(inneNavList.length - 1, 1);
        window.localStorage.setItem("subNav",JSON.stringify(inneNavList)); 
      }
    }
  }
]);
'use strict';

// Configuring the Pedidos module
angular.module('pedidos').run(['Menus',
	function(Menus) {
		// Add the Pedidos dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Pedidos',
			state: 'pedidos',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'pedidos', {
			title: 'List Pedidos',
			state: 'pedidos.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'pedidos', {
			title: 'Create Pedido',
			state: 'pedidos.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('pedidos').config(['$stateProvider',
	function($stateProvider) {
		// Pedidos state routing
		$stateProvider.
		state('pedidos', {
			abstract: true,
			url: '/pedidos',
			template: '<ui-view/>'
		}).
		state('pedidos.list', {
			url: '',
			templateUrl: 'modules/pedidos/views/list-pedidos.client.view.html'
		}).
		state('pedidos.create', {
			url: '/create',
			templateUrl: 'modules/pedidos/views/create-pedido.client.view.html'
		}).
		state('pedidos.view', {
			url: '/:pedidoId',
			templateUrl: 'modules/pedidos/views/view-pedido.client.view.html'
		}).
		state('pedidos.edit', {
			url: '/:pedidoId/edit',
			templateUrl: 'modules/pedidos/views/edit-pedido.client.view.html'
		});
	}
]);
angular.module('pedidos').controller('CreatePedidosController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Pedidos', 'Enterprises', '$mdBottomSheet', '$state', '$mdDialog', 'pedidos', 'tipoOrden', 'tipoPedido', 'Comprobantes', 'Clients', 'Providers', 'Condicionventas', 'Products', 'Modal', 'Contacts', 'Taxconditions', 'Categories', 'Subs', 'Metrics', 'Cajas', '$filter', '$http',
    function($scope, $rootScope, $stateParams, $location, Authentication, Pedidos, Enterprises, $mdBottomSheet, $state, $mdDialog, pedidos, tipoOrden, tipoPedido, Comprobantes, Clients, Providers, Condicionventas, Products, Modal, Contacts, Taxconditions, Categories, Subs, Metrics, Cajas, $filter, $http) {
        $scope.authentication = Authentication;
        $scope.impuesto = false;

        $scope.$watch('authentication', function() {
            $scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
            $scope.findComprobantes();
            $scope.findProveedores();
            $scope.findClientes();
            $scope.findProductos();
            $scope.findCondicionVenta();
            corroboraSiVieneDeStock();
            checkCliente();
        });

        $rootScope.$watch('nuevoProveedor', function() {
            // console.log('watch de nuevo proveedor:', $rootScope.nuevoProveedor);
            if ($rootScope.nuevoProveedor !== undefined) {
                $scope.mostrar = true;
                $scope.proveedor = $rootScope.nuevoProveedor;
                $scope.selectedItemChange($scope.proveedor);
                $rootScope.nuevoProveedor = undefined;
            } else {
                $scope.mostrar = false;
            }
        });

        $rootScope.$watch('nuevoCliente', function() {
            // console.log('watch de nuevo cliente: ', $rootScope.nuevoCliente);
            if ($rootScope.nuevoCliente !== undefined) {
                $scope.mostrar = true;
                $scope.cliente = $rootScope.nuevoCliente;
                $scope.selectedItemChangeClient($scope.cliente);
            } else {
                $scope.mostrar = false;
            }

            $rootScope.nuevoCliente = undefined;
        });

        $rootScope.$watch('nuevaMateriaPrima', function() {
            // console.log('watch de nueva materia prima: ', $rootScope.nuevaMateriaPrima);
            if ($rootScope.nuevaMateriaPrima !== undefined) {
                $scope.mostrarMateria = true;
                $http({
                    method: 'GET',
                    url: ('/api/products/' + $rootScope.nuevaMateriaPrima._id),
                    params: {}
                })
                    .then(function(response) {
                        console.log(response.data);
                        $scope.producto = response.data;
                    }, function(response) {
                        console.log('error');
                    });
                // $scope.producto = $rootScope.nuevaMateriaPrima ;
                $scope.selectedItemChangeProduct($scope.producto);
            } else {
                $scope.mostrarMateria = false;
            }
        });

        $rootScope.$watch('nuevoProducto', function() {
            if ($rootScope.nuevoProducto !== undefined) {
                $scope.producto = $rootScope.nuevoProducto;
                $scope.mostrarProd = true;
                $http({
                    method: 'GET',
                    url: ('/api/products/' + $rootScope.nuevoProducto._id),
                    params: {}
                })
                    .then(function(response) {
                        console.log(response.data);
                        $scope.producto = response.data;
                    }, function(response) {
                        console.log('error');
                    });
                $scope.selectedItemChangeProduct($scope.producto);
            } else {
                $scope.mostrarProd = false;
            }
        });

        $rootScope.pedidos = pedidos; // asigno los pedidos que ya busque en el resolve de las rutas
        $scope.tipoOrden = tipoOrden;
        $scope.tipoPedido = tipoPedido;

        var url = $location.$$url;

        //variable para filtrar productos por proveedor
        $scope.idProveedor = 0;

        $scope.isFocused = false;

        var created = new Date();
        $scope.created = new Date(created.setTime(created.getTime() + (3 * 60 * 60 * 1000)));

        $scope.buscaP = true;

        $scope.myDate = new Date();

        $scope.tipoComprobante = 'Pedido';

        $scope.productoPedido = { cantidad: undefined, descuento: undefined, observaciones: '' };

        $scope.deshabilitarProveedor = false;

        $scope.productoEditado = [];
        $scope.todosPedidos = [];

        //variable que controla el select de productos/proveedores, etc
        $scope.minLengthProv = 0;

        //controla si el producto esta siendo ingresado para ver si lo borra o no al cambiar el proveedor
        $scope.tipeando = false;

        $scope.verAprobadas = 0;
        $scope.verRechazadas = 0;

        $scope.subtotal = 0;
        $scope.descuentoPorcentaje = 0;
        $scope.descuentoValor = 0;
        $scope.neto = 0;
        $scope.tax1 = 0;
        $scope.tax2 = 0;
        $scope.tax3 = 0;
        $scope.imp1 = 0;
        $scope.imp2 = 0;
        $scope.imp3 = 0;
        $scope.imp4 = 0;
        $scope.totalImp = 0;
        $scope.totalTax = 0;

        $scope.selectedMode = 'md-scale';
        $scope.selectedDirection = 'left';

        $scope.rutaVolver = function() {
            $state.go('home.pedidos', { "tipo": $scope.tipoPedido });
        };

        $scope.initAutocomplete = function() {
            $scope.findProductos();
        }; // end initAutocomplete

        function checkCliente() {
            if ($scope.authentication.user.roles[0] == 'cliente') {
                $http({
                    method: 'GET',
                    url: ('/api/clients/'),
                    params: {}
                })
                    .then(function(response) {
                        var clientes = response.data;
                        $scope.clienteUsuario = $filter('filter')(clientes, function(item) {
                            return item.userLogin === $scope.authentication.user._id;
                        });
                        calculoDescuentoCliente();
                    }, function(response) {
                        console.log('error');
                    });
            }
        }

        function calculoDescuentoCliente() {
            $scope.descuentoPorcentaje = $scope.clienteUsuario[0].discountRate;
            if ($scope.subtotal == 0) {
                return 0;
            } else {
                $scope.descuentoValor = $scope.subtotal * $scope.descuentoPorcentaje / 100;
                $scope.neto = $scope.subtotal - $scope.descuentoValor;
                $scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3;
            }
        }

        function corroboraSiVieneDeStock() {
            if ($rootScope.productosAPedir !== undefined) {
                $rootScope.productosAgregados = $rootScope.productosAPedir;
                var total = 0;
                for (var i = $rootScope.productosAgregados.length - 1; i >= 0; i--) {
                    var resultado = calcularSubtotal($rootScope.productosAgregados[i], 'compra');
                    total = total + resultado;
                }
                $scope.total = parseFloat(total) + $scope.totalTax;
                $scope.selectedItemChange($rootScope.providerStock);
            } else {
                $rootScope.productosAgregados = [];
                $scope.total = parseFloat(0);
            }
        } //end corroboraVieneStock

        //calculo de numero de comprobante
        $scope.actualizarN = function() {
            $scope.numero = parseInt($scope.tipoComprobante.ultimoNumero) + 1;
            var comprobante = $scope.tipoComprobante.name;
            if (comprobante == "Factura A" || comprobante == "Factura B" || comprobante == "Factura C") {
                $scope.impuesto = true;
            } else {
                $scope.impuesto = false;
            }
        }; //end actualizarN

        //Trae el % de descuento del proveedor seleccionado, y vuelve a calcular valores si el % cambio

        $scope.descProveedor = function() {
            if (($scope.proveedor !== null) && ($scope.proveedor !== undefined)) {
                $scope.idProveedor = $scope.proveedor._id;
                $scope.errorProv = undefined;
            } else {
                $scope.idProveedor = 0;
            }
            if ((this.producto !== undefined) && (this.producto !== null) && ($scope.tipeando === false)) {
                this.producto = undefined;
                $scope.textToSearch2 = undefined;
            }
        }; //end descProveedor

        //Trae el % de descuento para el cliente seleccionado, y vuelve a calcular valores si el % cambio
        $scope.descCliente = function() {
            $scope.errorCliente = undefined;
            $scope.mostrarForm = true;
            $scope.mostrarProductosC = false;
            $scope.mostrarProductosP = false;
            $scope.mostrarProductosC = !($scope.cliente.productosAsociados.length == 0);
            $scope.descuentoPorcentaje = $scope.cliente.discountRate;
            if ($scope.subtotal == 0) {
                return 0;
            } else {
                $scope.descuentoValor = $scope.subtotal * $scope.descuentoPorcentaje / 100;
                $scope.neto = $scope.subtotal - $scope.descuentoValor;
                $scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3;
                $scope.totalTax = $scope.tax1 + $scope.tax2 + $scope.tax3;
            }
        }; //end descCliente

        //agrega producto seleccionado de la lista de productos frecuentes
        $scope.agregar = function(item) {
            $scope.producto = item;
            item = undefined;
        }; //end agregar

        //autocomplete para seleccionar productos p/ cliente
        $scope.searchTextChangeProduct = function(text) {
            var lowercaseQuery = angular.lowercase(text);
            $scope.productosNombre = $filter('filter')($scope.products, { name: text });
        }; //end search

        //autocomplete para seleccionar productos p/ proveedor
        $scope.searchTextChangeProduct2 = function(text) {
            $scope.tipeando = true;
            var lowercaseQuery = angular.lowercase(text);
            if ($scope.idProveedor === 0) {
                $scope.filtrados = $filter('filter')($scope.products, function(item) {
                    return (item.esMateriaPrima === true || item.esInsumo === true);
                })
            } else {
                if ($scope.products !== undefined && $scope.products !== null) {
                    $scope.filtrados = $filter('filter')($scope.products, function(item) {
                        return (item.esMateriaPrima === true || item.esInsumo === true) && (item.provider._id === $scope.idProveedor);
                    })
                } else {
                    console.log('[+] no hay lista de productos para filtrar!!!', $scope.products);
                }

            }
            return $scope.filtroProductos = $filter('filter')($scope.filtrados, { name: text });
        }; //end search

        //selecciona prodcuto elegido
        $scope.selectedItemChangeProduct = function(item) {
            $scope.errorProd = undefined;
            $scope.mensajeP = undefined;
            $scope.producto = item;
            if ($scope.producto !== null) {
                document.getElementById('cantProd').focus();
            }
            if ($scope.tipoPedido === 'compra') {
                if ((this.proveedor === null) || (this.proveedor === undefined)) {
                    if (($scope.producto !== null) && ($scope.producto !== undefined)) {
                        this.proveedor = $scope.producto.provider;
                        $scope.proveedor = $scope.producto.provider;
                    }
                }
            }
        }; //end selected item

        function n_with_zeroes(number, length) {
            var my_string = '' + number;
            while (my_string.length < length) {
                my_string = '0' + my_string;
            }
            return my_string;
        } //end n_with_zeroes

        //si presiona enter
        $scope.sendProduct = function($event, productoPedido, producto) {
            if (($event.keyCode === 13) || ($event.type === 'click')) {
                $event.preventDefault();
                $scope.isFocused = false;
                if ((producto === null) || (producto === undefined)) {
                    $scope.mensajeP = 'No seleccionaste un producto valido';
                } else {
                    if ($scope.tipoPedido === 'venta') {
                        if ((productoPedido.cantidad === null) || (productoPedido.cantidad === undefined) || (producto.unitsInStock <= 0)) {
                            if (producto.unitsInStock <= 0) {
                                $scope.mensajeP = 'Â¡Atencion! El stock disponible es ' + producto.unitsInStock;
                                $scope.agregarProducto(producto, productoPedido);
                            } else {
                                if ((productoPedido.cantidad === null) || (productoPedido.cantidad === undefined)) {
                                    $scope.mensajeP = 'No seleccionaste una cantidad para el producto';
                                }
                            }
                        } else {
                            $scope.controlStock(producto);
                            if ($scope.stockD == true) {
                                $scope.agregarProducto(producto, productoPedido);
                            } else {
                                $scope.stockD = false;
                                $scope.mensajeP = undefined;
                                $scope.producto = producto;
                                $scope.agregarProducto(producto, productoPedido);
                            }
                        }
                    } else {
                        $scope.mensajeP = undefined;
                        if (productoPedido === undefined) {
                            productoPedido = { cantidad: 0 }
                        }
                        if ((productoPedido.cantidad === null) || (productoPedido.cantidad === undefined) || (productoPedido.cantidad === 0)) {
                            $scope.mensajeP = 'No seleccionaste una cantidad para el producto';
                        } else {
                            $scope.mensajeP = undefined;
                            $scope.agregarProducto(producto, productoPedido);
                        }
                    }
                }
            }
        }; //end sendProduct

        $scope.controlStock = function(p) {
            $scope.mensajeP = undefined;
            if ($scope.productoPedido.cantidad > p.unitsInStock) {
                $scope.stockD = true;
                $scope.productoPedido.cantidad = p.unitsInStock;
            } else {
                $scope.stockD = false;
            }
        }; //end controlStock

        //Agrega a un arreglo los productos que va seleccionando
        $scope.agregarProducto = function(producto, productoPedido) {
            $scope.deshabilitarProveedor = true;
            $scope.deshabilitarCliente = true;
            $scope.clicked = false;
            $scope.errorProd = undefined;
            var tipoPedido = this.tipoPedido;
            var p = {
                product: {},
                cantidad: undefined,
                descuento: undefined,
                total: undefined,
                subtotal: undefined,
                observaciones: undefined
            };
            if (producto != undefined) {
                if (producto.total == undefined) {
                    producto.total = 0;
                }
                p.product = producto;
                p.cantidad = productoPedido.cantidad;
                if (productoPedido.descuento == undefined) {
                    p.descuento = 0;
                } else {
                    p.descuento = productoPedido.descuento;
                }
                if (productoPedido.observaciones == undefined) {
                    p.observaciones = '';
                } else {
                    p.observaciones = productoPedido.observaciones;
                }
                p.total = 0;
                p.subtotal = 0;
                var resultado = calcularSubtotal(p, tipoPedido);
                p.total = p.total + resultado;
                $rootScope.productosAgregados.push(p);
                this.producto = undefined;
                $scope.producto = undefined;
                productoPedido = undefined;
                p = undefined;
                $scope.productoPedido = { cantidad: undefined, descuento: undefined, observaciones: '' };
                this.productoCompra.cantidad = undefined;
                this.productoCompra.descuento = undefined;
                this.productoCompra.observaciones = undefined;
                $scope.selectedProduct = [];
                $scope.selectedItem = null;
                $scope.textToSearch2 = '';
                $scope.stockD = false;
                document.getElementById("buscaP").focus();
                document.getElementById("buscaP").value = '';
            } else {
                return 0;
            }
        }; //end agregar Producto

        //autocomplete
        $scope.selectedProduct = [];
        $scope.selectedItem = null;
        $scope.textToSearch2 = null;

        var calcularSubtotal = function(p, pedido) {
            if (pedido == 'compra') {
                if ($scope.provider !== undefined) {
                    var prov = $scope.provider;
                } else {
                    var prov = $rootScope.nuevoProveedor;
                }
            }
            var total = 0;
            var descuentoPorcentaje = p.descuento;
            if (pedido == 'compra') {
                var precio = parseFloat(p.product.costPerUnit);
            } else {
                var precio = parseFloat(p.product.unitPrice);
            }
            var cant = parseFloat(p.cantidad);
            var subtotal = parseFloat(precio * cant); //subtotal de producto sin descuentos
            var descuentoValor = subtotal * descuentoPorcentaje / 100; //valor del descuento del producto
            p.subtotal = subtotal;
            total = subtotal - descuentoValor; //total producto con descuento incluido
            $scope.subtotal = $scope.subtotal + total;
            $scope.descuentoValor = $scope.subtotal * $scope.descuentoPorcentaje / 100;
            $scope.neto = $scope.subtotal - $scope.descuentoValor;
            if (p.product.tax == 10.5) {
                $scope.tax1 = $scope.tax1 + (total * 10.5 / 100);
            }
            if (p.product.tax == 21) {
                $scope.tax2 = $scope.tax2 + (total * 21 / 100);
            }
            if (p.product.tax == 27) {
                $scope.tax3 = $scope.tax3 + total * 27 / 100;
            }
            if (pedido == 'compra') {
                if (prov.impuesto1 !== 0) {
                    $scope.imp1 = $scope.imp1 + total * prov.impuesto1 / 100;
                }
                if (prov.impuesto2 !== 0) {
                    $scope.imp2 = $scope.imp2 + total * prov.impuesto2 / 100;
                }
                if (prov.impuesto3 !== 0) {
                    $scope.imp3 = $scope.imp3 + total * prov.impuesto3 / 100;
                }
                if (prov.impuesto4 !== 0) {
                    $scope.imp4 = $scope.imp4 + total * prov.impuesto4 / 100;
                }
                var totalI = $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4;
                $scope.totalImp = Math.round(totalI * 100) / 100;
            }
            $scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3 + $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4;
            $scope.totalTax = $scope.tax1 + $scope.tax2 + $scope.tax3;
            return total;
        } //end calcularSubtotal

        $scope.cantProductos = function() {
            if ($rootScope.productosAgregados.length > 0) {
                return true;
            }
        } //end cantProductos

        $scope.clickSubmit = function(n) {
            $scope.clicked = true;
            $scope.create(n);
        }; //end clickSubmit

        // Create new Pedido
        $scope.create = function(n) {
            if ($scope.clicked === true) {
                // if(($scope.caja !== undefined) && ($scope.caja !== '')){
                if (($scope.numero !== undefined) && ($scope.numero !== '')) {
                    if (($scope.tipoComprobante !== undefined) && ($scope.tipoComprobante !== '')) {
                        if (($scope.tipoPedido !== undefined) && ($scope.tipoPedido !== '')) {
                            if ($scope.tipoPedido === 'compra') {
                                if ($scope.productosAgregados.length !== 0) {
                                    if (($scope.proveedor !== undefined) || (this.proveedor != undefined) || ($rootScope.nuevoProveedor !== undefined)) {
                                        if (($scope.condicionVenta !== undefined) && ($scope.condicionVenta !== '')) {
                                            if (($scope.proveedor !== undefined) || (this.proveedor != undefined) || ($rootScope.nuevoProveedor !== undefined)) {
                                                if (this.proveedor !== undefined) {
                                                    var proveedor = this.proveedor;
                                                } else {
                                                    var proveedor = $rootScope.nuevoProveedor;
                                                }

                                                if (n === 1) {
                                                    var state = 'borrador';
                                                } else {
                                                    var state = 'pendiente evaluacion';
                                                }
                                                var pedido = new Pedidos({
                                                    numero: this.numero,
                                                    tipoPedido: this.tipoPedido,
                                                    tipoComprobante: $scope.tipoComprobante,
                                                    estado: state,
                                                    puesto: $scope.authentication.user.puesto ? $scope.authentication.user.puesto : undefined,
                                                    products: $rootScope.productosAgregados,
                                                    category1: $scope.category1 ? $scope.category1._id : undefined,
                                                    proveedor: proveedor._id,
                                                    observaciones: this.observaciones,
                                                    subtotal: this.subtotal,
                                                    descuentoPorcentaje: this.descuentoPorcentaje,
                                                    descuentoValor: this.descuentoValor,
                                                    neto: this.neto,
                                                    tax1: this.tax1,
                                                    tax2: this.tax2,
                                                    tax3: this.tax3,
                                                    totalTax: this.totalTax,
                                                    totalImp: this.totalImp,
                                                    total: this.total,
                                                    myDate: this.myDate,
                                                    created: $scope.created,
                                                    condicionVenta: this.condicionVenta._id,
                                                    enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
                                                });

                                                $scope.numero = undefined;
                                                $scope.tipoComprobante = undefined;
                                                $scope.productosAgregados = undefined;
                                                $scope.proveedor = undefined;
                                                $scope.condicionVenta = undefined;
                                            }
                                        } else {
                                            $scope.errorCondicion = 'Se debe seleccionar una condicion de compra';
                                        }
                                    } else {
                                        $scope.errorProveedor = 'Se debe seleccionar un proveedor';
                                    }
                                } else {
                                    $scope.errorProd = 'Se deben seleccionar productos para la orden de compra';
                                }
                            } else {
                                if ($scope.productosAgregados.length !== 0) {
                                    if (($scope.cliente !== undefined) && ($scope.cliente !== null)) {
                                        if (($scope.condicionVenta !== undefined) && ($scope.condicionVenta !== '')) {
                                            if (n === 1) {
                                                var state = 'borrador';
                                            } else {
                                                var state = 'pendiente evaluacion';
                                            }
                                            $scope.created = new Date($scope.created.setTime($scope.created.getTime() + (3 * 60 * 60 * 1000)));
                                            var pedido = new Pedidos({
                                                numero: parseInt(this.numero),
                                                tipoPedido: this.tipoPedido,
                                                tipoComprobante: this.tipoComprobante,
                                                estado: state,
                                                category1: this.category1 ? this.category1._id : undefined,
                                                puesto: $scope.authentication.user.puesto,
                                                impuesto: $scope.impuesto,
                                                products: $rootScope.productosAgregados,
                                                cliente: $scope.cliente._id,
                                                delivery: this.delivery,
                                                observaciones: this.observaciones,
                                                subtotal: this.subtotal,
                                                descuentoPorcentaje: this.descuentoPorcentaje,
                                                descuentoValor: this.descuentoValor,
                                                neto: this.neto,
                                                tax1: this.tax1,
                                                tax2: this.tax2,
                                                tax3: this.tax3,
                                                totalTax: this.totalTax,
                                                total: this.total,
                                                myDate: this.myDate,
                                                created: $scope.created,
                                                condicionVenta: this.condicionVenta._id,
                                                enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
                                            });
                                            $scope.numero = undefined;
                                            $scope.tipoComprobante = undefined;
                                            $scope.productosAgregados = undefined;
                                            $scope.cliente = undefined;
                                            $scope.condicionVenta = undefined;
                                        } else {
                                            $scope.errorCondicion = 'Se debe seleccionar una condicion de venta';
                                        }
                                    } else {
                                        $scope.errorCliente = 'Se debe seleccionar un cliente';
                                    }
                                } else {
                                    $scope.errorProd = 'Se deben seleccionar productos para la orden de venta';
                                }
                            }

                            if (pedido !== undefined) {
                                pedido.$save(function(response) {
                                    if (response._id) {
                                        pedido._id = response._id;
                                        $rootScope.pedidos.unshift(pedido);
                                    }

                                    $state.go('home.pedidos', { "tipo": $scope.tipoPedido });

                                    // Clear form fields
                                    $scope.numero = 0;
                                    $scope.tipoPedido = '';
                                    $scope.tipoComprobante = '';
                                    $scope.observaciones = '';
                                    $scope.subtotal = 0;
                                    $scope.descuentoPorcentaje = 0;
                                    $scope.descuentoValor = 0;
                                    $scope.neto = 0;
                                    $scope.tax1 = 0;
                                    $scope.tax2 = 0;
                                    $scope.tax3 = 0;
                                    $scope.total = 0;
                                    $scope.condicionVenta = '';

                                    //destruir los $rootScope

                                    $rootScope.nuevoProveedor = undefined;
                                    $rootScope.nuevoCliente = undefined;
                                    $rootScope.nuevaMateriaPrima = undefined;
                                    $rootScope.nuevoProducto = undefined;
                                    $rootScope.provider = undefined;


                                }, function(errorResponse) {
                                    $scope.error = errorResponse.data.message;
                                });
                            }

                        } else {
                            $scope.errorPedido = 'Se debe seleccionar un tipo de orden';
                        }

                    } else {
                        $scope.errorTipoComprobante = 'Se debe seleccionar un tipo de Comprobante';
                    }

                } else {
                    $scope.errorNumero = 'Se debe indicar un numero para la orden';
                }

            } else {
                //controlar que no se cree con el enter
            }

        }; //end create

        $scope.crearPedidoCliente = function() {
            var clienteUsuario = $scope.clienteUsuario[0];
            $scope.created = new Date($scope.created.setTime($scope.created.getTime() + (3 * 60 * 60 * 1000)));
            var pedido = new Pedidos({
                tipoPedido: 'venta',
                tipoComprobante: clienteUsuario.comprobante._id,
                estado: 'pendiente evaluacion',
                impuesto: $scope.impuesto,
                category1: clienteUsuario.category1._id,
                products: $rootScope.productosAgregados,
                cliente: clienteUsuario._id,
                delivery: false,
                observaciones: this.observaciones,
                subtotal: this.subtotal,
                descuentoPorcentaje: this.descuentoPorcentaje,
                descuentoValor: this.descuentoValor,
                neto: this.neto,
                tax1: this.tax1,
                tax2: this.tax2,
                tax3: this.tax3,
                totalTax: this.totalTax,
                total: this.total,
                myDate: this.myDate,
                created: $scope.created,
                condicionVenta: clienteUsuario.condicionPago._id,
                enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
            });

            pedido.$save(function(response) {
                if (response._id) {
                    pedido._id = response._id;
                    $rootScope.pedidos.unshift(pedido);
                }

                $state.go('home.pedidos', { "tipo": $scope.tipoPedido });

                // Clear form fields
                $scope.numero = 0;
                $scope.tipoPedido = '';
                $scope.tipoComprobante = '';
                $scope.observaciones = '';
                $scope.subtotal = 0;
                $scope.descuentoPorcentaje = 0;
                $scope.descuentoValor = 0;
                $scope.neto = 0;
                $scope.tax1 = 0;
                $scope.tax2 = 0;
                $scope.tax3 = 0;
                $scope.total = 0;
                $scope.condicionVenta = '';

                //destruir los $rootScope

                $rootScope.nuevoProveedor = undefined;
                $rootScope.nuevoCliente = undefined;
                $rootScope.nuevaMateriaPrima = undefined;
                $rootScope.nuevoProducto = undefined;
                $rootScope.provider = undefined;


            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        //saca carteles de error cuando cambia de compra a venta y al reves
        $scope.apagarAvisos = function() {
            $scope.errorPedido = undefined;
            $scope.errorCliente = undefined;
            $scope.errorProveedor = undefined;
            $scope.errorProd = undefined;
            $scope.errorCondicion = undefined;
        }; //end apagarAvisos

        //Habilita form para editar producto
        $scope.editar = function(index) {
            $scope.productoEditado[index] = true;
        }; //end editar

        //edita un producto
        $scope.editarProducto = function(index, p) {
            if (tipoPedido == 'compra') {
                if ($scope.proveedor !== undefined) {
                    var prov = $scope.proveedor
                } else {
                    var prov = $rootScope.nuevoProveedor;
                }
            }
            var tipoPedido = this.tipoPedido;
            var subt = 0;
            var tax1 = 0;
            var tax2 = 0;
            var tax3 = 0;
            if (tipoPedido == 'venta') {
                var descuento = p.product.unitPrice * p.descuento / 100;
                p.subtotal = p.cantidad * p.product.unitPrice;
                p.total = p.cantidad * (p.product.unitPrice - descuento);
            }

            if (tipoPedido == 'compra') {
                var descuento = p.product.costPerUnit * p.descuento / 100;
                p.subtotal = p.cantidad * p.product.costPerUnit;
                p.total = p.cantidad * (p.product.costPerUnit - descuento);
            }

            $rootScope.productosAgregados[index] = p;
            for (var i = 0; i < $rootScope.productosAgregados.length; i++) {
                subt = subt + $rootScope.productosAgregados[i].total;
                var iva = $rootScope.productosAgregados[i].product.tax;
                if (iva == 10.5) {
                    tax1 = tax1 + $rootScope.productosAgregados[i].total * 10.5 / 100;
                }
                if (iva == 21) {
                    tax2 = tax2 + $rootScope.productosAgregados[i].total * 21 / 100;
                }
                if (iva == 27) {
                    tax3 = tax3 + $rootScope.productosAgregados[i].total * 27 / 100;
                }
            }
            $scope.descuentoValor = subt * $scope.descuentoPorcentaje / 100;
            $scope.subtotal = subt;
            $scope.neto = subt - $scope.descuentoValor;
            $scope.tax1 = tax1;
            $scope.tax2 = tax2;
            $scope.tax3 = tax3;
            var prov = $scope.proveedor;
            if (tipoPedido == 'compra') {
                if (prov.impuesto1 !== 0) {
                    $scope.imp1 = $scope.neto * prov.impuesto1 / 100;
                }
                if (prov.impuesto2 !== 0) {
                    $scope.imp2 = $scope.neto * prov.impuesto2 / 100;
                }
                if (prov.impuesto3 !== 0) {
                    $scope.imp3 = $scope.neto * prov.impuesto3 / 100;
                }
                if (prov.impuesto4 !== 0) {
                    $scope.imp4 = $scope.neto * prov.impuesto4 / 100;
                }
                var totalI = $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4;
                $scope.totalImp = Math.round(totalI * 100) / 100;
            }

            $scope.totalTax = tax1 + tax2 + tax3;
            $scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3 + $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4;
            this.p = undefined;
            $scope.productoEditado[index] = false;
        }; //end editarProducto

        //Elimina un producto del arreglo de productos
        $scope.borrarProducto = function(producto) {
            if ($scope.tipoPedido == 'compra') {
                // var prov = producto.product.provider
                if ($scope.proveedor !== undefined) {
                    var prov = $scope.proveedor
                } else {
                    var prov = $rootScope.nuevoProveedor;
                }
                var totalImpuesto = prov.impuesto1 + prov.impuesto2 + prov.impuesto3 + prov.impuesto4;
                var restoImpuesto = producto.total * totalImpuesto / 100;
            } else {
                var restoImpuesto = 0;
            }
            var tipoPedido = this.tipoPedido;
            var subt = 0;
            var iva;
            var descProd = 0; //descuento del producto
            var descGen; //descuento del proveedor
            var tax1 = 0;
            var tax2 = 0;
            var tax3 = 0;
            var totalIva;
            var totalI;
            if ($scope.tipoPedido == 'compra') {
                descProd = parseFloat((producto.product.costPerUnit * producto.cantidad) * producto.descuento / 100);
                subt = parseFloat((producto.product.costPerUnit * producto.cantidad) - descProd); //subtotal de solo ese prod
            }
            if ($scope.tipoPedido == 'venta') {
                descProd = parseFloat((producto.product.unitPrice * producto.cantidad) * producto.descuento / 100);
                subt = parseFloat((producto.product.unitPrice * producto.cantidad) - descProd); //subtotal de solo ese prod
            }

            descGen = parseFloat((subt * $scope.descuentoPorcentaje) / 100);
            iva = producto.product.tax;
            if (iva == 10.5) {
                tax1 = parseFloat(subt * 10.5 / 100);
                $scope.tax1 = parseFloat($scope.tax1 - tax1);
            }
            if (iva == 21) {
                tax2 = parseFloat(subt * 21 / 100);
                $scope.tax2 = parseFloat($scope.tax2 - tax2);
            }
            if (iva == 27) {
                tax3 = parseFloat(subt * 27 / 100);
                $scope.tax3 = parseFloat($scope.tax3 - tax3);
            }
            $scope.neto = Number(parseFloat($scope.neto - (subt - descGen)).toFixed(4));
            $scope.subtotal = parseFloat($scope.subtotal - subt);
            totalIva = (subt - descGen + tax1 + tax2 + tax3);
            $scope.descuentoValor = parseFloat($scope.descuentoValor - descGen);
            if ($scope.tipoPedido == 'compra') {
                if (prov.impuesto1 !== 0) {
                    $scope.imp1 = $scope.neto * prov.impuesto1 / 100;
                }
                if (prov.impuesto2 !== 0) {
                    $scope.imp2 = $scope.neto * prov.impuesto2 / 100;
                }
                if (prov.impuesto3 !== 0) {
                    $scope.imp3 = $scope.neto * prov.impuesto3 / 100;
                }
                if (prov.impuesto4 !== 0) {
                    $scope.imp4 = $scope.neto * prov.impuesto4 / 100;
                }
                totalI = $scope.imp1 + $scope.imp2 + $scope.imp3 + $scope.imp4;
            } else {
                totalI = 0;
            }
            var restar = totalIva + restoImpuesto;
            $scope.total = $scope.total - restar;
            $scope.totalTax = $scope.totalTax - tax1 - tax2 - tax3;
            $scope.totalImp = Math.round(totalI * 100) / 100;
            $scope.remove(producto);
            // $rootScope.productosAgregados.splice(producto, 1);
            if ($rootScope.productosAgregados.length == 0) {
                $scope.deshabilitarProveedor = false;
                $scope.deshabilitarCliente = false;
            }
        }; //end borrarProducto

        // Remove existing Producto
        $scope.remove = function(producto) {

            for (var i in $rootScope.productosAgregados) {
                if ($rootScope.productosAgregados[i] === producto) {
                    $rootScope.productosAgregados.splice(i, 1);
                }
            }
        }; //end remove


        //autocomplete para seleccionar proveedor
        $scope.searchTextChange = function(text) {
            var lowercaseQuery = angular.lowercase(text);
            return $filter('filter')($scope.proveedores, { name: text });
        }; //end searchText

        $scope.sendProvider = function($event, provider) {
            if ($event.keyCode === 13) {
                $event.preventDefault();
                if ((provider === null) || (provider === undefined)) {
                    $scope.mensajeP = 'No seleccionaste un proveedor valido';
                } else {
                    $scope.proveedor = provider;
                }
            }
        }; //end sendProvider


        function asyncCondicionventas() {
            var deferred = $q.defer();
            setTimeout(function() {
                $http({
                    method: 'GET',
                    url: ('/api/condicionventas/'),
                    params: { e: $scope.SEARCH.enterprise }
                })
                    .then(function(response) {
                        $scope.condicionVentas = response.data;
                    }, function(response) {
                        console.log('error');
                    });
                if ($scope.condicionVentas !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        } //end async

        $scope.selectedItemChange = function(item) {
            if ((item !== null) && (item !== undefined)) {
                $scope.idProveedor = item._id;
            }
            $scope.proveedor = item;
            $rootScope.provider = item;
            $scope.descProveedor();
            $scope.tipeando = false;
            //asigno por defecto los campos asociados al proveedor en los select
            if (($scope.proveedor !== undefined) && ($scope.proveedor !== null)) {
                if (($scope.proveedor.condicionPago !== undefined) && ($scope.proveedor.condicionPago !== null)) {
                    var promise = $http({
                        method: 'GET',
                        url: ('/api/condicionventas/'),
                        params: { e: $scope.SEARCH.enterprise }
                    });
                    promise.then(function(response) {
                        $scope.condicionVentas = response.data;
                        for (var i = 0; i < $scope.condicionVentas.length; i++) {
                            if (($scope.proveedor.condicionPago._id !== undefined) && ($scope.proveedor.condicionPago._id !== null) && ($scope.condicionVentas[i]._id == $scope.proveedor.condicionPago._id)) {
                                $scope.condicionVenta = $scope.condicionVentas[i];
                            } else if ($scope.condicionVentas[i]._id == $scope.proveedor.condicionPago) {
                                $scope.condicionVenta = $scope.condicionVentas[i];
                            }
                        }
                    });
                }
            } else {
                $scope.condicionVenta = undefined;
            }
        }; //end selectedItem

        //autocomplete para seleccionar cliente
        $scope.searchTextChangeClient = function(text) {
            var lowercaseQuery = angular.lowercase(text);
            return $filter('filter')($scope.clientes, { name: text });
        }; //endSelectedItem

        $scope.sendClient = function($event, client) {
            if ($event.keyCode === 13) {
                $event.preventDefault();
                if ((client === null) || (client === undefined)) {
                    $scope.mensajeP = 'No seleccionaste un cliente valido';
                } else {
                    $scope.cliente = client;
                }

            }
        }; //end sendClient

        $scope.selectedItemChangeClient = function(item) {
            $scope.cliente = item;
            //asigno por defecto los campos asociados al cliente en los select
            if (($scope.cliente !== undefined) && ($scope.cliente !== null)) {
                if ($scope.cliente.condicionPago !== undefined) {
                    var promise = $http({
                        method: 'GET',
                        url: ('/api/condicionventas/'),
                        params: { e: $scope.SEARCH.enterprise }
                    });
                    promise.then(function(response) {
                        $scope.condicionVentas = response.data;
                        for (var i = 0; i < $scope.condicionVentas.length; i++) {
                            if (($scope.cliente.condicionPago !== undefined) && ($scope.cliente.condicionPago !== null)) {
                                if ($scope.condicionVentas[i]._id == $scope.cliente.condicionPago._id) {
                                    $scope.condicionVenta = $scope.condicionVentas[i];
                                }
                                // console.log('coincidio', $scope.condicionVentas[i]);
                            } else if ($scope.condicionVentas[i]._id == $scope.cliente.condicionPago) {
                                // console.log('coincidio', $scope.condicionVentas[i]);
                                $scope.condicionVenta = $scope.condicionVentas[i];
                            }
                        }
                    });
                }
                $scope.descCliente();
            }
        }; //end selectedItem

        $scope.minLengthProv = 0;

        $scope.showAdvanced = function(ev) {
            $scope.minLengthProv = 1;
            $scope.textToSearch = undefined;
            Modal.setTipo($scope.tipoPedido);
            $scope.findContacts();
            $scope.findCategories();
            $scope.findTaxConditions();
            Modal.setEmpresa($scope.SEARCH.enterprise);
            $mdDialog.show({
                controller: CrearController,
                templateUrl: '/modules/pedidos/views/create.client.view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            })
                .then(function(answer) {
                    $scope.minLengthProv = 0;
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.minLengthProv = 0;
                    $scope.status = 'You cancelled the dialog.';
                });
        }; //end showAdvanced

        $scope.minLengthProv = 0;

        $scope.showAdvancedProduct = function(ev) {
            $scope.minLengthProd = 1;
            $scope.textToSearch2 = undefined;
            Modal.setTipo($scope.tipoPedido);
            $scope.findProveedores();
            $scope.findCategories();
            $scope.findSubs();
            $scope.findMetrics();
            $scope.findSubcategories();
            $scope.findTaxes();
            Modal.setEmpresa($scope.SEARCH.enterprise);
            $mdDialog.show({
                controller: CrearController,
                templateUrl: '/modules/pedidos/views/create.product.view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            })
                .then(function(answer) {
                    $scope.minLengthProd = 0;
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.minLengthProd = 0;
                    $scope.status = 'You cancelled the dialog.';
                });
        }; //end showAdvancedProduct

        $scope.findEnterprises = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });
            }
        }; //end find

        $scope.findTipoComprobante = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.tipoComprobante = Comprobantes.query({ e: $scope.SEARCH.enterprise });
            }
        }; //end find

        $scope.findClientes = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.clientes = Clients.query({ e: $scope.SEARCH.enterprise });
            }
        }; //end find

        $scope.findCondicionVenta = function() {
            if ($scope.SEARCH !== undefined) {
                // $scope.condicionVentas = Condicionventas.query({ e: $scope.SEARCH.enterprise });
                var promise = $http({
                    method: 'GET',
                    url: ('/api/condicionventas/'),
                    params: { e: $scope.SEARCH.enterprise }
                });
                promise.then(function(response) {
                    $scope.condicionVentas = response.data;
                    // console.log($scope.condicionVentas);
                    Modal.setCondicionesVentas($scope.condicionVentas);
                });
            }
        }; //end find

        $scope.findProductos = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.products = Products.query({ e: $scope.SEARCH.enterprise });
                $scope.productosNombre = $scope.products;
            }
        }; //end find

        $scope.findComprobantes = function() {
            if ($scope.SEARCH !== undefined) {
                var promise = $http({
                    method: 'GET',
                    url: ('/api/comprobantes/'),
                    params: { e: $scope.SEARCH.enterprise }
                });
                promise.then(function(response) {
                    $scope.comprobantes = response.data;
                    for (var i in $scope.comprobantes) {
                        if ($scope.comprobantes[i].name === 'Pedido') {
                            $scope.tipoComprobante = $scope.comprobantes[i];
                            $scope.numero = n_with_zeroes(parseInt($scope.tipoComprobante.ultimoNumero) + 1, 8);
                        }
                    }
                    Modal.setComprobantes($scope.comprobantes);
                });
            }
        }; //end find

        $scope.findCajas = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.cajas = Cajas.query({ e: $scope.SEARCH.enterprise });
            }
        }; //end find

        $scope.findContacts = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.contacts = Contacts.query({ e: $scope.SEARCH.enterprise });
                Modal.setContactos($scope.contacts);
            }

        }; //end find

        $scope.findCategories = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.categories = Categories.query({ e: $scope.SEARCH.enterprise });
                Modal.setCategorias($scope.categories);
            }
        }; //end find

        $scope.findCategoriesVenta = function() {
            if ($scope.SEARCH !== undefined) {
                Categories.query({ e: $scope.SEARCH.enterprise }, function(data) {
                    //console.log('DATA: ', data);
                    $scope.categories = $filter('filter')(data, function(item) {
                        return (item.type1 === 'Centro de Costo');
                    });
                    //console.log('categorias: ', $scope.categories);
                    Modal.setCategorias($scope.categories);
                });


            }
        }; //end find

        $scope.findTaxConditions = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.taxconditions = Taxconditions.query({ e: $scope.SEARCH.enterprise });
                Modal.setCondiciones($scope.taxconditions);
            }

        }; //end find

        $scope.findSubs = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise });
                Modal.setSubs($scope.subs);
            }
        }; //end find

        $scope.findSubcategories = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.subcategorias = Categories.query({ e: $scope.SEARCH.enterprise });
                Modal.setSubcategorias($scope.subcategorias);
            }
        }; //end find

        $scope.findProveedores = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.proveedores = Providers.query({ e: $scope.SEARCH.enterprise });
                Modal.setProveedores($scope.proveedores);
            }
        }; //end find

        $scope.findTaxes = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.taxes = [{ value: 1, name: 'Iva incluido en el costo' }, { value: 10.5, name: '10.50%' }, {
                    value: 21,
                    name: '21.00%'
                }, { value: 27, name: '27.00%' }];
                Modal.setTaxes($scope.taxes);
            }

        }; //end find

        $scope.findMetrics = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.metrics = Metrics.query();
                Modal.setMetrics($scope.metrics);
            }
        }; //end find

        function CrearController($scope, $mdDialog, Modal, Providers, Clients, Products) {
            // console.log(Modal.getTipo());
            if (Modal.getTipo() == 'compra') {
                $scope.tipo = 'Proveedor';
                if (($rootScope.provider !== undefined) && ($rootScope.provider !== null)) {
                    $scope.provider = $rootScope.provider.name;
                }
                $scope.categories2 = ['Materia Prima', 'Insumo'];
            } else {
                $scope.tipo = 'Cliente';
                $scope.categories2 = ['Productos Terminados'];
            }
            $scope.contacts = Modal.getContactos();
            $scope.categories = Modal.getCategorias();
            // $scope.categories2 = [ 'Materia Prima', 'Insumo'];
            $scope.subcategorias = Modal.getSubcategorias();
            $scope.taxconditions = Modal.getCondiciones();
            $scope.comprobantes = Modal.getComprobantes();
            $scope.subs = Modal.getSubs();
            $scope.proveedores = Modal.getProveedores();
            $scope.taxes = Modal.getTaxes();
            $scope.metrics = Modal.getMetrics();
            $scope.condicionPagos = Modal.getCondicionesVentas();
            $scope.taxconditions2 = ['Consumidor Final', 'Responsable Inscripto'];
            $scope.banco = { name: undefined, account: undefined, cbu: undefined, identity: undefined };
            $scope.creditLimit = 0;
            $scope.discountRate = 0;
            $scope.country = 'Argentina';
            $scope.city = 'La Plata';
            $scope.region = 'Buenos Aires';
            $scope.postalCode = '1900';
            $scope.quantityPerUnit = 0;
            $scope.unitsInStock = 0;
            $scope.idealStock = 0;
            $scope.criticalStock = 0;
            $scope.unitPrice = 0;
            $scope.costPerUnit = 0;
            $scope.condicionPago = 'Efectivo';
            $scope.taxcondition = 'Consumidor Final';

            var marker, map;
            $scope.$on('mapInitialized', function(evt, evtMap) {
                map = evtMap;
                marker = map.markers[0];
            });

            $scope.types = "['address']";

            $scope.placeChanged2 = function() {
                $scope.errorDir = undefined;
                $scope.place = this.getPlace();
            };

            $scope.hide = function() {
                $mdDialog.hide();
            };
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.answer = function(answer) {
                $mdDialog.hide(answer);
            };

            $scope.mostrarFormResponsable = function() {
                $scope.errorName = undefined;
                $scope.formResponsableInscripto = false;
                $scope.formResponsableInscripto = this.taxcondition === 'Responsable Inscripto';
            }; //end mostrarForm

            // Create new Provider
            $scope.crearProveedor = function() {
                console.log(this.taxconditionProv, 'tax');
                console.log(this.condicionPagoProv, 'condicion');
                var empresa = Modal.getEmpresa();
                if (this.name !== undefined) {
                    if (this.address !== undefined) {
                        var latitud = $scope.place.geometry.location.lat();
                        var longitud = $scope.place.geometry.location.lng();
                        if (this.category1 !== undefined) {
                            if (this.taxconditionProv !== undefined) {
                                if (this.condicionPagoProv !== undefined) {
                                    if (this.comprobante !== undefined) {
                                        // Create new Provider object
                                        var provider = new Providers({
                                            name: this.name,
                                            creditLimit: this.creditLimit ? this.creditLimit : 0,
                                            fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
                                            condicionPago: this.condicionPagoProv ? this.condicionPagoProv._id : undefined,
                                            comprobante: this.comprobante ? this.comprobante._id : undefined,
                                            banco: this.banco,
                                            taxCondition: this.taxconditionProv ? this.taxconditionProv._id : undefined,
                                            discountRate: this.discountRate ? this.discountRate : 0,
                                            costCenter: this.costCenter ? this.costCenter : undefined,
                                            paymentMethod: this.paymentMethod ? this.paymentMethod : undefined,
                                            contacts: this.contact ? this.contact._id : undefined,
                                            country: this.country,
                                            city: this.city,
                                            region: this.region ? this.region : undefined,
                                            postalCode: this.postalCode,
                                            address: this.address,
                                            phone: this.phone ? this.phone : undefined,
                                            loc: [latitud, longitud],
                                            //fax: this.fax,
                                            web: this.web ? this.web : 0,
                                            enterprise: empresa,
                                            category1: this.category1 ? this.category1._id : undefined
                                            //sub: this.sub._id || undefined
                                        });
                                        // Redirect after save
                                        provider.$save(function(response) {
                                            // Clear form fields
                                            $scope.name = '';
                                            $scope.creditLimit = 0;
                                            $scope.fiscalNumber = '';
                                            $scope.discountRate = 0;
                                            $scope.contacts = [];
                                            $scope.country = '';
                                            $scope.city = '';
                                            $scope.region = '';
                                            $scope.postalCode = '';
                                            $scope.address = '';
                                            $scope.phone = '';
                                            $scope.fax = '';
                                            $scope.web = '';
                                            $scope.hide();
                                            $rootScope.nuevoProveedor = provider;
                                            console.log($rootScope.nuevoProveedor);
                                        }, function(errorResponse) {
                                            $scope.error = errorResponse.data.message;
                                        });
                                    } else {
                                        $scope.errorComprobante = 'Indicar el tipo de comprobante'
                                    }
                                } else {
                                    $scope.errorCondicion = 'Indicar condicion de pago'
                                }
                            } else {
                                $scope.errorTax = 'Indicar la condicion de iva'
                            }
                        } else {
                            $scope.errorCategory = 'Indicar la categoria';
                        }
                    } else {
                        $scope.errorDir = 'Indicar la direccion';
                    }
                } else {
                    $scope.errorNameProv = 'Indicar la razÃ³n social';
                }
            }; //end crearProveedor

            // Create new Cliente
            $scope.crearCliente = function() {
                for (var i in $scope.taxconditions) {
                    if ($scope.taxconditions[i].name === this.taxcondition) {
                        var condicionIva = $scope.taxconditions[i];
                    }
                };
                var empresa = Modal.getEmpresa();
                var tempContact = [];
                var prod = [];
                if (this.name !== undefined) {
                    if ($scope.place !== undefined) {
                        var latitud = $scope.place.geometry.location.lat();
                        var longitud = $scope.place.geometry.location.lng();
                        var client = new Clients({
                            name: this.name ? this.name : this.razonSocial,
                            apellido: this.apellido ? this.apellido : undefined,
                            // razonSocial: this.razonSocial ? this.razonSocial : undefined,
                            creditLimit: this.creditLimit ? this.creditLimit : 0,
                            fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
                            // taxCondition: condicionIva._id,
                            condicionPago: this.condicionPago ? this.condicionPago._id : undefined,
                            taxCondition: condicionIva ? condicionIva._id : undefined,
                            discountRate: this.discountRate ? this.discountRate : 0,
                            loc: [latitud, longitud],
                            paymentMethod: this.paymentMethod ? this.paymentMethod : 0,
                            contacts: this.contact ? [this.contact._id] : [],
                            country: this.country,
                            city: this.city,
                            region: this.region ? this.region : undefined,
                            turno: this.turno ? this.turno : undefined,
                            postalCode: this.postalCode ? this.postalCode : 0,
                            address: this.address,
                            phone: this.phone,
                            web: this.web ? this.web : undefined,
                            category1: this.category ? this.category._id : undefined,
                            enterprise: empresa,
                            productosAsociados: prod
                        });
                        // Redirect after save
                        client.$save(function(response) {
                            //$location.path('clients/' + response._id);
                            // Clear form fields
                            $scope.name = '';
                            $scope.creditLimit = 0;
                            $scope.fiscalNumber = '';
                            $scope.discountRate = 0;
                            $scope.contacts = [];
                            $scope.country = '';
                            $scope.city = '';
                            $scope.region = '';
                            $scope.postalCode = '';
                            $scope.address = '';
                            $scope.phone = '';
                            $scope.fax = '';
                            $scope.web = '';
                            $scope.hide();
                            $rootScope.nuevoCliente = client;
                            console.log('nuevoCliente: ', $rootScope.nuevoCliente);
                        }, function(errorResponse) {
                            $scope.error = errorResponse.data.message;
                        });
                    } else {
                        $scope.errorDir = 'Se debe indicar una direccion';
                    }
                } else {
                    if ($scope.formResponsableInscripto === true) {
                        $scope.errorName = 'Se debe indicar la Razon Social';
                    } else {
                        $scope.errorName = 'Se debe indicar un nombre';
                    }
                }
            }; //end 

            $scope.eliminarMensajeError = function() {
                $scope.errorName = undefined;
                $scope.errorDir = undefined;
                $scope.errorNameProv = undefined;
                $scope.errorComprobante = undefined;
                $scope.errorCondicion = undefined;
                $scope.errorTax = undefined;
                $scope.errorCategory = undefined;
            }; //end eliminarMensajesError

            $scope.crearMateriaPrima = function() {
                var esMp = false;
                var esI = false;
                for (var i in $scope.categories) {
                    if ($scope.categories[i].name === this.category1) {
                        var categoria = $scope.categories[i];
                    }
                }
                if (categoria.name === 'Insumo') {
                    esI = true;
                } else {
                    esMp = true;
                }
                for (var i in $scope.taxes) {
                    if ($scope.taxes[i].name === this.tax) {
                        var valorTax = $scope.taxes[i].value
                    }
                }
                if ($rootScope.provider === undefined) {
                    for (var i in $scope.proveedores) {
                        if ($scope.proveedores[i].name === this.provider) {
                            var idProveedorModal = $scope.proveedores[i]._id
                        }
                    }
                } else {
                    var idProveedorModal = $rootScope.provider._id
                }
                var empresa = Modal.getEmpresa();
                if (this.code !== undefined) {
                    if (this.name !== undefined) {
                        if (this.costPerUnit !== undefined) {
                            if (this.tax !== undefined) {
                                if (this.sub !== undefined) {
                                    if (categoria.name !== undefined) {
                                        if (this.category2 !== undefined) {
                                            if (idProveedorModal !== undefined) {
                                                var product = new Products({
                                                    name: this.name,
                                                    description: this.description,
                                                    code: this.code,
                                                    //picture: this.picture || undefined,
                                                    brandName: this.brandName ? this.brandName : undefined,
                                                    // unitPrice: this.unitPrice,
                                                    costPerUnit: this.costPerUnit,
                                                    // sku: this.sku,
                                                    discontinued: this.discontinued,
                                                    provider: idProveedorModal,
                                                    quantityPerUnit: this.quantityPerUnit,
                                                    unitsInStock: this.unitsInStock,
                                                    idealStock: this.idealStock,
                                                    criticalStock: this.criticalStock,
                                                    unitsOnOrder: this.unitsOnOrder,
                                                    storedIn: this.storedIn,
                                                    metric: this.metric ? this.metric : 'u.',
                                                    reseller: this.reseller,
                                                    visible: this.visible,
                                                    esInsumo: esI,
                                                    esMateriaPrima: esMp,
                                                    tax: this.tax ? valorTax : undefined,
                                                    enterprise: empresa,
                                                    sub: this.sub ? this.sub._id : undefined,
                                                    category1: categoria._id,
                                                    category2: this.category2 ? this.category2._id : undefined,
                                                });

                                                // Redirect after save
                                                product.$save(function(response) {

                                                    // Clear form fields
                                                    $scope.name = '';
                                                    $scope.description = '';
                                                    $scope.brandName = '';
                                                    $scope.unitPrice = 0;
                                                    $scope.costPerUnit = 0;
                                                    $scope.sku = '';
                                                    $scope.discontinued = false;
                                                    $scope.quantityPerUnit = 1;
                                                    $scope.unitsInStock = 0;
                                                    $scope.unitsOnOrder = 0;
                                                    $scope.visible = true;
                                                    $scope.storedIn = '';
                                                    $scope.metric = '';
                                                    $scope.reseller = false;
                                                    $scope.hide();
                                                    $rootScope.nuevaMateriaPrima = product;
                                                    console.log($rootScope.nuevaMateriaPrima);

                                                }, function(errorResponse) {
                                                    $scope.error = errorResponse.data.message;
                                                });
                                            } else {
                                                $scope.errorProv = 'Se debe elegir un proveedor';
                                            }
                                        } else {
                                            $scope.errorCategory = 'Se debe indicar la subcategoria del producto';
                                        }
                                    } else {
                                        $scope.errorCategoria = 'Indicar la categoria'
                                    }
                                } else {
                                    $scope.errorSub = 'Indicar UEN'
                                }
                            } else {
                                $scope.errorIva = 'Se debe indicar el iva';
                            }
                        } else {
                            $scope.errorCost = 'Se debe indicar el costo';
                        }
                    } else {
                        $scope.errorName = 'Se debe indicar el nombre del producto';
                    }
                } else {
                    $scope.errorCode = 'Se debe indicar el codigo del producto';
                }
            }; //end crearMateriaPrima

            $scope.borrarErrores = function() {
                $scope.errorCode = undefined;
                $scope.errorName = undefined;
                $scope.errorCost = undefined;
                $scope.errorIva = undefined;
                $scope.errorSub = undefined;
                $scope.errorCategoria = undefined;
                $scope.errorCategory = undefined
                $scope.errorProv = undefined;
            } //end borrarErrores


            $scope.crearProducto = function() {
                var esProd = false;
                for (var i in $scope.categories) {
                    if ($scope.categories[i].name === this.category1) {
                        var categoria = $scope.categories[i];
                    }
                }
                if (categoria.name === 'Productos Terminados') {
                    esProd = true;
                }
                for (var i in $scope.taxes) {
                    if ($scope.taxes[i].name === this.tax) {
                        var valorTax = $scope.taxes[i].value
                    }
                }
                var empresa = Modal.getEmpresa();
                if (this.code !== undefined) {
                    if (this.name !== undefined) {
                        if (this.costPerUnit !== undefined) {
                            if (this.tax !== undefined) {
                                if (this.sub !== undefined) {
                                    if (categoria.name !== undefined) {
                                        if (this.category2 !== undefined) {
                                            if (this.provider !== undefined) {
                                                var product = new Products({
                                                    name: this.name,
                                                    description: this.description,
                                                    code: this.code,
                                                    //picture: this.picture || undefined,
                                                    brandName: this.brandName ? this.brandName : 0,
                                                    unitPrice: this.unitPrice,
                                                    costPerUnit: this.costPerUnit,
                                                    // sku: this.sku,
                                                    discontinued: this.discontinued,
                                                    provider: this.provider._id,
                                                    quantityPerUnit: this.quantityPerUnit,
                                                    unitsInStock: this.unitsInStock,
                                                    idealStock: this.idealStock,
                                                    criticalStock: this.criticalStock,
                                                    unitsOnOrder: this.unitsOnOrder,
                                                    storedIn: this.storedIn ? this.storedIn : undefined,
                                                    metric: this.metric ? this.metric : 'u.',
                                                    reseller: this.reseller,
                                                    visible: this.visible,
                                                    esProducto: esProd,
                                                    tax: this.tax ? valorTax : undefined,
                                                    enterprise: empresa,
                                                    sub: this.sub._id,
                                                    category1: categoria._id,
                                                    category2: this.category2 ? this.category2._id : undefined,
                                                });

                                                // Redirect after save
                                                product.$save(function(response) {

                                                    // Clear form fields
                                                    $scope.name = '';
                                                    $scope.description = '';
                                                    $scope.brandName = '';
                                                    $scope.unitPrice = 0;
                                                    $scope.costPerUnit = 0;
                                                    $scope.sku = '';
                                                    $scope.discontinued = false;
                                                    $scope.quantityPerUnit = 1;
                                                    $scope.unitsInStock = 0;
                                                    $scope.unitsOnOrder = 0;
                                                    $scope.visible = true;
                                                    $scope.storedIn = '';
                                                    $scope.metric = '';
                                                    $scope.reseller = false;
                                                    $scope.hide();
                                                    $rootScope.nuevoProducto = product;
                                                    console.log($rootScope.nuevoProducto);

                                                }, function(errorResponse) {
                                                    $scope.error = errorResponse.data.message;
                                                });
                                            } else {
                                                $scope.errorProv = 'Se debe elegir un proveedor';
                                            }
                                        } else {
                                            $scope.errorCategory = 'Se debe indicar la subcategoria del producto';
                                        }
                                    } else {
                                        $scope.errorCategoria = 'Indicar la categoria'
                                    }
                                } else {
                                    $scope.errorSub = 'Indicar UEN'
                                }
                            } else {
                                $scope.errorIva = 'Se debe indicar el iva';
                            }
                        } else {
                            $scope.errorCost = 'Se debe indicar el costo';
                        }
                    } else {
                        $scope.errorName = 'Se debe indicar el nombre del producto';
                    }
                } else {
                    $scope.errorCode = 'Se debe indicar el codigo del producto';
                }
            }; //end CrearProducto

        } //end CrearController

    } //end function        
]);
angular.module('pedidos').controller('ListPedidosController', ['$scope', '$rootScope', '$stateParams', '$location', 'user', 'Enterprises', '$mdBottomSheet', '$state', '$mdDialog', 'pedidosRealizados', 'pedidosBorrador', 'pedidosAprobados', 'pedidosRechazados', 'pedidosEvaluacion', 'tipoOrden', 'tipoPedido', '$q', 'Pedidos', 'Socket', 'ventasPendientesEntrega', 'ventasFinalizadas', 'ventasPendientes', 'BottomSheetService', 'PedidosExtra',
    function($scope, $rootScope, $stateParams, $location, user, Enterprises, $mdBottomSheet, $state, $mdDialog, pedidosRealizados, pedidosBorrador, pedidosAprobados, pedidosRechazados, pedidosEvaluacion, tipoOrden, tipoPedido, $q, Pedidos, Socket, ventasPendientesEntrega, ventasFinalizadas, ventasPendientes, BottomSheetService, PedidosExtra) {

        $scope.tabParams = $state.params.tab;

        switch ($state.params.tab) {
            case 'realizada':
                $scope.realizada = true;
                break;
            case 'aprobadas':
                $scope.aprobadas = true;
                break;
            case 'borrador':
                $scope.borrador = true;
                break;
            case 'rechazadas':
                $scope.rechazadas = true;
            default:
                $scope.realizada = true;
        }

        var cambio = this;

        this.user = user;
        //this.pedidos = pedidos;
        this.pedidosRealizados = pedidosRealizados;
        this.pedidosBorrador = pedidosBorrador;
        this.pedidosAprobados = pedidosAprobados;
        this.pedidosRechazados = pedidosRechazados;
        this.pedidosEvaluacion = pedidosEvaluacion;
        this.ventasPendientes = ventasPendientes;
        this.ventasPendientesEntrega = ventasPendientesEntrega;
        this.ventasFinalizadas = ventasFinalizadas;
        this.tipoOrden = tipoOrden;
        this.tipoPedido = tipoPedido;
        this.totalBorradorVenta = 0;
        this.totalBorradorCompra = 0;
        this.totalAprobadasCompra = 0;
        this.totalAprobadasVenta = 0;
        this.totalRechazadasCompra = 0;
        this.totalRechazadasVenta = 0;
        this.totalPendienteACompra = 0;
        this.totalPendienteAVenta = 0;
        this.totalPendienteECompra = 0;
        this.totalPendienteEVenta = 0;
        this.currentPage = 0;
        this.theDate = new Date();

        this.evaluar = evaluar;
        this.montoTotal = montoTotal;
        this.showConfirm = showConfirm;
        this.showAdvancedRecibidos = showAdvancedRecibidos;
        this.update = update;
        this.soloDomingos = soloDomingos;
        this.extraerPedido = extraerPedido;
        this.setNewData = setNewData;
        this.refresh = refresh;
        //this.getPage = getPage;
        this.borrarPedido = borrarPedido;

        this.showBottomSheetBorador = showBottomSheetBorador;
        this.showBottomSheetAprobadas = showBottomSheetAprobadas;
        this.showBottomSheetRechazados = showBottomSheetRechazados;
        this.showBottomSheetRealizadosCompra = showBottomSheetRealizadosCompra;
        this.showBottomSheetRealizadosVenta = showBottomSheetRealizadosVenta;

        this.montoTotal(pedidosEvaluacion, pedidosRealizados, pedidosAprobados, pedidosBorrador, pedidosRechazados);

        cambio.draftTemp = [];
        cambio.draftCount = 0;
        cambio.approvedTemp = [];
        cambio.approvedCount = 0;
        cambio.rejectedTemp = [];
        cambio.rejectedCount = 0;
        cambio.realTemp1 = [];
        cambio.realCount1 = 0;
        cambio.realTemp2 = [];
        cambio.realCount2 = 0;
        cambio.realStart1 = null;
        cambio.realStart2 = null;
        cambio.approvedStart = null;
        cambio.draftStart = null;
        cambio.approvedStart = null;
        cambio.rejectedStart = null;

        cambio.loadmoreReal1 = function() {
            cambio.loadingReal1 = true;
            cambio.realLimit1 = cambio.pedidosEvaluacion.length < 40 ? 40 : 20;
            PedidosExtra.loadMore(cambio.user.enterprise.enterprise, cambio.tipoPedido, 'pendiente evaluacion', cambio.realStart1, cambio.realLimit1).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        if (cambio.pedidosEvaluacion) {
                            if (cambio.realCount1 === 1 && cambio.realTemp1.length !== 0) {
                                cambio.pedidosEvaluacion = cambio.realTemp1.slice();
                            } else {
                                cambio.pedidosEvaluacion = cambio.pedidosEvaluacion.concat(cambio.realTemp1);
                            }
                        }

                        if (data.data.length === 0 || (cambio.realTemp1.length === 0 && cambio.realCount1 > 2))
                            cambio.doneReal1 = true;

                        cambio.realTemp1 = Pedidos.query({
                            e: cambio.user.enterprise.enterprise,
                            tipoPedido: cambio.tipoPedido,
                            estado: 'pendiente evaluacion',
                            p: cambio.realCount1,
                            pcount: cambio.realLimit1
                        });
                        cambio.realCount1++;
                        cambio.loadingReal1 = false;
                        cambio.realStart1 = cambio.pedidosEvaluacion.length ? cambio.pedidosEvaluacion[cambio.pedidosEvaluacion.length - 1].created : null;
                    }, 1000)
                })
            );
        };

        cambio.loadmoreReal2 = function() {
            cambio.loadingReal2 = true;
            cambio.realLimit2 = cambio.pedidosRealizados.length < 40 ? 40 : 20;
            PedidosExtra.loadMore(cambio.user.enterprise.enterprise, cambio.tipoPedido, 'pendiente aprobacion', cambio.realStart2, cambio.realLimit2).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        if (cambio.pedidosRealizados) {
                            if (cambio.realCount2 === 1 && cambio.realTemp2.length !== 0) {
                                cambio.pedidosRealizados = cambio.realTemp2.slice();
                            } else {
                                cambio.pedidosRealizados = cambio.pedidosRealizados.concat(cambio.realTemp2);
                            }
                        }

                        if (data.data.length === 0 || (cambio.realTemp2.length === 0 && cambio.realCount2 > 2))
                            cambio.doneReal2 = true;

                        cambio.realTemp2 = Pedidos.query({
                            e: cambio.user.enterprise.enterprise,
                            tipoPedido: cambio.tipoPedido,
                            estado: 'pendiente aprobacion',
                            p: cambio.realCount2,
                            pcount: cambio.realLimit2
                        });
                        cambio.realCount2++;
                        cambio.realStart2 = cambio.pedidosRealizados.length ? cambio.pedidosRealizados[cambio.pedidosRealizados.length - 1].created : null;
                        cambio.loadingReal2 = false;
                    }, 1000);
                })
            )
        };

        cambio.loadmoreApproved = function() {
            cambio.loadingApproved = true;
            cambio.approvedLimit = cambio.pedidosAprobados.length < 40 ? 40 : 20;
            PedidosExtra.loadMore(cambio.user.enterprise.enterprise, cambio.tipoPedido, 'aprobada', cambio.approvedStart, cambio.approvedLimit).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        if (cambio.pedidosAprobados) {
                            if (cambio.approvedCount === 1 && cambio.approvedTemp.length !== 0) {
                                cambio.pedidosAprobados = cambio.approvedTemp.slice();
                            } else {
                                cambio.pedidosAprobados = cambio.pedidosAprobados.concat(cambio.approvedTemp);
                            }
                        }

                        if (data.data.length === 0 || (cambio.approvedTemp.length === 0 && cambio.approvedCount > 2))
                            cambio.doneApproved = true;

                        cambio.approvedTemp = Pedidos.query({
                            e: cambio.user.enterprise.enterprise,
                            tipoPedido: cambio.tipoPedido,
                            estado: 'aprobada',
                            p: cambio.approvedCount,
                            pcount: cambio.approvedLimit
                        });
                        cambio.approvedCount++;
                        cambio.approvedStart = cambio.pedidosAprobados.length ? cambio.pedidosAprobados[cambio.pedidosAprobados.length - 1].created : null;
                        cambio.loadingApproved = false;
                    }, 1000);
                })
            )
        };

        cambio.loadmoreDraft = function() {
            cambio.loadingDraft = true;
            cambio.draftLimit = cambio.pedidosBorrador.length < 40 ? 40 : 20;
            PedidosExtra.loadMore(cambio.user.enterprise.enterprise, cambio.tipoPedido, 'borrador', cambio.draftStart, cambio.draftLimit).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        if (cambio.pedidosBorradors) {
                            if (cambio.draftCount === 1 && cambio.draftTemp.length !== 0)
                                cambio.pedidosBorradors = cambio.draftTemp.slice();
                            else
                                cambio.pedidosBorradors = cambio.pedidosBorradors.concat(cambio.draftTemp);
                        }

                        if (data.data.length === 0 || (cambio.draftTemp.length === 0 && cambio.draftCount > 2))
                            cambio.doneDraft = true;

                        cambio.draftTemp = Pedidos.query({
                            e: cambio.user.enterprise.enterprise,
                            tipoPedido: cambio.tipoPedido,
                            estado: 'borrador',
                            p: cambio.draftCount,
                            pcount: cambio.draftLimit
                        });
                        cambio.draftCount++;
                        cambio.draftStart = cambio.pedidosBorrador.length ? cambio.pedidosBorrador[cambio.pedidosBorrador.length - 1].created : null;
                        cambio.loadingDraft = false;
                    }, 1000);
                })
            )
        };

        cambio.loadmoreRejected = function() {
            cambio.loadingRejected = true;
            cambio.rejectedLimit = cambio.pedidosRechazados.length < 40 ? 40 : 20;
            PedidosExtra.loadMore(cambio.user.enterprise.enterprise, cambio.tipoPedido, 'rechazada', cambio.rejectedStart, cambio.rejectedLimit).then(
                angular.bind(cambio, function(data) {
                    setTimeout(function() {
                        if (cambio.pedidosRechazados) {
                            if (cambio.rejectedCount === 1 && cambio.rejectedTemp.length !== 0) {
                                cambio.pedidosRechazados = cambio.rejectedTemp.slice();
                            } else {
                                cambio.pedidosRechazados = cambio.pedidosRechazados.concat(cambio.rejectedTemp);
                            }
                        }

                        if (data.data.length === 0 || (cambio.rejectedTemp.length === 0 && cambio.rejectedCount > 2))
                            cambio.doneRejected = true;

                        cambio.rejectedTemp = Pedidos.query({
                            e: cambio.user.enterprise.enterprise,
                            tipoPedido: cambio.tipoPedido,
                            estado: 'rechazada',
                            p: cambio.rejectedCount,
                            pcount: cambio.rejectedLimit
                        });
                        cambio.rejectedCount++;
                        cambio.rejectedStart = cambio.pedidosRechazados.length ? cambio.pedidosRechazados[cambio.pedidosRechazados.length - 1].created : null;
                        cambio.loadingRejected = false;
                    }, 1000)
                })
            )
        };

        // actualizar modelos de dato de pedidos
        function refresh() {
            this.pedidosEvaluacion = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'pendiente evaluacion',
                p: 0,
                pcount: 20
            });
            this.pedidosRealizados = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'pendiente aprobacion',
                p: 0,
                pcount: 20
            });
            this.pedidosAprobados = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'aprobada',
                p: 0,
                pcount: 20
            });
            this.pedidosRechazados = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'rechazada',
                p: 0,
                pcount: 20
            });
            this.pedidosBorrador = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'borrador',
                p: 0,
                pcount: 20
            });

        }

        /*// Obtener datos paginados del backend
        function getPage(pagina, cantidad) {
            if (pagina < 0) {
                pagina = 0;
            }
            ;
            this.currentPage = pagina;
            this.pedidosEvaluacion = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'pendiente evaluacion',
                p: pagina,
                pcount: cantidad
            });
            this.pedidosRealizados = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'pendiente aprobacion',
                p: pagina,
                pcount: cantidad
            });
            this.pedidosAprobados = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'aprobada',
                p: pagina,
                pcount: cantidad
            });
            this.pedidosRechazados = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'rechazada',
                p: pagina,
                pcount: cantidad
            });
            this.pedidosBorrador = Pedidos.query({
                e: this.user.enterprise.enterprise,
                tipoPedido: this.tipoPedido,
                estado: 'borrador',
                p: pagina,
                pcount: cantidad
            });
        };*/

        //cambia de estado pendiente evaluacion a pendiente aprobacion
        function evaluar(item) {
            var pedido = item;
            pedido.estado = 'pendiente aprobacion';

            if (cambio.enterprise !== undefined) {
                pedido.enterprise = cambio.enterprise._id
            } else if ((pedido.enterprise !== undefined) && (pedido.enterprise !== null)) {
                pedido.enterprise = pedido.enterprise._id
            }

            if (cambio.tipoComprobante !== undefined) {
                pedido.tipoComprobante = cambio.tipoComprobante._id
            } else if (pedido.tipoComprobante !== undefined) {
                pedido.tipoComprobante = pedido.tipoComprobante._id
            }

            if (item.tipoPedido == 'compra') {
                if ($scope.proveedor !== undefined) {
                    pedido.proveedor = $scope.proveedor._id
                } else if ((pedido.proveedor !== undefined) && (pedido.proveedor !== null)) {
                    pedido.proveedor = pedido.proveedor._id
                }

            } else {
                if ($scope.cliente !== undefined) {
                    pedido.cliente = $scope.cliente._id
                } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) {
                    pedido.cliente = pedido.cliente._id
                }

            }
            if (cambio.condicionVenta !== undefined) {
                pedido.condicionVenta = cambio.condicionVenta._id
            } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) {
                pedido.condicionVenta = pedido.condicionVenta._id
            }

            pedido.$update(function() {
                // console.log('pendiente aprobacion');
                $state.go('home.viewPedido', { pedidoId: item._id });
            }, function(errorResponse) {
                console.log(errorResponse, 'error repsonse');
            });
        } //end evaluar

        //abre modal para confirmar/rechazar ordenes pendientes
        function showConfirm(ev, item, n) {
            if (n == 1) {
                var confirm = $mdDialog.confirm()
                    .title('Aprobar Orden')
                    .content('¿Está seguro que desea aprobar esta orden?')
                    .ariaLabel('Lucky day')
                    .ok('Aprobar')
                    .cancel('Cancelar')
                    .targetEvent(ev);
                $mdDialog.show(confirm).then(function() {
                    cambio.update(item, n);
                }, function() {
                    $scope.status = 'Cancelaste aprobar';
                });
            } else {
                if (n == 2) {
                    var confirm = $mdDialog.confirm()
                        .title('Rechazar Orden')
                        .content('¿Está seguro que desea rechazar esta orden?')
                        .ariaLabel('Lucky day')
                        .ok('Rechazar')
                        .cancel('Cancelar')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function() {
                        cambio.update(item, n);
                    }, function() {
                        $scope.status = 'Cancelaste rechazar';
                    });
                }
            }
        } //end show confirm

        //modal para aprobar presupuesto
        function showAdvancedRecibidos(ev, item) {
            $mdDialog.show({
                    controller: DialogController,
                    templateUrl: '/modules/pedidos/views/modalAprobar.client.view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true,
                    resolve: {
                        item: function() {
                            return item;
                        }
                    }
                })
                .then(function(answer) {
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.status = 'You cancelled the dialog.';
                });
        } //end showAdvanced

        // definicion de funciones BottomSheet
        function showBottomSheetRealizadosCompra($event, item) {
            var buttons = [];
            if (item.estado != 'pendiente evaluacion' && this.user.roles[0] != 'compras') {
                buttons.push({
                    name: 'approve',
                    label: 'Aprobado',
                    icon: 'done'
                });
            }

            if (item.estado == 'pendiente evaluacion' && this.user.roles[0] != 'compras') {
                buttons.push({
                    name: 'view1',
                    label: 'Ver',
                    icon: 'visibility'
                });
            } else {
                buttons.push({
                    name: 'view2',
                    label: 'Ver',
                    icon: 'visibility'
                });
            }

            if (item.estado != 'pendiente evaluacion') {
                buttons.push({
                    name: 'clear',
                    label: 'Rechazar',
                    icon: 'delete'
                });
            }

            if ((cambio.user.roles[0] != 'compras') && (cambio.tipoOrden == 'venta')) {
                buttons.push({
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                })
            }

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'approve':
                        showConfirm($event, item, 1);
                        break;
                    case 'view1':
                        evaluar(item);
                        break;
                    case 'view2':
                        $state.go('home.viewPedido', { pedidoId: item._id });
                        break;
                    case 'clear':
                        showConfirm($event, item, 2);
                        break;
                    case 'print':
                        extraerPedido(item, 1);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetRealizadosVenta($event, item) {
            var buttons = [];
            if (item.estado != 'pendiente evaluacion' && this.user.roles[0] != 'compras') {
                buttons.push({
                    name: 'approve',
                    label: 'Aprobado',
                    icon: 'done'
                });
            }

            if (item.estado == 'pendiente evaluacion' && this.user.roles[0] != 'compras') {
                buttons.push({
                    name: 'view1',
                    label: 'Ver',
                    icon: 'visibility'
                });
            } else {
                buttons.push({
                    name: 'view2',
                    label: 'Ver',
                    icon: 'visibility'
                });
            }

            if (item.estado != 'pendiente evaluacion') {
                buttons.push({
                    name: 'clear',
                    label: 'Rechazar',
                    icon: 'delete'
                });
            }

            if ((cambio.user.roles[0] != 'compras') && (cambio.tipoOrden == 'venta')) {
                buttons.push({
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                })
            }

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'approve':
                        showAdvancedRecibidos($event, item);
                        break;
                    case 'view1':
                        evaluar(item);
                        break;
                    case 'view2':
                        $state.go('home.viewPedido', { pedidoId: item._id });
                        break;
                    case 'clear':
                        showConfirm($event, item, 2);
                        break;
                    case 'print':
                        extraerPedido(item, 1);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetRechazados($event, item) {

            var buttons = [{
                    name: 'view',
                    label: 'Ver',
                    icon: 'visibility'
                },
                {
                    name: 'remove',
                    label: 'Anular',
                    icon: 'remove_circle'
                }
            ];

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'view':
                        $state.go('home.viewPedido', { pedidoId: item._id });
                        break;
                    case 'remove':
                        borrarPedido(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetAprobadas($event, item) {

            var buttons = [{
                    name: 'view',
                    label: 'Ver',
                    icon: 'visibility'
                },
                {
                    name: 'remove',
                    label: 'Anular',
                    icon: 'remove_circle'
                },
                {
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                }
            ];

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'view':
                        $state.go('home.viewPedido', { pedidoId: item._id });
                        break;
                    case 'remove':
                        borrarPedido(item);
                        break;
                    case 'print':
                        extraerPedido(item, n = 2);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetBorador($event, item) {
            var buttons = [];
            if ((this.user.roles[0] !== 'compras') && (this.user.roles[0] !== 'ventas') && ((this.user.roles[0] !== 'user') && (item.tipoPedido == 'compra') || (item.tipoPedido == 'venta'))) {
                buttons.push({
                    name: 'discard',
                    label: 'Descartar',
                    icon: 'close'
                });
                buttons.push({
                    name: 'evaluate',
                    label: 'Evaluar',
                    icon: 'call_made'
                })
            }

            buttons.push({
                name: 'view',
                label: 'Ver',
                icon: 'visibility'
            });

            buttons.push({
                name: 'remove',
                label: 'Anular',
                icon: 'delete'
            });

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function(err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'evaluate':
                        showConfirm($event, item, n = 3);
                        break;
                    case 'discard':
                        showConfirm($event, item, n = 4);
                        break;
                    case 'view':
                        $state.go('home.viewPedido', { pedidoId: item._id });
                        break;
                    case 'remove':
                        borrarPedido(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        $scope.sampleAction = function(name, pedido) {
            switch (name) {
                case 'libre':
                    pedido.llamado = true;
                    break;

                case 'ocupado':
                    pedido.llamado = false;
                    break;


            }
            cambio.update(pedido, null);
        };

        // Cambia el estado del pedido
        function update(item, n) {
            console.log(angular.copy(item));
            var pedido = item;
            if (n == 1) {
                pedido.estado = 'aprobada';
            }
            if (n == 2) {
                pedido.estado = 'rechazada';
            }
            if (n == 3) {
                pedido.estado = 'pendiente evaluacion';
            }
            if (n == 4) {
                pedido.deleted = 'true';
            }
            if (n == 5) {
                pedido.estado = 'pendiente aprobacion';
            }
            if (n == 6) {
                pedido.estado = 'borrador';
            }

            /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
             una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
             hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

            if (this.enterprise !== undefined) {
                pedido.enterprise = this.enterprise._id
            } else if ((pedido.enterprise !== undefined) && (pedido.enterprise !== null)) {
                pedido.enterprise = pedido.enterprise._id
            };
            if (this.tipoComprobante !== undefined) {
                pedido.tipoComprobante = this.tipoComprobante._id
            } else if (pedido.tipoComprobante !== undefined) {
                pedido.tipoComprobante = pedido.tipoComprobante._id
            };
            if (item.tipoPedido == 'compra') {
                if ($scope.proveedor !== undefined) {
                    pedido.proveedor = $scope.proveedor._id
                } else if ((pedido.proveedor !== undefined) && (pedido.proveedor !== null)) {
                    pedido.proveedor = pedido.proveedor._id
                };
            } else {
                if ($scope.cliente !== undefined) {
                    pedido.cliente = $scope.cliente._id
                } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) {
                    pedido.cliente = pedido.cliente._id
                };
            }
            if (this.condicionVenta !== undefined) {
                pedido.condicionVenta = this.condicionVenta._id
            } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) {
                pedido.condicionVenta = pedido.condicionVenta._id
            };
            if (this.caja !== undefined) {
                pedido.caja = this.caja._id
            } else if ((pedido.caja !== undefined) && (pedido.caja !== null)) {
                pedido.caja = pedido.caja._id
            };
            $scope.tipoPedido = $stateParams.tipo;
            if ($scope.tipoPedido === undefined) {
                $scope.tipoPedido = pedido.tipoPedido;
            }

            pedido.$update(function() {
                cambio.refresh();
                cambio.montoTotal(cambio.pedidosRealizados, cambio.pedidosAprobados, cambio.pedidosBorrador, cambio.pedidosRechazados);
                $state.go('home.pedidos', { "tipo": $scope.tipoPedido });
                //Socket.emit('pedido.update', pedido);
            }, function(errorResponse) {
                // $scope.error = errorResponse.data.message;
            });

        } //end update

        Socket.on('pedido.update', angular.bind(this, function(message) {
            if (message.enterprise === this.user.enterprise.enterprise) {
                this.refresh();
                montoTotal(this.pedidosRealizados, this.pedidosAprobados, this.pedidosBorrador, this.pedidosRechazados);
            }
        }));

        //suma montos totales de las ordenes
        function montoTotal(pedidosEvaluacion, pedidosRealizados, pedidosAprobados, pedidosBorrador, pedidosRechazados) {

            if (pedidosEvaluacion !== undefined) {
                pedidosEvaluacion.$promise.then(angular.bind(this, function(data) {
                    this.totalPendienteECompra = 0;
                    this.totalPendienteEVenta = 0;
                    for (var i in data) {
                        if ((data[i].estado === 'pendiente evaluacion') && (data[i].tipoPedido === 'compra')) {
                            this.totalPendienteECompra = this.totalPendienteECompra + data[i].total
                        }
                        if ((data[i].estado === 'pendiente evaluacion') && (data[i].tipoPedido === 'venta')) {
                            this.totalPendienteEVenta = this.totalPendienteEVenta + data[i].total
                        }
                    }
                    this.totalPendientesCompra = this.totalPendienteECompra + this.totalPendienteACompra;
                    this.totalPendientesVenta = this.totalPendienteEVenta + this.totalPendienteAVenta;
                }));
            };

            if (pedidosRealizados !== undefined) {
                pedidosRealizados.$promise.then(angular.bind(this, function(data) {
                    this.totalPendienteACompra = 0;
                    this.totalPendienteAVenta = 0;
                    for (var i in data) {
                        if ((data[i].estado === 'pendiente aprobacion') && (data[i].tipoPedido === 'compra')) {
                            this.totalPendienteACompra = this.totalPendienteACompra + data[i].total
                        }
                        if ((data[i].estado === 'pendiente aprobacion') && (data[i].tipoPedido === 'venta')) {
                            this.totalPendienteAVenta = this.totalPendienteAVenta + data[i].total
                        }
                    }
                    this.totalPendientesCompra = this.totalPendienteECompra + this.totalPendienteACompra;
                    this.totalPendientesVenta = this.totalPendienteEVenta + this.totalPendienteAVenta;
                }));
            };

            if (pedidosAprobados !== undefined) {
                pedidosAprobados.$promise.then(angular.bind(this, function(data) {
                    this.totalAprobadasCompra = 0;
                    this.totalAprobadasVenta = 0;

                    for (var i in data) {

                        if ((data[i].estado === 'aprobada') && (data[i].tipoPedido === 'compra')) {
                            this.totalAprobadasCompra = this.totalAprobadasCompra + data[i].total
                        }
                        if ((data[i].estado === 'aprobada') && (data[i].tipoPedido === 'venta')) {
                            this.totalAprobadasVenta = this.totalAprobadasVenta + data[i].total
                        }
                    }
                }));
            };

            if (pedidosBorrador !== undefined) {
                pedidosBorrador.$promise.then(angular.bind(this, function(data) {
                    this.totalBorradorVenta = 0;
                    this.totalBorradorCompra = 0;

                    for (var i in data) {
                        if ((data[i].estado === 'borrador') && (data[i].tipoPedido === 'compra') && (data[i].deleted === false)) {
                            this.totalBorradorCompra = this.totalBorradorCompra + data[i].total
                        }
                        if ((data[i].estado === 'borrador') && (data[i].tipoPedido === 'venta') && (data[i].deleted === false)) {
                            this.totalBorradorVenta = this.totalBorradorVenta + data[i].total
                        }
                    }
                }));
            };

            if (pedidosRechazados !== undefined) {
                pedidosRechazados.$promise.then(angular.bind(this, function(data) {
                    this.totalRechazadasCompra = 0;
                    this.totalRechazadasVenta = 0;

                    for (var i in data) {

                        if ((data[i].estado === 'rechazada') && (data[i].tipoPedido === 'compra')) {
                            this.totalRechazadasCompra = this.totalRechazadasCompra + data[i].total
                        }
                        if ((data[i].estado === 'rechazada') && (data[i].tipoPedido === 'venta')) {
                            this.totalRechazadasVenta = this.totalRechazadasVenta + data[i].total
                        }
                    }
                }));
            };
        }; //end montoTotal

        function soloDomingos(date) {
            var day = date.getDay();
            return day === 4;
        };

        function setNewData(date) {
            // console.log('[+] setNewData fired!');
            var today = this.theDate;
            var first = new Date(today.getFullYear(), 0, 1);
            var theDay = Math.round(((today - first) / 1000 / 60 / 60 / 24) + .5, 0);
            var year = today.getFullYear();
            // calculo semana start
            var target = today;
            var dayNr = (today.getDay() + 6) % 7;
            target.setDate(target.getDate() - dayNr + 3);
            var jan4 = new Date(target.getFullYear(), 0, 4);
            var dayDiff = (target - jan4) / 86400000;
            var weekNr = 1 + Math.ceil(dayDiff / 7);

            // console.log('[+] this.theDate: ', year + '-' + weekNr);
            this.pedidos = Pedidos.query({
                e: this.user.enterprise.enterprise,
                w: weekNr,
                y: year
            }, angular.bind(this, function(data) {
                this.montoTotal(data);
            }))
        };

        function borrarPedido(pedido) {
            pedido.$remove();
            if (pedido.estado == 'aprobada') {
                for (var i in pedidosAprobados) {
                    if (pedidosAprobados[i] === pedido) {
                        pedidosAprobados.splice(i, 1);
                    }
                }
            } else {
                if (pedido.estado == 'rechazada') {
                    for (var i in pedidosRechazados) {
                        if (pedidosRechazados[i] === pedido) {
                            pedidosRechazados.splice(i, 1);
                        }
                    }
                } else {
                    if (pedido.estado == 'borrador') {
                        for (var i in pedidosBorrador) {
                            if (pedidosBorrador[i] === pedido) {
                                pedidosBorrador.splice(i, 1);
                            }
                        }
                    }
                }
            }

        };

        //****PARA LA EXTRACCION DEL PDF

        function extraerPedido(item, n) {
            var promise = asyncAsignarPedido(item);
            promise.then(function(response) {
                // console.log(response);
                if (n == 1) {
                    printIt();
                } else {
                    printItAprobado();
                }

            });
        };

        function asyncAsignarPedido(item) {
            var deferred = $q.defer();
            $scope.pedido = item;
            setTimeout(function() {
                if ($scope.pedido !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        };

        function printIt() {
            var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-pedido').value;
            var c = document.getElementById('printing-data-pedido').innerHTML;
            window.frames["print_frame_pedido"].document.title = 'IM - Pedido';
            window.frames["print_frame_pedido"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_pedido"].window.focus();
            window.frames["print_frame_pedido"].window.print();
        };

        function printItAprobado() {
            var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-pedidoAprobado').value;
            var c = document.getElementById('printing-data-pedidoAprobado').innerHTML;
            window.frames["print_frame_pedidoAprobado"].document.title = 'IM - Pedidos Aprobados';
            window.frames["print_frame_pedidoAprobado"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_pedidoAprobado"].window.focus();
            window.frames["print_frame_pedidoAprobado"].window.print();
        };

        function httpGet(theUrl) {
            var xmlHttp = null;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", theUrl, false);
            xmlHttp.send(null);
            return xmlHttp.responseText;
        };

        function DialogController($scope, $mdDialog, item, $rootScope, Socket, Cajas) {

            $scope.item = item;
            $scope.errorCaja = undefined;

            $scope.cancel = function() {
                $mdDialog.cancel();
            };

            $scope.findCajas = function() {
                $scope.cajas = Cajas.query({ e: item.enterprise._id });
            };

            $scope.finalizarPedido = function(item, fechaE) {
                if (fechaE !== undefined) {
                    item.myDate = fechaE;
                    item.myDateChanged = true;
                }
                var estado = 'aprobada';
                updatePedido(item, estado);
            }

            function updatePedido(pedido, estado) {
                pedido.estado = estado;

                if (pedido.enterprise && pedido.enterprise._id) {
                    pedido.enterprise = pedido.enterprise._id;
                }
                if (pedido.tipoComprobante && pedido.tipoComprobante._id) {
                    pedido.tipoComprobante = pedido.tipoComprobante._id;
                }
                if (pedido.cliente && pedido.cliente._id) {
                    pedido.cliente = pedido.cliente._id
                };
                if (pedido.proveedor && pedido.proveedor._id) {
                    pedido.proveedor = pedido.proveedor._id
                };
                if (pedido.category1 && pedido.category1._id) {
                    pedido.category1 = pedido.category1._id
                };
                pedido.condicionVenta = pedido.condicionVenta._id;
                if (pedido.caja && pedido.caja._id) {
                    pedido.caja = pedido.caja._id;
                }

                $mdDialog.hide();
                Socket.emit('pedido.update', pedido);
            };
        }

        //****FIN EXTRACCION DEL PDF

    } //end function
]);
'use strict';

// Pedidos controller
angular.module('pedidos').controller('PedidosController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Pedidos', 'Enterprises', 'Comprobantes', 'Condicionventas', 'Products', 'Providers', 'Clients', '$mdBottomSheet', '$state', '$mdDialog', '$timeout', '$http', '$filter', 'Modal', 'Contacts', 'Taxconditions', 'Categories', 'Subs', 'Metrics', '$q', 'pedidos', 'tipoOrden', 'tipoPedido',
    function($scope, $rootScope, $stateParams, $location, Authentication, Pedidos, Enterprises, Comprobantes, Condicionventas, Products, Providers, Clients, $mdBottomSheet, $state, $mdDialog, $timeout, $http, $filter, Modal, Contacts, Taxconditions, Categories, Subs, Metrics, $q, pedidos, tipoOrden, tipoPedido) {
        $scope.authentication = Authentication;

        $rootScope.pedidos = pedidos; // asigno los pedidos que ya busque en el resolve de las rutas
        $scope.tipoOrden = tipoOrden;
        $scope.tipoPedido = tipoPedido;

        // $rootScope.$watch('pedidos', function(){
        // 	console.log('pedidos:', pedidos);
        // 	$scope.filtrarPedidos();
        // });

        var url = $location.$$url;

        //variable para filtrar productos por proveedor
        $scope.idProveedor = 0;

        $scope.isFocused = false;

        var created = new Date();
        $scope.created = new Date(created.setTime(created.getTime() + (3 * 60 * 60 * 1000)));

        $scope.buscaP = true;

        $scope.cambioPrecio = false;

        $scope.initAutocomplete = function() {
            $scope.findProductos();
        };

        $scope.nuevoProveedor = Modal.getProveedor();
        // watch for SEARCH to update value
        $scope.$watch('authentication', function() {
            $scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
            //$scope.find();
            // $scope.findComprobante();
            $scope.findComprobantes();
            $scope.findAll();
            // $scope.findAllView();
            $scope.findProveedores();
            $scope.findClientes();
            $scope.findProductos();
            $scope.findCondicionVenta();
            corroboraSiVieneDeStock();
            // var promise = asyncCondicionventas();
            // promise.then(function(greeting) {
            // 	Modal.setCondicionesVentas($scope.condicionVentas);
            // }, function(reason) {
            // 	console.log('Failed: ' + reason);
            // });
        });

        $rootScope.$watch('nuevoProveedor', function() {
            // console.log('watch de nuevo proveedor:', $rootScope.nuevoProveedor);
            if ($rootScope.nuevoProveedor !== undefined) {
                $scope.mostrar = true;
                $scope.proveedor = $rootScope.nuevoProveedor;
                $scope.selectedItemChange($scope.proveedor);
                $rootScope.nuevoProveedor = undefined;
            } else {
                $scope.mostrar = false;
            }
        });

        $rootScope.$watch('nuevoCliente', function() {
            // console.log('watch de nuevo cliente: ', $rootScope.nuevoCliente);
            if ($rootScope.nuevoCliente !== undefined) {
                $scope.mostrar = true;
                $scope.cliente = $rootScope.nuevoCliente;
                $scope.selectedItemChangeClient($scope.cliente);
            } else {
                $scope.mostrar = false;
            };
        });

        $rootScope.$watch('nuevaMateriaPrima', function() {
            // console.log('watch de nueva materia prima: ', $rootScope.nuevaMateriaPrima);
            if ($rootScope.nuevaMateriaPrima !== undefined) {
                $scope.mostrarMateria = true;
                $http({
                        method: 'GET',
                        url: ('/api/products/' + $rootScope.nuevaMateriaPrima._id),
                        params: {}
                    })
                    .then(function(response) {
                        console.log(response.data);
                        $scope.producto = response.data;
                    }, function(response) {
                        console.log('error');
                    });
                console.log($scope.producto);
                // $scope.producto = $rootScope.nuevaMateriaPrima ;
                $scope.selectedItemChangeProduct($scope.producto);
            } else {
                $scope.mostrarMateria = false;
            };
        });

        $rootScope.$watch('nuevoProducto', function() {
            console.log('watch de nuevo producto: ', $rootScope.nuevoProducto);
            if ($rootScope.nuevoProducto !== undefined) {
                $scope.producto = $rootScope.nuevoProducto;
                $scope.mostrarProd = true;
                $http({
                        method: 'GET',
                        url: ('/api/products/' + $rootScope.nuevoProducto._id),
                        params: {}
                    })
                    .then(function(response) {
                        console.log(response.data);
                        $scope.producto = response.data;
                    }, function(response) {
                        console.log('error');
                    });
                console.log($scope.producto);
                $scope.selectedItemChangeProduct($scope.producto);
            } else {
                $scope.mostrarProd = false;
            };
        });

        $scope.myDate = new Date();

        $scope.tipoComprobante = 'Pedido';

        //para que muestre el form de elegir productos solo si eligio proveedor/cliente
        $scope.mostrarForm = false;

        //para que muestre el form para agregar productos en una orden creada
        $scope.verForm = false;
        $scope.verEdicion = [];

        $scope.productoPedido = { cantidad: undefined, descuento: undefined, observaciones: '' };

        //para que muestre el form de elegir productos solo si eligio proveedor/cliente
        $scope.mostrarForm = false;

        //deshabilita el select de proveedor/cliente cuando se agregan productos a la orden
        $scope.deshabilitarProveedor = false;
        $scope.deshabilitarCliente = false;

        //variable para filtrar productos por proveedor
        $scope.idProveedor = 0;

        $scope.productoEditado = [];
        $scope.todosPedidos = [];

        //controla si el producto esta siendo ingresado para ver si lo borra o no al cambiar el proveedor
        $scope.tipeando = false;

        //se pone en true cuando se elige un proveedor para mostrar sus productos asociados
        $scope.mostrarProductosP = false;
        $scope.mostrarProductosC = false;

        $scope.verAprobadas = 0;
        $scope.verRechazadas = 0;

        $scope.subtotal = 0;
        $scope.descuentoPorcentaje = 0;
        $scope.descuentoValor = 0;
        $scope.neto = 0;
        $scope.tax1 = 0;
        $scope.tax2 = 0;
        $scope.tax3 = 0;
        $scope.totalTax = 0;

        function corroboraSiVieneDeStock() {
            if ($rootScope.productosAPedir !== undefined) {
                $rootScope.productosAgregados = $rootScope.productosAPedir;
                var total = 0;
                for (var i = $rootScope.productosAgregados.length - 1; i >= 0; i--) {
                    var resultado = calcularSubtotal($rootScope.productosAgregados[i], 'compra');
                    console.log(resultado);
                    total = total + resultado;
                };
                $scope.total = parseFloat(total) + $scope.totalTax;
                $scope.selectedItemChange($rootScope.providerStock);
            } else {
                $rootScope.productosAgregados = [];
                $scope.total = parseFloat(0);
            }
        };

        //calculo de numero de comprobante
        $scope.actualizarN = function() {
            $scope.numero = parseInt($scope.tipoComprobante.ultimoNumero) + 1;
        };

        //abre modal para eliminar productos de la orden creada (en view pedido)
        $scope.showConfirm2 = function(ev, item, pedido) {
            var confirm = $mdDialog.confirm()
                .title('Eliminar productos')
                .content('¿Está seguro que desea eliminar este producto de la orden?')
                .ariaLabel('Lucky day')
                .ok('Eliminar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(function() {
                $scope.quitarProducto(item, pedido);
            }, function() {
                console.log('cancelaste eliminar');
            });
        };


        //borra productos de una orden creada (en view pedido)
        $scope.quitarProducto = function(p, pedido) {
            var tipoPedido = pedido.tipoPedido;
            var subt = 0;
            var iva = 0;
            var descProd = 0; //descuento del producto
            var descGen = 0; //descuento del proveedor
            var tax1 = 0;
            var tax2 = 0;
            var tax3 = 0;
            var totalIva = 0;
            if (tipoPedido == 'compra') {
                descProd = parseFloat((p.product.costPerUnit * p.cantidad) * p.descuento / 100);
                subt = parseFloat((p.product.costPerUnit * p.cantidad) - descProd); //subtotal de solo ese prod
            };
            if (tipoPedido == 'venta') {
                descProd = parseFloat((p.product.unitPrice * p.cantidad) * p.descuento / 100);
                subt = parseFloat((p.product.unitPrice * p.cantidad) - descProd); //subtotal de solo ese prod
            };
            descGen = parseFloat((subt * pedido.descuentoPorcentaje) / 100);
            iva = p.product.tax;
            if (iva == 10.5) {
                tax1 = parseFloat(subt * 10.5 / 100);
                pedido.tax1 = parseFloat(pedido.tax1 - tax1);
            }
            if (iva == 21) {
                tax2 = parseFloat(subt * 21 / 100);
                pedido.tax2 = parseFloat(pedido.tax2 - tax2);
            }
            if (iva == 27) {
                tax3 = parseFloat(subt * 27 / 100);
                pedido.tax3 = parseFloat(pedido.tax3 - tax3);
            }
            pedido.neto = parseFloat(pedido.neto - (subt - descGen));
            pedido.subtotal = parseFloat(pedido.subtotal - subt);
            totalIva = (subt - descGen + tax1 + tax2 + tax3);
            pedido.descuentoValor = parseFloat(pedido.descuentoValor - descGen);
            pedido.total = pedido.total - totalIva;
            pedido.totalTax = pedido.totalTax - tax1 - tax2 - tax3;
            for (var i = 0; i < pedido.products.length; i++) {
                if (pedido.products[i]._id === p._id) {
                    pedido.products.splice(i, 1);
                }
            }
            $scope.updateOrden(pedido);
        };

        // actualiza orden creada si se eliminaron o agregaron productos (en view pedido)
        $scope.updateOrden = function(pedido) {

            /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
            una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
            hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

            if (pedido.enterprise !== undefined) { pedido.enterprise = pedido.enterprise._id } else { pedido.enterprise = pedido.enterprise._id };
            if (pedido.tipoComprobante !== undefined) { pedido.tipoComprobante = pedido.tipoComprobante._id } else if ((pedido.tipoComprobante !== undefined) && (pedido.tipoComprobante !== null)) { pedido.tipoComprobante = pedido.tipoComprobante._id };
            if (pedido.tipoPedido == 'compra') {
                if (pedido.proveedor !== undefined) { pedido.proveedor = pedido.proveedor._id } else if ((pedido.proveedor !== undefined) && (pedido.proveedor !== null)) { pedido.proveedor = pedido.proveedor._id };
            } else {
                if (pedido.cliente !== undefined) { pedido.cliente = pedido.cliente._id } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) { pedido.cliente = pedido.cliente._id };
            }
            if (pedido.condicionVenta !== undefined) { pedido.condicionVenta = pedido.condicionVenta._id } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) { pedido.condicionVenta = pedido.condicionVenta._id };
            if (pedido.category1 !== undefined) { pedido.category1 = pedido.category1._id } else if ((pedido.category1 !== undefined) && (pedido.category1 !== null)) { pedido.category1 = pedido.category1._id };

            pedido.$update(function() {
                $location.path('pedidos/view/' + pedido._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
            $scope.verForm = false;
        };

        //Habilita el form para agregar productos a una orden existente (en view pedido)
        $scope.habilitarForm = function(pedido) {
            $scope.verForm = true;
            if (pedido.tipoPedido === 'compra') {
                $scope.provId = pedido.proveedor._id;
            }
        };

        //Habilita el form para editar productos de una orden existente (en view pedido)
        $scope.habilitarEdicion = function(index) {
            $scope.verEdicion[index] = true;
        }

        //oculto formularios de agregar productos / editar productos en view pedido
        $scope.cancelarEdiciones = function() {
            $scope.verForm = false;
            $scope.verEdicion = false;
        }

        $scope.cambiarPrecio = function() {
            $scope.cambioPrecio = true;
        }

        $scope.editProducto = function(p, pedido, index) {
            console.log(p.product.provider.impuesto1);
            // var impuestos = p.product.provider
            var total = 0;
            var subtotal = 0;
            var desc = 0;
            var iva = 0;
            $scope.verEdicion = false;
            p.subtotal = p.cantidad * p.product.costPerUnit;
            var descuento = (p.subtotal * p.descuento) / 100;
            p.total = p.subtotal - descuento;
            for (var i in pedido.products) {
                subtotal = subtotal + pedido.products[i].total;
                if (pedido.products[i].product.tax != 1) {
                    iva = iva + ((pedido.products[i].subtotal) * (pedido.products[i].product.tax) / 100)
                }
            }
            pedido.subtotal = subtotal;
            pedido.descuentoValor = (subtotal * pedido.descuentoPorcentaje) / 100;
            pedido.neto = subtotal - pedido.descuentoValor;
            pedido.totalTax = iva;
            pedido.total = pedido.neto + pedido.totalTax;
            if (pedido.estado == 'pendiente evaluacion') {
                var n = 3;
            }
            if (pedido.estado == 'pendiente aprobacion') {
                var n = 5;
            }
            if (pedido.estado == 'borrador') {
                var n = 6;
            }
            $scope.verEdicion = [];
            $scope.updatePedido(pedido, n, p)
        }

        $scope.modificarPrecioProducto = function(p) {
            // $rootScope.products = $scope.products;
            for (var i in $scope.products) {
                if ($scope.products[i]._id === p._id) {
                    var cost = p.costPerUnit;
                    p = $scope.products[i];
                    var product = new Products({
                        _id: p._id,
                        name: p.name,
                        description: p.description,
                        code: p.code,
                        //picture: this.picture || undefined,
                        brandName: p.brandName,
                        unitPrice: cost,
                        costPerUnit: cost,
                        // sku: p.sku,
                        discontinued: p.discontinued,
                        provider: p.provider._id,
                        quantityPerUnit: p.quantityPerUnit,
                        unitsInStock: p.unitsInStock,
                        idealStock: p.idealStock,
                        criticalStock: p.criticalStock,
                        unitsOnOrder: p.unitsOnOrder,
                        storedIn: p.storedIn,
                        metric: p.metric,
                        reseller: p.reseller,
                        visible: p.visible,
                        esProducto: p.esProducto,
                        esMateriaPrima: p.esMateriaPrima,
                        esInsumo: p.esInsumo,
                        //rawMaterial: p.rawMaterial,
                        tax: p.tax,
                        enterprise: p.enterprise,
                        sub: p.sub._id,
                        category1: p.category1,
                        category2: p.category2
                    });

                    product.enterprise = product.enterprise._id;
                    if ((product.sub !== undefined) && (product.sub !== null)) { product.sub = product.sub._id };
                    if ((product.category1 !== undefined) && (product.category1 !== null)) { product.category1 = product.category1._id };
                    if ((product.category2 !== undefined) && (product.category2 !== null)) { product.category2 = product.category2 ? product.category2._id : undefined };
                    if ((product.provider !== undefined) && (product.provider !== null)) { product.provider = product.provider._id };
                    // if ((product.tax!==undefined)&&(product.tax!==null)) { product.tax = product.tax };
                    // if ((product.metric!==undefined)&&(product.metric!==null)){ product.metric = product.metric };
                    // console.log(product, 'product');

                    product.$update(function(response) {
                        console.log('actualice bien');
                    }, function(errorResponse) {
                        $scope.error = errorResponse.data.message;
                    });
                }
            }
        }

        $scope.updatePedido = function(item, n, p) {

            if ($scope.cambioPrecio === true) {
                $scope.modificarPrecioProducto(p.product);
                $scope.cambioPrecio = false;
            }

            var pedido = item;
            if (n == 1) {
                pedido.estado = 'aprobada'
            }
            if (n == 2) {
                pedido.estado = 'rechazada'
            }
            if (n == 3) {
                pedido.estado = 'pendiente evaluacion'
            }
            if (n == 4) {
                pedido.deleted = 'true'
            }
            if (n == 5) {
                pedido.estado = 'pendiente aprobacion'
            }
            if (n == 6) {
                pedido.estado = 'borrador'
            }

            /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
            una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
            hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

            if (this.enterprise && this.enterprise._id) { pedido.enterprise = this.enterprise._id } else if ((pedido.enterprise !== undefined) && (pedido.enterprise !== null)) { pedido.enterprise = pedido.enterprise._id };
            if (this.tipoComprobante && this.tipoComprobante._id) { pedido.tipoComprobante = this.tipoComprobante._id } else if (pedido.tipoComprobante !== undefined) { pedido.tipoComprobante = pedido.tipoComprobante._id };
            if (item.tipoPedido == 'compra') {
                if ($scope.proveedor && $scope.proveedor._id) { pedido.proveedor = $scope.proveedor._id } else if ((pedido.proveedor !== undefined) && (pedido.proveedor !== null)) { pedido.proveedor = pedido.proveedor._id };
            } else {
                if ($scope.cliente && $scope.cliente._id) { pedido.cliente = $scope.cliente._id } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) { pedido.cliente = pedido.cliente._id };
            }
            if (this.condicionVenta && this.condicionVenta._id) { pedido.condicionVenta = this.condicionVenta._id } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) { pedido.condicionVenta = pedido.condicionVenta._id };
            if (this.category1 && this.category1._id) { pedido.category1 = this.category1._id } else if ((pedido.category1 !== undefined) && (pedido.category1 !== null)) { pedido.category1 = pedido.category1._id };

            $scope.tipoPedido = $stateParams.tipo;
            pedido.$update(function() {
                // console.log('bien')
            }, function(errorResponse) {
                // $scope.error = errorResponse.data.message;
            });
        };


        //Agrega productos a una orden existente (en view pedido)
        $scope.sumarProducto = function(producto, productoPedido, pedido) {
            $scope.clicked = false;
            $scope.errorProd = undefined;
            var tipoPedido = pedido.tipoPedido;
            var p = { product: {}, cantidad: undefined, descuento: undefined, total: undefined, subtotal: undefined, observaciones: undefined };
            if (producto != undefined) {
                if (producto.total == undefined) {
                    producto.total = 0;
                }
                p.product = producto;
                p.cantidad = productoPedido.cantidad;
                if (productoPedido.descuento == undefined) {
                    p.descuento = 0;
                } else {
                    p.descuento = productoPedido.descuento;
                }
                if (productoPedido.observaciones == undefined) {
                    p.observaciones = '';
                } else {
                    p.observaciones = productoPedido.observaciones;
                }
                p.total = 0;
                p.subtotal = 0;
                var resultado = recalcularSubtotal(p, tipoPedido, pedido);
                p.total = p.total + resultado;
                pedido.products.push(p);
                $scope.updateOrden(pedido);
                productoPedido = undefined;
                producto = undefined;
                p = undefined;
                $scope.productoPedido = { cantidad: undefined, descuento: undefined, observaciones: '' };
                $scope.stockD = false;
            } else {
                return 0;
            }
            $scope.updateOrden(pedido);
        };

        //calcula valores en una orden ya creada (en view pedido)
        var recalcularSubtotal = function(p, tipo, pedido) {
            var total = 0;
            var descuentoPorcentaje = p.descuento;
            if (tipo == 'compra') {
                var precio = parseFloat(p.product.costPerUnit);
            } else {
                var precio = parseFloat(p.product.unitPrice);
            }
            var cant = parseFloat(p.cantidad);
            var subtotal = parseFloat(precio * cant); //subtotal de producto sin descuentos
            var descuentoValor = subtotal * descuentoPorcentaje / 100; //valor del descuento del producto
            p.subtotal = subtotal;
            total = subtotal - descuentoValor; //total producto con descuento incluido
            pedido.subtotal = pedido.subtotal + total;
            pedido.descuentoValor = pedido.subtotal * pedido.descuentoPorcentaje / 100;
            pedido.neto = pedido.subtotal - pedido.descuentoValor;
            if (p.product.tax == 10.5) {
                pedido.tax1 = pedido.tax1 + (total * 10.5 / 100);
            }
            if (p.product.tax == 21) {
                pedido.tax2 = pedido.tax2 + (total * 21 / 100);
            }
            if (p.product.tax == 27) {
                pedido.tax3 = pedido.tax3 + total * 27 / 100;
            }
            pedido.total = pedido.neto + pedido.tax1 + pedido.tax2 + pedido.tax3;
            pedido.totalTax = pedido.tax1 + pedido.tax2 + pedido.tax3;
            return total;
        }

        //Trae el % de descuento del proveedor seleccionado, y vuelve a calcular valores si el % cambio

        $scope.descProveedor = function() {
            if (($scope.proveedor !== null) && ($scope.proveedor !== undefined)) {
                $scope.idProveedor = $scope.proveedor._id;
                $scope.errorProv = undefined;
            } else {
                $scope.idProveedor = 0;
            }
            if ((this.producto !== undefined) && (this.producto !== null) && ($scope.tipeando === false)) {
                this.producto = undefined;
                $scope.textToSearch2 = undefined;
            }
        };

        //Trae el % de descuento para el cliente seleccionado, y vuelve a calcular valores si el % cambio
        $scope.descCliente = function() {
            $scope.errorCliente = undefined;
            $scope.mostrarForm = true;
            $scope.mostrarProductosC = false;
            $scope.mostrarProductosP = false;
            if ($scope.cliente.productosAsociados.length == 0) {
                $scope.mostrarProductosC = false;
            } else {
                $scope.mostrarProductosC = true;
            }
            $scope.descuentoPorcentaje = $scope.cliente.discountRate;
            if ($scope.subtotal == 0) {
                return 0;
            } else {
                $scope.descuentoValor = $scope.subtotal * $scope.descuentoPorcentaje / 100;
                $scope.neto = $scope.subtotal - $scope.descuentoValor;
                $scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3;
                $scope.totalTax = $scope.tax1 + $scope.tax2 + $scope.tax3;
            }
        };

        //agrega producto seleccionado de la lista de productos frecuentes
        $scope.agregar = function(item) {
            $scope.producto = item;
            item = undefined;
        };

        //si presiona enter
        $scope.sendProduct = function($event, productoPedido, producto) {
            if ($event.keyCode === 13) {
                $event.preventDefault();
                $scope.isFocused = true;
                if ((producto === null) || (producto === undefined)) {
                    $scope.mensajeP = 'No seleccionaste un producto valido';
                } else {
                    if ($scope.tipoPedido === 'venta') {
                        if ((productoPedido.cantidad === null) || (productoPedido.cantidad === undefined) || (producto.unitsInStock === 0)) {
                            if (producto.unitsInStock === 0) {
                                $scope.mensajeP = 'No hay stock disponible';
                            } else {
                                if ((productoPedido.cantidad === null) || (productoPedido.cantidad === undefined)) {
                                    $scope.mensajeP = 'No seleccionaste una cantidad para el producto';
                                }
                            }
                        } else {
                            $scope.controlStock(producto);
                            if ($scope.stockD == true) {
                                /*console.log('no tengo suficiente stock');*/
                                //no hay suficiente stock
                            } else {
                                $scope.stockD == false;
                                $scope.mensajeP = undefined;
                                $scope.producto = producto;
                                $scope.agregarProducto(producto, productoPedido);
                            }
                        }
                    } else {
                        $scope.mensajeP = undefined;
                        if (productoPedido === undefined) {
                            productoPedido = { cantidad: 0 }
                        }
                        if ((productoPedido.cantidad === null) || (productoPedido.cantidad === undefined) || (productoPedido.cantidad === 0)) {
                            $scope.mensajeP = 'No seleccionaste una cantidad para el producto';
                        } else {
                            $scope.mensajeP = undefined;
                            $scope.agregarProducto(producto, productoPedido);
                        }
                    }
                };
            }
        };

        $scope.controlStock = function(p) {
            /*console.log('entre control de stock');
            console.log(p, 'producto que llega');*/
            $scope.mensajeP = undefined;
            if ($scope.productoPedido.cantidad > p.unitsInStock) {
                console.log(p.unitsInStock, 'unidades en stock del producto')
                $scope.stockD = true;
                $scope.productoPedido.cantidad = p.unitsInStock;
            } else {
                $scope.stockD = false;
            }
            // console.log($scope.stockD, 'stockD');
        };

        //Agrega a un arreglo los productos que va seleccionando
        $scope.agregarProducto = function(producto, productoPedido) {
            $scope.deshabilitarProveedor = true;
            $scope.deshabilitarCliente = true;
            $scope.clicked = false;
            $scope.errorProd = undefined;
            var tipoPedido = this.tipoPedido;
            var p = { product: {}, cantidad: undefined, descuento: undefined, total: undefined, subtotal: undefined, observaciones: undefined };
            if (producto != undefined) {
                if (producto.total == undefined) {
                    producto.total = 0;
                }
                p.product = producto;
                p.cantidad = productoPedido.cantidad;
                if (productoPedido.descuento == undefined) {
                    p.descuento = 0;
                } else {
                    p.descuento = productoPedido.descuento;
                }
                if (productoPedido.observaciones == undefined) {
                    p.observaciones = '';
                } else {
                    p.observaciones = productoPedido.observaciones;
                }
                p.total = 0;
                p.subtotal = 0;
                var resultado = calcularSubtotal(p, tipoPedido);
                p.total = p.total + resultado;
                $rootScope.productosAgregados.push(p);
                this.producto = undefined;
                $scope.producto = undefined;
                productoPedido = undefined;
                p = undefined;
                $scope.productoPedido = { cantidad: undefined, descuento: undefined, observaciones: '' };
                this.productoCompra.cantidad = undefined;
                this.productoCompra.descuento = undefined;
                this.productoCompra.observaciones = undefined;
                $scope.selectedProduct = [];
                $scope.selectedItem = null;
                $scope.textToSearch2 = '';
                $scope.stockD = false;
                document.getElementById("buscaP").focus();
                document.getElementById("buscaP").value = '';
            } else {
                return 0;
            }
        };

        $scope.reverse = function(array) {
            var copy = [].concat(array);
            return copy.reverse();
        }

        //autocomplete
        $scope.selectedProduct = [];
        $scope.selectedItem = null;
        $scope.textToSearch2 = null;

        var calcularSubtotal = function(p, pedido) {
            var total = 0;
            var descuentoPorcentaje = p.descuento;
            if (pedido == 'compra') {
                var precio = parseFloat(p.product.costPerUnit);
            } else {
                var precio = parseFloat(p.product.unitPrice);
            }
            var cant = parseFloat(p.cantidad);
            var subtotal = parseFloat(precio * cant); //subtotal de producto sin descuentos
            var descuentoValor = subtotal * descuentoPorcentaje / 100; //valor del descuento del producto
            p.subtotal = subtotal;
            total = subtotal - descuentoValor; //total producto con descuento incluido
            $scope.subtotal = $scope.subtotal + total;
            $scope.descuentoValor = $scope.subtotal * $scope.descuentoPorcentaje / 100;
            $scope.neto = $scope.subtotal - $scope.descuentoValor;
            if (p.product.tax == 10.5) {
                $scope.tax1 = $scope.tax1 + (total * 10.5 / 100);
            }
            if (p.product.tax == 21) {
                $scope.tax2 = $scope.tax2 + (total * 21 / 100);
            }
            if (p.product.tax == 27) {
                $scope.tax3 = $scope.tax3 + total * 27 / 100;
            }
            $scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3;
            $scope.totalTax = $scope.tax1 + $scope.tax2 + $scope.tax3;
            return total;
        }

        $scope.cantProductos = function() {
            if ($rootScope.productosAgregados.length > 0) { return true; }
        }

        $scope.clickSubmit = function(n) {
            // console.log(n, 'n');
            $scope.clicked = true;
            $scope.create(n);
        };

        // Create new Pedido
        $scope.create = function(n) {
            if ($scope.clicked === true) {
                // console.log(this.category1, 'cat');
                console.log("##################");
                console.log($scope.authentication);
                if (($scope.numero !== undefined) && ($scope.numero !== '')) {
                    if (($scope.tipoComprobante !== undefined) && ($scope.tipoComprobante !== '')) {
                        if (($scope.tipoPedido !== undefined) && ($scope.tipoPedido !== '')) {
                            if ($scope.tipoPedido === 'compra') {
                                if ($scope.productosAgregados.length !== 0) {
                                    if (($scope.proveedor !== undefined) || (this.proveedor != undefined) || ($rootScope.nuevoProveedor !== undefined)) {
                                        if (($scope.condicionVenta !== undefined) && ($scope.condicionVenta !== '')) {
                                            if (($scope.proveedor !== undefined) || (this.proveedor != undefined) || ($rootScope.nuevoProveedor !== undefined)) {
                                                if (this.proveedor !== undefined) {
                                                    var proveedor = this.proveedor;
                                                } else {
                                                    var proveedor = $rootScope.nuevoProveedor;
                                                };
                                                if (n === 1) {
                                                    var state = 'borrador';
                                                } else {
                                                    var state = 'pendiente evaluacion';
                                                }
                                                // console.log(state, 'state');
                                                var pedido = new Pedidos({
                                                    numero: this.numero,
                                                    tipoPedido: this.tipoPedido,
                                                    tipoComprobante: this.tipoComprobante,
                                                    estado: state,
                                                    products: $rootScope.productosAgregados,
                                                    category1: this.category1 ? this.category1._id : undefined,
                                                    puesto: $scope.authentication.user.puesto,
                                                    proveedor: proveedor._id,
                                                    observaciones: this.observaciones,
                                                    subtotal: this.subtotal,
                                                    descuentoPorcentaje: this.descuentoPorcentaje,
                                                    descuentoValor: this.descuentoValor,
                                                    neto: this.neto,
                                                    tax1: this.tax1,
                                                    tax2: this.tax2,
                                                    tax3: this.tax3,
                                                    totalTax: this.totalTax,
                                                    total: this.total,
                                                    myDate: this.myDate,
                                                    created: $scope.created,
                                                    condicionVenta: this.condicionVenta._id,
                                                    enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
                                                });
                                            }
                                        } else {
                                            $scope.errorCondicion = 'Se debe seleccionar una condicion de compra';
                                        }
                                    } else {
                                        $scope.errorProveedor = 'Se debe seleccionar un proveedor';
                                    }
                                } else {
                                    $scope.errorProd = 'Se deben seleccionar productos para la orden de compra';
                                }
                            } else {
                                if ($scope.productosAgregados.length !== 0) {
                                    if (($scope.cliente !== undefined) && ($scope.cliente !== null)) {
                                        if (($scope.condicionVenta !== undefined) && ($scope.condicionVenta !== '')) {
                                            if (n === 1) {
                                                var state = 'borrador';
                                            } else {
                                                var state = 'pendiente evaluacion';
                                            }
                                            $scope.created = new Date($scope.created.setTime($scope.created.getTime() + (3 * 60 * 60 * 1000)));
                                            var pedido = new Pedidos({
                                                numero: parseInt(this.numero),
                                                tipoPedido: this.tipoPedido,
                                                tipoComprobante: this.tipoComprobante,
                                                estado: state,
                                                category1: this.category1 ? this.category1._id : undefined,
                                                puesto: $scope.authentication.user.puesto,
                                                products: $rootScope.productosAgregados,
                                                cliente: $scope.cliente._id,
                                                delivery: this.delivery,
                                                observaciones: this.observaciones,
                                                subtotal: this.subtotal,
                                                descuentoPorcentaje: this.descuentoPorcentaje,
                                                descuentoValor: this.descuentoValor,
                                                neto: this.neto,
                                                tax1: this.tax1,
                                                tax2: this.tax2,
                                                tax3: this.tax3,
                                                totalTax: this.totalTax,
                                                total: this.total,
                                                myDate: this.myDate,
                                                created: $scope.created,
                                                condicionVenta: this.condicionVenta._id,
                                                enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
                                            });
                                        } else {
                                            $scope.errorCondicion = 'Se debe seleccionar una condicion de venta';
                                        }
                                    } else {
                                        $scope.errorCliente = 'Se debe seleccionar un cliente';
                                    }
                                } else {
                                    $scope.errorProd = 'Se deben seleccionar productos para la orden de venta';
                                }
                            }

                            if (pedido !== undefined) {
                                pedido.$save(function(response) {
                                    if (response._id) {
                                        pedido._id = response._id;
                                        $rootScope.pedidos.unshift(pedido);
                                    }

                                    $state.go('home.pedidos', { "tipo": $scope.tipoPedido });

                                    // Clear form fields
                                    $scope.numero = 0;
                                    $scope.tipoPedido = '';
                                    $scope.tipoComprobante = '';
                                    $scope.observaciones = '';
                                    $scope.subtotal = 0;
                                    $scope.descuentoPorcentaje = 0;
                                    $scope.descuentoValor = 0;
                                    $scope.neto = 0;
                                    $scope.tax1 = 0;
                                    $scope.tax2 = 0;
                                    $scope.tax3 = 0;
                                    $scope.total = 0;
                                    $scope.condicionVenta = '';

                                    //destruir los $rootScope

                                    $rootScope.nuevoProveedor = undefined;
                                    $rootScope.nuevoCliente = undefined;
                                    $rootScope.nuevaMateriaPrima = undefined;
                                    $rootScope.nuevoProducto = undefined;
                                    $rootScope.provider = undefined;


                                }, function(errorResponse) {
                                    $scope.error = errorResponse.data.message;
                                });

                            }
                        } else {
                            $scope.errorPedido = 'Se debe seleccionar un tipo de orden';
                        };
                    } else {
                        $scope.errorTipoComprobante = 'Se debe seleccionar un tipo de Comprobante';
                    };
                } else {
                    $scope.errorNumero = 'Se debe indicar un numero para la orden';
                };
            } else {
                //controlar que no se cree con el enter
            };
        };

        //saca carteles de error cuando cambia de compra a venta y al reves
        $scope.apagarAvisos = function() {
            $scope.errorPedido = undefined;
            $scope.errorCliente = undefined;
            $scope.errorProveedor = undefined;
            $scope.errorProd = undefined;
            $scope.errorCondicion = undefined;
        }

        //Habilita form para editar producto
        $scope.editar = function(index) {
            $scope.productoEditado[index] = true;
        }

        //edita un producto
        $scope.editarProducto = function(index, p) {
            var tipoPedido = this.tipoPedido;
            var subt = 0;
            var tax1 = 0;
            var tax2 = 0;
            var tax3 = 0;
            if (tipoPedido == 'venta') {
                var descuento = p.product.unitPrice * p.descuento / 100;
                p.subtotal = p.cantidad * p.product.unitPrice;
                p.total = p.cantidad * (p.product.unitPrice - descuento);
            };
            if (tipoPedido == 'compra') {
                var descuento = p.product.costPerUnit * p.descuento / 100;
                p.subtotal = p.cantidad * p.product.costPerUnit;
                p.total = p.cantidad * (p.product.costPerUnit - descuento);
            };
            $rootScope.productosAgregados[index] = p;
            for (var i = 0; i < $rootScope.productosAgregados.length; i++) {
                subt = subt + $rootScope.productosAgregados[i].total;
                var iva = $rootScope.productosAgregados[i].product.tax;
                if (iva == 10.5) {
                    tax1 = tax1 + $rootScope.productosAgregados[i].total * 10.5 / 100;
                }
                if (iva == 21) {
                    tax2 = tax2 + $rootScope.productosAgregados[i].total * 21 / 100;
                }
                if (iva == 27) {
                    tax3 = tax3 + $rootScope.productosAgregados[i].total * 27 / 100;
                }
            }
            $scope.descuentoValor = subt * $scope.descuentoPorcentaje / 100;
            $scope.subtotal = subt;
            $scope.neto = subt - $scope.descuentoValor;
            $scope.tax1 = tax1;
            $scope.tax2 = tax2;
            $scope.tax3 = tax3;
            $scope.total = $scope.neto + $scope.tax1 + $scope.tax2 + $scope.tax3;
            this.p = undefined;
            $scope.productoEditado[index] = false;
        };

        //Elimina un producto del arreglo de productos
        $scope.borrarProducto = function(producto) {
            var tipoPedido = this.tipoPedido;
            var subt = 0;
            var iva = 0;
            var descProd = 0; //descuento del producto
            var descGen = 0; //descuento del proveedor
            var tax1 = 0;
            var tax2 = 0;
            var tax3 = 0;
            var totalIva = 0;
            if (tipoPedido == 'compra') {
                descProd = parseFloat((producto.product.costPerUnit * producto.cantidad) * producto.descuento / 100);
                subt = parseFloat((producto.product.costPerUnit * producto.cantidad) - descProd); //subtotal de solo ese prod
            };
            if (tipoPedido == 'venta') {
                descProd = parseFloat((producto.product.unitPrice * producto.cantidad) * producto.descuento / 100);
                subt = parseFloat((producto.product.unitPrice * producto.cantidad) - descProd); //subtotal de solo ese prod
            };
            descGen = parseFloat((subt * $scope.descuentoPorcentaje) / 100);
            iva = producto.product.tax;
            if (iva == 10.5) {
                tax1 = parseFloat(subt * 10.5 / 100);
                $scope.tax1 = parseFloat($scope.tax1 - tax1);
            }
            if (iva == 21) {
                tax2 = parseFloat(subt * 21 / 100);
                $scope.tax2 = parseFloat($scope.tax2 - tax2);
            }
            if (iva == 27) {
                tax3 = parseFloat(subt * 27 / 100);
                $scope.tax3 = parseFloat($scope.tax3 - tax3);
            }
            $scope.neto = parseFloat($scope.neto - (subt - descGen));
            $scope.subtotal = parseFloat($scope.subtotal - subt);
            totalIva = (subt - descGen + tax1 + tax2 + tax3);
            $scope.descuentoValor = parseFloat($scope.descuentoValor - descGen);
            $scope.total = $scope.total - totalIva;
            $scope.totalTax = $scope.totalTax - tax1 - tax2 - tax3;
            $rootScope.productosAgregados.splice(producto, 1);
            if ($rootScope.productosAgregados.length == 0) {
                $scope.deshabilitarProveedor = false;
                $scope.deshabilitarCliente = false;
            }
        };

        // Remove existing Pedido
        $scope.remove = function(pedido) {
            if (pedido) {
                pedido.$remove();

                for (var i in $scope.pedidos) {
                    if ($scope.pedidos[i] === pedido) {
                        $scope.pedidos.splice(i, 1);
                    }
                }
            } else {
                $scope.pedido.$remove(function() {
                    $location.path('pedidos');
                });
            }
        };


        //abre modal para confirmar/rechazar ordenes pendientes
        $scope.showConfirm = function(ev, item, n) {
            if (n == 1) {
                var confirm = $mdDialog.confirm()
                    .title('Aprobar Orden')
                    .content('¿Está seguro que desea aprobar esta orden?')
                    .ariaLabel('Lucky day')
                    .ok('Aprobar')
                    .cancel('Cancelar')
                    .targetEvent(ev);
                $mdDialog.show(confirm).then(function() {
                    $scope.update(item, n);
                }, function() {
                    $scope.status = 'Cancelaste aprobar';
                });
            } else {
                if (n == 2) {
                    var confirm = $mdDialog.confirm()
                        .title('Rechazar Orden')
                        .content('¿Está seguro que desea rechazar esta orden?')
                        .ariaLabel('Lucky day')
                        .ok('Rechazar')
                        .cancel('Cancelar')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function() {
                        $scope.update(item, n);
                    }, function() {
                        $scope.status = 'Cancelaste rechazar';
                    });
                } else {
                    if (n == 3) {
                        console.log('entre 3');
                        var confirm = $mdDialog.confirm()
                            .title('Evaluar Orden')
                            .content('¿Está seguro que desea enviar la orden a evaluar?')
                            .ariaLabel('Lucky day')
                            .ok('Evaluar')
                            .cancel('Cancelar')
                            .targetEvent(ev);
                        $mdDialog.show(confirm).then(function() {
                            $scope.update(item, n);
                        }, function() {
                            $scope.status = 'Cancelaste evaluar';
                        });
                    } else {
                        if (n == 4) {
                            console.log('entre 4');
                            var confirm = $mdDialog.confirm()
                                .title('Descartar Orden')
                                .content('¿Está seguro que desea descartar esta orden?')
                                .ariaLabel('Lucky day')
                                .ok('Descartar')
                                .cancel('Cancelar')
                                .targetEvent(ev);
                            $mdDialog.show(confirm).then(function() {
                                $scope.update(item, n);
                            }, function() {
                                $scope.status = 'Cancelaste descartar';
                            });
                        }
                    }
                }
            }
        };

        $scope.evaluar = function(item) {
            var pedido = item;
            pedido.estado = 'pendiente aprobacion';

            if (this.enterprise !== undefined) { pedido.enterprise = this.enterprise._id } else if ((pedido.enterprise !== undefined) && (pedido.enterprise !== null)) { pedido.enterprise = pedido.enterprise._id };
            if (this.tipoComprobante !== undefined) { pedido.tipoComprobante = this.tipoComprobante._id } else if (pedido.tipoComprobante !== undefined) { pedido.tipoComprobante = pedido.tipoComprobante._id };
            if (item.tipoPedido == 'compra') {
                if ($scope.proveedor !== undefined) { pedido.proveedor = $scope.proveedor._id } else if ((pedido.proveedor !== undefined) && (pedido.proveedor !== null)) { pedido.proveedor = pedido.proveedor._id };
            } else {
                if ($scope.cliente !== undefined) { pedido.cliente = $scope.cliente._id } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) { pedido.cliente = pedido.cliente._id };
            }
            if (this.condicionVenta !== undefined) { pedido.condicionVenta = this.condicionVenta._id } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) { pedido.condicionVenta = pedido.condicionVenta._id };
            if ($scope.category1 !== undefined) { pedido.category1 = $scope.category1._id } else if ((pedido.category1 !== undefined) && (pedido.category1 !== null)) { pedido.category1 = pedido.category1._id };
            pedido.$update(function() {
                // console.log('pendiente aprobacion');
            }, function(errorResponse) {
                // $scope.error = errorResponse.data.message;
            });
        }

        // Cambia el estado del pedido
        $scope.update = function(item, n) {
            var pedido = item;
            if (n == 1) {
                pedido.estado = 'aprobada';
                for (var i in $scope.filtro) {
                    if ($scope.filtro[i]._id === pedido._id) {
                        $scope.filtro.splice(i, 1);
                    }
                }
            }
            if (n == 2) {
                pedido.estado = 'rechazada';
                for (var i in $scope.filtro) {
                    if ($scope.filtro[i]._id === pedido._id) {
                        $scope.filtro.splice(i, 1);
                    }
                }
            }
            if (n == 3) {
                pedido.estado = 'pendiente evaluacion';
            }
            if (n == 4) {
                pedido.deleted = 'true';
            }
            if (n == 5) {
                pedido.estado = 'pendiente aprobacion';
            }
            if (n == 6) {
                pedido.estado = 'borrador';
            }

            // for (var i in $scope.filtro){
            // 	if ($scope.filtro[i]._id === pedido._id){
            // 		$scope.filtro.splice(i,1);
            // 	}
            // }


            /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
            una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
            hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

            if (this.enterprise !== undefined) { pedido.enterprise = this.enterprise._id } else if ((pedido.enterprise !== undefined) && (pedido.enterprise !== null)) { pedido.enterprise = pedido.enterprise._id };
            if (this.tipoComprobante !== undefined) { pedido.tipoComprobante = this.tipoComprobante._id } else if (pedido.tipoComprobante !== undefined) { pedido.tipoComprobante = pedido.tipoComprobante._id };
            if (item.tipoPedido == 'compra') {
                if ($scope.proveedor !== undefined) { pedido.proveedor = $scope.proveedor._id } else if ((pedido.proveedor !== undefined) && (pedido.proveedor !== null)) { pedido.proveedor = pedido.proveedor._id };
            } else {
                if ($scope.cliente !== undefined) { pedido.cliente = $scope.cliente._id } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) { pedido.cliente = pedido.cliente._id };
            }
            if (this.condicionVenta !== undefined) { pedido.condicionVenta = this.condicionVenta._id } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) { pedido.condicionVenta = pedido.condicionVenta._id };
            if ($scope.category1 !== undefined) { pedido.category1 = $scope.category1._id } else if ((pedido.category1 !== undefined) && (pedido.category1 !== null)) { pedido.category1 = pedido.category1._id };
            $scope.tipoPedido = $stateParams.tipo;
            if ($scope.tipoPedido === undefined) {
                $scope.tipoPedido = pedido.tipoPedido;
            }


            pedido.$update(function() {

                $state.go('home.pedidos', { "tipo": $scope.tipoPedido });
            }, function(errorResponse) {
                // $scope.error = errorResponse.data.message;
            });
        };

        //suma montos totales de las ordenes
        $scope.montoTotal = function() {
            $scope.totalBorradorVenta = 0;
            $scope.totalBorradorCompra = 0;
            $scope.totalAprobadasCompra = 0;
            $scope.totalAprobadasVenta = 0;
            $scope.totalRechazadasCompra = 0;
            $scope.totalRechazadasVenta = 0;
            $scope.totalPendienteACompra = 0;
            $scope.totalPendienteAVenta = 0;
            $scope.totalPendienteECompra = 0;
            $scope.totalPendienteEVenta = 0;
            for (var i = 0; i < $rootScope.pedidos.length; i++) {
                if (($rootScope.pedidos[i].estado === 'borrador') && ($rootScope.pedidos[i].tipoPedido === 'compra') && ($rootScope.pedidos[i].deleted === false)) {
                    $scope.totalBorradorCompra = $scope.totalBorradorCompra + $rootScope.pedidos[i].total
                }
                if (($rootScope.pedidos[i].estado === 'borrador') && ($rootScope.pedidos[i].tipoPedido === 'venta') && ($rootScope.pedidos[i].deleted === false)) {
                    $scope.totalBorradorVenta = $scope.totalBorradorVenta + $rootScope.pedidos[i].total
                }
                if (($rootScope.pedidos[i].estado === 'pendiente evaluacion') && ($rootScope.pedidos[i].tipoPedido === 'compra')) {
                    $scope.totalPendienteECompra = $scope.totalPendienteECompra + $rootScope.pedidos[i].total
                }
                if (($rootScope.pedidos[i].estado === 'pendiente evaluacion') && ($rootScope.pedidos[i].tipoPedido === 'venta')) {
                    $scope.totalPendienteEVenta = $scope.totalPendienteEVenta + $rootScope.pedidos[i].total
                }
                if (($rootScope.pedidos[i].estado === 'pendiente aprobacion') && ($rootScope.pedidos[i].tipoPedido === 'compra')) {
                    $scope.totalPendienteACompra = $scope.totalPendienteACompra + $rootScope.pedidos[i].total
                }
                if (($rootScope.pedidos[i].estado === 'pendiente aprobacion') && ($rootScope.pedidos[i].tipoPedido === 'venta')) {
                    $scope.totalPendienteAVenta = $scope.totalPendienteAVenta + $rootScope.pedidos[i].total
                }
                if (($rootScope.pedidos[i].estado === 'aprobada') && ($rootScope.pedidos[i].tipoPedido === 'compra')) {
                    $scope.totalAprobadasCompra = $scope.totalAprobadasCompra + $rootScope.pedidos[i].total
                }
                if (($rootScope.pedidos[i].estado === 'aprobada') && ($rootScope.pedidos[i].tipoPedido === 'venta')) {
                    $scope.totalAprobadasVenta = $scope.totalAprobadasVenta + $rootScope.pedidos[i].total
                }
                if (($rootScope.pedidos[i].estado === 'rechazada') && ($rootScope.pedidos[i].tipoPedido === 'compra')) {
                    $scope.totalRechazadasCompra = $scope.totalRechazadasCompra + $rootScope.pedidos[i].total
                }
                if (($rootScope.pedidos[i].estado === 'rechazada') && ($rootScope.pedidos[i].tipoPedido === 'venta')) {
                    $scope.totalRechazadasVenta = $scope.totalRechazadasVenta + $rootScope.pedidos[i].total
                }
            }
            $scope.totalPendientesCompra = $scope.totalPendienteECompra + $scope.totalPendienteACompra;
            $scope.totalPendientesVenta = $scope.totalPendienteEVenta + $scope.totalPendienteAVenta;
        };

        $scope.findAll = function() {
            $scope.find();
            $scope.findTipoPedido();
        }

        $scope.find = function() {
            $scope.filtrarPedidos();
            var promise = asyncPedidos();
            promise.then(function(response) {
                $scope.montoTotal();
            });
        };

        function asyncPedidos(item) {
            var deferred = $q.defer();
            setTimeout(function() {
                if ($rootScope.pedidos !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        };

        $scope.filtrarPedidos = function() {
            $timeout(function() {
                $scope.filtro = $filter('filter')($rootScope.pedidos, function(item) {
                        return (item.estado === 'pendiente evaluacion' || item.estado === 'pendiente aprobacion');
                    })
                    //console.log($scope.filtro, 'filtrados');
                return $scope.filtro;
            }, 1000)
        };


        $scope.findTipoPedido = function() {
            $scope.tipoPedidos = [$stateParams.tipo];
        };

        $scope.findEnterprises = function() {
            if ($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise }); }
        };

        $scope.findTipoComprobante = function() {
            if ($scope.SEARCH !== undefined) { $scope.tipoComprobante = Comprobantes.query({ e: $scope.SEARCH.enterprise }); }
        };


        $scope.findClientes = function() {
            if ($scope.SEARCH !== undefined) {
                var promise = $http({
                    method: 'GET',
                    url: ('/api/clients'),
                    params: { e: $scope.SEARCH.enterprise }
                });

                promise.then(function(response) {
                    $scope.clientes = response.data;
                    for (var i = 0; i < $scope.clientes.length; i++) {
                        if ($scope.clientes[i].name === "Consumidor Final") {}
                        $scope.cliente = $scope.clientes[i];
                    }
                });
            }
        };

        $scope.findCondicionVenta = function() {
            if ($scope.SEARCH !== undefined) {
                // $scope.condicionVentas = Condicionventas.query({ e: $scope.SEARCH.enterprise });
                var promise = $http({ method: 'GET', url: ('/api/condicionventas/'), params: { e: $scope.SEARCH.enterprise } });
                promise.then(function(response) {
                    $scope.condicionVentas = response.data;
                    // console.log($scope.condicionVentas);
                    Modal.setCondicionesVentas($scope.condicionVentas);
                });
            }
        };

        $scope.findProductos = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.products = Products.query({ e: $scope.SEARCH.enterprise });
                $scope.productosNombre = $scope.products;
            }
        };

        function n_with_zeroes(number, length) {
            var my_string = '' + number;
            while (my_string.length < length) {
                my_string = '0' + my_string;
            }
            return my_string;
        }

        // Find a list of Comprobantes
        $scope.findComprobantes = function() {
            if ($scope.SEARCH !== undefined) {
                var promise = $http({ method: 'GET', url: ('/api/comprobantes/'), params: { e: $scope.SEARCH.enterprise } });
                promise.then(function(response) {
                    $scope.comprobantes = response.data;
                    for (var i in $scope.comprobantes) {
                        if ($scope.comprobantes[i].name === 'Pedido') {
                            $scope.tipoComprobante = $scope.comprobantes[i];
                            $scope.numero = n_with_zeroes(parseInt($scope.tipoComprobante.ultimoNumero) + 1, 8);
                        }
                    }
                    Modal.setComprobantes($scope.comprobantes);
                });
            }
        };

        $scope.findAllView = function() {
            $scope.findTipoPedido();
            $scope.findOne();
            $scope.montoTotal();
        };

        // Find existing Pedido
        $scope.findOne = function() {
            Pedidos.get({ pedidoId: $stateParams.pedidoId }, function(res) {
                $scope.pedido = res;
                $rootScope.tipoPedido = $scope.pedido.tipoPedido;
            });
        };

        //autocomplete para seleccionar proveedor
        $scope.searchTextChange = function(text) {
            var lowercaseQuery = angular.lowercase(text);
            return $filter('filter')($scope.proveedores, { name: text });
        };

        $scope.sendProvider = function($event, provider) {
            if ($event.keyCode === 13) {
                $event.preventDefault();
                if ((provider === null) || (provider === undefined)) {
                    $scope.mensajeP = 'No seleccionaste un proveedor valido';
                } else {
                    $scope.proveedor = provider;
                }
            }
        };


        function asyncCondicionventas() {
            var deferred = $q.defer();
            setTimeout(function() {
                $http({
                        method: 'GET',
                        url: ('/api/condicionventas/'),
                        params: { e: $scope.SEARCH.enterprise }
                    })
                    .then(function(response) {
                        $scope.condicionVentas = response.data;
                    }, function(response) {
                        console.log('error');
                    });
                if ($scope.condicionVentas !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        }

        $scope.selectedItemChange = function(item) {
            if ((item !== null) && (item !== undefined)) {
                $scope.idProveedor = item._id;
            }
            $scope.proveedor = item;
            $rootScope.provider = item;
            $scope.descProveedor();
            $scope.tipeando = false;
            //asigno por defecto los campos asociados al proveedor en los select
            // console.log($scope.proveedor);
            if ($scope.proveedor !== undefined) {
                if ($scope.proveedor.condicionPago !== undefined) {
                    var promise = $http({ method: 'GET', url: ('/api/condicionventas/'), params: { e: $scope.SEARCH.enterprise } });
                    promise.then(function(response) {
                        $scope.condicionVentas = response.data;
                        for (var i = 0; i < $scope.condicionVentas.length; i++) {
                            if (($scope.proveedor.condicionPago._id !== undefined) && ($scope.proveedor.condicionPago._id !== null) && ($scope.condicionVentas[i]._id == $scope.proveedor.condicionPago._id)) {
                                $scope.condicionVenta = $scope.condicionVentas[i];
                                // console.log('coincidio', $scope.condicionVenta);
                            } else if ($scope.condicionVentas[i]._id == $scope.proveedor.condicionPago) {
                                $scope.condicionVenta = $scope.condicionVentas[i];
                                // console.log('coincidio', $scope.condicionVenta);
                            }
                        }
                    });
                }
            }
        };

        //autocomplete para seleccionar cliente
        $scope.searchTextChangeClient = function(text) {
            var lowercaseQuery = angular.lowercase(text);
            return $filter('filter')($scope.clientes, { name: text });
        };

        $scope.sendClient = function($event, client) {
            if ($event.keyCode === 13) {
                $event.preventDefault();
                if ((client === null) || (client === undefined)) {
                    $scope.mensajeP = 'No seleccionaste un cliente valido';
                } else {
                    $scope.cliente = client;
                };
            }
        };

        $scope.selectedItemChangeClient = function(item) {
            $scope.cliente = item;
            //asigno por defecto los campos asociados al cliente en los select
            if (($scope.cliente !== undefined) && ($scope.cliente !== null)) {
                if ($scope.cliente.condicionPago !== undefined) {
                    var promise = $http({ method: 'GET', url: ('/api/condicionventas/'), params: { e: $scope.SEARCH.enterprise } });
                    promise.then(function(response) {
                        $scope.condicionVentas = response.data;
                        console.log($scope.condicionVentas, 'condicion ventas');
                        for (var i = 0; i < $scope.condicionVentas.length; i++) {
                            if ($scope.cliente.condicionPago !== undefined) {
                                if ($scope.condicionVentas[i]._id == $scope.cliente.condicionPago._id) {
                                    $scope.condicionVenta = $scope.condicionVentas[i];
                                }
                                // console.log('coincidio', $scope.condicionVentas[i]);
                            } else if ($scope.condicionVentas[i]._id == $scope.cliente.condicionPago) {
                                // console.log('coincidio', $scope.condicionVentas[i]);
                                $scope.condicionVenta = $scope.condicionVentas[i];
                            }
                        }
                    });
                }
                $scope.descCliente();
            }
        };

        //autocomplete para seleccionar productos p/proveedor o client
        $scope.searchTextChangeProduct = function(text) {
            var lowercaseQuery = angular.lowercase(text);
            $scope.productosNombre = $filter('filter')($scope.products, { name: text });
        };


        $scope.searchTextChangeProduct2 = function(text) {
            $scope.tipeando = true;
            var lowercaseQuery = angular.lowercase(text);
            if ($scope.idProveedor === 0) {
                $scope.filtrados = $filter('filter')($scope.products, function(item) {
                    return (item.esMateriaPrima === true || item.esInsumo === true);
                })
            } else {
                if ($scope.products !== undefined && $scope.products !== null) {
                    $scope.filtrados = $filter('filter')($scope.products, function(item) {
                        //console.log('[+] en el filtro1: ', $scope.products);
                        //console.log('[+] en el filtro2: ', item);
                        return (item.esMateriaPrima === true || item.esInsumo === true) && (item.provider._id === $scope.idProveedor);
                    })
                } else {
                    console.log('[+] no hay lista de productos para filtrar!!!', $scope.products);
                }

            }
            // console.log($scope.filtrados, 'filtrados');
            return $scope.filtroProductos = $filter('filter')($scope.filtrados, { name: text });
        };


        $scope.selectedItemChangeProduct = function(item) {
            $scope.errorProd = undefined;
            $scope.mensajeP = undefined;
            $scope.producto = item;
            if ($scope.producto !== null) {
                document.getElementById('cantProd').focus();
            }
            if ($scope.tipoPedido === 'compra') {
                if ((this.proveedor === null) || (this.proveedor === undefined)) {
                    if (($scope.producto !== null) && ($scope.producto !== undefined)) {
                        this.proveedor = $scope.producto.provider;
                        $scope.proveedor = $scope.producto.provider;
                    }
                }
            }
        };

        $scope.minLengthProv = 0;

        $scope.showAdvanced = function(ev) {
            $scope.minLengthProv = 1;
            $scope.textToSearch = undefined;
            Modal.setTipo($scope.tipoPedido);
            $scope.findContacts();
            $scope.findCategories();
            $scope.findTaxConditions();
            Modal.setEmpresa($scope.SEARCH.enterprise);
            $mdDialog.show({
                    controller: CrearController,
                    templateUrl: '/modules/pedidos/views/create.client.view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: false
                })
                .then(function(answer) {
                    $scope.minLengthProv = 0;
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.minLengthProv = 0;
                    $scope.status = 'You cancelled the dialog.';
                });
        };

        $scope.minLengthProd = 0;

        $scope.showAdvancedProduct = function(ev) {
            $scope.minLengthProd = 1;
            $scope.textToSearch2 = undefined;
            Modal.setTipo($scope.tipoPedido);
            $scope.findProveedores();
            $scope.findCategories();
            $scope.findSubs();
            $scope.findMetrics();
            $scope.findSubcategories();
            $scope.findTaxes();
            Modal.setEmpresa($scope.SEARCH.enterprise);
            $mdDialog.show({
                    controller: CrearController,
                    templateUrl: '/modules/pedidos/views/create.product.view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: false
                })
                .then(function(answer) {
                    $scope.minLengthProd = 0;
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.minLengthProd = 0;
                    $scope.status = 'You cancelled the dialog.';
                });
        };

        $scope.findContacts = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.contacts = Contacts.query({ e: $scope.SEARCH.enterprise });
                Modal.setContactos($scope.contacts);
            };
        };

        $scope.findCategories = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.categories = Categories.query({ e: $scope.SEARCH.enterprise });
                Modal.setCategorias($scope.categories);
            }
        };

        $scope.findCategoriesVenta = function() {
            if ($scope.SEARCH !== undefined) {
                Categories.query({ e: $scope.SEARCH.enterprise }, function(data) {
                    //console.log('DATA: ', data);
                    $scope.categories = $filter('filter')(data, function(item) {
                        return (item.type1 === 'venta' || item.type1 === 'producto venta');
                    });
                    //console.log('categorias: ', $scope.categories);
                    Modal.setCategorias($scope.categories);
                });


            }
        };
        // Find a list of Taxconditions
        $scope.findTaxConditions = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.taxconditions = Taxconditions.query({ e: $scope.SEARCH.enterprise });
                Modal.setCondiciones($scope.taxconditions);
            };
        };

        // Find a list of SBUs
        $scope.findSubs = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise });
                Modal.setSubs($scope.subs);
            }
        };

        $scope.findSubcategories = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.subcategorias = Categories.query({ e: $scope.SEARCH.enterprise });
                Modal.setSubcategorias($scope.subcategorias);
            }
        };

        $scope.findProveedores = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.proveedores = Providers.query({ e: $scope.SEARCH.enterprise });
                Modal.setProveedores($scope.proveedores);
            }
        };

        $scope.findTaxes = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.taxes = [{ value: 1, name: 'Iva incluido en el costo' }, { value: 10.5, name: '10.50%' }, { value: 21, name: '21.00%' }, { value: 27, name: '27.00%' }];
                Modal.setTaxes($scope.taxes);
            };
        };

        $scope.findMetrics = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.metrics = Metrics.query();
                Modal.setMetrics($scope.metrics);
            }
        };

        function CrearController($scope, $mdDialog, Modal, Providers, Clients, Products) {
            // console.log(Modal.getTipo());
            if (Modal.getTipo() == 'compra') {
                $scope.tipo = 'Proveedor';
                if (($rootScope.provider !== undefined) && ($rootScope.provider !== null)) {
                    $scope.provider = $rootScope.provider.name;
                }
                $scope.categories2 = ['Materia Prima', 'Insumo'];
            } else {
                $scope.tipo = 'Cliente';
                $scope.categories2 = ['Productos Terminados'];
            }
            $scope.contacts = Modal.getContactos();
            $scope.categories = Modal.getCategorias();
            // $scope.categories2 = [ 'Materia Prima', 'Insumo'];
            $scope.subcategorias = Modal.getSubcategorias();
            $scope.taxconditions = Modal.getCondiciones();
            $scope.comprobantes = Modal.getComprobantes();
            $scope.subs = Modal.getSubs();
            $scope.proveedores = Modal.getProveedores();
            $scope.taxes = Modal.getTaxes();
            $scope.metrics = Modal.getMetrics();
            $scope.condicionPagos = Modal.getCondicionesVentas();
            $scope.taxconditions2 = ['Consumidor Final', 'Responsable Inscripto'];
            $scope.banco = { name: undefined, account: undefined, cbu: undefined, identity: undefined };
            $scope.creditLimit = 0;
            $scope.discountRate = 0;
            $scope.country = 'Argentina';
            $scope.city = 'La Plata';
            $scope.region = 'Buenos Aires';
            $scope.postalCode = '1900';
            $scope.quantityPerUnit = 0;
            $scope.unitsInStock = 0;
            $scope.idealStock = 0;
            $scope.criticalStock = 0;
            $scope.unitPrice = 0;
            $scope.costPerUnit = 0;
            $scope.condicionPago = 'Efectivo';
            $scope.taxcondition = 'Consumidor Final';

            var marker, map;
            $scope.$on('mapInitialized', function(evt, evtMap) {
                map = evtMap;
                marker = map.markers[0];
            });

            $scope.types = "['address']";

            $scope.placeChanged2 = function() {
                $scope.errorDir = undefined;
                $scope.place = this.getPlace();
            };

            $scope.hide = function() {
                $mdDialog.hide();
            };
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.answer = function(answer) {
                $mdDialog.hide(answer);
            };

            $scope.mostrarFormResponsable = function() {
                $scope.errorName = undefined;
                $scope.formResponsableInscripto = false;
                if (this.taxcondition === 'Responsable Inscripto') {
                    $scope.formResponsableInscripto = true;
                }
            }

            // Create new Provider
            $scope.crearProveedor = function() {
                console.log(this.taxconditionProv, 'tax');
                console.log(this.condicionPagoProv, 'condicion');
                var empresa = Modal.getEmpresa();
                if (this.name !== undefined) {
                    if (this.address !== undefined) {
                        var latitud = $scope.place.geometry.location.lat();
                        var longitud = $scope.place.geometry.location.lng();
                        if (this.category1 !== undefined) {
                            if (this.taxconditionProv !== undefined) {
                                if (this.condicionPagoProv !== undefined) {
                                    if (this.comprobante !== undefined) {
                                        // Create new Provider object
                                        var provider = new Providers({
                                            name: this.name,
                                            creditLimit: this.creditLimit ? this.creditLimit : 0,
                                            fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
                                            condicionPago: this.condicionPagoProv ? this.condicionPagoProv._id : undefined,
                                            comprobante: this.comprobante ? this.comprobante._id : undefined,
                                            banco: this.banco,
                                            taxCondition: this.taxconditionProv ? this.taxconditionProv._id : undefined,
                                            discountRate: this.discountRate ? this.discountRate : 0,
                                            costCenter: this.costCenter ? this.costCenter : undefined,
                                            paymentMethod: this.paymentMethod ? this.paymentMethod : undefined,
                                            contacts: this.contact ? this.contact._id : undefined,
                                            country: this.country,
                                            city: this.city,
                                            region: this.region ? this.region : undefined,
                                            postalCode: this.postalCode,
                                            address: this.address,
                                            phone: this.phone ? this.phone : undefined,
                                            loc: [latitud, longitud],
                                            //fax: this.fax,
                                            web: this.web ? this.web : 0,
                                            enterprise: empresa,
                                            category1: this.category1 ? this.category1._id : undefined,
                                            //sub: this.sub._id || undefined
                                        });
                                        // Redirect after save
                                        provider.$save(function(response) {
                                            // Clear form fields
                                            $scope.name = '';
                                            $scope.creditLimit = 0;
                                            $scope.fiscalNumber = '';
                                            $scope.discountRate = 0;
                                            $scope.contacts = [];
                                            $scope.country = '';
                                            $scope.city = '';
                                            $scope.region = '';
                                            $scope.postalCode = '';
                                            $scope.address = '';
                                            $scope.phone = '';
                                            $scope.fax = '';
                                            $scope.web = '';
                                            $scope.hide();
                                            $rootScope.nuevoProveedor = provider;
                                            console.log($rootScope.nuevoProveedor);
                                        }, function(errorResponse) {
                                            $scope.error = errorResponse.data.message;
                                        });
                                    } else {
                                        $scope.errorComprobante = 'Indicar el tipo de comprobante'
                                    }
                                } else {
                                    $scope.errorCondicion = 'Indicar condicion de pago'
                                }
                            } else {
                                $scope.errorTax = 'Indicar la condicion de iva'
                            }
                        } else {
                            $scope.errorCategory = 'Indicar la categoria';
                        }
                    } else {
                        $scope.errorDir = 'Indicar la direccion';
                    }
                } else {
                    $scope.errorNameProv = 'Indicar la razón social';
                }
            };

            // Create new Cliente
            $scope.crearCliente = function() {
                for (var i in $scope.taxconditions) {
                    if ($scope.taxconditions[i].name === this.taxcondition) {
                        var condicionIva = $scope.taxconditions[i];
                    }
                };
                var empresa = Modal.getEmpresa();
                var tempContact = [];
                var prod = [];
                if (this.name !== undefined) {
                    if ($scope.place !== undefined) {
                        var latitud = $scope.place.geometry.location.lat();
                        var longitud = $scope.place.geometry.location.lng();
                        var client = new Clients({
                            name: this.name ? this.name : this.razonSocial,
                            apellido: this.apellido ? this.apellido : undefined,
                            // razonSocial: this.razonSocial ? this.razonSocial : undefined,
                            creditLimit: this.creditLimit ? this.creditLimit : 0,
                            fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
                            // taxCondition: condicionIva._id,
                            condicionPago: this.condicionPago ? this.condicionPago._id : undefined,
                            taxCondition: condicionIva ? condicionIva._id : undefined,
                            discountRate: this.discountRate ? this.discountRate : 0,
                            loc: [latitud, longitud],
                            paymentMethod: this.paymentMethod ? this.paymentMethod : 0,
                            contacts: this.contact ? [this.contact._id] : [],
                            country: this.country,
                            city: this.city,
                            region: this.region ? this.region : undefined,
                            turno: this.turno ? this.turno : undefined,
                            postalCode: this.postalCode ? this.postalCode : 0,
                            address: this.address,
                            phone: this.phone,
                            web: this.web ? this.web : undefined,
                            category1: this.category ? this.category._id : undefined,
                            enterprise: empresa,
                            productosAsociados: prod
                        });
                        // Redirect after save
                        client.$save(function(response) {
                            //$location.path('clients/' + response._id);
                            // Clear form fields
                            $scope.name = '';
                            $scope.creditLimit = 0;
                            $scope.fiscalNumber = '';
                            $scope.discountRate = 0;
                            $scope.contacts = [];
                            $scope.country = '';
                            $scope.city = '';
                            $scope.region = '';
                            $scope.postalCode = '';
                            $scope.address = '';
                            $scope.phone = '';
                            $scope.fax = '';
                            $scope.web = '';
                            $scope.hide();
                            $rootScope.nuevoCliente = client;
                            console.log('nuevoCliente: ', $rootScope.nuevoCliente);
                        }, function(errorResponse) {
                            $scope.error = errorResponse.data.message;
                        });
                    } else {
                        $scope.errorDir = 'Se debe indicar una direccion';
                    }
                } else {
                    if ($scope.formResponsableInscripto === true) {
                        $scope.errorName = 'Se debe indicar la Razon Social';
                    } else {
                        $scope.errorName = 'Se debe indicar un nombre';
                    }
                }
            };

            $scope.eliminarMensajeError = function() {
                $scope.errorName = undefined;
                $scope.errorDir = undefined;
                $scope.errorNameProv = undefined;
                $scope.errorComprobante = undefined;
                $scope.errorCondicion = undefined;
                $scope.errorTax = undefined;
                $scope.errorCategory = undefined;
            };



            $scope.crearMateriaPrima = function() {
                var esMp = false;
                var esI = false;
                for (var i in $scope.categories) {
                    if ($scope.categories[i].name === this.category1) {
                        var categoria = $scope.categories[i];
                    }
                }
                if (categoria.name === 'Insumo') {
                    esI = true;
                } else {
                    esMp = true;
                }
                for (var i in $scope.taxes) {
                    if ($scope.taxes[i].name === this.tax) {
                        var valorTax = $scope.taxes[i].value
                    }
                }
                if ($rootScope.provider === undefined) {
                    for (var i in $scope.proveedores) {
                        if ($scope.proveedores[i].name === this.provider) {
                            var idProveedorModal = $scope.proveedores[i]._id
                        }
                    }
                } else {
                    var idProveedorModal = $rootScope.provider._id
                }
                var empresa = Modal.getEmpresa();
                if (this.code !== undefined) {
                    if (this.name !== undefined) {
                        if (this.costPerUnit !== undefined) {
                            if (this.tax !== undefined) {
                                if (this.sub !== undefined) {
                                    if (categoria.name !== undefined) {
                                        if (this.category2 !== undefined) {
                                            if (idProveedorModal !== undefined) {
                                                var product = new Products({
                                                    name: this.name,
                                                    description: this.description,
                                                    code: this.code,
                                                    //picture: this.picture || undefined,
                                                    brandName: this.brandName ? this.brandName : undefined,
                                                    // unitPrice: this.unitPrice,
                                                    costPerUnit: this.costPerUnit,
                                                    // sku: this.sku,
                                                    discontinued: this.discontinued,
                                                    provider: idProveedorModal,
                                                    quantityPerUnit: this.quantityPerUnit,
                                                    unitsInStock: this.unitsInStock,
                                                    idealStock: this.idealStock,
                                                    criticalStock: this.criticalStock,
                                                    unitsOnOrder: this.unitsOnOrder,
                                                    storedIn: this.storedIn,
                                                    metric: this.metric ? this.metric : 'u.',
                                                    reseller: this.reseller,
                                                    visible: this.visible,
                                                    esInsumo: esI,
                                                    esMateriaPrima: esMp,
                                                    tax: this.tax ? valorTax : undefined,
                                                    enterprise: empresa,
                                                    sub: this.sub ? this.sub._id : undefined,
                                                    category1: categoria._id,
                                                    category2: this.category2 ? this.category2._id : undefined,
                                                });

                                                // Redirect after save
                                                product.$save(function(response) {

                                                    // Clear form fields
                                                    $scope.name = '';
                                                    $scope.description = '';
                                                    $scope.brandName = '';
                                                    $scope.unitPrice = 0;
                                                    $scope.costPerUnit = 0;
                                                    $scope.sku = '';
                                                    $scope.discontinued = false;
                                                    $scope.quantityPerUnit = 1;
                                                    $scope.unitsInStock = 0;
                                                    $scope.unitsOnOrder = 0;
                                                    $scope.visible = true;
                                                    $scope.storedIn = '';
                                                    $scope.metric = '';
                                                    $scope.reseller = false;
                                                    $scope.hide();
                                                    $rootScope.nuevaMateriaPrima = product;
                                                    console.log($rootScope.nuevaMateriaPrima);

                                                }, function(errorResponse) {
                                                    $scope.error = errorResponse.data.message;
                                                });
                                            } else {
                                                $scope.errorProv = 'Se debe elegir un proveedor';
                                            }
                                        } else {
                                            $scope.errorCategory = 'Se debe indicar la subcategoria del producto';
                                        }
                                    } else {
                                        $scope.errorCategoria = 'Indicar la categoria'
                                    }
                                } else {
                                    $scope.errorSub = 'Indicar UEN'
                                }
                            } else {
                                $scope.errorIva = 'Se debe indicar el iva';
                            }
                        } else {
                            $scope.errorCost = 'Se debe indicar el costo';
                        }
                    } else {
                        $scope.errorName = 'Se debe indicar el nombre del producto';
                    }
                } else {
                    $scope.errorCode = 'Se debe indicar el codigo del producto';
                }
            };

            $scope.borrarErrores = function() {
                $scope.errorCode = undefined;
                $scope.errorName = undefined;
                $scope.errorCost = undefined;
                $scope.errorIva = undefined;
                $scope.errorSub = undefined;
                $scope.errorCategoria = undefined;
                $scope.errorCategory = undefined
                $scope.errorProv = undefined;
            }


            $scope.crearProducto = function() {
                var esProd = false;
                for (var i in $scope.categories) {
                    if ($scope.categories[i].name === this.category1) {
                        var categoria = $scope.categories[i];
                    }
                }
                if (categoria.name === 'Productos Terminados') {
                    esProd = true;
                }
                for (var i in $scope.taxes) {
                    if ($scope.taxes[i].name === this.tax) {
                        var valorTax = $scope.taxes[i].value
                    }
                }
                var empresa = Modal.getEmpresa();
                if (this.code !== undefined) {
                    if (this.name !== undefined) {
                        if (this.costPerUnit !== undefined) {
                            if (this.tax !== undefined) {
                                if (this.sub !== undefined) {
                                    if (categoria.name !== undefined) {
                                        if (this.category2 !== undefined) {
                                            if (this.provider !== undefined) {
                                                var product = new Products({
                                                    name: this.name,
                                                    description: this.description,
                                                    code: this.code,
                                                    //picture: this.picture || undefined,
                                                    brandName: this.brandName ? this.brandName : 0,
                                                    unitPrice: this.unitPrice,
                                                    costPerUnit: this.costPerUnit,
                                                    // sku: this.sku,
                                                    discontinued: this.discontinued,
                                                    provider: this.provider._id,
                                                    quantityPerUnit: this.quantityPerUnit,
                                                    unitsInStock: this.unitsInStock,
                                                    idealStock: this.idealStock,
                                                    criticalStock: this.criticalStock,
                                                    unitsOnOrder: this.unitsOnOrder,
                                                    storedIn: this.storedIn ? this.storedIn : undefined,
                                                    metric: this.metric ? this.metric : 'u.',
                                                    reseller: this.reseller,
                                                    visible: this.visible,
                                                    esProducto: esProd,
                                                    tax: this.tax ? valorTax : undefined,
                                                    enterprise: empresa,
                                                    sub: this.sub._id,
                                                    category1: categoria._id,
                                                    category2: this.category2 ? this.category2._id : undefined,
                                                });

                                                // Redirect after save
                                                product.$save(function(response) {

                                                    // Clear form fields
                                                    $scope.name = '';
                                                    $scope.description = '';
                                                    $scope.brandName = '';
                                                    $scope.unitPrice = 0;
                                                    $scope.costPerUnit = 0;
                                                    $scope.sku = '';
                                                    $scope.discontinued = false;
                                                    $scope.quantityPerUnit = 1;
                                                    $scope.unitsInStock = 0;
                                                    $scope.unitsOnOrder = 0;
                                                    $scope.visible = true;
                                                    $scope.storedIn = '';
                                                    $scope.metric = '';
                                                    $scope.reseller = false;
                                                    $scope.hide();
                                                    $rootScope.nuevoProducto = product;
                                                    console.log($rootScope.nuevoProducto);

                                                }, function(errorResponse) {
                                                    $scope.error = errorResponse.data.message;
                                                });
                                            } else {
                                                $scope.errorProv = 'Se debe elegir un proveedor';
                                            }
                                        } else {
                                            $scope.errorCategory = 'Se debe indicar la subcategoria del producto';
                                        }
                                    } else {
                                        $scope.errorCategoria = 'Indicar la categoria'
                                    }
                                } else {
                                    $scope.errorSub = 'Indicar UEN'
                                }
                            } else {
                                $scope.errorIva = 'Se debe indicar el iva';
                            }
                        } else {
                            $scope.errorCost = 'Se debe indicar el costo';
                        }
                    } else {
                        $scope.errorName = 'Se debe indicar el nombre del producto';
                    }
                } else {
                    $scope.errorCode = 'Se debe indicar el codigo del producto';
                }
            };
        }

    }
]);
angular.module('pedidos').controller('ViewPedidosController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Pedidos', 'Enterprises', '$mdBottomSheet', '$state', '$mdDialog', 'pedidos', 'tipoOrden', 'tipoPedido', 'Products', 'Condicionventas', 'Cajas',
    function ($scope, $rootScope, $stateParams, $location, Authentication, Pedidos, Enterprises, $mdBottomSheet, $state, $mdDialog, pedidos, tipoOrden, tipoPedido, Products, Condicionventas, Cajas) {
        $scope.authentication = Authentication;

        $scope.$watch('authentication', function () {
            $scope.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
        });

        $rootScope.pedidos = pedidos; // asigno los pedidos que ya busque en el resolve de las rutas
        $scope.tipoOrden = tipoOrden;
        $scope.tipoPedido = tipoPedido;

        //variables para habilitar editar productos
        $scope.verEdicion = [];
        $scope.verForm = false;

        //variable para chequear si ingreso un precio nuevo para un producto
        $scope.cambioPrecio = false;

        //variable para habilitar agregar productos
        $scope.formAdd = false;

        $scope.habilitarEditCondicion = false;

        //menu de botones
        $scope.selectedMode = 'md-scale';
        $scope.selectedDirection = 'left';

        $scope.rutaVolver = function () {
            // $state.go('home.pedidos', {"tipo": $rootScope.tipoPedido});
            history.back();
        };

        // Find existing Pedido
        $scope.findOne = function () {
            Pedidos.get({pedidoId: $stateParams.pedidoId}, function (res) {
                $scope.pedido = res;
                $rootScope.tipoPedido = $scope.pedido.tipoPedido;
            });
        };//end findOne

        //abre modal para confirmar/rechazar ordenes pendientes
        $scope.showConfirm = function (ev, item, n) {
            if (n == 1) {
                var confirm = $mdDialog.confirm()
                    .title('Aprobar Orden')
                    .content('¿Está seguro que desea aprobar esta orden?')
                    .ariaLabel('Lucky day')
                    .ok('Aprobar')
                    .cancel('Cancelar')
                    .targetEvent(ev);
                $mdDialog.show(confirm).then(function () {
                    $scope.update(item, n);
                }, function () {
                    $scope.status = 'Cancelaste aprobar';
                });
            }
            else {
                if (n == 2) {
                    var confirm = $mdDialog.confirm()
                        .title('Rechazar Orden')
                        .content('¿Está seguro que desea rechazar esta orden?')
                        .ariaLabel('Lucky day')
                        .ok('Rechazar')
                        .cancel('Cancelar')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function () {
                        $scope.update(item, n);
                    }, function () {
                        $scope.status = 'Cancelaste rechazar';
                    });
                }
            }
        }; //end show confirm

        //abre modal para eliminar productos de la orden creada
        $scope.showConfirm2 = function (ev, item, pedido) {
            var confirm = $mdDialog.confirm()
                .title('Eliminar productos')
                .content('¿Está seguro que desea eliminar este producto de la orden?')
                .ariaLabel('Lucky day')
                .ok('Eliminar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(function () {
                $scope.quitarProducto(item, pedido);
            }, function () {
                // console.log('cancelaste eliminar');
            });
        }; //end showConfirm2

        // modal para aprobar presupuesto
        $scope.showAdvancedAprobar = function (ev, item) {
            $mdDialog.show({
                controller: DialogController,
                templateUrl: '/modules/pedidos/views/modalAprobar.client.view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                resolve: {
                    item: function () {
                        return item;
                    }
                }
            })
                .then(function (answer) {
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });
        }; //end showAdvanced

        // Cambia el estado del pedido
        $scope.update = function (item, n) {
            var pedido = item;
            if (n == 1) {
                pedido.estado = 'aprobada';
            }
            if (n == 2) {
                pedido.estado = 'rechazada';
            }


            /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
             una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
             hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

            if (this.enterprise !== undefined) {
                pedido.enterprise = this.enterprise._id
            } else if ((pedido.enterprise !== undefined) && (pedido.enterprise !== null)) {
                pedido.enterprise = pedido.enterprise._id
            }
            ;
            if (this.tipoComprobante !== undefined) {
                pedido.tipoComprobante = this.tipoComprobante._id
            } else if (pedido.tipoComprobante !== undefined) {
                pedido.tipoComprobante = pedido.tipoComprobante._id
            }
            ;
            if (item.tipoPedido == 'compra') {
                if ($scope.proveedor !== undefined) {
                    pedido.proveedor = $scope.proveedor._id
                } else if ((pedido.proveedor !== undefined) && (pedido.proveedor !== null)) {
                    pedido.proveedor = pedido.proveedor._id
                }
                ;
            }
            else {
                if ($scope.cliente !== undefined) {
                    pedido.cliente = $scope.cliente._id
                } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) {
                    pedido.cliente = pedido.cliente._id
                }
                ;
            }
            if (this.condicionVenta !== undefined) {
                pedido.condicionVenta = this.condicionVenta._id
            } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) {
                pedido.condicionVenta = pedido.condicionVenta._id
            }
            ;
            if (this.caja !== undefined) {
                pedido.caja = this.caja._id
            } else if ((pedido.caja !== undefined) && (pedido.caja !== null)) {
                pedido.caja = pedido.caja._id
            }
            ;
            $scope.tipoPedido = $stateParams.tipo;
            if ($scope.tipoPedido === undefined) {
                $scope.tipoPedido = pedido.tipoPedido;
            }

            pedido.$update(function () {
                // $scope.montoTotal();
                // $state.go('home.pedidos', {"tipo": $scope.tipoPedido});
                $state.go('home.pedidos', {"tipo": pedido.tipoPedido});
            }, function (errorResponse) {
                // $scope.error = errorResponse.data.message;
            });
        }; //end update

        //Habilita el form para editar productos
        $scope.habilitarEdicion = function (index) {
            $scope.verEdicion[index] = true;
        }//end habilitarEdicion

        //avisa que se ingreso un precio nuevo en un producto
        $scope.cambiarPrecio = function () {
            $scope.cambioPrecio = true;
            $scope.findProductos();
        } //end cambiarPrecio

        //calcula nuevos montos si edita precio/cantidad de un producto
        $scope.editProducto = function (p, pedido, index) {
            var impuestos = p.product.provider.impuesto1 + p.product.provider.impuesto2 + p.product.provider.impuesto3 + p.product.provider.impuesto4;
            var total = 0;
            var subtotal = 0;
            var desc = 0;
            var iva = 0;
            $scope.verEdicion = false;
            if (pedido.tipoPedido == 'compra') {
                p.subtotal = p.cantidad * p.product.costPerUnit;
            }
            else {
                p.subtotal = p.cantidad * p.product.unitPrice;
            }
            var descuento = (p.subtotal * p.descuento) / 100;
            p.total = p.subtotal - descuento;
            for (var i in pedido.products) {
                subtotal = subtotal + pedido.products[i].total;
                if (pedido.products[i].product.tax != 1) {
                    iva = iva + ((pedido.products[i].subtotal) * (pedido.products[i].product.tax) / 100)
                }
            }
            pedido.subtotal = subtotal;
            pedido.descuentoValor = (subtotal * pedido.descuentoPorcentaje) / 100;
            pedido.neto = subtotal - pedido.descuentoValor;
            var impuestosTotal = (pedido.neto * impuestos) / 100;
            pedido.totalImp = impuestosTotal;
            pedido.totalTax = iva;
            pedido.total = pedido.neto + pedido.totalTax + impuestosTotal;
            if (pedido.estado == 'pendiente evaluacion') {
                var n = 3;
            }
            if (pedido.estado == 'pendiente aprobacion') {
                var n = 5;
            }
            if (pedido.estado == 'borrador') {
                var n = 6;
            }
            $scope.verEdicion = [];
            $scope.updatePedido(pedido, n, p)
        }//end editProducto

        //edita la orden
        $scope.updatePedido = function (item, n, p) {
            if ($scope.cambioPrecio === true) {
                $scope.modificarPrecioProducto(p.product, item);
                $scope.cambioPrecio = false;
            }

            var pedido = item;

            /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
             una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
             hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

            if (this.enterprise !== undefined) {
                pedido.enterprise = this.enterprise._id
            } else if ((pedido.enterprise !== undefined) && (pedido.enterprise !== null)) {
                pedido.enterprise = pedido.enterprise._id
            }
            ;
            if (this.tipoComprobante !== undefined) {
                pedido.tipoComprobante = this.tipoComprobante._id
            } else if (pedido.tipoComprobante !== undefined) {
                pedido.tipoComprobante = pedido.tipoComprobante._id
            }
            ;
            if (item.tipoPedido == 'compra') {
                if ($scope.proveedor !== undefined) {
                    pedido.proveedor = $scope.proveedor._id
                } else if ((pedido.proveedor !== undefined) && (pedido.proveedor !== null)) {
                    pedido.proveedor = pedido.proveedor._id
                }
                ;
            }
            else {
                if ($scope.cliente !== undefined) {
                    pedido.cliente = $scope.cliente._id
                } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) {
                    pedido.cliente = pedido.cliente._id
                }
                ;
            }
            if (this.condicionVenta !== undefined) {
                pedido.condicionVenta = this.condicionVenta._id
            } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) {
                pedido.condicionVenta = pedido.condicionVenta._id
            }
            ;
            $scope.tipoPedido = $stateParams.tipo;
            pedido.$update(function () {
                // console.log('bien')
            }, function (errorResponse) {
                // $scope.error = errorResponse.data.message;
            });
        }; //end updatePedido

        //si cambio el precio de un producto, lo edita en bbdd
        $scope.modificarPrecioProducto = function (p, pedido) {
            for (var i in $scope.products) {
                if ($scope.products[i]._id === p._id) {
                    if (pedido.tipoPedido === 'compra') {
                        var cost = p.costPerUnit;
                        p = $scope.products[i];
                        var product = new Products({
                            _id: p._id,
                            name: p.name,
                            description: p.description,
                            code: p.code,
                            brandName: p.brandName,
                            unitPrice: cost,
                            costPerUnit: cost,
                            provider: p.provider._id,
                            quantityPerUnit: p.quantityPerUnit,
                            unitsInStock: p.unitsInStock,
                            idealStock: p.idealStock,
                            criticalStock: p.criticalStock,
                            unitsOnOrder: p.unitsOnOrder,
                            storedIn: p.storedIn,
                            metric: p.metric,
                            reseller: p.reseller,
                            esProducto: p.esProducto,
                            esMateriaPrima: p.esMateriaPrima,
                            esInsumo: p.esInsumo,
                            tax: p.tax,
                            enterprise: p.enterprise,
                            category1: p.category1,
                            category2: p.category2
                        });
                    }
                    else {
                        var precio = p.unitPrice;
                        p = $scope.products[i];
                        var product = new Products({
                            _id: p._id,
                            name: p.name,
                            description: p.description,
                            code: p.code,
                            brandName: p.brandName,
                            unitPrice: precio,
                            costPerUnit: p.costPerUnit,
                            provider: p.provider._id,
                            quantityPerUnit: p.quantityPerUnit,
                            unitsInStock: p.unitsInStock,
                            idealStock: p.idealStock,
                            criticalStock: p.criticalStock,
                            unitsOnOrder: p.unitsOnOrder,
                            storedIn: p.storedIn,
                            metric: p.metric,
                            reseller: p.reseller,
                            esProducto: p.esProducto,
                            esMateriaPrima: p.esMateriaPrima,
                            esInsumo: p.esInsumo,
                            tax: p.tax,
                            enterprise: p.enterprise,
                            category1: p.category1,
                            category2: p.category2
                        });
                    }

                    product.enterprise = product.enterprise._id;
                    if ((product.category1 !== undefined) && (product.category1 !== null)) {
                        product.category1 = product.category1._id
                    }
                    ;
                    if ((product.category2 !== undefined) && (product.category2 !== null)) {
                        product.category2 = product.category2 ? product.category2._id : undefined
                    }
                    ;
                    if ((product.provider !== undefined) && (product.provider !== null)) {
                        product.provider = product.provider._id
                    }
                    ;

                    product.$update(function (response) {
                        actualizarReferencias();
                    }, function (errorResponse) {
                        $scope.error = errorResponse.data.message;
                    });
                }
            }
        } //end modificarPrecio

        //actualiza los productos por si cambio el precio de las MP que lo componen
        function actualizarReferencias() {
            for (var i in $scope.products) {
                if (($scope.products[i].esProducto == true) && ($scope.products[i].reseller == false) && ($scope.products[i].deleted == false)) {
                    if ($scope.products[i].produccion.length > 0) {
                        var product = $scope.products[i];
                        product.enterprise = product.enterprise._id;
                        product.category2 = product.category2._id;
                        product.provider = product.provider._id;
                        product.$update(function (data) {
                            console.log('update referencia ok');
                        }, function (errorResponse) {
                            console.log(errorResponse, 'error');
                            this.error = errorResponse.data.message;
                        });
                    }
                    ;
                }
            }
        };

        $scope.findProductos = function () {
            if ($scope.SEARCH !== undefined) {
                $scope.products = Products.query({e: $scope.SEARCH.enterprise});
            }
        }; //end findProductos

        $scope.verAddProductos = function () {
            $scope.formAdd = true;
            $location.hash('agregarProd');
        }; //end verAddProductos

        $scope.sumarProductoCompra = function (producto, productoPedido, pedido) {
            if (producto !== undefined) {
                if (productoPedido !== undefined) {
                    if (productoPedido.cantidad !== undefined)
                        if (productoPedido.descuento == undefined) {
                            productoPedido.descuento = 0;
                        }
                    var impuestos = producto.provider.impuesto1 + producto.provider.impuesto2 + producto.provider.impuesto3 + producto.provider.impuesto4;
                    console.log(impuestos, 'impuestos');
                    $scope.formAdd = false;
                    var p = {
                        product: {},
                        cantidad: undefined,
                        descuento: 0,
                        total: undefined,
                        subtotal: undefined,
                        observaciones: undefined
                    };
                    var valorDescuento = (producto.costPerUnit * productoPedido.descuento) / 100;
                    var tax1, tax3, tax2 = 0;
                    var totalIva = 0;
                    p.product = producto;
                    p.cantidad = productoPedido.cantidad;
                    p.descuento = productoPedido.descuento;
                    p.observaciones = productoPedido.observaciones;
                    p.subtotal = producto.costPerUnit * productoPedido.cantidad;
                    p.total = (producto.costPerUnit * productoPedido.cantidad) - valorDescuento;
                    pedido.subtotal = pedido.subtotal + p.total;
                    if (pedido.descuentoPorcentaje !== 0) {
                        pedido.descuentoValor = (pedido.subtotal * pedido.descuentoValor) / pedido.descuentoPorcentaje;
                        pedido.neto = pedido.subtotal - pedido.descuentoValor;
                    }
                    else {
                        pedido.neto = pedido.subtotal;
                    }
                    if (producto.tax == 10.5) {
                        tax1 = parseFloat(p.subtotal * 10.5 / 100);
                        pedido.tax1 = parseFloat(pedido.tax1 + tax1);
                    }
                    if (producto.tax == 21) {
                        tax2 = parseFloat(p.subtotal * 21 / 100);
                        pedido.tax2 = parseFloat(pedido.tax2 + tax2);
                    }
                    if (producto.tax == 27) {
                        tax3 = parseFloat(p.subtotal * 27 / 100);
                        pedido.tax3 = parseFloat(pedido.tax3 + tax3);
                    }
                    var impuestosTotal = (pedido.neto * impuestos) / 100;
                    pedido.totalImp = impuestosTotal;
                    totalIva = pedido.tax1 + pedido.tax2 + pedido.tax3;
                    pedido.totalTax = totalIva;
                    pedido.total = pedido.neto + pedido.totalTax + impuestosTotal;
                    pedido.products.push(p);
                    $scope.updatePedido(pedido);
                }
                else {
                    $scope.errorCant = 'Se debe indicar una cantidad';
                }
            }
            else {
                $scope.errorProd = 'Se debe seleccionar un producto';
            }
        }; //end sumarProducto

        $scope.sumarProductoVenta = function (producto, productoPedido, pedido) {
            if (producto !== undefined) {
                if (productoPedido !== undefined) {
                    if (productoPedido.cantidad !== undefined)
                        if (productoPedido.descuento == undefined) {
                            productoPedido.descuento = 0;
                        }
                    $scope.formAdd = false;
                    var p = {
                        product: {},
                        cantidad: undefined,
                        descuento: 0,
                        total: undefined,
                        subtotal: undefined,
                        observaciones: undefined
                    };
                    var valorDescuento = (producto.unitPrice * productoPedido.descuento) / 100;
                    var tax1, tax3, tax2 = 0;
                    var totalIva = 0;
                    p.product = producto;
                    p.cantidad = productoPedido.cantidad;
                    p.descuento = productoPedido.descuento;
                    p.observaciones = productoPedido.observaciones;
                    p.subtotal = producto.unitPrice * productoPedido.cantidad;
                    p.total = (producto.unitPrice * productoPedido.cantidad) - valorDescuento;
                    pedido.subtotal = pedido.subtotal + p.total;
                    if (pedido.descuentoPorcentaje !== 0) {
                        pedido.descuentoValor = (pedido.subtotal * pedido.descuentoPorcentaje) / 100;
                        pedido.neto = pedido.subtotal - pedido.descuentoValor;
                    }
                    else {
                        pedido.neto = pedido.subtotal;
                    }
                    if (producto.tax == 10.5) {
                        tax1 = parseFloat(p.subtotal * 10.5 / 100);
                        pedido.tax1 = parseFloat(pedido.tax1 + tax1);
                    }
                    if (producto.tax == 21) {
                        tax2 = parseFloat(p.subtotal * 21 / 100);
                        pedido.tax2 = parseFloat(pedido.tax2 + tax2);
                    }
                    if (producto.tax == 27) {
                        tax3 = parseFloat(p.subtotal * 27 / 100);
                        pedido.tax3 = parseFloat(pedido.tax3 + tax3);
                    }
                    totalIva = pedido.tax1 + pedido.tax2 + pedido.tax3;
                    pedido.totalTax = totalIva;
                    pedido.total = pedido.neto + pedido.totalTax;
                    pedido.products.push(p);
                    $scope.updatePedido(pedido);
                }
                else {
                    $scope.errorCant = 'Se debe indicar una cantidad';
                }
            }
            else {
                $scope.errorProd = 'Se debe seleccionar un producto';
            }
        }; //end sumarProducto

        //borra productos de la orden
        $scope.quitarProducto = function (p, pedido) {
            var tipoPedido = pedido.tipoPedido;
            var subt = 0;
            var iva = 0;
            var descProd = 0; //descuento del producto
            var descGen = 0; //descuento del proveedor
            var tax1 = 0;
            var tax2 = 0;
            var tax3 = 0;
            var totalIva = 0;
            if (tipoPedido == 'compra') {
                descProd = parseFloat((p.product.costPerUnit * p.cantidad) * p.descuento / 100);
                subt = parseFloat((p.product.costPerUnit * p.cantidad) - descProd); //subtotal de solo ese prod
            }
            ;
            if (tipoPedido == 'venta') {
                descProd = parseFloat((p.product.unitPrice * p.cantidad) * p.descuento / 100);
                subt = parseFloat((p.product.unitPrice * p.cantidad) - descProd); //subtotal de solo ese prod
            }
            ;
            descGen = parseFloat((subt * pedido.descuentoPorcentaje) / 100);
            iva = p.product.tax;
            if (iva == 1) {
                console.log('iva incluido');
            }
            if (iva == 10.5) {
                tax1 = parseFloat(subt * 10.5 / 100);
                pedido.tax1 = parseFloat(pedido.tax1 - tax1);
            }
            if (iva == 21) {
                tax2 = parseFloat(subt * 21 / 100);
                pedido.tax2 = parseFloat(pedido.tax2 - tax2);
            }
            if (iva == 27) {
                tax3 = parseFloat(subt * 27 / 100);
                pedido.tax3 = parseFloat(pedido.tax3 - tax3);
            }
            pedido.neto = parseFloat(pedido.neto - (subt - descGen));
            pedido.subtotal = parseFloat(pedido.subtotal - subt);
            totalIva = (subt - descGen + tax1 + tax2 + tax3);
            pedido.descuentoValor = parseFloat(pedido.descuentoValor - descGen);
            pedido.total = pedido.total - totalIva;
            pedido.totalTax = pedido.totalTax - tax1 - tax2 - tax3;
            for (var i = 0; i < pedido.products.length; i++) {
                if (pedido.products[i]._id === p._id) {
                    pedido.products.splice(i, 1);
                }
            }
            if (pedido.estado == 'pendiente evaluacion') {
                var n = 3;
            }
            if (pedido.estado == 'pendiente aprobacion') {
                var n = 5;
            }
            if (pedido.estado == 'borrador') {
                var n = 6;
            }
            $scope.updatePedido(pedido, n, p);
        }; //end quitarProducto

        $scope.cambiarCondicion = function () {
            if ($scope.pedido.estado == 'pendiente aprobacion') {
                $scope.habilitarEditCondicion = true;
            }
        };

        $scope.findCondicionVenta = function () {
            if ($scope.SEARCH !== undefined) {
                $scope.condiciones = Condicionventas.query({e: $scope.SEARCH.enterprise});
            }
        };//end find

        $scope.actualizarCondicion = function (c) {
            $scope.pedido.condicionVenta = c._id;
            var pedido = $scope.pedido;
            if (this.enterprise !== undefined) {
                pedido.enterprise = this.enterprise._id
            } else if ((pedido.enterprise !== undefined) && (pedido.enterprise !== null)) {
                pedido.enterprise = pedido.enterprise._id
            }
            ;
            if (this.tipoComprobante !== undefined) {
                pedido.tipoComprobante = this.tipoComprobante._id
            } else if (pedido.tipoComprobante !== undefined) {
                pedido.tipoComprobante = pedido.tipoComprobante._id
            }
            ;
            if ($scope.cliente !== undefined) {
                pedido.cliente = $scope.cliente._id
            } else if ((pedido.cliente !== undefined) && (pedido.cliente !== null)) {
                pedido.cliente = pedido.cliente._id
            }
            ;
            if (this.condicionVenta !== undefined) {
                pedido.condicionVenta = this.condicionVenta._id
            } else if ((pedido.condicionVenta !== undefined) && (pedido.condicionVenta !== null)) {
                pedido.condicionVenta = pedido.condicionVenta._id
            }
            ;
            if (this.caja !== undefined) {
                pedido.caja = this.caja._id
            } else if ((pedido.caja !== undefined) && (pedido.caja !== null)) {
                pedido.caja = pedido.caja._id
            }
            ;
            pedido.$update(function () {
                console.log('actualice bien la condicion');
            }, function (errorResponse) {
                // $scope.error = errorResponse.data.message;
            });
        };

        function DialogController($scope, $mdDialog, item, $rootScope, Socket, Cajas) {


            $scope.item = item;


            $scope.cancel = function () {
                $mdDialog.cancel();
            };

            $scope.finalizarPedido = function (item, fechaE) {
                if (fechaE !== undefined) {
                    item.myDate = fechaE;
                    item.myDateChanged = true;
                }
                var estado = 'aprobada';
                updatePedido(item, estado);
            }

            function updatePedido(pedido, estado) {
                pedido.estado = estado;

                pedido.enterprise = pedido.enterprise._id;
                pedido.tipoComprobante = pedido.tipoComprobante._id;
                if (pedido.cliente !== undefined) {
                    pedido.cliente = pedido.cliente._id
                }
                ;
                if (pedido.proveedor !== undefined) {
                    pedido.proveedor = pedido.proveedor._id
                }
                ;
                if (pedido.category1 !== undefined) {
                    pedido.category1 = pedido.category1._id
                }
                ;
                pedido.condicionVenta = pedido.condicionVenta._id;
                if (pedido.caja !== undefined) {
                    pedido.caja = pedido.caja._id;
                }

                $mdDialog.hide();
                Socket.emit('pedido.update', pedido);
                $state.go('home.pedidos', {"tipo": pedido.tipoPedido});
            };
        }

    } //end function
]);	
'use strict';

//Pedidos service used to communicate Pedidos REST endpoints
angular.module('pedidos').factory('Pedidos', ['$resource',
	function($resource) {
		return $resource('api/pedidos/:pedidoId', { pedidoId: '@_id', e: '@enterprise', w: '@filterDate.week', y: '@filterDate.year', tipoPedido: '@tipoPedido', estado: '@estado', p: '@p', pcount: '@pcount'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
])
.factory('Modal', function() {
	var tipo;
	var proveedor;
	var empresa;
	var contactos = [];
	var categorias = [];
	var subcategorias = [];
	var condiciones = [];//tax
	var condicionesVentas = [];
	var comprobantes = [];
	var subs = [];
	var proveedores = [];
	var taxes = [];
	var metrics = [];
	return{
	    getTipo: function(){
	      return tipo;
	    },
	    setTipo: function(value){
	      tipo = value;
	    },
	    getProveedor: function(){
	      return proveedor;
	    },
	    setProveedor: function(prov){
	      proveedor = prov;
	    },
	    getContactos: function(){
	      return contactos;
	    },
	    setContactos: function(value){
	      contactos = value;
	    },
	    getCategorias: function(){
	      return categorias;
	    },
	    setCategorias: function(value){
	      categorias = value;
	    },
	    getSubcategorias: function(){
	      return subcategorias;
	    },
	    setSubcategorias: function(value){
	      subcategorias = value;
	    },
	    //tax
	    getCondiciones: function(){
	      return condiciones;
	    },
	    setCondiciones: function(value){
	      condiciones = value;
	    },
	    getCondicionesVentas: function(){
	      return condicionesVentas;
	    },
	    setCondicionesVentas: function(value){
	      condicionesVentas = value;
	    },
	    getComprobantes: function(){
	      return comprobantes;
	    },
	    setComprobantes: function(value){
	      comprobantes = value;
	    },
	    getEmpresa: function(){
	      return empresa;
	    },
	    setEmpresa: function(value){
	      empresa = value;
	    },
	    getSubs: function(){
	      return subs;
	    },
	    setSubs: function(value){
	      subs = value;
	    },
	    getProveedores: function(){
	      return proveedores;
	    },
	    setProveedores: function(value){
	      proveedores = value;
	    },
	    getTaxes: function(){
	      return taxes;
	    },
	    setTaxes: function(value){
	      taxes = value;
	    },
	    getMetrics: function(){
	      return metrics;
	    },
	    setMetrics: function(value){
	      metrics = value;
	    },
	}
});

'use strict';

//Reportes service used to communicate Reportes REST endpoints
angular.module('pedidos').factory('PedidosExtra', ['$http',
    function($http) {
        return {
            select: function(estado, enterprise, tipoPedido) {
                return $http({
                    method: "get",
                    url: "/api/pedidos/select",
                    params: {
                        e: enterprise,
                        estado: estado,
                        type: tipoPedido
                    }
                });
            },
            loadMore: function (enterprise, tipoPedido, estado, last, limit ) {
                return $http({
                    method: "get",
                    url: "/api/pedidos/loadmore",
                    params: {
                        e: enterprise,
                        last: last,
                        limit: limit,
                        estado: estado,
                        type: tipoPedido
                    }
                })
            },
            search: function (enterprise, tipoPedido, estado ,search) {
                return $http({
                    method: "get",
                    url: "/api/pedidos/search",
                    params: {
                        e: enterprise,
                        estado: estado,
                        tipoPedido: tipoPedido,
                        search: search
                    }
                })
            }
        }
    }
]);

'use strict';

// Configuring the Personas module
angular.module('personas').run(['Menus',
	function(Menus) {
		// Add the Personas dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Personas',
			state: 'personas',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'personas', {
			title: 'List Personas',
			state: 'personas.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'personas', {
			title: 'Create Persona',
			state: 'personas.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('personas').config(['$stateProvider',
	function($stateProvider) {
		// Personas state routing
		$stateProvider.
		state('personas', {
			abstract: true,
			url: '/personas__',
			template: '<ui-view/>'
		}).
		state('personas.list', {
			url: '',
			templateUrl: 'modules/personas/views/list-personas.client.view.html'
		}).
		state('personas.create', {
			url: '/create',
			templateUrl: 'modules/personas/views/create-persona.client.view.html'
		}).
		state('personas.view', {
			url: '/:personaId',
			templateUrl: 'modules/personas/views/view-persona.client.view.html'
		}).
		state('personas.edit', {
			url: '/:personaId/edit',
			templateUrl: 'modules/personas/views/edit-persona.client.view.html'
		});
	}
]);
'use strict';

// Personas controller
angular.module('personas').controller('PersonasController', ['$scope', '$timeout', '$window', '$stateParams', 'FileUploader', '$location', 'Authentication', 'Contacts', 'Remuneraciones', 'Costcenters', '$rootScope', 'Users', '$http', 'Enterprises', 'ChangeStatusUserById', '$filter', 'Puestos', '$mdDialog', '$q',
    function ($scope, $timeout, $window, $stateParams, FileUploader, $location, Authentication, Contacts, Remuneraciones, Costcenters, $rootScope, Users, $http, Enterprises, ChangeStatusUserById, $filter, Puestos, $mdDialog, $q) {
        $scope.authentication = Authentication;
        $scope.costcenterId = $stateParams.centroDeCosto;
        $scope.empresa = '';
        $scope.rolesUser = ['compras', 'ventas'];
        $scope.roles = ['user', 'admin', 'rrhh', 'compras', 'ventas', 'produccion'];
        $scope.rolesGroso = ['user', 'admin', 'rrhh', 'compras', 'ventas', 'produccion', 'groso'];
        $scope.sTrue = true;
        $scope.sFalse = false;
        $scope.switch = [];
        $scope.modoEditar = [];
        $scope.totalRemuneracion = 0;
        $scope.addedRemuneraciones = [];
        $scope.puesto = undefined;
        $scope.puestoPersona = undefined;
        $scope.puestoDisabled = true;
        $scope.fechaDeEntrada = new Date();
        $scope.showAddRemuneracion = false;
        $scope.user = Authentication.user;
        $scope.imageURL = "modules/users/img/profile/default.png";

        $scope.password = {
            currentPassword: '',
            newPassword: '',
            verifyPassword: ''
        }

        // watch for SEARCH to update value
        $scope.$watch('authentication', function () {
            $scope.contactosDisponibles = [];
            $scope.contactosDisponiblesFilter = [];
            $scope.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
            $scope.findUsers();
            $scope.findCentros();
            $scope.findPuestos();
            $scope.findRemuneraciones();
        });

        $scope.$watch('enterpriseS', function () {
            $scope.findUsers();
        });

        $scope.$watch('empresa', function () {
            $scope.findContacts($scope.empresa);
        });

        function arrContains(array, value) {
            for (var j = 0; j < array.length; j++) {
                if (array[j].email === value) {
                    return true;
                }
            }
            return false;
        }

        $scope.asignaPuesto = function (puesto) {
            $scope.puesto = puesto;
        };

        $scope.asignaRemuneracion = function (remuneracion) {
            $scope.showAddRemuneracion = remuneracion != null;
            $scope.remuneracion = remuneracion;
        };

        $scope.addRemuneracion = function (remuneracion) {
            remuneracion.total = $scope.totalRemuneracion;
            $scope.modoEditar.push(false);

            // If the remuneracion is not our list we add it
            if(!checkIfAlreadyIn(remuneracion)) {
                $scope.addedRemuneraciones.push(remuneracion);
            }

            $scope.totalRemuneracion = 0;
            $scope.showAddRemuneracion = false;
        };

        // Check if remuneracion is already in our list
        var checkIfAlreadyIn = function(remuneracion) {
            for(var i = 0; i < $scope.addedRemuneraciones.length; i++) {
                if($scope.addedRemuneraciones[i]._id == remuneracion._id) {
                    return true;
                }
            }

            return false;
        };

        $scope.editTrue = function(index) {
            $scope.modoEditar[index] = true;
        };

        $scope.updateP = function(index, p) {
            $scope.addedRemuneraciones[index].total = p.total;
            $scope.modoEditar[index] = false;
        };

        $scope.eliminarProducto = function(index) {
            $scope.addedRemuneraciones.splice(index, 1);
        };


        $scope.asignaCentro = function (centro) {
            $scope.centroDeCosto = centro;
            $scope.puestoDisabled = false;
        };

        // Create file uploader instance
        $scope.uploader = new FileUploader({
            url: 'api/users/picture'
        });

        // Set file uploader image filter
        $scope.uploader.filters.push({
            name: 'imageFilter',
            fn: function (item) {
                var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        });

        // Called after the user selected a new picture file
        $scope.uploader.onAfterAddingFile = function (fileItem) {
            if ($window.FileReader) {
                var fileReader = new FileReader();
                fileReader.onload = function (fileReaderEvent) {
                    $timeout(function () {
                        $scope.imageURL = fileReaderEvent.target.result;
                    }, 0);
                };

                fileReader.readAsDataURL(fileItem._file);
            }
        };

        // Called after the user has successfully uploaded a new picture
        $scope.uploader.onSuccessItem = function () {
            // Show success message
            $scope.success = true;

            // Clear upload buttons
            $scope.cancelUpload();
        };

        // Called after the user has failed to uploaded a new picture
        $scope.uploader.onErrorItem = function (fileItem, response) {
            // Clear upload buttons
            $scope.cancelUpload();

            // Show error message
            $scope.error = response.message;
        };

        // Change user profile picture
        $scope.uploadProfilePicture = function () {
            // Clear messages
            console.log('image upload fired!');
            $scope.success = $scope.error = null;

            // Start upload
            $scope.uploader.uploadAll();
        };

        // Cancel the upload process
        $scope.cancelUpload = function () {
            $scope.uploader.clearQueue();
            $scope.imageURL = $scope.contacto.profileImageURL;
        };

        $scope.updatePassword = function () {
            if ((($scope.user.roles.indexOf('groso') !== -1) || $scope.password.currentPassword) && $scope.password.newPassword && $scope.password.newPassword === $scope.password.verifyPassword) {
                console.log('update password') ///api/users/password'
                $http.post('api/users/password', $scope.password).success(
                    function (response) {
                        $scope.passwordChangeError = '';
                        $scope.passwordChangeSuccess = response.message;
                        console.log('response', response)
                    }
                ).error(
                    function (error) {
                        $scope.passwordChangeError = error.message;
                        $scope.passwordChangeSuccess = '';
                        console.log('ee', error)
                    }
                )
            }
        }

        $scope.create = function () {

            if ($scope.contacto !== undefined) {
                if ($scope.contacto.firstName !== undefined) {
                    if ($scope.contacto.lastName !== undefined) {
                        if ($scope.contacto.username !== undefined) {
                            if($scope.puestoPersona && $scope.puestoPersona.estado !== "Ocupado") {
                                var persona = new Users({
                                    firstName: $scope.contacto.firstName,
                                    lastName: $scope.contacto.lastName,
                                    email: $scope.contacto.email ? $scope.contacto.email : undefined,
                                    username: $scope.contacto.username,
                                    enterprise: $scope.SEARCH.enterprise,
                                    sueldo: $scope.contacto.sueldo,
                                    puesto: $scope.puesto ? $scope.puesto._id : undefined,
                                    centroDeCosto: $scope.centroDeCosto ? $scope.centroDeCosto._id : undefined,
                                    remuneraciones: $scope.addedRemuneraciones,
                                    cuit: $scope.contacto.cuit || undefined,
                                    telefono: $scope.contacto.telefono || undefined,
                                    fechaDeEntrada: $scope.fechaDeEntrada || undefined,
                                    roles: [$scope.rolePersona],
                                    observaciones: undefined,
                                    password: angular.lowercase(removeAccents($scope.contacto.firstName + $scope.contacto.lastName + 'pass'))
                                });


                                $http.post('/api/auth/signup', persona).success(function (response) {
                                    //remuevo el asignado a personal de los contactos disponibles
                                    for (var i = 0; i < $scope.contactosDisponibles.length; i++) {
                                        if ($scope.contactosDisponibles[i].email === persona.email) {
                                            $scope.contactosDisponibles.splice(i, 1);
                                        }
                                    }

                                    $scope.uploader.onBeforeUploadItem = function (fileItem) {
                                        fileItem.formData = [response];
                                    };

                                    $scope.users.push(persona);
                                    $scope.puestoPersona = undefined;
                                    $scope.uploadProfilePicture();
                                    
                                    $location.path('/empleados');
                                }).error(function (err) {
                                    // $scope.error = response.message;
                                    console.log(err);
                                });
                            } else {
                                $scope.errorPuesto = 'Puesto ocupado';
                            }
                        }
                        else {
                            $scope.errorUser = 'Debe indicar un nombre de usuario para el nuevo personal';
                        }
                    }
                    else {
                        $scope.errorApellido = 'Debe indicar el apellido del nuevo personal';
                    }
                }
                else {
                    $scope.errorName = 'Debe indicar el nombre del nuevo personal';
                }
            }
            else {
                $scope.error = 'Ingrese los datos para el nuevo personal';
            }
        };

        $scope.update = function() {
            if ($scope.contacto !== undefined) {
                if ($scope.contacto.firstName !== undefined) {
                    if ($scope.contacto.lastName !== undefined) {
                        if ($scope.contacto.username !== undefined) {
                            if($scope.contacto.puesto && $scope.contacto.puesto._id === $scope.puestoPersona._id || $scope.puestoPersona && $scope.puestoPersona.estado !== "Ocupado") {
                                $scope.contacto.oldPuesto = $scope.contacto.puesto;
                                $scope.contacto.centroDeCosto = $scope.centroDeCostoPersona;
                                $scope.contacto.puesto = $scope.puestoPersona;
                                $scope.contacto.fechaDeEntrada = $scope.fechaDeEntrada;
                                $scope.contacto.roles = [$scope.rolePersona];
                                $scope.remuneraciones = $scope.addedRemuneraciones;
                                if($scope.contacto.profileImageURL) {
                                    $scope.uploadProfilePicture();
                                }

                                $http.put('/api/users', $scope.contacto).success(function () {
                                    $location.path('/empleados/' + $scope.contacto.centroDeCosto._id);
                                }).error(function (err) {
                                    // $scope.error = response.message;
                                    console.log(err);
                                });
                            } else {
                                $scope.errorPuesto = 'Puesto ocupado';
                            }
                        }
                        else {
                            $scope.errorUser = 'Debe indicar un nombre de usuario para el nuevo personal';
                        }
                    }
                    else {
                        $scope.errorApellido = 'Debe indicar el apellido del nuevo personal';
                    }
                }
                else {
                    $scope.errorName = 'Debe indicar el nombre del nuevo personal';
                }
            }
            else {
                $scope.error = 'Ingrese los datos para el nuevo personal';
            }
        };

        $scope.borrarError = function () {
            $scope.msjError = undefined;
            $scope.error = undefined;
            $scope.errorName = undefined;
            $scope.errorApellido = undefined;
            $scope.errorUser = undefined;
        };

        // Remove existing Persona
        $scope.remove = function (persona) {
            if (persona) {
                persona.$remove();

                for (var i in $scope.personas) {
                    if ($scope.personas[i] === persona) {
                        $scope.personas.splice(i, 1);
                    }
                }
            } else {
                $scope.persona.$remove(function () {
                    $location.path('personas');
                });
            }
        };



        // Find a list of Personas
        $scope.find = function () {
            $scope.personas = Personas.query();
        };

        // Find existing Persona
        $scope.findOne = function () {
            $http({
                method: 'GET',
                url: ('/api/users/byId'),
                params: {userId: $stateParams.personaId}
            }).then(function successCallback(res) {
                $scope.puestoDisabled = false;
                $scope.contacto = res.data;

                $scope.contacto.cuit = Number($scope.contacto.cuit);
                $scope.rolePersona = $scope.contacto.roles[0];
                $scope.fechaDeEntrada = $scope.contacto.fechaDeEntrada ? new Date($scope.contacto.fechaDeEntrada) : new Date($scope.contacto.created);
                $scope.centroDeCostoPersona = $scope.contacto.centroDeCosto || $scope.contacto.puesto.centroDeCosto;
                $scope.puestoPersona =  $scope.contacto.puesto;
                $scope.addedRemuneraciones = $scope.contacto.remuneraciones;
                $scope.modoEditar = new Array($scope.addedRemuneraciones.length).fill(false);
                $scope.imageURL = $scope.contacto.profileImageURL;
                $scope.contacto.sueldo = Number($stateParams.sueldo);

                $scope.uploader.formData = [$scope.contacto];
            }, function errorCallback(err) {
                console.log('Error' + err);
            });
        };

        $scope.findCentros = function () {
            if ($scope.SEARCH !== undefined) {
                $scope.centrosDeCosto = Costcenters.query({e: $scope.SEARCH.enterprise});
                //$scope.puestoDisabled = true;
            }
        };

        $scope.findRemuneraciones = function () {
            if ($scope.SEARCH !== undefined) {
                $scope.remuneraciones = Remuneraciones.query({e: $scope.SEARCH.enterprise});
            }
        };

        // Find a list of
        $scope.findEnterprises = function () {
            $scope.enterprises = Enterprises.query();
        };

        // Find a list of
        $scope.findPuestos = function () {
            if ($scope.SEARCH !== undefined) {
                $rootScope.puestos = Puestos.query({e: $scope.SEARCH.enterprise});
            }
        };

        $scope.findContacts = function () {
            if ($scope.SEARCH !== undefined) {
                $rootScope.contactos = Contacts.query({e: $scope.SEARCH.enterprise});
            }
        };


        // Find a list of Users
        $scope.findUsers = function () {
            if ($scope.authentication.user.roles[0] !== 'groso') {
                if ($scope.SEARCH !== undefined) {
                    if ($scope.SEARCH.enterprise !== undefined && $scope.SEARCH.enterprise !== null) {
                        Users.query({e: $scope.SEARCH.enterprise}, function (res) {
                            $rootScope.users = res;
                            for (var j = 0; j < $rootScope.users.length; j++) {
                                if ($rootScope.users[j].status === 'active') {
                                    $scope.switch[$rootScope.users[j]._id] = true;
                                } else {
                                    $scope.switch[$rootScope.users[j]._id] = false;
                                }
                            }
                            ;
                            Contacts.query({e: $scope.SEARCH.enterprise}, function (res) {
                                $rootScope.contacts = res;
                                for (var j = 0; j < $rootScope.contacts.length; j++) {
                                    if (!arrContains($rootScope.users, $rootScope.contacts[j].email)) {
                                        $scope.contactosDisponibles.push($rootScope.contacts[j]);
                                    }
                                    ;
                                }
                                ;
                                $scope.contactosDisponiblesFilter = $scope.contactosDisponibles;
                            }, function (error) {
                                // Error handler code
                            });
                        }, function (error) {
                            // Error handler code
                        });
                    } else {
                        console.log('[+] el usuario no tiene empresa');
                        $rootScope.users = [];
                    }

                }
            } else {
                if ($scope.enterpriseS !== undefined && $scope.enterpriseS !== null) {
                    Users.query({e: $scope.enterpriseS._id}, function (res) {
                        $rootScope.users = res;
                        for (var j = 0; j < $rootScope.users.length; j++) {
                            if ($rootScope.users[j].status === 'active') {
                                $scope.switch[$rootScope.users[j]._id] = true;
                            } else {
                                $scope.switch[$rootScope.users[j]._id] = false;
                            }
                        }
                        ;
                        Contacts.query({e: $scope.enterpriseS._id}, function (res) {
                            $rootScope.contacts = res;
                            //me quedo con los contactos q aun no han sido asignados a personal
                            for (var j = 0; j < $rootScope.contacts.length; j++) {
                                if (!arrContains($rootScope.users, $rootScope.contacts[j].email)) {
                                    $scope.contactosDisponibles.push($rootScope.contacts[j]);
                                }
                                ;
                            }
                            ;
                            $scope.contactosDisponiblesFilter = $scope.contactosDisponibles;
                        }, function (error) {
                            // Error handler code
                        });
                    }, function (error) {
                        // Error handler code
                    });
                } else {
                    // console.log('[+] no seleccionó una empresa');
                    $rootScope.users = [];
                }

            }
        };

        $scope.findContacts = function (emp) {
            if (emp !== undefined) {
                Users.query({e: emp._id}, function (res) {
                    $rootScope.users = res;
                    for (var j = 0; j < $rootScope.users.length; j++) {
                        if ($rootScope.users[j].status === 'active') {
                            $scope.switch[$rootScope.users[j]._id] = true;
                        } else {
                            $scope.switch[$rootScope.users[j]._id] = false;
                        }
                    }
                    ;
                    Contacts.query({e: emp._id}, function (res) {
                        $rootScope.contacts = res;
                        //me quedo con los contactos q aun no han sido asignados a personal
                        for (var j = 0; j < $rootScope.contacts.length; j++) {
                            if (!arrContains($rootScope.users, $rootScope.contacts[j].email)) {
                                $scope.contactosDisponibles.push($rootScope.contacts[j]);
                            }
                            ;
                        }
                        ;
                        $scope.contactosDisponiblesFilter = $scope.contactosDisponibles;
                    }, function (error) {
                        // Error handler code
                    });
                }, function (error) {
                    // Error handler code
                });
            }
        };

        //autocomplete
        $scope.searchText = null;

        //borro el contacto seleccionado de la lista de contactos porque el mismo no puede ser su superior
        $scope.seleccionoContacto = function () {
            var index = $rootScope.contacts.indexOf($scope.contacto);
            $rootScope.contacts.splice(index, 1);
            Users.query({}, function (res) {
                var b = false;
                for (var j = 0; j < res.length; j++) {
                    if (res[j].username ===
                        angular.lowercase($scope.contacto.firstName +
                            '.' + $scope.contacto.lastName).split(' ').join('')) {
                        b = true;
                        console.log('existe uno igual');
                    }
                }
                if (b === false) {
                    $scope.contacto.username = angular.lowercase($scope.contacto.firstName +
                        '.' + $scope.contacto.lastName).split(' ').join('');
                } else {
                    $scope.contacto.username = angular.lowercase($scope.contacto.firstName +
                        '.' + $scope.contacto.lastName + Math.floor((Math.random() * 6) + 1)).split(' ').join('');
                }
            }, function (error) {

            });
        };

        $scope.assignSwitchValue = function (item) {
            if (item.status === 'active') {
                $scope.switch[item._id] = false;
                $scope.cambiarEstado(item, 'disabled');
            } else {
                $scope.switch[item._id] = true;
                $scope.cambiarEstado(item, 'active');
            }
        };


        //modal para confirmacion de activar/desactivar usuario
        $scope.showConfirm = function (ev, item, n) {
            var confirm = $mdDialog.confirm();
            switch (n) {
                case 1:
                    confirm
                        .title('Activar Usuario')
                        .content('¿Está seguro que desea activar este usuario?')
                        .ariaLabel('Lucky day')
                        .ok('Activar')
                        .cancel('Cancelar')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function () {
                        $scope.cambiarEstado(item, 'active');
                    }, function () {
                        console.log('cancelaste activar');
                    });
                    break;
                case 2:
                    confirm
                        .title('Desactivar Usuario')
                        .content('¿Está seguro que desea desactivar este usuario?')
                        .ariaLabel('Lucky day')
                        .ok('Desactivar')
                        .cancel('Cancelar')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function () {
                        $scope.cambiarEstado(item, 'disabled');
                    }, function () {
                        console.log('cancelaste desactivar');
                    });
                    break;
                case 3:
                    confirm
                        .title('Eliminar Usuario')
                        .content('¿Está seguro que desea eliminar este usuario?')
                        .ariaLabel('Lucky day')
                        .ok('Eliminar')
                        .cancel('Cancelar')
                        .targetEvent(ev);
                    $mdDialog.show(confirm).then(function () {
                        $scope.cambiarEstado(item, 'deleted');
                    }, function () {
                        console.log('cancelaste desactivar');
                    });
                    break;
            }
        };

        $scope.cambiarEstado = function (user, status) {
            var id = user._id;
            var username = user.username;
            ChangeStatusUserById.query({userId: id, estado: status}, function () {
            });
            user.status = status;
            if (user.status === 'active') {
                $scope.switch[user._id] = true;
            } else {
                $scope.switch[user._id] = false;
            }
        };

        //AUTOCOMPLETE

        //el texto ingresado
        $scope.searchText = null;

        /**
         * Create filter function for a query string
         */
        //filtro el arreglo de usuarios disponibles con los que coincidan con text
        $scope.searchTextChange = function (text) {
            var lowercaseQuery = angular.lowercase(text);
            $scope.contactosDisponiblesFilter = $filter('filter')($scope.contactosDisponibles, {displayName: text});
        };

        $scope.showAdvancedContact = function (ev) {
            $scope.searchText = undefined;
            $mdDialog.show({
                controller: FormContactCtr,
                //controllerAs: 'vm',
                templateUrl: '/modules/personas/views/create-contact-modal.client.view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            })
                .then(function (answer) {
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });

            function FormContactCtr($scope, $mdDialog, Contacts) {

                $scope.hide = function () {
                    $mdDialog.hide();
                };

                $scope.cancel = function () {
                    $mdDialog.cancel();
                };

                $scope.create = function () {
                    var latitud = $scope.place.geometry.location.lat();
                    var longitud = $scope.place.geometry.location.lng();
                    // Create new Contact object
                    var contact = new Contacts({
                        firstName: $scope.firstName,
                        lastName: $scope.lastName,
                        email: $scope.email,
                        address: $scope.address,
                        city: $scope.city,
                        region: $scope.region ? $scope.region : undefined,
                        country: $scope.country,
                        phone: $scope.phone,
                        loc: [latitud, longitud],
                        //fax: this.fax,
                        web: $scope.web,
                        postalCode: $scope.postalCode,
                        status: 'active',
                        enterprise: $scope.enterprise ? $scope.enterprise._id : $parent.SEARCH.enterprise //,
                        //sub: this.sub._id

                    });

                    // Redirect after save
                    contact.$save(function (response) {
                        //$location.path('contacts/' + response._id);
                        if (response._id) {
                            // agregar sub al array

                            contact._id = response._id;
                            $rootScope.contacts.unshift(contact);

                        }

                        //$state.go('home.contacts');

                        // Clear form fields
                        $scope.firstName = '';
                        $scope.lastName = '';
                        $scope.email = '';
                        $scope.address = '';
                        $scope.city = '';
                        $scope.region = '';
                        $scope.country = '';
                        $scope.phone = '';
                        $scope.fax = '';
                        $scope.web = '';
                        $scope.postalCode = '';


                    }, function (errorResponse) {
                        $scope.error = errorResponse.data.message;
                    });
                };
            }

            $scope.types = "['address']";

            $scope.placeChanged = function () {
                console.log('the place is now: ', this.getPlace());
                //$scope.place = this.getPlace();
            };
        };

        var characterMap = {
            "À": "A",
            "Á": "A",
            "Â": "A",
            "Ã": "A",
            "Ä": "A",
            "Å": "A",
            "Ấ": "A",
            "Ắ": "A",
            "Ẳ": "A",
            "Ẵ": "A",
            "Ặ": "A",
            "Æ": "AE",
            "Ầ": "A",
            "Ằ": "A",
            "Ȃ": "A",
            "Ç": "C",
            "Ḉ": "C",
            "È": "E",
            "É": "E",
            "Ê": "E",
            "Ë": "E",
            "Ế": "E",
            "Ḗ": "E",
            "Ề": "E",
            "Ḕ": "E",
            "Ḝ": "E",
            "Ȇ": "E",
            "Ì": "I",
            "Í": "I",
            "Î": "I",
            "Ï": "I",
            "Ḯ": "I",
            "Ȋ": "I",
            "Ð": "D",
            "Ñ": "N",
            "Ò": "O",
            "Ó": "O",
            "Ô": "O",
            "Õ": "O",
            "Ö": "O",
            "Ø": "O",
            "Ố": "O",
            "Ṍ": "O",
            "Ṓ": "O",
            "Ȏ": "O",
            "Ù": "U",
            "Ú": "U",
            "Û": "U",
            "Ü": "U",
            "Ý": "Y",
            "à": "a",
            "á": "a",
            "â": "a",
            "ã": "a",
            "ä": "a",
            "å": "a",
            "ấ": "a",
            "ắ": "a",
            "ẳ": "a",
            "ẵ": "a",
            "ặ": "a",
            "æ": "ae",
            "ầ": "a",
            "ằ": "a",
            "ȃ": "a",
            "ç": "c",
            "ḉ": "c",
            "è": "e",
            "é": "e",
            "ê": "e",
            "ë": "e",
            "ế": "e",
            "ḗ": "e",
            "ề": "e",
            "ḕ": "e",
            "ḝ": "e",
            "ȇ": "e",
            "ì": "i",
            "í": "i",
            "î": "i",
            "ï": "i",
            "ḯ": "i",
            "ȋ": "i",
            "ð": "d",
            "ñ": "n",
            "ò": "o",
            "ó": "o",
            "ô": "o",
            "õ": "o",
            "ö": "o",
            "ø": "o",
            "ố": "o",
            "ṍ": "o",
            "ṓ": "o",
            "ȏ": "o",
            "ù": "u",
            "ú": "u",
            "û": "u",
            "ü": "u",
            "ý": "y",
            "ÿ": "y",
            "Ā": "A",
            "ā": "a",
            "Ă": "A",
            "ă": "a",
            "Ą": "A",
            "ą": "a",
            "Ć": "C",
            "ć": "c",
            "Ĉ": "C",
            "ĉ": "c",
            "Ċ": "C",
            "ċ": "c",
            "Č": "C",
            "č": "c",
            "C̆": "C",
            "c̆": "c",
            "Ď": "D",
            "ď": "d",
            "Đ": "D",
            "đ": "d",
            "Ē": "E",
            "ē": "e",
            "Ĕ": "E",
            "ĕ": "e",
            "Ė": "E",
            "ė": "e",
            "Ę": "E",
            "ę": "e",
            "Ě": "E",
            "ě": "e",
            "Ĝ": "G",
            "Ǵ": "G",
            "ĝ": "g",
            "ǵ": "g",
            "Ğ": "G",
            "ğ": "g",
            "Ġ": "G",
            "ġ": "g",
            "Ģ": "G",
            "ģ": "g",
            "Ĥ": "H",
            "ĥ": "h",
            "Ħ": "H",
            "ħ": "h",
            "Ḫ": "H",
            "ḫ": "h",
            "Ĩ": "I",
            "ĩ": "i",
            "Ī": "I",
            "ī": "i",
            "Ĭ": "I",
            "ĭ": "i",
            "Į": "I",
            "į": "i",
            "İ": "I",
            "ı": "i",
            "Ĳ": "IJ",
            "ĳ": "ij",
            "Ĵ": "J",
            "ĵ": "j",
            "Ķ": "K",
            "ķ": "k",
            "Ḱ": "K",
            "ḱ": "k",
            "K̆": "K",
            "k̆": "k",
            "Ĺ": "L",
            "ĺ": "l",
            "Ļ": "L",
            "ļ": "l",
            "Ľ": "L",
            "ľ": "l",
            "Ŀ": "L",
            "ŀ": "l",
            "Ł": "l",
            "ł": "l",
            "Ḿ": "M",
            "ḿ": "m",
            "M̆": "M",
            "m̆": "m",
            "Ń": "N",
            "ń": "n",
            "Ņ": "N",
            "ņ": "n",
            "Ň": "N",
            "ň": "n",
            "ŉ": "n",
            "N̆": "N",
            "n̆": "n",
            "Ō": "O",
            "ō": "o",
            "Ŏ": "O",
            "ŏ": "o",
            "Ő": "O",
            "ő": "o",
            "Œ": "OE",
            "œ": "oe",
            "P̆": "P",
            "p̆": "p",
            "Ŕ": "R",
            "ŕ": "r",
            "Ŗ": "R",
            "ŗ": "r",
            "Ř": "R",
            "ř": "r",
            "R̆": "R",
            "r̆": "r",
            "Ȓ": "R",
            "ȓ": "r",
            "Ś": "S",
            "ś": "s",
            "Ŝ": "S",
            "ŝ": "s",
            "Ş": "S",
            "Ș": "S",
            "ș": "s",
            "ş": "s",
            "Š": "S",
            "š": "s",
            "Ţ": "T",
            "ţ": "t",
            "ț": "t",
            "Ț": "T",
            "Ť": "T",
            "ť": "t",
            "Ŧ": "T",
            "ŧ": "t",
            "T̆": "T",
            "t̆": "t",
            "Ũ": "U",
            "ũ": "u",
            "Ū": "U",
            "ū": "u",
            "Ŭ": "U",
            "ŭ": "u",
            "Ů": "U",
            "ů": "u",
            "Ű": "U",
            "ű": "u",
            "Ų": "U",
            "ų": "u",
            "Ȗ": "U",
            "ȗ": "u",
            "V̆": "V",
            "v̆": "v",
            "Ŵ": "W",
            "ŵ": "w",
            "Ẃ": "W",
            "ẃ": "w",
            "X̆": "X",
            "x̆": "x",
            "Ŷ": "Y",
            "ŷ": "y",
            "Ÿ": "Y",
            "Y̆": "Y",
            "y̆": "y",
            "Ź": "Z",
            "ź": "z",
            "Ż": "Z",
            "ż": "z",
            "Ž": "Z",
            "ž": "z",
            "ſ": "s",
            "ƒ": "f",
            "Ơ": "O",
            "ơ": "o",
            "Ư": "U",
            "ư": "u",
            "Ǎ": "A",
            "ǎ": "a",
            "Ǐ": "I",
            "ǐ": "i",
            "Ǒ": "O",
            "ǒ": "o",
            "Ǔ": "U",
            "ǔ": "u",
            "Ǖ": "U",
            "ǖ": "u",
            "Ǘ": "U",
            "ǘ": "u",
            "Ǚ": "U",
            "ǚ": "u",
            "Ǜ": "U",
            "ǜ": "u",
            "Ứ": "U",
            "ứ": "u",
            "Ṹ": "U",
            "ṹ": "u",
            "Ǻ": "A",
            "ǻ": "a",
            "Ǽ": "AE",
            "ǽ": "ae",
            "Ǿ": "O",
            "ǿ": "o",
            "Þ": "TH",
            "þ": "th",
            "Ṕ": "P",
            "ṕ": "p",
            "Ṥ": "S",
            "ṥ": "s",
            "X́": "X",
            "x́": "x",
            "Ѓ": "Г",
            "ѓ": "г",
            "Ќ": "К",
            "ќ": "к",
            "A̋": "A",
            "a̋": "a",
            "E̋": "E",
            "e̋": "e",
            "I̋": "I",
            "i̋": "i",
            "Ǹ": "N",
            "ǹ": "n",
            "Ồ": "O",
            "ồ": "o",
            "Ṑ": "O",
            "ṑ": "o",
            "Ừ": "U",
            "ừ": "u",
            "Ẁ": "W",
            "ẁ": "w",
            "Ỳ": "Y",
            "ỳ": "y",
            "Ȁ": "A",
            "ȁ": "a",
            "Ȅ": "E",
            "ȅ": "e",
            "Ȉ": "I",
            "ȉ": "i",
            "Ȍ": "O",
            "ȍ": "o",
            "Ȑ": "R",
            "ȑ": "r",
            "Ȕ": "U",
            "ȕ": "u",
            "B̌": "B",
            "b̌": "b",
            "Č̣": "C",
            "č̣": "c",
            "Ê̌": "E",
            "ê̌": "e",
            "F̌": "F",
            "f̌": "f",
            "Ǧ": "G",
            "ǧ": "g",
            "Ȟ": "H",
            "ȟ": "h",
            "J̌": "J",
            "ǰ": "j",
            "Ǩ": "K",
            "ǩ": "k",
            "M̌": "M",
            "m̌": "m",
            "P̌": "P",
            "p̌": "p",
            "Q̌": "Q",
            "q̌": "q",
            "Ř̩": "R",
            "ř̩": "r",
            "Ṧ": "S",
            "ṧ": "s",
            "V̌": "V",
            "v̌": "v",
            "W̌": "W",
            "w̌": "w",
            "X̌": "X",
            "x̌": "x",
            "Y̌": "Y",
            "y̌": "y",
            "A̧": "A",
            "a̧": "a",
            "B̧": "B",
            "b̧": "b",
            "Ḑ": "D",
            "ḑ": "d",
            "Ȩ": "E",
            "ȩ": "e",
            "Ɛ̧": "E",
            "ɛ̧": "e",
            "Ḩ": "H",
            "ḩ": "h",
            "I̧": "I",
            "i̧": "i",
            "Ɨ̧": "I",
            "ɨ̧": "i",
            "M̧": "M",
            "m̧": "m",
            "O̧": "O",
            "o̧": "o",
            "Q̧": "Q",
            "q̧": "q",
            "U̧": "U",
            "u̧": "u",
            "X̧": "X",
            "x̧": "x",
            "Z̧": "Z",
            "z̧": "z",
            " ": ""
        };

        var chars = Object.keys(characterMap).join('|');
        var allAccents = new RegExp(chars, 'g');
        var firstAccent = new RegExp(chars, '');

        var removeAccents = function (string) {
            return string.replace(allAccents, function (match) {
                return characterMap[match]
            })
        }

        //end controller
    }
]);

'use strict';

angular.module('personas').controller('PersonasListController', ['$scope', 'Enterprises', 'Authentication', 'Users', '$timeout', 'ChangeStatusUserById', '$mdDialog', '$http', '$state',
    function ($scope, Enterprises, Authentication, Users, $timeout, ChangeStatusUserById, $mdDialog, $http, $state) {

        function init() {
            $scope.users = [];
            $scope.enterprises = [];
        }

        $scope.authentication = Authentication;

        $scope.$watch('authentication', function () {
            if (Authentication.user) {
                $timeout(function () { //making sure service set the value
                    $scope.findUsers(null);
                }, 0)
            }
        });

        $scope.findEnterprises = function () {
            Enterprises.query({}, function (res) {
                $scope.enterprises = res || [];
            });
        };

        $scope.findUsers = function (enterprise) {
            if (Authentication.user.roles[0] === 'groso') {
                Users.query({e: enterprise}, function (res) {
                    $scope.users = res;
                })
            } else {
                if (Authentication.user.enterprise.enterprise) {
                    Users.query({e: Authentication.user.enterprise.enterprise}, function (res) {
                        $scope.users = res;
                    })
                } else {
                    $scope.users = [];
                }
            }
        }

        $scope.assignSwitchValue = function (item) {

            if (item.status === 'active') {
                $scope.cambiarEstado(item, 'active');
            } else {
                $scope.cambiarEstado(item, 'disabled');
            }
        };

        $scope.cambiarEstado = function (user, status, callback) {
            var id = user._id;
            var username = user.username;
            ChangeStatusUserById.query({userId: user._id, estado: status}, function () {
                if (callback) callback(); //if loader needed
            });
        };

        $scope.remove = function (event, item) {

            console.log(item);

            var confirm = $mdDialog.confirm();
            confirm
                .title('Eliminar Usuario')
                .content('¿Está seguro que desea eliminar este usuario?')
                .ariaLabel('Lucky day')
                .ok('Eliminar')
                .cancel('Cancelar')
                .targetEvent(event);

            $mdDialog.show(confirm).then(
                function () {
                    $scope.cambiarEstado(item, 'deleted', function () {
                        // loader might be needed
                        if(item.puesto) {
                            item.oldPuesto = item.puesto;
                        }
                        item.puesto = undefined;
                        item.deleted = true;

                        $http.put('/api/users', item).success(function () {
                            $state.reload();
                        }).error(function (err) {
                            // $scope.error = response.message;
                            console.log(err);
                        });

                        $scope.findUsers($scope.selectedEnterprice || null)
                    });
                }
            )
        };

        $scope.selectedNewEnterprice = function () {
            if ($scope.selectedEnterprice && $scope.selectedEnterprice._id) {
                $scope.findUsers($scope.selectedEnterprice._id)
            }
        };

        init();
    }
]);

'use strict';

//Personas service used to communicate Personas REST endpoints
angular.module('personas').factory('Personas', ['$resource',
	function($resource) {
		return $resource('api/personas/:personaId', { personaId: '@_id'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

//Setting up route
angular.module('posts').config(['$stateProvider',
	function($stateProvider) {
		// Posts state routing
		$stateProvider.
		state('posts', {
			abstract: true,
			url: '/posts',
			template: '<ui-view/>'
		}).
		state('posts.list', {
			url: '',
			templateUrl: 'modules/posts/views/list-posts.client.view.html'
		}).
		state('posts.create', {
			url: '/create',
			templateUrl: 'modules/posts/views/create-post.client.view.html'
		}).
		state('posts.view', {
			url: '/:postId',
			templateUrl: 'modules/posts/views/view-post.client.view.html'
		}).
		state('posts.edit', {
			url: '/:postId/edit',
			templateUrl: 'modules/posts/views/edit-post.client.view.html'
		});
	}
]);
'use strict';

// Posts controller
angular.module('posts').controller('PostsController', ['$scope', '$stateParams', '$location', 'Authentication', 'Posts',
	function($scope, $stateParams, $location, Authentication, Posts ) {
		$scope.authentication = Authentication;

		// Create new Post
		$scope.create = function() {
			// Create new Post object
			var post = new Posts ({
				name: this.name
			});

			// Redirect after save
			post.$save(function(response) {
				$location.path('posts/' + response._id);

				// Clear form fields
				$scope.name = '';
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Remove existing Post
		$scope.remove = function( post ) {
			if ( post ) { post.$remove();

				for (var i in $scope.posts ) {
					if ($scope.posts [i] === post ) {
						$scope.posts.splice(i, 1);
					}
				}
			} else {
				$scope.post.$remove(function() {
					$location.path('posts');
				});
			}
		};

		// Update existing Post
		$scope.update = function() {
			var post = $scope.post ;

			post.$update(function() {
				$location.path('posts/' + post._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Posts
		$scope.find = function() {
			$scope.posts = Posts.query();
		};

		// Find existing Post
		$scope.findOne = function() {
			$scope.post = Posts.get({ 
				postId: $stateParams.postId
			});
		};
	}
]);
'use strict';

//Posts service used to communicate Posts REST endpoints
angular.module('posts').factory('Posts', ['$resource',
	function($resource) {
		return $resource('api/posts/:postId', { postId: '@_id'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Procesos module
angular.module('procedimientos').run(['Menus',
	function(Menus) {
		// Add the Procesos dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Procedimientos',
			state: 'procedimientos',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'procedimientos', {
			title: 'List Procedimientos',
			state: 'procedimientos.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'procedimientos', {
			title: 'Create Procedimiento',
			state: 'procedimiento.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('procedimientos').config(['$stateProvider',
	function($stateProvider) {
		// Procedimientos state routing
		$stateProvider.
		state('procedimientos', {
			abstract: true,
			url: '/procedimientos',
			template: '<ui-view/>'
		}).
		state('procedimientos.list', {
			url: '',
			templateUrl: 'modules/procedimientos/views/list-procedimientos.client.view.html'
		}).
		state('procedimientos.create', {
			url: '/create',
			templateUrl: 'modules/procedimientos/views/create-procedimiento.client.view.html'
		}).
		state('procedimientos.view', {
			url: '/:procedimientoId',
			templateUrl: 'modules/procedimientos/views/view-procedimiento.client.view.html'
		}).
		state('procedimientos.edit', {
			url: '/:procedimientoId/edit',
			templateUrl: 'modules/procedimientos/views/edit-procedimiento.client.view.html'
		});
	}
]);
'use strict';

// Procedimientos controller
angular.module('procedimientos').controller('ProcedimientosController', ['$scope', '$rootScope','$stateParams', '$location', 'Authentication', 'Procedimientos', 'Procesos', '$mdBottomSheet', 'Enterprises', 'Subs', '$mdDialog', 'Puestos',
	function($scope, $rootScope, $stateParams, $location, Authentication, Procedimientos, Procesos, $mdBottomSheet, Enterprises, Subs, $mdDialog, Puestos ) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.findAll();
			//console.log('search: ', $scope.SEARCH);
		});

		$scope.nombreProcesoFiltro = undefined;

		$scope.backButton = function () {
        	history.back()
        }

		// Create new Proceso
		$scope.create = function() {
			// Create new Proceso object
			var procedimiento = new Procedimientos ({
				name: this.name,
				description: this.description,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
				// puesto: this.puesto ? this.puesto._id : undefined
			});

			// Redirect after save
			procedimiento.$save(function(response) {
				//$location.path('procesos/' + response._id);

				if(response._id) {
					// agregar sub al array

					procedimiento._id = response._id;
					$rootScope.procedimientos.unshift(procedimiento);

				}

				// Clear form fields
				$scope.name = '';

				$mdBottomSheet.hide();
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un producto
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Procedimiento')
	          .content('¿Está seguro que desea eliminar este procedimiento?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};	

		// Remove existing Proceso
		$scope.remove = function( procedimiento ) {
			console.log(procedimiento, 'procedimiento');
			if ( procedimiento ) { procedimiento.$remove();

				for (var i in $scope.procedimientos ) {
					if ($scope.procedimientos [i] === procedimiento ) {
						$scope.procedimientos.splice(i, 1);
					}
				}
			} else {
				$scope.procedimientos.$remove(function() {
					$location.path('procedimientos');
				});
			}
		};

		$scope.eliminar = function(procedimiento, proceso){
			for ( var i in $scope.procesos){
				if ($scope.procesos[i].name === proceso){
					for (var j in $scope.procesos[i].procedimientos){
						if ($scope.procesos[i].procedimientos[j].procedimiento.name === procedimiento.name){
							var proceso = $scope.procesos[i];
							$scope.procesos[i].procedimientos.splice(j, 1);
						}
					}
				}
			}
			console.log(proceso, 'proceso');
			if (this.enterprise !== undefined) { proceso.enterprise = this.enterprise._id } else { proceso.enterprise = proceso.enterprise._id}; 
			if (this.sub !== undefined) { proceso.sub = this.sub._id } else if ((proceso.sub!==undefined)&&(proceso.sub!==null)) { proceso.sub = proceso.sub._id};

			proceso.$update(function() {
				$location.path('procedimientos');
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});

		}

		// Update existing Proceso
		$scope.update = function() {
			var procedimiento = $scope.procedimiento ;

			if (this.enterprise !== undefined) { procedimiento.enterprise = this.enterprise._id } else { procedimiento.enterprise = procedimiento.enterprise._id}; 
			if (this.puesto !== undefined) { procedimiento.puesto = this.puesto._id } else if ((procedimiento.puesto!==undefined)&&(procedimiento.puesto!==null)) { procedimiento.puesto = procedimiento.puesto._id};

			procedimiento.$update(function() {
				history.back()
				// $location.path('procesos'); 
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//filtro para listar los procedimientos de un proceso
		$scope.filtrarProcesos = function(proceso){
	    	$scope.nombreProcesoFiltro = proceso.name;
	    	$scope.procedimientosFiltro = proceso.procedimientos;
	    }

	    $scope.eliminarFiltro = function(){
	    	$scope.nombreProcesoFiltro = undefined;
	    }

	    $scope.findAll = function(){
			$scope.find();
			$scope.findProcesos();
		}

		// Find a list of Procesos
		$scope.find = function() {
			$scope.nombreProcesoFiltro = undefined;
			if ($scope.SEARCH !== undefined) { $rootScope.procedimientos = Procedimientos.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of SBUs
		$scope.findEnterprises = function() {
			if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({e: $scope.SEARCH.enterprise }); };
			
		};

		// Find a list of SBUs
		$scope.findPuestos = function() {
			if($scope.SEARCH !== undefined) { $scope.puestos = Puestos.query({ e: $scope.SEARCH.enterprise }); }			
		};

		$scope.findProcesos = function() {
			if($scope.SEARCH !== undefined) { $scope.procesos = Procesos.query({ e: $scope.SEARCH.enterprise }); }			
		};

		// Find existing Proceso
		$scope.findOne = function() {
			$scope.procedimiento = Procedimientos.get({ 
				procedimientoId: $stateParams.procedimientoId
			});
		};
	}
]);
'use strict';

//Procesos service used to communicate Procesos REST endpoints
angular.module('procedimientos').factory('Procedimientos', ['$resource',
	function($resource) {
		return $resource('api/procedimientos/:procedimientoId', { procedimientoId: '@_id'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Procesos module
angular.module('procesos').run(['Menus',
	function(Menus) {
		// Add the Procesos dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Procesos',
			state: 'procesos',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'procesos', {
			title: 'List Procesos',
			state: 'procesos.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'procesos', {
			title: 'Create Proceso',
			state: 'procesos.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('procesos').config(['$stateProvider',
	function($stateProvider) {
		// Procesos state routing
		$stateProvider.
		state('procesos', {
			abstract: true,
			url: '/procesos',
			template: '<ui-view/>'
		}).
		state('procesos.list', {
			url: '',
			templateUrl: 'modules/procesos/views/list-procesos.client.view.html'
		}).
		state('procesos.create', {
			url: '/create',
			templateUrl: 'modules/procesos/views/create-proceso.client.view.html'
		}).
		state('procesos.view', {
			url: '/:procesoId',
			templateUrl: 'modules/procesos/views/view-proceso.client.view.html'
		}).
		state('procesos.edit', {
			url: '/:procesoId/edit',
			templateUrl: 'modules/procesos/views/edit-proceso.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('procesos').controller('ProcesosCreateController', ['user', 'proceso', 'enterprises', '$state', 'procesos', 'procedimientos', 'Procedimientos', 'Categories', '$scope', 'categories',
	function(user, proceso, enterprises, $state, procesos, procedimientos, Procedimientos, Categories, $scope, categories) {

		// asignacion de modelos
		this.user = user;
		this.proceso = proceso;
		this.enterprises = enterprises;
		this.procedimientos = procedimientos;

		this.seleccionHabilitada = false;
		this.agregarHabilitada = false;

		$scope.procedimientosAgregados = [];
		$scope.procedimientosVista = [];
        $scope.categoryType = null;

		// asignacion de funciones
		this.create = create;
		this.habilitoSeleccion = habilitoSeleccion;
		this.habilitoAgregar = habilitoAgregar;
		this.deshabilitoSeleccion = deshabilitoSeleccion;
		this.exists = exists;
		this.toggle = toggle;
		this.createProcedimiento = createProcedimiento;


		// definicion de funciones

		function habilitoSeleccion(){
			this.seleccionHabilitada = true;			
		}//end habilitoSeleccion

		function habilitoAgregar (){
			this.agregarHabilitada = true;			
		} //end habilitoAgregar

		function deshabilitoSeleccion (){
			if (this.seleccionHabilitada === true){
				this.seleccionHabilitada = false;	
			}
			if (this.agregarHabilitada === true){
				this.agregarHabilitada = false;
			}					
		} //end deshabilitoSeleccion

		function exists (item, list) {
	        return list.indexOf(item._id) > -1;
	    } //end exists

        $scope.findCategoryTypes = function() {
        	$scope.categoryTypes = categories;
        };

	    function toggle(item, list) {
	    	var p = { procedimiento: {}, orden: undefined };
	        var idx = list.indexOf(item._id);
	        if (idx > -1) {
	        	list.splice(idx, 1);	
	        	for ( var i=0; i<$scope.procedimientosAgregados.length;i++ ){
		    		if ($scope.procedimientosAgregados[i].procedimiento === item){
		    			$scope.procedimientosAgregados.splice($scope.procedimientosAgregados[i].procedimiento, 1);	
		    		}
		    	}
	        }
	        else {
	        	list.push(item._id); 
	        	p.procedimiento = item;
	        	p.orden = $scope.procedimientosAgregados.length + 1; 
	        	$scope.procedimientosAgregados.push(p);
	        	$scope.errorProc = undefined;
	        }	
	    }; //end toggle

	    function createProcedimiento (){
			var procedimiento = new Procedimientos ({
				name: this.nameProcedimiento,
				description: this.descriptionProcedimiento,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id,
			});

			this.nameProcedimiento = '';
			this.nameProcedimiento = undefined;
			this.descriptionProcedimiento = '';
			this.descriptionProcedimiento = undefined;	

			var p = { procedimiento: {}, orden: undefined };
			p.procedimiento = procedimiento;
			p.orden = $scope.procedimientosAgregados.length + 1;


			procedimiento.$save(function(response) {
				//$location.path('procesos/' + response._id);

				if(response._id) {
					// agregar sub al array
					procedimiento._id = response._id;
					$scope.procedimientosAgregados.push(p);
					$scope.procedimientosVista.push(p);
					// console.log($rootScope.procedimientosAgregados);
					if ($scope.procedimientos !== undefined){
						$scope.procedimientos.unshift(procedimiento);
					}					
				}

			}, function(errorResponse) {
				this.error = errorResponse.data.message;
				// console.log($scope.error, 'error');
			});

			console.log($scope.procedimientosAgregados, 'procedimientosAgregados');
			
			this.agregarHabilitada = false
		} //end createProcedimiento

		function create () {
			if (this.name !== undefined){
				var proceso = new procesos ({
					name: this.name,
					procedimientos: $scope.procedimientosAgregados,
					category: $scope.categoryType,
					enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id
				});

				// Redirect after save
				proceso.$save(function(response) {
					//$location.path('procesos/' + response._id);

					if(response._id) {
						// agregar sub al array

						proceso._id = response._id;
						$scope.procedimientosAgregados = [];

					}

					$state.go('home.procesos');

					// Clear form fields
					$scope.name = '';

					
				}, function(errorResponse) {
					this.error = errorResponse.data.message;
				});
			}
			else{
				this.errorName = 'Debe indicar el nombre del proceso';
			}		
		}; //end create
	}
]);
'use strict';

// Comprobantes controller
angular.module('procesos').controller('ProcesosEditController', ['user', 'proceso', 'enterprises', '$location', 'procedimientos', 'procesos', '$mdDialog', '$scope', 'Procedimientos', 'categories',
	function(user, proceso, enterprises, $location, procedimientos, procesos,  $mdDialog, $scope, Procedimientos, categories) {

		// asignacion de modelos
		this.user = user;
		this.proceso = proceso;
		this.enterprises = enterprises;
		this.procedimientos = procedimientos;
		this.procesos = procesos;

		// this.reorden = reorden;

		var procedimientosEdit = [];
		var procedimientosAgregados = [];
		var errorDuplicado = undefined;
		var duplicado = false;

		// asignacion de funciones
		this.removeProcedimiento = removeProcedimiento;
		this.addProcedimiento = addProcedimiento;
		this.showConfirm = showConfirm;
		this.habilitaReorden = habilitaReorden;
		this.guardaReorden = guardaReorden;
		this.controlarDuplicado = controlarDuplicado;
		this.habilitoSeleccion = habilitoSeleccion;
		this.habilitoAgregar = habilitoAgregar;
		this.deshabilitoSeleccion = deshabilitoSeleccion;
		this.createProcedimiento = createProcedimiento;
		this.habilitarActualizar = habilitarActualizar;
        this.habilitarActualizarCategoria = habilitarActualizarCategoria;
		this.updateName = updateName;
        this.updateCategory = updateCategory;

        this.backButton = backButton;

		this.reorden = false;
		this.duplicado = duplicado;
		this.actualizo = false;
        this.actualizoCategoria = false;
		this.errorDuplicado = errorDuplicado;

		this.seleccionHabilitada = false;
		this.agregarHabilitada = false;
        $scope.categoryTypes = [];

        findCategoryTypes();

        function backButton() {
        	history.back()
        }

        function findCategoryTypes() {
            $scope.categoryTypes = categories;
        }

		function habilitarActualizar(){
			this.actualizo = true;
		}

        function habilitarActualizarCategoria(category){
            this.actualizoCategoria = !(proceso.category && category.id === proceso.category.id);
        }

		function updateName(nombre){
			if (nombre !== undefined){
				var proceso2 = proceso;
				proceso2.name = nombre;
				proceso2.enterprise = proceso2.enterprise._id;
				this.actualizo = false;
				proceso2.$update(function() {
				}, function(errorResponse) {
					this.error = errorResponse.data.message;
				});
			}
		}

        function updateCategory(category){
            if (category !== undefined){
                var proceso2 = proceso;
                proceso2.category = category._id;
                proceso2.enterprise = proceso2.enterprise._id;
                this.actualizoCategoria = false;
                proceso2.$update(function() {
                }, function(errorResponse) {
                    this.error = errorResponse.data.message;
                });
            }
        }

		// definicion de funciones

		function removeProcedimiento(item){
			procedimientosEdit = this.proceso.procedimientos;
			for (var i in procedimientosEdit) {
				if (procedimientosEdit[i] === item ) {
					procedimientosEdit.splice(i, 1);
				}
			}
			update(procedimientosEdit);
		}; //end removeProcedimientos

		function addProcedimiento(item){
			procedimientosEdit = this.proceso.procedimientos;
			var max = 1;
			for (var i in procedimientosEdit){
				console.log(procedimientosEdit[i].orden);
				if (procedimientosEdit[i].orden >= max){
					max = procedimientosEdit[i].orden;
				}
			}
			var p = { procedimiento: {}, orden: undefined };
			var ok = false;
			for (var i in this.proceso.procedimientos ){
				if (this.proceso.procedimientos[i].procedimiento._id === item._id){
					ok = true;
				}
			}
			if (ok === false ){
				p.procedimiento = item;
				if (max >= procedimientosEdit.length){
					p.orden = max + 1;
				}
				else{
					p.orden = procedimientosEdit.length + 1;
				}
				procedimientosEdit.push(p);		
				update(procedimientosEdit);	
			}
		} //end addProcedimiento

		function update(procedimientos) {
			var proceso2 = proceso;
			proceso2.procedimientos = procedimientos;
			proceso2.enterprise = proceso2.enterprise._id
			// if (this.sub !== undefined) { proceso.sub = this.sub._id } else if ((proceso.sub!==undefined)&&(proceso.sub!==null)) { proceso.sub = proceso.sub._id};

			proceso2.$update(function() {
				// $location.path('procesos/view/' + proceso._id);
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		}; //end update

		function habilitaReorden (){			
			this.reorden = true;
		}; //end habilitaReorden

		function controlarDuplicado (orden,item){	
			this.numeroError = undefined;
			duplicado = false;	
			for ( var i=0; i<this.proceso.procedimientos.length;i++ ){
				if (this.proceso.procedimientos[i].orden === orden){
					if (this.proceso.procedimientos[i] !== item ){
						duplicado = true;
						this.numeroError = orden;
						return 0
					}
					else {
						errorDuplicado = undefined;
						this.numeroError = undefined;
						duplicado = false;
					}
				}
			}
		}; //end controlarDuplicado

		function guardaReorden (proceso){
			if (duplicado === false){
				this.reorden = false;
				if (this.enterprise !== undefined) { proceso.enterprise = this.enterprise._id } else { proceso.enterprise = proceso.enterprise._id}; 
				// if (this.sub !== undefined) { proceso.sub = this.sub._id } else if ((proceso.sub!==undefined)&&(proceso.sub!==null)) { proceso.sub = proceso.sub._id};
				errorDuplicado = undefined;
				proceso.$update(function() {
					console.log('bien hecho');
					// $location.path('procesos/view/' + proceso._id);
				}, function(errorResponse) {
					this.error = errorResponse.data.message;
				});
			}
			else {
				errorDuplicado = 'No se pueden asignar dos numeros de orden iguales';
			}

		}; //end guardaReorden

		// definicion de funciones
		function showConfirm(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title(item.procedimiento.name)
	          .content(item.procedimiento.description)
	          .ariaLabel('Lucky day')
	          .ok('Editar')
	          .cancel('Cerrar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		       $location.path('procedimientos/' + item.procedimiento._id + '/edit' );
		    }, function() {
		      // console.log('cerraste');
		    });
		};	//end showConfirm

		function habilitoSeleccion(){
			this.seleccionHabilitada = true;			
		}//end habilitoSeleccion

		function habilitoAgregar (){
			this.agregarHabilitada = true;			
		} //end habilitoAgregar

		function deshabilitoSeleccion (){
			if (this.seleccionHabilitada === true){
				this.seleccionHabilitada = false;	
			}
			if (this.agregarHabilitada === true){
				this.agregarHabilitada = false;
			}					
		} //end deshabilitoSeleccion

		function createProcedimiento (){
			procedimientosEdit = this.proceso.procedimientos;
			//control para ponerle el ultimo numero que hay
			var max = 1;
			for (var i in procedimientosEdit){
				console.log(procedimientosEdit[i].orden);
				if (procedimientosEdit[i].orden >= max){
					max = procedimientosEdit[i].orden;
				}
			}

			var procedimiento = new Procedimientos ({
				name: this.nameProcedimiento,
				description: this.descriptionProcedimiento,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id,
			});

			this.nameProcedimiento = '';
			this.nameProcedimiento = undefined;
			this.descriptionProcedimiento = '';
			this.descriptionProcedimiento = undefined;	
			

			if (this.enterprise !== undefined) { proceso.enterprise = this.enterprise._id } else { proceso.enterprise = proceso.enterprise._id}; 
			// if (this.sub !== undefined) { proceso.sub = this.sub._id } else if ((proceso.sub!==undefined)&&(proceso.sub!==null)) { proceso.sub = proceso.sub._id};

			procedimiento.$save(function(response) {
				//$location.path('procesos/' + response._id);

				if(response._id) {
					// agregar sub al array
					procedimiento._id = response._id;
					var p = { procedimiento: {}, orden: undefined };
					p.procedimiento = procedimiento;
					if (max >= procedimientosEdit.length){
						p.orden = max + 1;
					}
					else{
						p.orden = procedimientosEdit.length + 1;
					}
					procedimientosEdit.push(p);	
					var proceso2 = proceso;
					proceso2.procedimientos = procedimientosEdit;
					proceso2.$update(function() {
						// $location.path('procesos/view/' + proceso._id);
					}, function(errorResponse) {
						this.error = errorResponse.data.message;
					});

					if (procedimientos !== undefined){
						procedimientos.unshift(procedimiento);
					}					
				}

			}, function(errorResponse) {
				this.error = errorResponse.data.message;
				// console.log($scope.error, 'error');
			});
			
			this.agregarHabilitada = false
		} //end createProcedimiento

	} //end function
]);
'use strict';

// Comprobantes controller
angular.module('procesos').controller('ProcesosListController', ['$location', 'user', 'procesos', 'enterprises', '$mdDialog', 'categories',
	function($location, user, procesos, enterprises, $mdDialog, categories) {

		// asignacion de modelos
		this.user = user;
		this.procesos = procesos;
		this.enterprises = enterprises;
		this.categories = categories;

		console.log(procesos);

		// asignacion de funciones
		this.showConfirm = showConfirm;
		this.remove = remove;

		/*function groupProcesos() {
			var proc = {};
            proc['tele'] = [];
			for(var i = 0; i < procesos.length; i++) {
				proc['tele'].push(procesos[i]);
			}

			console.log(proc);

			return proc;
		}*/

		// definicion de funciones
		function showConfirm(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Proceso')
	          .content('¿Está seguro que desea eliminar este proceso?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		}	//end showConfirm

		// Remove existing Proceso
		function remove( proceso ) {
			if ( proceso ) { proceso.$remove();

				for (var i in procesos ) {
					if (procesos [i] === proceso ) {
						procesos.splice(i, 1);
					}
				}
			} else {
				proceso.$remove(function() {
					$location.path('procesos');
				});
			}
		} //end Remove

	}//end function
]);

'use strict';

// Procesos controller
angular.module('procesos').controller('ProcesosController', ['$scope', '$rootScope','$stateParams', '$location', 'Authentication', 'Procesos', '$mdBottomSheet', 'Enterprises', 'Subs', '$mdDialog', 'Areas', 'Procedimientos', 'lodash', '$http', '$state',
	function($scope, $rootScope, $stateParams, $location, Authentication, Procesos, $mdBottomSheet, Enterprises, Subs, $mdDialog, Areas, Procedimientos, lodash, $http, $state ) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.findAll();
			$scope.findProcedimientos();
		});

		var _ = lodash;

		$scope.seleccionHabilitada = false;
		$scope.agregarHabilitada = false;

		$rootScope.procedimientosEdit = [];

		$scope.habilitoSeleccion = function(){
			$scope.seleccionHabilitada = true;			
		};

		$scope.habilitoAgregar = function(){
			$scope.agregarHabilitada = true;			
		};

		$scope.deshabilitoSeleccion = function(){
			if ($scope.seleccionHabilitada === true){
				$scope.seleccionHabilitada = false;	
			}
			if ($scope.agregarHabilitada === true){
				$scope.agregarHabilitada = false;
			}
		};

		// Create new Proceso
		$scope.create = function() {
			if (this.name !== undefined){
				// if ($scope.selected.length > 0 ){
					// Create new Proceso object
					var proceso = new Procesos ({
						name: this.name,
						procedimientos: $rootScope.procedimientosAgregados,
						// description: this.description,
						enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
						// sub: this.sub ? this.sub._id : undefined
					});

					// Redirect after save
					proceso.$save(function(response) {
						//$location.path('procesos/' + response._id);

						if(response._id) {
							// agregar sub al array

							proceso._id = response._id;
							$rootScope.procesos.unshift(proceso);
							$rootScope.procedimientosAgregados = [];

						}

						$state.go('home.procesos');

						// Clear form fields
						$scope.name = '';

						
					}, function(errorResponse) {
						$scope.error = errorResponse.data.message;
					});
				// }
				// else{
				// 	$scope.errorProc = 'Debe seleccionar procedimientos para el proceso';
				// } 	
			}
			else{
				$scope.errorName = 'Debe indicar el nombre del proceso';
			}		
		};

		$scope.createProcedimiento = function(){
	
			var procedimiento = new Procedimientos ({
				name: this.nameProcedimiento,
				description: this.descriptionProcedimiento,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
			});

			procedimiento.$save(function(response) {
				//$location.path('procesos/' + response._id);

				if(response._id) {
					// agregar sub al array
					procedimiento._id = response._id;
					$rootScope.procedimientosAgregados.push(procedimiento._id);
					$scope.procedimientosVista.push(procedimiento);
					console.log($rootScope.procedimientosAgregados);
					if ($rootScope.procedimientos !== undefined){
						$rootScope.procedimientos.unshift(procedimiento);
					}					
				}

				$scope.nameProcedimiento = '';
				$scope.descriptionProcedimiento = '';

			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
				console.log($scope.error, 'error');
			});
			
			$scope.agregarHabilitada = false
		};

		$scope.borrarErrores = function(){
			$scope.errorProc = undefined;
			$scope.errorName = undefined;
		};

		//abre modal para eliminar un producto
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Proceso')
	          .content('¿Está seguro que desea eliminar este proceso?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};	

		// Remove existing Proceso
		$scope.remove = function( proceso ) {
			if ( proceso ) { proceso.$remove();

				for (var i in $scope.procesos ) {
					if ($scope.procesos [i] === proceso ) {
						$scope.procesos.splice(i, 1);
					}
				}
			} else {
				$scope.proceso.$remove(function() {
					$location.path('procesos');
				});
			}
		};

		// Update existing Proceso
		$scope.update = function() {
			// console.log($scope.procedimientosGuardar, 'guardar');
			var proceso = $scope.proceso;
			if( $rootScope.procedimientosEdit.length !== 0 ){
				for (var i in $rootScope.procedimientosEdit) {
					var id = $rootScope.procedimientosEdit[i]._id;
					$rootScope.procedimientosAgregados.push(id);
				}
				proceso.procedimientos = $rootScope.procedimientosAgregados;
			}	

			if (this.enterprise !== undefined) { proceso.enterprise = this.enterprise._id } else { proceso.enterprise = proceso.enterprise._id}; 
			// if (this.sub !== undefined) { proceso.sub = this.sub._id } else if ((proceso.sub!==undefined)&&(proceso.sub!==null)) { proceso.sub = proceso.sub._id};

			proceso.$update(function() {
				$location.path('procesos');
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		$scope.procedimientosVista = [];
		$rootScope.procedimientosAgregados = [];
		$scope.selected = [];

	    $scope.toggle = function (item, list) {
	    	var idx2 = $rootScope.procedimientosAgregados.indexOf(item._id)
	        var idx = list.indexOf(item._id);
	        if (idx > -1) {
	        	list.splice(idx, 1);	
	        	$rootScope.procedimientosAgregados.splice(idx2, 1);
	        	$scope.procedimientosVista.splice(idx2, 1)
	        }
	        else {
	        	list.push(item._id); 
	        	$rootScope.procedimientosAgregados.push(item._id);
	        	$scope.procedimientosVista.push(item)
	        	$scope.errorProc = undefined;
	        }	
	    };

	    $scope.exists = function (item, list) {
	        return list.indexOf(item._id) > -1;
	    };

		$scope.findAll = function(){
			$scope.find();
		};

		$scope.addProcedimiento = function(item){
			console.log(item,'item');
			var ok = false;
			for (var i in $scope.proceso.procedimientos ){
				if ($scope.proceso.procedimientos[i]._id === item._id){
					ok = true;
				}
			}
			console.log(ok, 'ok');
			if (ok === false ){
				$rootScope.procedimientosEdit = this.proceso.procedimientos;
				$rootScope.procedimientosEdit.push(item);			
			}
		};

		$scope.removeProcedimiento = function(item){
			$rootScope.procedimientosEdit = this.proceso.procedimientos;
			for (var i in $rootScope.procedimientosEdit) {
				if ($rootScope.procedimientosEdit[i] === item ) {
					$rootScope.procedimientosEdit.splice(i, 1);
				}
			}
		};

		// Find a list of Procesos
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.procesos = Procesos.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of SBUs
		$scope.findEnterprises = function() {
			if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({e: $scope.SEARCH.enterprise }); }
			
		};

		// Find a list of SBUs
		$scope.findSubs = function() {
			if($scope.SEARCH !== undefined) { $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise }); }			
		};

		// Find a list of Areas
		$scope.findAreas = function() {
			if($scope.SEARCH !== undefined) { $scope.areas = Areas.query({ e: $scope.SEARCH.enterprise }); }			
		};

		$scope.findProcedimientos = function() {
			if($scope.SEARCH !== undefined) { $scope.procedimientos = Procedimientos.query({ e: $scope.SEARCH.enterprise }); }
		};
		// Find existing Proceso
		$scope.findOne = function() {
			$scope.proceso = Procesos.get({ 
				procesoId: $stateParams.procesoId
			});
		};
	}
]);
'use strict';

// Comprobantes controller
angular.module('procesos').controller('ProcesosViewController', ['user', 'proceso',
	function(user, proceso) {

		// asignacion de modelos
		this.user = user;
		this.proceso = proceso;

        // asignacion de funciones

		// definicion de funciones

	}
]);

'use strict';

//Procesos service used to communicate Procesos REST endpoints
angular.module('procesos').factory('Procesos', ['$resource',
	function($resource) {
		return $resource('api/procesos/:procesoId', { procesoId: '@_id'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Products module
angular.module('products').run(['Menus',
	function(Menus) {
		// Add the Products dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Products',
			state: 'products',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'products', {
			title: 'List Products',
			state: 'products.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'products', {
			title: 'Create Product',
			state: 'products.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('products').config(['$stateProvider',
	function($stateProvider) {
		// Products state routing
		$stateProvider.
		state('products', {
			abstract: true,
			url: '/products',
			template: '<ui-view/>'
		}).
		state('products.list', {
			url: '',
			templateUrl: 'modules/products/views/list-products.client.view.html'
		}).
		state('products.create', {
			url: '/create',
			templateUrl: 'modules/products/views/create-product.client.view.html'
		}).
		state('products.view', {
			url: '/:productId',
			templateUrl: 'modules/products/views/view-product.client.view.html'
		}).
		state('products.edit', {
			url: '/:productId/edit',
			templateUrl: 'modules/products/views/edit-product.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('products').controller('ProductosCreateController', ['$rootScope', '$scope','user', 'product', 'enterprises', '$state', 'products', 'categories', 'providers', 'tipoProducto', '$filter', 'productos',
	function($rootScope, $scope, user, product, enterprises, $state, products, categories, providers, tipoProducto, $filter, productos) {

		$rootScope.tipoProducto = tipoProducto;
		// asignacion de modelos
		this.user = user;
		this.product = product; //producto a crear
		this.enterprises = enterprises;
		this.products = products; //modelo para creacion de producto
		this.productos = productos; //array de productos en bbdd
		this.categories = categories;
		this.providers = providers;
		this.tipoProducto = tipoProducto;

		//variables de finds
		this.metrics = [];
		this.taxes = [];

		this.selectedMode = 'md-scale';
	    this.selectedDirection = 'left';

		this.proveedor = undefined;
		var idProveedor = 0; 
		var valorTax = 0; //valor del tax elegido
		var esProducto = false;
		var esInsumo = false;
		var esMateriaPrima = false;
		var category1 = 0;

		this.seleccionHabilitada = false;

		this.habilitarCheck = [];
		this.cantidad = []; //arreglo de cantidades seleccionadas por producto 
		this.selected = []; //arreglo que uso para comparar si una MP ya fue seleccionada
		this.hayCantidad = [];

		this.productosAgregados = []; //donde voy guardando las MP elegidas

		this.errorProducto = undefined;

		//var para la creacion de la produccion
		$scope.costoTotal = 0; //va calculando el costo del producto en base a las MP elegidas

		// asignacion de funciones
		this.create = create;
		this.findTaxes = findTaxes;
		this.findMetrics = findMetrics;
		this.searchTextChange = searchTextChange;
		this.selectedItemChange = selectedItemChange;
		this.asignarTax = asignarTax;
		this.asignarTipos = asignarTipos; //define las variables indicando el tipo de producto, para luego usaar en el create
		this.habilitoSeleccion = habilitoSeleccion;
		this.habilitoCheck = habilitoCheck;
		this.toggle = toggle;
		this.rutaVolver = rutaVolver;

		function rutaVolver (){
			$state.go('home.products', $rootScope.estadoActualParams);
		};

		// definicion de funciones

		function asignarTipos (){
			if (tipoProducto == 'p'){
				esProducto = true;
				for (var i in categories){
					if (categories[i].name == 'Productos Terminados'){
						category1 = categories[i]._id;
					}
				}
			}
			else{
				if (tipoProducto == 'm'){
					esMateriaPrima = true;
					for (var i in categories){
						if (categories[i].name == 'Materia Prima'){
							category1 = categories[i]._id;
						}
					}
				}
				else{
					esInsumo = true;
					for (var i in categories){
						if (categories[i].name == 'Insumo'){
							category1 = categories[i]._id;
						}
					}
				}
			}
			return category1;
		};

		// Create new product
		function create() {
			var cat1 = asignarTipos(); 
			var costo = 0;
			var precio = undefined;
			if (tipoProducto == 'p'){
				costo = $scope.costoTotal;
			}
			else{
				if (this.costPerUnit !== undefined){
					costo = this.costPerUnit;
				}
				else{
					costo = undefined;
				}
			}
			if (this.reseller == true){
				if (this.unitPrice2 !== undefined){
					precio = this.unitPrice2;
				}
				else{
					precio = undefined;
				}
			}
			else{
				if (this.unitPrice !== undefined){
					precio = this.unitPrice;
				}
				else{
					if ((tipoProducto == 'm') || (tipoProducto == 'i')) {
						precio = 0;
					}
				}
			}
			if(this.name !== undefined){
				if(costo !== undefined){
					if(precio !== undefined){
						if (this.metric !== undefined){
							if(this.tax !== undefined){
								if(this.category2 !== undefined){
									if(idProveedor !== 0){
									// Create new product object
										var product = new products ({
											name: this.name,
											description: this.description ? this.description : undefined,
											code: this.code ? this.code : 0,
											produccion: this.productosAgregados, 
											brandName: this.brandName ? this.brandName : undefined,
											unitPrice: precio,
											costPerUnit: costo,
											provider: idProveedor,
											unitsInStock: this.unitsInStock ? this.unitsInStock: 0,
											idealStock: this.idealStock ? this.idealStock: 0,
											criticalStock: this.criticalStock ? this.criticalStock : 0,
											storedIn: this.storedIn ? this.storedIn : undefined,
											metric: this.metric,
											reseller: this.reseller,
											esProducto: esProducto, 
											esMateriaPrima: esMateriaPrima,
											esInsumo: esInsumo,
											tax: this.tax ? valorTax : undefined,
											enterprise: this.enterprise ? this.enterprise._id : user.enterprise._id,
											category1: cat1, 
											category2: this.category2 ? this.category2._id : undefined
										});

										if (this.reseller === true){
											// createProduct(product);
											product.esProducto = true;
										}

										product.$save(function(response) {
											if(response._id) {
												// agregar sub al array
												$state.go('home.products', $rootScope.estadoActualParams);
												esProducto = false;
												esInsumo = false;
												esMateriaPrima = false;

											}
										}, function(errorResponse) {
											this.error = errorResponse.data.message;
										});
									}
									else{
										this.errorProducto = 'Se debe especificar el proveedor del producto';
									}
								}
								else{
									this.errorProducto = 'Se debe especificar la categoria para el producto';	
								}
							}
							else{
								this.errorProducto = 'Se debe especificar el iva para el producto';		
							}
						}
						else{
							this.errorProducto = 'Se debe especificar la unidad de medida';	
						}	
					}
					else{
						this.errorProducto = 'Se debe especificar un precio para el producto';	
					}	
				}
				else{
					this.errorProducto = 'Se debe especificar un costo para el producto';
				}		
			}
			else{
				this.errorProducto = 'Se debe especificar un nombre para el producto';	
			}	
			
		};

		//muestra el formulario para elegir materias primas en creacion de producto
		function habilitoSeleccion(){
			this.seleccionHabilitada = true;
		};

		//habilito el checkbox para seleccionar productos
		function habilitoCheck (i,p,cant){		
	    	this.habilitarCheck[i] = true;
		    // $scope.errorRepetido[i] = undefined;
	    }; //end addCant


	    function toggle (item, list, cant, index) {
	    	var p = { producto: undefined, nombre:undefined, cantidad: undefined, total: undefined };
    		var idx = list.indexOf(item);
    		if (idx > -1){
    			list.splice(idx, 1);
    			for ( var j in this.productosAgregados ){
    				if (this.productosAgregados[j].producto === item._id){
    					this.productosAgregados.splice(j, 1);	
    					this.cantidad[index] = 0;
    					this.hayCantidad[index] = false; 
    					calculoTotal(this.productosAgregados);
    				}	
    			}
    		}	    	
	    	else{
	    		list.push(item);
	    		p.producto = item._id;
	    		p.nombre = item.name
	    		p.cantidad = cant;
	    		p.total = cant * item.costPerUnit;
	    		this.productosAgregados.push(p);
	    		this.hayCantidad[index] = true;
	    		calculoTotal(this.productosAgregados);
	    	}
	    }; //end toggle

	    function calculoTotal (productos){
	    	$scope.costoTotal = 0;
	    	for (var i in productos){
	    		$scope.costoTotal = $scope.costoTotal + productos[i].total;
	    	}
	    };

		//autocomplete para seleccionar proveedor
		function searchTextChange (text){
			var lowercaseQuery = angular.lowercase(text);
			return $filter('filter')(providers, {name: text});
		};

		function selectedItemChange (item) {	
			this.proveedor = item;
			$rootScope.provider = item;
			selectProveedor(item);
			this.errorProducto = undefined;
		};

		function selectProveedor (item){
			if ((item !== null) && (item !== undefined)){
				idProveedor = item._id;
			}	
			else{
				idProveedor = 0;
			}	
		};

		function findTaxes () {
			this.taxes = [ {value:1, name: 'Iva incluido en el precio'}, {value:10.5, name: '10.50%'}, {value:21, name: '21.00%'}, {value:27, name: '27.00%'}];
		};

		function asignarTax(){
			this.errorProducto = undefined;
			for (var i in this.taxes){
				if (this.taxes[i].name === this.tax){
					valorTax = this.taxes[i].value
				}
			}
		};

		function findMetrics () {
			this.metrics = [ 'Bultos','Cajas','Cajones','Cm3','Grs', 'Horas', 'Kg','Latas','Litros','Ml','Mts2','U.'];
		};


	}
]);
'use strict';

// Comprobantes controller
angular.module('products').controller('ProductosEditController', ['$rootScope', '$scope', '$location', 'user', 'product', 'tipoProducto', 'productos', 'categories', 'enterprises', 'providers', '$state',
	function($rootScope, $scope, $location, user, product, tipoProducto, productos, categories, enterprises, providers, $state) {

		$rootScope.tipoProducto = tipoProducto;

		// asignacion de modelos
		this.user = user;
		this.product = product;
		this.tipoProducto = tipoProducto;
		this.productos = productos;
		this.categories = categories;
		this.enterprises = enterprises;
		this.providers = providers;

		$scope.modificar = false;
		$scope.verListado = false;
		$scope.errorRepetido = [];
		$scope.errorProducto = false;

		$scope.cambioProveedor = false;

		this.selectedMode = 'md-scale';
	    this.selectedDirection = 'left';

		// asignacion de funciones
		this.update = update;
		this.findTaxes = findTaxes;
		this.findMetrics = findMetrics;
		this.verTax = verTax;
		this.asignarTipos = asignarTipos;
		this.habilitarEdicion = habilitarEdicion;
		this.habilitoLista = habilitoLista;
		this.modificoProducto = modificoProducto;
		this.eliminar = eliminar;
		this.addMateriaPrima = addMateriaPrima;
		this.borrarError = borrarError;
		this.rutaVolver = rutaVolver;

		this.cambiarProveedor = cambiarProveedor;

		verTax();
		asignarTipos();

		// definicion de funciones

		function asignarTipos (){
			if (tipoProducto == 'p'){
				$rootScope.estadoActualParams.tipo = 'p';
			}
			else{
				if (tipoProducto == 'm'){
					$rootScope.estadoActualParams.tipo = 'm';
				}
				else{
					if(tipoProducto == 'i') {
							$rootScope.estadoActualParams.tipo = 'i';
					}
				}
			}
		};

		function rutaVolver (){
	  //   	if (product.esProducto){
	  //   		$rootScope.estadoActualParams.tipo = 'p';
	  //   	}
	  //   	else{
	  //   		if (product.esMateriaPrima){
	  //   			$rootScope.estadoActualParams.tipo = 'm';
	  //   		}
	  //   		else{
		 //    		if (product.esInsumo){
		 //    			$rootScope.estadoActualParams.tipo = 'i';
		 //    		}
		 //    	}
	  //   	}
			// $state.go('home.products', $rootScope.estadoActualParams);
			history.back()
		};

		//tax para mostrar en la vista
		function verTax () {
			if (product.tax == 1){
				$scope.vistaTax = 'Iva Incluido';
			}
			else{
				$scope.vistaTax = product.tax;
			}
		};

		function cambiarProveedor (){
			$scope.cambioProveedor = true;
		}

		// Update existing Product
		function update (product2, prov) {
			var product = product2;

			//para cuando esdita MP y le saca el reseller 
			if ((product.esMateriaPrima == true) && (product.reseller == false)){
				product.esProducto = false;
			}

			//si es una materia prima para revender
			if (this.reseller2 == true){
				if ((this.unitPrice2 !== undefined)&&(this.unitPrice2 !== null)){
					product.reseller = true;
					product.unitPrice = this.unitPrice2;
					product.esProducto = true;
				}
				else{
					$scope.errorProducto = 'Se debe indicar el precio de reventa del producto'
					return 0;
				}
			}

			//si tiene una produccion
			if ((product.esProducto == true)&&(product.reseller == false)&&(product.produccion.length > 0)){
				var costo = 0;
				for (var i in product.produccion){
					costo = costo + product.produccion[i].total;
				}
				product.costPerUnit = costo;
				for (var i=0; i<product.produccion.length; i++){
					product.produccion[i].producto = product.produccion[i].producto._id;
				}
			}

			if (product.esProducto){
				$rootScope.estadoActualParams.tipo = 'p';
			}
			else{
				if (product.esMateriaPrima){
					$rootScope.estadoActualParams.tipo = 'm';
				}
				else{
					if(product.esInsumo) {
						$rootScope.estadoActualParams.tipo = 'i';
					}
				}
			}

			product.enterprise = product.enterprise._id;

			if ($scope.cambioProveedor == true){
				product.provider = prov;
			}
			else{
				product.provider = product2.provider._id;
			}
			

			product.$update(function(data) {
				if (product.esProducto){
					$rootScope.estadoActualParams.tipo = 'p';
					// $state.go('home.products', $rootScope.estadoActualParams);
					history.back();
				}
				else{
					if (product.esMateriaPrima){
						$rootScope.estadoActualParams.tipo = 'm';
						// $state.go('home.products', $rootScope.estadoActualParams);
						history.back();
					}
					else{
						if(product.esInsumo) {
							$rootScope.estadoActualParams.tipo = 'i';
							// $state.go('home.products', $rootScope.estadoActualParams);
							history.back();
						}
					}
				}
				if (product.esMateriaPrima){ actualizarReferencias(); };
			}, function(errorResponse) {
				console.log(errorResponse, 'error');
			});
		};

		//actualiza los productos por si cambio el precio de las MP que lo componen
		function actualizarReferencias(){
			for (var i in productos){
				if ((productos[i].esProducto == true)&&(productos[i].reseller == false)&&(productos[i].deleted == false)){
					if (productos[i].produccion.length > 0){
						var product = productos[i];
						product.enterprise = product.enterprise._id;
						product.provider = product.provider._id;
						product.$update(function(data) {
							console.log('update referencia ok');
						}, function(errorResponse) {
							this.error = errorResponse.data.message;
						});
					};
				}
			}
		};

		//habilito la edicion de cant de materias primas elegidas
		function habilitarEdicion (){
			$scope.modificar = true;
		};

		//listado para agregar nuevas materias primas
		function habilitoLista (){
			$scope.verListado = true;
		};

		//ng-change al cambiar cantidad
		function modificoProducto (id, cant){
			var costo = findProducto(id);
			for (var i in product.produccion){
				if (product.produccion[i].producto._id == id){
					product.produccion[i].total = costo*cant;
				}
			}
		}; //end modificoProducto


		function findProducto(id){
			for (var i in productos){
				if (productos[i]._id == id ){
					return productos[i].costPerUnit;
				}
			};
		};

		//elimina materias primas
		function eliminar (id,cant){
			var costo = findProducto(id);
			for (var i in product.produccion){
				if (product.produccion[i].producto._id === id){
					product.produccion.splice(i, 1);
					product.costPerUnit = product.costPerUnit - (costo*cant);
				}
			}
		}; //end eliminar

		//agrega nueva materia prima para la produccion
		function addMateriaPrima (item,cant,$index){
			var p = { producto: undefined, nombre:undefined, cantidad: undefined, total: undefined };
			var ok = false;
			for (var i in product.produccion){
				if ((product.produccion[i].producto !== undefined)&&(product.produccion[i].producto !== null)){
					if (product.produccion[i].producto._id === item._id){
						ok = true;
						$scope.errorRepetido[$index] = 'Materia Prima existente';
					}
				}
			}
			if (ok === false ){
				p.producto = item;
				p.nombre = item.name;
				p.cantidad = cant;
				p.total = cant * item.costPerUnit;
				product.produccion.push(p);
				product.costPerUnit = product.costPerUnit + p.total;
			}
		} //end addMateria

		function findTaxes () {
			this.taxes = [
				{value: 1, name: 'Iva incluido en el precio'},
				{value: 10.5, name: '10.50%'},
				{value: 21, name: '21.00%'},
				{value: 27, name: '27.00%'}];
		};

		function findMetrics () {
			this.metrics = [ 'Bultos','Cajas','Cajones','Cm3','Grs', 'Horas', 'Kg','Latas','Litros','Ml','Mts2','U.'];
		};

		function borrarError (){
			$scope.errorProducto = undefined;
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('products').controller('ProductsListController', ['$location', '$rootScope', 'user', 'products', 'enterprises', '$mdDialog', 'tipoProducto', '$mdBottomSheet',
	function($location, $rootScope, user, products, enterprises, $mdDialog, tipoProducto, $mdBottomSheet) {

		// asignacion de modelos
		this.user = user;
		this.products = products;
		this.enterprises = enterprises;
		// this.materias = materias;
		// this.insumos = insumos;
		this.tipoProducto = tipoProducto;
		this.daFilter = undefined;

		$rootScope.tipoProducto = tipoProducto;

		this.totalCosto = 0;

		// asignacion de funciones

		this.filtrar = filtrar;
		this.showBottomSheet = showBottomSheet;
		this.costoVariable = costoVariable;
		this.rutaProducto = rutaProducto;
		this.extraerListado = extraerListado;

		this.filtrar();
		this.costoVariable(products);

		// // definicion de funciones

		function rutaProducto(id){
			$location.path('productos/view/' + id);
		}

		function filtrar (){
			if (this.tipoProducto == 'm'){
				this.daFilter = { esMateriaPrima : true};
			}
			else{
				if (this.tipoProducto == 'p'){
					this.daFilter = { esProducto : true};
				}
				else{
					this.daFilter = { esInsumo : true};	
				}
			}
		}	

		function showBottomSheet ($event, item, model, param) {
			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	//console.log('estadoactual: ', $rootScope.estadoActual);
	    	$mdBottomSheet.show({
	    		// parent: angular.element(document.body),
		      	templateUrl: template,
		      	controller: DialogController,
		      	// controller: 'ListBottomSheetCtrl',
		      	targetEvent: $event,
		      	resolve: {
		         	item: function () {
		           	return item;
		         	}
		       	}

		    }).then(function(clickedItem) {
		    	//$mdBottomSheet.hide();
		    	// console.log('por aqui ando');
		    });
	  	}

	  	function costoVariable (products) {

			products.$promise.then(angular.bind(this, function(data) {
				this.totalCosto = 0;
				var cant = 0;
				var total = 0;
				if (tipoProducto == 'p'){
					for (var i in data) {					
						if ((data[i].deleted == false) && (data[i].esProducto == true) && (data[i].unitPrice > 0)){
							cant = cant + 1;
							var unidad = data[i].costPerUnit/data[i].unitPrice*100;
							total = total + unidad;
						}
					}
				}
				else{
					if (tipoProducto == 'm'){
						for (var i in data) {					
							if ((data[i].deleted == false) && (data[i].esMateriaPrima == true) && (data[i].unitPrice > 0)){
								cant = cant + 1;
								var unidad = data[i].costPerUnit/data[i].unitPrice*100;
								total = total + unidad;
							}
						}
					}
					else{
						if (tipoProducto == 'i'){
							for (var i in data) {					
								if ((data[i].deleted == false) && (data[i].esInsumo == true) && (data[i].unitPrice > 0)){
									cant = cant + 1;
									var unidad = data[i].costPerUnit/data[i].unitPrice*100;
									total = total + unidad;
								}
							}
						}
					}
				}
				total = total/cant;
				this.totalCosto = Math.round(total * 100) / 100;
			}));
		}	

		function extraerListado (){
			var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
		   	var b = document.getElementById('printing-css-listado').value;
		   	var c = document.getElementById('printing-data-listado').innerHTML;
		   	window.frames["print_frame_listado"].document.title = 'IM - Productos';
		   	window.frames["print_frame_listado"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
		   	window.frames["print_frame_listado"].window.focus();
		   	window.frames["print_frame_listado"].window.print();
		}

		function httpGet(theUrl){
		    var xmlHttp = null;
		    xmlHttp = new XMLHttpRequest();
		    xmlHttp.open( "GET", theUrl, false );
		    xmlHttp.send( null );
		    return xmlHttp.responseText;
		} //end httpGet

	  	function DialogController($scope, $mdDialog, item, $state) {

	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
					$state.go(state, params);
					$mdBottomSheet.hide();
				}
			};

			//abre modal para eliminar un producto
			$scope.showConfirm = function(ev,item) {
				var confirm = $mdDialog.confirm()
		          .title('Eliminar Producto')
		          .content('¿Está seguro que desea eliminar este producto?')
		          .ariaLabel('Lucky day')
		          .ok('Eliminar')
		          .cancel('Cancelar')
		          .targetEvent(ev);
			    $mdDialog.show(confirm).then(function() {
			      $scope.remove(item);
			    }, function() {
			      console.log('cancelaste borrar');
			    });
			};

			// Remove existing Product
			$scope.remove = function( product ) {
				if ( product ) { product.$remove();

					// for (var i in $parent.products ) {
					// 	if ($parent.products [i] === product ) {
					// 		$parent.products.splice(i, 1);
					// 	}
					// }
				} else {
					product.$remove(function() {
					});
				}

				$mdBottomSheet.hide();
			};
	  	}
	}
]);
'use strict';

// Products controller
angular.module('products').controller('ProductsController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Products', 'Enterprises', 'Subs', 'Categories', 'Providers', '$mdBottomSheet', 'Metrics', '$state', '$mdDialog', '$filter', 'Contacts', 'Taxconditions', 'Modal', 'Comprobantes', '$timeout', '$interval',
	function($scope, $rootScope, $stateParams, $location, Authentication, Products, Enterprises, Subs, Categories, Providers, $mdBottomSheet, Metrics, $state, $mdDialog, $filter, Contacts, Taxconditions, Modal, Comprobantes,$timeout, $interval) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			$scope.findProveedores();
			$scope.findComprobantes();
			//console.log('search: ', $scope.SEARCH);
		});

		$scope.$watch('product', function (){
			if($scope.product!==undefined){
				$rootScope.tipoCategoria = $scope.product.category1.name;
				// console.log($rootScope.tipoCategoria.name);
			}
		});

		$scope.seleccionHabilitada = false;

		$rootScope.tipoProducto = $stateParams.tipo;

		$scope.selected = [];

		$scope.productosAgregados = [];

		$scope.productosGuardar = [];

		$scope.habilitarCheck = [];

		$scope.hayCantidad = [];

		$scope.errorRepetido = [];

		$scope.valorMateriaPrima = [];

		$scope.costoTotal = 0;

		$scope.modificar = false;

		$scope.verListado = false;

		$scope.selectedMode = 'md-scale';
	    $scope.selectedDirection = 'up';

		$scope.$watch('tipoProducto', function(){
			if($scope.tipoProducto === 'p') {
				$scope.daFilter = { esProducto: true };
				$scope.title = 'Nuevo Producto';
				$scope.esProducto = true;
				$scope.esMateriaPrima = false;
				$scope.esInsumo = false;
				Categories.query({ e: $scope.SEARCH.enterprise }, function(res){
					for(var i=0;i<res.length;i++){
						if(res[i].name=='Productos Terminados'){
							$scope.category=res[i];
						}
					};
				});
			} else if ($scope.tipoProducto === 'm') {
				$scope.daFilter = { esMateriaPrima: true };
				$scope.title = 'Nueva Materia Prima';
				$scope.esMateriaPrima = true;
				$scope.esProducto = false;
				$scope.esInsumo = false;
				Categories.query({ e: $scope.SEARCH.enterprise }, function(res){
					for(var i=0;i<res.length;i++){
						if(res[i].name=='Materia Prima'){
							$scope.category=res[i];
						}
					};
				});
			} else if ($scope.tipoProducto === 'i') {
				$scope.daFilter = { esInsumo: true };
				$scope.title = 'Nuevo Insumo';
				$scope.esMateriaPrima = false;
				$scope.esProducto = false;
				$scope.esInsumo = true;
				Categories.query({ e: $scope.SEARCH.enterprise }, function(res){
					for(var i=0;i<res.length;i++){
						if(res[i].name=='Insumo'){
							$scope.category=res[i];
						}
					};
				});
			}	else {
					// do nothing... bad request
			}
		});

		$rootScope.$watch('nuevoProveedor', function(){
			if($rootScope.nuevoProveedor!==undefined){
				$scope.mostrar = true;
				$scope.proveedor = $rootScope.nuevoProveedor;
				$scope.selectedItemChange($scope.proveedor);
			} else {
				$scope.mostrar = false;
			}
		});

		$scope.filtros = null;
		$scope.tipoFiltro = null;
		$scope.loadOptions = function() {
		    // Use timeout to simulate a 650ms request.
		    $scope.filtros =  $scope.filtros  || [
		        { id: 1, name: 'Proveedor' },
		        { id: 2, name: 'Categoria' }
		    ];
		}; //end loadOptions

		$scope.filtrosProd = null;
		$scope.tipoFiltroProd = null;
		$scope.loadOptions2 = function() {
		    // Use timeout to simulate a 650ms request.
		    $scope.filtrosProd =  $scope.filtrosProd  || [
		        { id: 1, name: 'Productos Terminados' },
		        { id: 2, name: 'Materias Primas' },
		        { id: 3, name: 'Insumos' }
		        // { id: 4, name: 'Todos' }
		    ];
		}; //end loadOptions2

		$scope.errorPrecios = undefined;

		// $scope.desactivar = function(n){
		// 	if (n == 1){
		// 		$scope.aumento == true;
		// 	}
		// 	else{
		// 		$scope.decremento == true;
		// 	}
		// }; //end desactivar

		$scope.waiting = false;

		$scope.rutaVolver = function(){
			// $rootScope.estadoActualParams.tipo = 'p';
			// $state.go('home.products', $rootScope.estadoActualParams);
			history.back();
		}

		$scope.actualizarPrecios = function(){
			if (($scope.tipoFiltro !== undefined) && ($scope.tipoFiltro !== null)){
				if (($scope.tipoFiltroProd !== undefined) && ($scope.tipoFiltroProd !== null)){
					if (($scope.descuentoPorcentaje !== undefined) && ($scope.descuentoPorcentaje !== null)){
						if ($scope.tipoFiltro.name === 'Proveedor'){
							if (($scope.provider !== null) && ($scope.provider !== undefined)){
								$scope.productosProv = $filter('filter')($scope.filtrados, function(item){
									return (item.provider._id === $scope.provider._id); 
								})	
								for (var i in $scope.productosProv){
									var product = $scope.productosProv[i];
									if (($scope.productosTipo == 'Materias') || ($scope.productosTipo == 'Insumos')){
										var descuentoValor = $scope.descuentoPorcentaje*product.costPerUnit/100;
										if ($scope.eleccion == 'Decremento'){
											product.costPerUnit = product.costPerUnit - descuentoValor;
										}
										else{
											product.costPerUnit = product.costPerUnit + descuentoValor;		
										}
										calcularActualizacion(product);
									}	
									else {
										if ($scope.productosTipo == 'Productos'){
											var descuentoValor = $scope.descuentoPorcentaje*product.unitPrice/100;
											if ($scope.eleccion == 'Decremento'){
												product.unitPrice = product.unitPrice - descuentoValor;
											}
											else{
												product.unitPrice = product.unitPrice + descuentoValor;	
											}
											calcularActualizacion(product);
										}
										else{
											// cuando es todos
										}
									}
								}
								if ($scope.productosProv.length == 0){
									$scope.errorPrecios = 'No existen productos para las opciones indicadas';	
								}
							}
							else{
								$scope.errorPrecios = 'Se debe indicar el proveedor ';
							}
						}
						else{
							// selecciona categoria
							if (($scope.category !== null) && ($scope.category !== undefined)){
								$scope.productosCat = $filter('filter')($scope.filtrados, function(item){
									return (item.category2._id === $scope.category._id); 
								})	
								for (var i in $scope.productosCat){
									var product = $scope.productosCat[i];
									if (($scope.productosTipo == 'Materias') || ($scope.productosTipo == 'Insumos')){
										var descuentoValor = $scope.descuentoPorcentaje*product.costPerUnit/100;
										if ($scope.eleccion == 'Decremento'){
											product.costPerUnit = product.costPerUnit - descuentoValor;
										}
										else{
											product.costPerUnit = product.costPerUnit + descuentoValor;		
										}
										calcularActualizacion(product);
									}	
									else {
										if ($scope.productosTipo == 'Productos'){
											var descuentoValor = $scope.descuentoPorcentaje*product.unitPrice/100;
											if ($scope.eleccion == 'Decremento'){
												product.unitPrice = product.unitPrice - descuentoValor;
											}
											else{
												product.unitPrice = product.unitPrice + descuentoValor;	
											}
											calcularActualizacion(product);
										}
										else{
											// cuando es todos
										}
									}
								}	
							}
							else{
								$scope.errorPrecios = 'Se debe indicar la categoria';
							}
						}
					}
					else{
						$scope.errorPrecios = 'Se debe indicar el porcentaje a aumentar';
					}
				}
				else{
					$scope.errorPrecios = 'Se deben indicar los tipos de productos a modificar';
				}
			}
			else{
				$scope.errorPrecios = 'Se debe indicar el filtro';
			}	
		} //end actualizarPrecios

		function calcularActualizacion(product){
			product.enterprise = product.enterprise._id;
			product.category1 = product.category1._id;
			product.category2 = product.category2._id;
			product.provider = product.provider._id;
			product.$update(function() {
				if (product.esMateriaPrima){
					actualizarReferencias(product);
				}
				$scope.waiting = true;
				// console.log('actualice m/i/p OKKK');
				$state.go('home.products', $rootScope.estadoActualParams);
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		}; //end calcularActualizacion

		$scope.seleccionProveedor = false;
		$scope.seleccionCategoria = false;

		$scope.seleccionarFiltro = function(){
			$scope.errorPrecios = undefined;
			if ($scope.tipoFiltro.name === 'Proveedor'){
				$scope.seleccionCategoria = false;
				$scope.seleccionProveedor = true;
			}
			else{
				$scope.seleccionProveedor = false;
				$scope.seleccionCategoria = true;
			}
		} //end seleccionarFiltro

		$scope.prodCat = undefined;

		$scope.filtrarProductos = function(){
			$scope.category = undefined;
			$scope.productosTipo = undefined;
			$scope.errorPrecios = undefined;
			if ($scope.tipoFiltroProd.name == 'Productos Terminados'){
				$scope.prodCat = 'producto';
				$rootScope.estadoActualParams = {tipo: "p"};
				$scope.productosTipo = 'Productos';
				$scope.filtrados = $filter('filter')($rootScope.products, function(item){
					return (item.esProducto === true); 
				})
			}
			else{
				if ($scope.tipoFiltroProd.name == 'Materias Primas'){
					$scope.prodCat = 'Materia Prima';
					$rootScope.estadoActualParams = {tipo: "m"};
					$scope.productosTipo = 'Materias';
					$scope.filtrados = $filter('filter')($rootScope.products, function(item){
						return (item.esMateriaPrima === true); 
					})
				}
				else{
					if ($scope.tipoFiltroProd.name == 'Insumos'){
						$scope.prodCat = 'Insumo';
						$rootScope.estadoActualParams = {tipo: "i"};
						$scope.productosTipo = 'Insumos';
						$scope.filtrados = $filter('filter')($rootScope.products, function(item){
							return (item.esInsumo === true); 
						})
					}
					else{
						$rootScope.estadoActualParams = {tipo: "p"};
						$scope.productosTipo = 'Todos';
						$scope.filtrados = $rootScope.products;
					}
				}
			}
		} //end filtrarProductos

		$scope.habilitoSeleccion = function(){
			$scope.seleccionHabilitada = true;
		}; //end habilitoSeleccion

		$scope.asignarPrecio = function(){
			$scope.unitPrice = this.costPerUnit;
			$scope.errorCost = undefined;
			$scope.errorPrice = undefined;
		}; //end asignarPrecio

		$scope.exists = function(item, list) {
	        return list.indexOf(item._id) > -1;
	    }; //end exists

	    $scope.toggle = function (item, list, cant,i,n) {
	    	var p = { producto: {}, name: undefined, cantidad: undefined, total:undefined };
	    	var p2 = { producto: {}, cantidad: undefined, total:undefined };
	        var idx = list.indexOf(item);
	        if (idx > -1){
	        	list.splice(idx, 1);
	        	// $scope.habilitarCheck[i] = false;
	        	// $scope.cantidad = undefined;	
	        	for ( var i=0; i<$scope.productosAgregados.length;i++ ){
		    		if ($scope.productosAgregados[i].producto._id === item._id){
		    			$scope.hayCantidad[i] = false;
		    			$scope.productosAgregados.splice(i, 1);	
		    			$scope.productosGuardar.splice(i,1)
		    		}
		    	}
	        } 
	        else{
	        	//uso p y p2, uno para mosrtaar en la vista y el otro para guardar en bbbdd
	        	list.push(item);	
	        	p.producto = item;
	        	p.name = item.name;
	        	p.cantidad = cant;
	        	p.total = $scope.valorMateriaPrima[i];
	        	p2.producto = item._id
	        	p2.name = item.name;
	        	p2.cantidad = cant;
	        	p2.total = $scope.valorMateriaPrima[i];
	        	$scope.productosAgregados.push(p);
	        	$scope.productosGuardar.push(p2)
	        	$scope.hayCantidad[i] = true;
	        	calculoTotal();
	        	if (n === 1 ){
	        		for (var i in $scope.productosAgregados){
	        			$scope.product.produccion.push($scope.productosAgregados[i]);
	        		}
	        	}
	        	// $scope.habilitarCheck[i] = false;
	        }
	    }; //end toggle

	    function calculoTotal (){
	    	$scope.costoTotal = 0;
	    	for (var i in $scope.productosAgregados){
	    		$scope.costoTotal = $scope.costoTotal + $scope.productosAgregados[i].total;
	    	}
	    }; //end calculoTotal

	    $scope.addCant = function(i,p,cant){
	    	var monto = p.costPerUnit * cant;
	    	$scope.valorMateriaPrima[i] = monto;
	    	$scope.habilitarCheck[i] = true;
	    	$scope.errorRepetido[i] = undefined;
	    }; //end addCant

	    $scope.addMateria = function(item,cant,$index){
			var materiasEdit = this.product.produccion;
			var p = { producto: {},name: undefined, cantidad: undefined, total:undefined };
			var ok = false;
			for (var i in this.product.produccion){
				if (this.product.produccion[i].producto !== undefined){
					if (this.product.produccion[i].producto._id === item._id){
						ok = true;
						$scope.errorRepetido[$index] = 'Materia Prima existente';
					}
				}
			}
			if (ok === false ){
				p.producto = item._id;
				p.name = item.name;
				p.cantidad = cant;
				p.total = cant * item.costPerUnit;
				$scope.product.produccion.push(p);
				updateMateria();	
			}
		} //end addMateria

		function updateMateria() {
			var product = $scope.product;
			product.enterprise = $scope.SEARCH.enterprise;
			product.costPerUnit = actualizarCosto();	
			// for (var i in product.produccion){
			// 	product.produccion[i].producto = product.produccion[i].producto._id;
			// };	
		}; //end update

		// Create new Product
		$scope.create = function() {
			var costo = 0;
			var precio = undefined;
			for (var i in $scope.taxes){
				if ($scope.taxes[i].name === this.tax){
					var valorTax = $scope.taxes[i].value
				}
			}
			if ($scope.esProducto == true){
				costo = $scope.costoTotal;
			}
			else{
				if (this.costPerUnit !== undefined){
					costo = this.costPerUnit;
				}
				else{
					costo = undefined;
				}
			}
			if (this.reseller == true){
				if (this.unitPrice2 !== undefined){
					precio = this.unitPrice2;
				}
				else{
					precio = undefined;
				}
			}
			else{
				if (this.unitPrice !== undefined){
					precio = this.unitPrice;
				}
				else{
					precio = undefined;
				}
			}
			// Create new Product object
			if(this.name !== undefined){
				if(costo !== undefined){
					if(precio !== undefined){
						if(this.tax !== undefined){
							// if(this.sub !== undefined){
								if(this.category2 !== undefined){
									if(this.provider !== undefined){
										var product = new Products ({
											name: this.name,
											description: this.description ? this.description : undefined,
											code: this.code ? this.code : 0,
											produccion: $scope.productosGuardar,
											//picture: this.picture || undefined,
											brandName: this.brandName ? this.brandName : undefined,
											unitPrice: precio,
											costPerUnit: costo,
											// sku: this.sku,
											discontinued: this.discontinued,
											provider: this.provider._id,
											quantityPerUnit: this.quantityPerUnit,
											unitsInStock: this.unitsInStock ? this.unitsInStock: 0,
											idealStock: this.idealStock ? this.idealStock: 0,
											criticalStock: this.criticalStock ? this.criticalStock : 0,
											unitsOnOrder: this.unitsOnOrder,
											storedIn: this.storedIn ? this.storedIn : undefined,
											metric: this.metric ? this.metric : 'u.',
											reseller: this.reseller,
											visible: this.visible,
											esProducto: $scope.esProducto,
											esMateriaPrima: $scope.esMateriaPrima,
											esInsumo: $scope.esInsumo,
											//rawMaterial: this.rawMaterial,
											tax: this.tax ? valorTax : undefined,
											enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
											// sub: this.sub._id,
											category1: $scope.category,
											category2: this.category2 ? this.category2._id : undefined,
											// categor3: this.categor3._id,
											// categor4: this.categor4._id,
											// categor5: this.categor5._id
										});

										if (this.reseller === true){
											// createProduct(product);
											product.esProducto = true;
										}

										product.$save(function(response) {
											//$location.path('products/' + response._id);

											if(response._id) {
												// agregar sub al array

												product._id = response._id;
												$rootScope.products.unshift(product);

											}
											$state.go('home.products', $rootScope.estadoActualParams);

											// Clear form fields
											$scope.name = '';
											$scope.description = '';
											$scope.brandName = '';
											$scope.unitPrice = 0;
											$scope.costPerUnit = 0;
											$scope.sku = '';
											$scope.discontinued = false;
											$scope.quantityPerUnit = 1;
											$scope.unitsInStock = 0;
											$scope.unitsOnOrder = 0;
											$scope.visible = true;
											$scope.storedIn = '';
											$scope.metric = '';
											$scope.reseller = false;
											$mdBottomSheet.hide();
										}, function(errorResponse) {
											$scope.error = errorResponse.data.message;
										});
									}
									else{
										$scope.errorProv = 'Se debe especificar el proveedor del producto';
									}
								}
								else{
									$scope.errorCategory = 'Se debe especificar la categoria para el producto';	
								}
							// }
							// else{
							// 	$scope.errorSub = 'Se debe especificar la UEN para el producto';		
							// }
						}
						else{
							$scope.errorTax = 'Se debe especificar el iva para el producto';		
						}
					}
					else{
						$scope.errorPrice = 'Se debe especificar un precio para el producto';	
					}	
				}
				else{
					$scope.errorCost = 'Se debe especificar un costo para el producto';
				}		
			}
			else{
				$scope.errorName = 'Se debe especificar un nombre para el producto';	
			}				
		}; //end Create

		$scope.borrarError = function(){
			$scope.errorName = undefined;
			$scope.errorCost = undefined;
			$scope.errorPrice = undefined;
			$scope.errorTax = undefined;
			$scope.errorSub = undefined;
			$scope.errorCategory = undefined;
			$scope.errorPrecio = undefined;
			$scope.errorPrecios = undefined;
		} //end borrarError

		$scope.habilitarEdicion = function(){
			$scope.modificar = true;
		};

		$scope.habilitoLista = function(){
			$scope.verListado = true;
		}

		$scope.eliminar = function(p,item){	
			for (var i in p.produccion){
				if (p.produccion[i].producto === item.producto){
					$scope.product.costPerUnit = $scope.product.costPerUnit - item.total
					p.produccion.splice(i, 1);
				}
				else{
					p.produccion[i].producto = p.produccion[i].producto._id;
				}
			}
			$scope.product.produccion = p.produccion;
		} //end eliminar


		$scope.modificoProducto = function(item){
			item.total = item.cantidad * item.producto.costPerUnit;
			for (var i in $scope.product.produccion){
				if ($scope.product.produccion[i] == item){
					$scope.product.produccion[i].cantidad = item.cantidad;
					$scope.product.produccion[i].total = item.total;
					actualizarCosto();
				};
			};
		}; //end modificoProducto

		function actualizarCosto (){
			var valor = 0;
			for (var i in $scope.product.produccion){
				valor = valor + $scope.product.produccion[i].total;
			}
			$scope.product.costPerUnit = valor;
			return valor;
		}; //end actualizarCosto

		
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Producto')
	          .content('¿Está seguro que desea eliminar este producto?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		}; //end showConfirm

		
		$scope.remove = function( product ) {
			if ( product ) { product.$remove();

				for (var i in $scope.products ) {
					if ($scope.products [i] === product ) {
						$scope.products.splice(i, 1);
					}
				}
			} else {
				$scope.product.$remove(function() {
					$location.path('products');
				});
			}
		}; //end remove

		
		$scope.update = function() {
			$scope.modificar = false;
			var product = $scope.product;
			if (this.reseller2 == true){
				if ((this.unitPrice2 !== undefined)&&(this.unitPrice2 !== null)){
					product.reseller = true;
					product.unitPrice = this.unitPrice2;
					product.esProducto = true;
				}
				else{
					$scope.errorPrecio = 'Se debe indicar el precio de reventa del producto'
					return 0;
				}
			}
			// if (product.produccion.length !== 0){
			// 	for (var i in product.produccion){
			// 		product.produccion[i].producto = product.produccion[i].producto._id;
			// 	}
			// }
			if (this.enterprise !== undefined) { product.enterprise = this.enterprise} else { product.enterprise = product.enterprise._id };
			if (this.sub !== undefined) { product.sub = this.sub } else if ((product.sub!==undefined)&&(product.sub!==null)){ product.sub = product.sub._id };
			if (this.category1 !== undefined) { product.category1 = this.category1 } else if ((product.category1!==undefined)&&(product.category1!==null)) { product.category1 = product.category1._id };
			if (this.category2 !== undefined) { product.category2 = this.category2 } else if ((product.category2!==undefined)&&(product.category2!==null)) { product.category2 = product.category2 ? product.category2._id : undefined };
			if (this.provider !== undefined) { product.provider = this.provider } else if ((product.provider!==undefined)&&(product.provider!==null)) { product.provider = product.provider._id };
			if (this.tax !== undefined) { product.tax = this.tax } else if ((product.tax!==undefined)&&(product.tax!==null)) { product.tax = product.tax };
			if (this.metric !== undefined) { product.metric = this.metric } else if ((product.metric!==undefined)&&(product.metric!==null)){ product.metric = product.metric };
			product.$update(function() {
				if(product.esInsumo){
					$rootScope.estadoActualParams = {tipo: "i"};
				}
				if(product.esProducto){
					$rootScope.estadoActualParams = {tipo: "p"};
				}	
				if(product.esMateriaPrima){
					actualizarReferencias(product);
					$rootScope.estadoActualParams = {tipo: "m"};
				}
				console.log($rootScope.estadoActualParams, 'esatdo actual');
				$state.go('home.products', $rootScope.estadoActualParams);
			}, function(errorResponse) {
				// console.log(errorResponse, 'errrroor');
			});
		}; //end update

		function actualizarReferencias(p){
			for (var i in $rootScope.products){
				if ($rootScope.products[i].produccion !== undefined){
					if ($rootScope.products[i].produccion.length > 0){
						for (var j in $rootScope.products[i].produccion){
							if ($rootScope.products[i].produccion[j].producto !== undefined){
								if ($rootScope.products[i].produccion[j].producto == p._id){
									$rootScope.products[i].produccion[j].producto = p._id;
									$rootScope.products[i].produccion[j].name = p.name;
									$rootScope.products[i].produccion[j].total = p.costPerUnit;
								}
							}	
						}
						var nuevoTotal = 0;
						for (var x in $rootScope.products[i].produccion){
							nuevoTotal = nuevoTotal + ($rootScope.products[i].produccion[x].total*$rootScope.products[i].produccion[x].cantidad);
						}
						$rootScope.products[i].costPerUnit = nuevoTotal;
						$scope.product = $rootScope.products[i];
						$scope.update();
					}
				}	
			}	
		}; //end actualizarReferencias
		
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) {
				$rootScope.products = Products.query({ e: $scope.SEARCH.enterprise });
			};
		}; //end find

		
		$scope.findEnterprises = function() {
			if ($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise }); }
		}; //end findEnterprises

		// Find a list of SBUs
		$scope.findSubs = function() {
			if ($scope.SEARCH !== undefined) { $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise }); }
		}; //end findSubs

		$scope.findComprobantes = function() {
			if($scope.SEARCH !== undefined) {
				Comprobantes.query({ e: $scope.SEARCH.enterprise }, function(res){
					$rootScope.comprobantesFiltro = res;
					for (var i in $rootScope.comprobantesFiltro) {
						if ($rootScope.comprobantesFiltro[i].name === 'Pedido'){
							$rootScope.comprobantesFiltro.splice(i, 1);
						}
					}
					Modal.setComprobantes($rootScope.comprobantesFiltro);
				});
			}
		}; //end findComrpoabntes


		$scope.findSubcategories = function() {
			if ($scope.SEARCH !== undefined) { $scope.subcategories = Categories.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		$scope.findProviders = function() {
			if ($scope.SEARCH !== undefined) { 
				$scope.providers = Providers.query({ e: $scope.SEARCH.enterprise }); 
			}
		};

		// Find a list of Enterprises
		$scope.findTaxes = function() {
			if ($scope.SEARCH !== undefined) { $scope.taxes = [ {value:1, name: 'Iva incluido en el precio'}, {value:10.5, name: '10.50%'}, {value:21, name: '21.00%'}, {value:27, name: '27.00%'}];
			};
		};

		// Find a list of Enterprises
		$scope.findMetrics = function() {
			if ($scope.SEARCH !== undefined) { 
				$scope.metrics = Metrics.query();
			}
		};

		// Find existing Product
		$scope.findOne = function() {
			Products.get({productId: $stateParams.productId}, function(res){
				$scope.product = res;
				if ($scope.product.tax == 1){
					$scope.vistaTax = 'Iva Incluido';
				}
				else{
					$scope.vistaTax = $scope.product.tax;
				}
			});
		};

		$scope.findProveedores = function() {
			if($scope.SEARCH !== undefined) { 
				$scope.proveedores = Providers.query({ e: $scope.SEARCH.enterprise });
				Modal.setProveedores($scope.proveedores);
			}		
		};

		$scope.findContacts = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.contacts = Contacts.query({e: $scope.SEARCH.enterprise });
				Modal.setContactos($scope.contacts);
			};
		};

		$scope.findCategories = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.categories = Categories.query({ e: $scope.SEARCH.enterprise });
				Modal.setCategorias($scope.categories);
			}
		};
		// Find a list of Taxconditions
		$scope.findTaxConditions = function() {
			if ($scope.SEARCH !== undefined) {
				$scope.taxconditions = Taxconditions.query({e: $scope.SEARCH.enterprise });
				Modal.setCondiciones($scope.taxconditions);
			};
		};

		//autocomplete para seleccionar proveedor
		$scope.searchTextChange = function(text){
			var lowercaseQuery = angular.lowercase(text);
			return $filter('filter')($scope.proveedores, {name: text});
		};

		$scope.selectedItemChange = function (item) {		
			$scope.proveedor = item;
			$rootScope.provider = item;
			$scope.descProveedor();
		};

		//Trae el % de descuento del proveedor seleccionado, y vuelve a calcular valores si el % cambio
		$scope.descProveedor = function(){
			if (($scope.proveedor !== null) && ($scope.proveedor !== undefined)){
				$scope.idProveedor = $scope.proveedor._id;
				$scope.errorProv = undefined;
			}	
			else{
				$scope.idProveedor = 0;
			}		
		};

		$scope.minLenghtProv = 0;

		$scope.showAdvancedProvider = function(ev) {
			$scope.minLenghtProv = 1;
			$scope.textToSearch = undefined;
				$scope.findContacts();
				$scope.findCategories();
				$scope.findTaxConditions();
				Modal.setEmpresa($scope.SEARCH.enterprise);
				$mdDialog.show({
			      controller: CrearController,
			      templateUrl: '/modules/products/views/create.provider.view.html',
			      parent: angular.element(document.body),
			      targetEvent: ev,
			      clickOutsideToClose: false
			    })
			    .then(function(answer) {
			    	$scope.minLenghtProv = 0;
			      $scope.status = 'You said the information was "' + answer + '".';
			    }, function() {
			      $scope.status = 'You cancelled the dialog.';
			    });
		};

		$scope.showBottomSheet = function($event, item, model, param) {
			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	//console.log('estadoactual: ', $rootScope.estadoActual);
	    	$mdBottomSheet.show({
		      templateUrl: template,
		      controller: DialogController,
		      // controller: 'ListBottomSheetCtrl',
		      targetEvent: $event,
		      resolve: {
		         item: function () {
		           return item;
		         }
		       }

		    }).then(function(clickedItem) {
		    	//$mdBottomSheet.hide();
		    	// console.log('por aqui ando');
		    });
	  	};

	  	function DialogController($scope, $mdDialog, item, Areas) {

	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
						$state.go(state, params);
						$mdBottomSheet.hide();
				}
			}

			//abre modal para eliminar un producto
				$scope.showConfirm = function(ev,item) {
					var confirm = $mdDialog.confirm()
			          .title('Eliminar Producto')
			          .content('¿Está seguro que desea eliminar este producto?')
			          .ariaLabel('Lucky day')
			          .ok('Eliminar')
			          .cancel('Cancelar')
			          .targetEvent(ev);
				    $mdDialog.show(confirm).then(function() {
				      $scope.remove(item);
				    }, function() {
				      console.log('cancelaste borrar');
				    });
				};

				// Remove existing Product
				$scope.remove = function( product ) {
					if ( product ) { product.$remove();

						for (var i in $scope.$parent.products ) {
							if ($scope.$parent.products [i] === product ) {
								$scope.$parent.products.splice(i, 1);
							}
						}
					} else {
						$scope.product.$remove(function() {
						});
					}

					$mdBottomSheet.hide();
				};

	  	};

	  	function CrearController($scope, $mdDialog, Modal, Providers) {

	  		$scope.clicked = false;
	  		
			$scope.contacts = Modal.getContactos();
			$scope.categories = Modal.getCategorias();
			// $scope.categories2 = [ 'Materia Prima', 'Insumo'];
			$scope.comprobantes = Modal.getComprobantes();
			$scope.taxconditions = Modal.getCondiciones();
			$scope.proveedores = Modal.getProveedores();
			$scope.condicionPagos = [ 'Efectivo', 'Cheque', 'Transferencia' ];
			$scope.taxconditions2 = [ 'Consumidor Final', 'Responsable Inscripto'];
			$scope.banco = {name: undefined, account: undefined, cbu: undefined, identity: undefined};
			$scope.creditLimit = 0;
			$scope.discountRate = 0;
			$scope.country = 'Argentina';
			$scope.city = 'La Plata';
			$scope.region = 'Buenos Aires';
			$scope.postalCode = '1900';
			// $scope.condicionPago = 'Efectivo';

			var marker, map;
			  $scope.$on('mapInitialized', function(evt, evtMap) {
			    map = evtMap;
			    marker = map.markers[0];
			});

			$scope.types = "['address']";

	        $scope.placeChanged = function() {
	        	$scope.errorDir = undefined;
	           $scope.place = this.getPlace();
	        };

			$scope.hide = function() {
				$mdDialog.hide();
			};

			$scope.cancel = function($event) {
				if ($event !== undefined){
					if ($event.keyCode == 0) {
						$mdDialog.cancel();
					}	
				}
			};

			$scope.answer = function(answer) {
				$mdDialog.hide(answer);
			};

			// Create new Provider
			$scope.crearProveedor = function($event) {
				if ($event.keyCode == 0){
					var empresa = Modal.getEmpresa();
					// Create new Provider object
					if (this.name !== undefined){
						if (this.address !== undefined){
							var latitud = $scope.place.geometry.location.lat();
							var longitud = $scope.place.geometry.location.lng();
							// if (this.category1 !== undefined){
								if (this.taxcondition !== undefined){
									if (this.condicionPago !== undefined){
										if (this.comprobante !== undefined){
											var provider = new Providers ({
												name: this.name,
												creditLimit: this.creditLimit ? this.creditLimit : 0,
							  					fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
												condicionPago: this.condicionPago ? this.condicionPago._id : undefined,
												comprobante: this.comprobante ? this.comprobante._id : undefined,
												banco: this.banco,
												taxCondition: this.taxcondition ? this.taxcondition._id : undefined,
												discountRate: this.discountRate ? this.discountRate : 0,
												costCenter: this.costCenter,
												paymentMethod: this.paymentMethod,
												contacts: this.contact ? this.contact._id : undefined,  // cambiar por contactos seleccionados
												country: this.country,
												city: this.city,
												region: this.region ? this.region : undefined,
												postalCode: this.postalCode,
												address: this.address,
												phone: this.phone ? this.phone : undefined,
												loc: [latitud, longitud],
												//fax: this.fax,
												web: this.web ? this.web : undefined,
												enterprise: empresa,
												category1: this.category1 ? this.category1._id : undefined,
												//sub: this.sub._id || undefined
											});
											// Redirect after save
											provider.$save(function(response) {
							 				// Clear form fields
												$scope.name = '';
												$scope.creditLimit = 0;
												$scope.fiscalNumber = '';
												$scope.discountRate = 0;
												$scope.contacts = [];
												$scope.country = '';
												$scope.city = '';
												$scope.region = '';
												$scope.postalCode = '';
												$scope.address = '';
												$scope.phone = '';
												$scope.fax = '';
												$scope.web = '';
												$scope.hide();
												$rootScope.nuevoProveedor = provider;
											}, function(errorResponse) {
												$scope.error = errorResponse.data.message;
											});
										}
										else{
											$scope.errorComprobante = 'Indicar el tipo de comprobante'
										}	
									}
									else{
										$scope.errorCondicion = 'Indicar condicion de pago'
									}		
								}
								else{
									$scope.errorTax = 'Indicar la condicion de iva'
								}	
							// }
							// else{
							// 	$scope.errorCategory = 'Indicar la categoria';
							// }		
						}
						else{
							$scope.errorDir = 'Indicar la direccion';
						}	
					}
					else{
						$scope.errorNameProv = 'Indicar la razón social';
					}	
				}	
			};

			$scope.borrarError = function(){
				$scope.errorNameProv = undefined;
				$scope.errorDir = undefined;
				$scope.errorCategory = undefined;
				$scope.errorTax = undefined;
				$scope.errorCondicion = undefined;
				$scope.errorComprobante = undefined;
			}
		};	

	}
]);

'use strict';

// Comprobantes controller
angular.module('products').controller('ProductsViewController', ['user', 'product', '$mdDialog', '$state', '$rootScope', '$http',
	function(user, product, $mdDialog, $state, $rootScope, $http) {

		// asignacion de modelos
		this.user = user;
		this.product = product;

		this.selectedMode = 'md-scale';
	    this.selectedDirection = 'up';

	    this.rutaVolver = rutaVolver;

	    function rutaVolver (){
	  //   	if (product.esProducto){
	  //   		$rootScope.estadoActualParams.tipo = 'p';
	  //   	}
	  //   	else{
	  //   		if (product.esMateriaPrima){
	  //   			$rootScope.estadoActualParams.tipo = 'm';
	  //   		}
	  //   		else{
		 //    		if (product.esInsumo){
		 //    			$rootScope.estadoActualParams.tipo = 'i';
		 //    		}
		 //    	}
	  //   	}
			// $state.go('home.products', $rootScope.estadoActualParams);
			history.back()
		};

		// asignacion de funciones


		// definicion de funciones

	}
]);
'use strict';

angular.module('products').factory('Metrics', [
	function() {
		// Metrics service logic
		// ...

		// Public API
		return {
			query: function() {
				return [ 'Bultos','Cajas','Cajones','Cm3','Grs', 'Horas', 'Kg','Latas','Litros','Ml','Mts2','U.'];
			}
		};
	}
]);
'use strict';

//Products service used to communicate Products REST endpoints
angular.module('products').factory('Products', ['$resource',
	function($resource) {
		return $resource('api/products/:productId', { productId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Providers module
angular.module('providers').run(['Menus',
	function(Menus) {
		// Add the Providers dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Providers',
			state: 'providers',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'providers', {
			title: 'List Providers',
			state: 'providers.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'providers', {
			title: 'Create Provider',
			state: 'providers.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('providers').config(['$stateProvider',
	function($stateProvider) {
		// Providers state routing
		$stateProvider.
		state('providers', {
			abstract: true,
			url: '/providers',
			template: '<ui-view/>'
		}).
		state('providers.list', {
			url: '',
			templateUrl: 'modules/providers/views/list-providers.client.view.html'
		}).
		state('providers.create', {
			url: '/create',
			templateUrl: 'modules/providers/views/create-provider.client.view.html'
		}).
		state('providers.view', {
			url: '/:providerId',
			templateUrl: 'modules/providers/views/view-provider.client.view.html'
		}).
		state('providers.edit', {
			url: '/:providerId/edit',
			templateUrl: 'modules/providers/views/edit-provider.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('providers').controller('ProvidersCreateController', ['user', 'provider', 'providers', 'enterprises', 'categories', 'contacts', 'taxconditions', 'condicionPagos', 'comprobantes', '$scope', '$state',
	function(user, provider, providers, enterprises, categories, contacts, taxconditions,condicionPagos, comprobantes, $scope,$state) {

		// asignacion de modelos
		this.user = user;
		this.provider = provider;
		this.enterprises = enterprises;
		this.categories = categories;
		this.contacts = contacts;
		this.taxconditions = taxconditions;
		this.condicionPagos = condicionPagos;
		this.comprobantes = comprobantes;		
		

		// asignacion de funciones
		this.create = create;
		this.borrarError = borrarError;
		
		// definicion de funciones

		var marker, map;

		$scope.$on('mapInitialized', function(evt, evtMap) {
		    map = evtMap;
		    marker = map.markers[0];
		}); //end mapInitialized

		$scope.types = "['address']";

        $scope.placeChanged = function() {
        	borrarError();
        	$scope.place = this.getPlace();
        }; //end placeChanged


		// Create new Provider
		function create () {
			if(this.name !== undefined){
				if (this.address !== undefined){
					if (this.category1 !== undefined){
						if (this.taxcondition !== undefined){	
							if (this.condicionPago !== undefined){	
								if (this.tipoComprobante !== undefined){	
										var latitud = $scope.place.geometry.location.lat();
										var longitud = $scope.place.geometry.location.lng();
										var provider = new providers ({
										name: this.name,
										creditLimit: this.creditLimit ? this.creditLimit : 0,
										fiscalNumber: this.fiscalNumber ? this.fiscalNumber : undefined,
										condicionPago: this.condicionPago ? this.condicionPago._id : undefined,
										banco: this.banco ? this.banco : undefined,
										comprobante: this.tipoComprobante ? this.tipoComprobante._id : undefined,
										taxCondition: this.taxcondition ? this.taxcondition._id : undefined,
										discountRate: this.discountRate ? this.discountRate : 0,
										costCenter: this.costCenter ? this.costCenter : undefined,
										paymentMethod: this.paymentMethod ? this.paymentMethod : undefined,
										contact: this.contact ? this.contact : undefined, 
										address: this.address ? this.address : undefined,
										phone1: this.phone1 ? this.phone1 : 0,
										phone2: this.phone2 ? this.phone2 : 0,
										mail1: this.mail1 ? this.mail1 : 0,
										mail2: this.mail2 ? this.mail2 : 0,
										loc: [latitud, longitud],
										impuesto1: this.imp1 ? this.imp1 : 0,
										impuesto2: this.imp2 ? this.imp2 : 0,
										impuesto3: this.imp3 ? this.imp3 : 0,
										impuesto4: this.imp4 ? this.imp4 : 0,
										web: this.web ? this.web : undefined,
										enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
										category1: this.category1 ? this.category1._id : undefined,
										observaciones: this.observaciones ? this.observaciones : undefined
									});

									// Redirect after save
									provider.$save(function(response) {
										if(response._id) {
											// agregar sub al array
											provider._id = response._id;
										}
										$state.go('home.providers');

									}, function(errorResponse) {
										console.log(errorResponse, 'error');
										$scope.error = errorResponse.data.message;
									});
								}
								else{
									$scope.errorComprobante = 'Se debe ingresar un tipo de comprobante';
								}	
							}
							else{
								$scope.errorCondicion = 'Se debe ingresar la condicion de Pago';
							}		
						}
						else{
							$scope.errorTax = 'Se debe ingresar la condicion de IVA';
						}	
					}
					else{
						$scope.errorCategory = 'Se debe ingresar la categoria';
					}		
				}
				else{
					$scope.errorDir = 'Se debe ingresar la direccion';
				}			
			}
			else{
				$scope.errorName = 'Se debe ingresar la razon social';
			}				
		}; //end create

		function borrarError (){
			$scope.errorName = undefined;
			$scope.errorDir = undefined;
			$scope.errorCategory = undefined;
			$scope.errorTax = undefined;
			$scope.errorCondicion = undefined;
			$scope.errorComprobante = undefined;
		} //end borrarError


	} //end function
]);
'use strict';

// Comprobantes controller
angular.module('providers').controller('ProvidersEditController', ['user', 'provider', 'enterprises', 'categories', 'contacts', 'taxconditions', 'condicionPagos', 'comprobantes', '$scope', '$location', '$state',
	function(user, provider, enterprises, categories, contacts, taxconditions,condicionPagos, comprobantes, $scope,$location, $state) {

		// asignacion de modelos
		this.user = user;
		this.provider = provider;
		this.enterprises = enterprises;
		this.categories = categories;
		this.contacts = contacts;
		this.taxconditions = taxconditions;
		this.condicionPagos = condicionPagos;
		this.comprobantes = comprobantes;
		this.backButton = backButton;
		// asignacion de funciones

		this.update = update;

		this.selectedMode = 'md-scale';
	    this.selectedDirection = 'up';

		// definicion de funciones
		var marker, map;
		$scope.$on('mapInitialized', function(evt, evtMap) {
		    map = evtMap;
		    marker = map.markers[0];
		}); //end mapInitialized

		  $scope.types = "['address']";

        $scope.placeChanged = function() {
           $scope.place = this.getPlace();
        }; //end placeChaged

        function backButton() {
        	history.back()
        }

		function update () {
			var provider = this.provider;
			if (this.enterprise !== undefined) { provider.enterprise = this.enterprise } else { provider.enterprise = provider.enterprise._id };
			//if (this.sub !== undefined) { provider.sub = this.sub._id } else { provider.sub = provider.sub._id };
			// if (this.contact !== undefined) { provider.contacts = [ this.contact ] } else if ((provider.contacts[0]!==undefined)&&(provider.contacts[0]!==null)) { provider.contacts = [ provider.contacts[0]._id ]};
			if (this.taxcondition !== undefined) { provider.taxCondition = this.taxcondition } else if ((provider.taxCondition!==undefined)&&(provider.taxCondition!==null)){ provider.taxCondition = provider.taxCondition._id};
			if (this.condicionPago !== undefined) { provider.condicionPago = this.condicionPago } else if ((provider.condicionPago!==undefined)&&(provider.condicionPago!==null)) { provider.condicionPago = provider.condicionPago._id};
			if (this.tipoComprobante !== undefined) { provider.comprobante = this.tipoComprobante; } else if ((provider.comprobante!==undefined)&&(provider.comprobante!==null)) { provider.comprobante = provider.comprobante._id};
			if (this.category1 !== undefined) { provider.category1 = this.category1 } else if ((provider.category1!==undefined)&&(provider.category1!==null)) { provider.category1 = provider.category1._id};
			if ($scope.place !== undefined) { provider.loc = [ $scope.place.geometry.location.lat(), $scope.place.geometry.location.lng()]} else if((provider.loc!==undefined)&&(provider.loc!==null)){ provider.loc = provider.loc};
			// if (this.city !== undefined) { provider.city = this.city } else if ((provider.city!==undefined)&&(provider.city!==null)){ provider.city = provider.city};
			// console.log(provider, 'provider');
			provider.$update(function() {
				// $location.path('proveedores/view/' + provider._id);
				$state.go('home.providers');
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		}; //end Update

	} //end function
]);
'use strict';

// Comprobantes controller
angular.module('providers').controller('ProvidersListController', ['$rootScope', '$location', 'user', 'providers', 'enterprises', '$mdBottomSheet', '$mdDialog', '$state',
	function($rootScope,$location, user, providers , enterprises, $mdBottomSheet, $mdDialog,$state) {

		// asignacion de modelos
		this.user = user;
		this.providers = providers;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.showBottomSheet = showBottomSheet;
		// this.remove = remove;

		// definicion de funciones
		function showBottomSheet($event, item, model, param) {
			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	$mdBottomSheet.show({
	    	  controller: DialogController,
		      templateUrl: template,
		      // controller: 'ListBottomSheetCtrl',
		      targetEvent: $event,
		      resolve: {
		         item: function () {
		           return item;
		         }
		       }

		    }).then(function(clickedItem) {
		    	//$mdBottomSheet.hide();
		    	// console.log('por aqui ando');
		    });
	  	}; //end showBottomSheet

		function DialogController($scope, $mdDialog, item, Areas) {

	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
					$state.go(state, params);
					$mdBottomSheet.hide();
				}
			} //end goTo

			//abre modal para eliminar una categoria
			$scope.showConfirm = function(ev,item) {
				var confirm = $mdDialog.confirm()
		          .title('Eliminar Proveedor')
		          .content('¿Está seguro que desea eliminar este proveedor?')
		          .ariaLabel('Lucky day')
		          .ok('Eliminar')
		          .cancel('Cancelar')
		          .targetEvent(ev);
			    $mdDialog.show(confirm).then(function() {
			      remove(item);
			    }, function() {
			      console.log('cancelaste borrar');
			    });
			}; //end showConfirm


			function remove ( provider ) {
				if ( provider ) { provider.$remove();
				} else {
					this.provider.$remove(function() {
					});
				}
				$mdBottomSheet.hide();
			};//end remove

		}; //end DialogController

	} //end function
]);
'use strict';

// Providers controller
angular.module('providers').controller('ProvidersController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Providers', 'Enterprises', 'Subs', '$mdBottomSheet', 'Contacts', 'Taxconditions', 'Categories', '$mdDialog', '$state', 'Comprobantes', 'Pedidos', 'Compras', 'Condicionventas', 'Products', '$timeout', '$filter',
	function($scope, $rootScope, $stateParams, $location, Authentication, Providers, Enterprises, Subs, $mdBottomSheet, Contacts, Taxconditions, Categories, $mdDialog, $state, Comprobantes, Pedidos, Compras, Condicionventas, Products, $timeout, $filter ) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			$scope.findAll();
			//console.log('search: ', $scope.SEARCH);
		});

		$scope.banco = { cbu: '0' };
		$scope.creditLimit = 0;
		$scope.discountRate = 0;
		$scope.country = 'Argentina';
		$scope.city = 'La Plata';
		$scope.region = 'Buenos Aires';
		$scope.postalCode = '1900';

		var marker, map;
		  $scope.$on('mapInitialized', function(evt, evtMap) {
		    map = evtMap;
		    marker = map.markers[0];
		  });

		  $scope.types = "['address']";
         $scope.placeChanged = function() {
         	$scope.errorDir = undefined;
           $scope.place = this.getPlace();
         }


		// Create new Provider
		$scope.create = function() {
			// Create new Provider object
			if(this.name !== undefined){
				if (this.address !== undefined){
					if (this.category1 !== undefined){
						if (this.taxcondition !== undefined){	
							if (this.condicionPago !== undefined){	
								if (this.tipoComprobante !== undefined){	
										var latitud = $scope.place.geometry.location.lat();
										var longitud = $scope.place.geometry.location.lng();
										var provider = new Providers ({
										name: this.name,
										creditLimit: this.creditLimit ? this.creditLimit : 0,
										fiscalNumber: this.fiscalNumber ? this.fiscalNumber : undefined,
										condicionPago: this.condicionPago ? this.condicionPago._id : undefined,
										banco: this.banco ? this.banco : undefined,
										comprobante: this.tipoComprobante ? this.tipoComprobante._id : undefined,
										taxCondition: this.taxcondition ? this.taxcondition._id : undefined,
										discountRate: this.discountRate ? this.discountRate : 0,
										costCenter: this.costCenter ? this.costCenter : undefined,
										paymentMethod: this.paymentMethod ? this.paymentMethod : undefined,
										contacts: this.contact ? [ this.contact._id ] : [], // cambiar por contactos seleccionados
										country: this.country ? this.country : undefined,
										city: this.city ? this.city : undefined,
										region: this.region ? this.region : undefined,
										postalCode: this.postalCode,
										address: this.address ? this.address : undefined,
										phone: this.phone ? this.phone : 0,
										loc: [latitud, longitud],
										//fax: this.fax,
										web: this.web ? this.web : undefined,
										enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
										category1: this.category1 ? this.category1._id : undefined,
										observaciones: this.observaciones ? this.observaciones : undefined,
										//sub: this.sub._id || undefined
									});

									console.log(provider);

									// Redirect after save
									provider.$save(function(response) {
										//$location.path('providers/' + response._id);

										if(response._id) {
											// agregar sub al array

											provider._id = response._id;
											$rootScope.providers.unshift(provider);

										}

										$state.go('home.providers');

										// Clear form fields
										$scope.name = '';
										$scope.creditLimit = 0;
										$scope.fiscalNumber = '';
										$scope.discountRate = 0;
										$scope.contacts = [];
										$scope.country = '';
										$scope.city = '';
										$scope.region = '';
										$scope.postalCode = '';
										$scope.address = '';
										$scope.phone = '';
										$scope.fax = '';
										$scope.web = '';

									}, function(errorResponse) {
										$scope.error = errorResponse.data.message;
									});
								}
								else{
									$scope.errorComprobante = 'Se debe ingresar un tipo de comprobante';
								}	
							}
							else{
								$scope.errorCondicion = 'Se debe ingresar la condicion de Pago';
							}		
						}
						else{
							$scope.errorTax = 'Se debe ingresar la condicion de IVA';
						}	
					}
					else{
						$scope.errorCategory = 'Se debe ingresar la categoria';
					}		
				}
				else{
					$scope.errorDir = 'Se debe ingresar la direccion';
				}			
			}
			else{
				$scope.errorName = 'Se debe ingresar la razon social';
			}				
		};

		$scope.borrarError = function(){
			$scope.errorName = undefined;
			$scope.errorDir = undefined;
			$scope.errorCategory = undefined;
			$scope.errorTax = undefined;
			$scope.errorCondicion = undefined;
			$scope.errorComprobante = undefined;
		}


		// Update existing Provider
		$scope.update = function() {
			var provider = $scope.provider;
			if (this.enterprise !== undefined) { provider.enterprise = this.enterprise._id } else { provider.enterprise = provider.enterprise._id };
			//if (this.sub !== undefined) { provider.sub = this.sub._id } else { provider.sub = provider.sub._id };
			if (this.contact !== undefined) { provider.contacts = [ this.contact._id ] } else if ((provider.contacts[0]!==undefined)&&(provider.contacts[0]!==null)) { provider.contacts = [ provider.contacts[0]._id ]};
			if (this.taxcondition !== undefined) { provider.taxCondition = this.taxcondition._id } else if ((provider.taxCondition!==undefined)&&(provider.taxCondition!==null)){ provider.taxCondition = provider.taxCondition._id};
			if (this.condicionPago !== undefined) { provider.condicionPago = this.condicionPago._id } else if ((provider.condicionPago!==undefined)&&(provider.condicionPago!==null)) { provider.condicionPago = provider.condicionPago};
			if (this.tipoComprobante !== undefined) { provider.comprobante = this.tipoComprobante; } else if ((provider.tipoComprobante!==undefined)&&(provider.tipoComprobante!==null)) { provider.tipoComprobante = provider.comprobante};
			if (this.category1 !== undefined) { provider.category1 = this.category1._id } else if ((provider.category1!==undefined)&&(provider.category1!==null)) { provider.category1 = provider.category1._id};
			if ($scope.place !== undefined) { provider.loc = [ $scope.place.geometry.location.lat(), $scope.place.geometry.location.lng()]} else if((provider.loc!==undefined)&&(provider.loc!==null)){ provider.loc = provider.loc};
			if (this.city !== undefined) { provider.city = this.city } else if ((provider.city!==undefined)&&(provider.city!==null)){ provider.city = provider.city};
			provider.$update(function() {
				$location.path('proveedores');
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Providers
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) {
				$rootScope.providers = Providers.query({ e: $scope.SEARCH.enterprise });
			}

		};

		// Find a list of SBUs
		$scope.findEnterprises = function() {
			if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({e: $scope.SEARCH.enterprise }); };

		};

		// Find a list of SBUs
		$scope.findSubs = function() {
			if($scope.SEARCH !== undefined) { $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise }); }

		};

		// Find a list of SBUs
		$scope.findContacts = function() {
			if ($scope.SEARCH !== undefined) { $scope.contacts = Contacts.query({e: $scope.SEARCH.enterprise }); };

		};

		// Find a list of Taxconditions
		$scope.findTaxConditions = function() {
			if ($scope.SEARCH !== undefined) { $scope.taxconditions = Taxconditions.query({e: $scope.SEARCH.enterprise }); };

		};

		// Find a list of condiciones de pago
		$scope.findCondicionPagos = function() {
			if($scope.SEARCH !== undefined) { $scope.condicionPagos = Condicionventas.query({ e: $scope.SEARCH.enterprise });}
			//$scope.condicionPagos = [ 'Efectivo', 'Cheque', 'Transferencia' ];
		};

		// Find a list of Enterprises
		$scope.findCategories = function() {
			if ($scope.SEARCH !== undefined) { $scope.categories = Categories.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		$scope.findCitys = function() {
			if ($scope.SEARCH !== undefined) { $scope.citys = ['Berisso', 'Ensenala', 'La Plata']; } // ToDo:  migrate this to a factory

		};

		$scope.findProductos = function() {
			if($scope.SEARCH !== undefined) { 
				$scope.products = Products.query({ e: $scope.SEARCH.enterprise })
			;}
		};


		$scope.findAll = function(){
			//$scope.findOne();
			$scope.findComprobantes();
			$scope.findCompras();
			$scope.findPedidos();
			$scope.findProductos();
		};

		$scope.findAllView = function(){
			$scope.findOne();
			$scope.findComprobantes();
			$scope.findCompras();
			$scope.findPedidos();
			
		};

		// Find existing Provider
		$scope.findOne = function() {
			$scope.provider = Providers.get({
				providerId: $stateParams.providerId
			});
			$scope.idProvider = $stateParams.providerId;
		};

		$scope.findComprobantes = function(){
			if ($scope.SEARCH !== undefined) {
				$scope.comprobantes = Comprobantes.query({e: $scope.SEARCH.enterprise }, function(res){
					$rootScope.comprobantes = res;
					$rootScope.comprobantesFiltro = res;
					for (var i in $rootScope.comprobantes) {
						if ($rootScope.comprobantes[i].name === 'Presupuesto'){
							$scope.idPresupuesto = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Factura A'){
							$rootScope.idFacturaA = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Factura B'){
							$rootScope.idFacturaB = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Factura C'){
							$rootScope.idFacturaC = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Remito'){
							$rootScope.idRemito = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Remito de Devolucion'){
							$rootScope.idRemitoDev = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Nota de Credito'){
							$rootScope.idNotaC = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Nota de Debito'){
							$rootScope.idNotaD = $rootScope.comprobantes[i]._id;
						}
						if ($rootScope.comprobantes[i].name === 'Orden de Pago'){
							$rootScope.idOrden = $rootScope.comprobantes[i]._id;
						}
					}
					for (var i in $rootScope.comprobantesFiltro) {
						if ($rootScope.comprobantesFiltro[i].name === 'Pedido'){
							$rootScope.comprobantesFiltro.splice(i, 1);
						}
					}
				});
			}
		};


		$scope.comprasA = [];
		$scope.comprasB = [];
		$scope.comprasC = [];

		$scope.findCompras = function() {
			if($scope.SEARCH !== undefined) {
				$scope.compras = Compras.query({ e: $scope.SEARCH.enterprise });
			}
			$timeout(function(){
				$scope.filtro = $filter('filter')($scope.compras, function(item){
					return (item.estado === 'Pendiente de pago y recepcion' || item.estado === 'Pendiente de pago2');
				})
				$scope.deudaProveedor = 0;
				for (var i in $scope.filtro){
					if ($scope.filtro[i].proveedor._id === $scope.idProvider){
						$scope.deudaProveedor = $scope.deudaProveedor + $scope.filtro[i].total;
					}
				}
				return $scope.filtro;
			},1000)
		};

		$scope.findPedidos = function(){
			if ($scope.SEARCH !== undefined) {
				$scope.pedidos = Pedidos.query({ e: $scope.SEARCH.enterprise });
			}
		};

		$scope.showBottomSheet = function($event, item, model, param) {
			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	//console.log('estadoactual: ', $rootScope.estadoActual);
	    	$mdBottomSheet.show({
	    	  controller: DialogController,
		      templateUrl: template,
		      // controller: 'ListBottomSheetCtrl',
		      targetEvent: $event,
		      resolve: {
		         item: function () {
		           return item;
		         }
		       }

		    }).then(function(clickedItem) {
		    	//$mdBottomSheet.hide();
		    	console.log('por aqui ando');
		    });

	  	};

	  	function DialogController($scope, $mdDialog, item, Areas) {

	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
						$state.go(state, params);
						$mdBottomSheet.hide();
				}
			}

			//abre modal para eliminar un proveedor
			$scope.showConfirm = function(ev,item) {
				var confirm = $mdDialog.confirm()
		          .title('Eliminar Proveedor')
		          .content('¿Está seguro que desea eliminar este proveedor?')
		          .ariaLabel('Lucky day')
		          .ok('Eliminar')
		          .cancel('Cancelar')
		          .targetEvent(ev);
			    $mdDialog.show(confirm).then(function() {
			      $scope.remove(item);
			    }, function() {
			      console.log('cancelaste borrar');
			    });
			};

			// Remove existing Provider
			$scope.remove = function( provider ) {
				if ( provider ) { provider.$remove();

					for (var i in $scope.$parent.providers ) {
						if ($scope.$parent.providers[i] === provider ) {
							$scope.$parent.providers.splice(i, 1);
						}
					}
				} else {
					$scope.provider.$remove(function() {
					});
				}
				$mdBottomSheet.hide();
			};

		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('providers').controller('ProvidersViewController', ['user', 'provider', 'products', 'pedidos', 'compras', '$scope', '$rootScope', 'Comprobantes', '$location', 
	function(user, provider, products, pedidos, compras, $scope, $rootScope, Comprobantes, $location) {


		// asignacion de modelos
		this.user = user;
		this.provider = provider;
		this.products = products;
		this.pedidos = pedidos;
		this.compras = compras;

		// asignacion de funciones

		this.deudaProveedor = deudaProveedor;
		this.rutaProducto = rutaProducto;

		this.deudaProveedor(compras);

		this.selectedMode = 'md-scale';
	    this.selectedDirection = 'up';
		
		// // definicion de funciones

		function deudaProveedor (compras){
			compras.$promise.then(angular.bind(this, function(data) { 
				this.total = 0;
				for (var i in data){
					if ((data[i].proveedor !== undefined ) && (data[i].proveedor !== null)){
						if (data[i].proveedor._id === provider._id){
							if (data[i].estado === 'Pendiente de pago y recepcion' || data[i].estado === 'Pendiente de pago2'){
								this.total = this.total + data[i].total;
							}
						}
					}
				}
			}))
		}; //end deudaProveedor

		function rutaProducto (id){
			$location.path('productos/view/' + id);
		}

	}//end function
]);

// .config(function($mdThemingProvider) {
//   $mdThemingProvider.theme('default')
//     .primaryPalette('pink')
//     .accentPalette('pink')
//     .warnPalette('')
//     .backgroundPalette('');
// });
'use strict';

//Providers service used to communicate Providers REST endpoints
angular.module('providers').factory('Providers', ['$resource',
	function($resource) {
		return $resource('api/providers/:providerId', { providerId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Puestos module
angular.module('puestos').run(['Menus',
	function(Menus) {
		// Add the Puestos dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Puestos',
			state: 'puestos',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'puestos', {
			title: 'List Puestos',
			state: 'puestos.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'puestos', {
			title: 'Create Puesto',
			state: 'puestos.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('puestos').config(['$stateProvider',
	function($stateProvider) {
		// Puestos state routing
		$stateProvider.
		state('puestos', {
			abstract: true,
			url: '/puestos',
			template: '<ui-view/>'
		}).
		state('puestos.list', {
			url: '',
			templateUrl: 'modules/puestos/views/list-puestos.client.view.html'
		}).
		state('puestos.create', {
			url: '/create',
			templateUrl: 'modules/puestos/views/create-puesto.client.view.html'
		}).
		state('puestos.view', {
			url: '/:puestoId',
			templateUrl: 'modules/puestos/views/view-puesto.client.view.html'
		}).
		state('puestos.edit', {
			url: '/:puestoId/edit',
			templateUrl: 'modules/puestos/views/edit-puesto.client.view.html'
		});
	}
]);
'use strict';

// Puestos controller
angular.module('puestos',['dndLists']).controller('PuestosController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Puestos', 'Enterprises', 'Areas', 'Procesos', '$state', 'Users', 'Personas', '$mdDialog', '$mdBottomSheet', '$timeout', 'Procedimientos', 'Subs', '$http', 'Costcenters', '$filter',
    function($scope, $rootScope, $stateParams, $location, Authentication, Puestos, Enterprises, Areas, Procesos, $state, Users, Personas, $mdDialog, $mdBottomSheet, $timeout, Procedimientos, Subs, $http, Costcenters, $filter) {
        $scope.authentication = Authentication;
        $scope.models = [];
        $scope.personal = $stateParams["personal"];
        $scope.centrodecostoId = $stateParams.centroDeCosto;

        $scope.showProcedimientos = true;
        $scope.showInteractores = true;

        // Generate initial model
        for (var i = 1; i <= 3; ++i) {
            $scope.models.push({label: "Item A" + i});
            //$scope.models.lists.B.push({label: "Item B" + i});
        }

        // Model to JSON for demo purpose
        $scope.$watch('models', function(model) {
            angular.toJson(model, true);
        }, true);
        $scope.$watch('puesto.procedimientos', function(model) {
            angular.toJson(model, true);
        }, true);

        // watch for SEARCH to update value
        $scope.$watch('authentication', function() {
            $scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
            $scope.findAll();
            $scope.findAreas();
            $scope.findUsers();

            $scope.findProcesos();
            $scope.findProcedimientos();
            $scope.findInteractores();
        });

        $scope.nombreAreaFiltro = undefined;

        //arreglos para usar cuando crea un puesto nuevo
        $rootScope.procesosAgregados = [];
        $rootScope.interactoresAgregados = [];

        //arreglos para usar cuando edita un puesto
        $rootScope.procesosEdit = [];
        $rootScope.interactoresEdit = [];

        $scope.horarios = ["06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00",
            "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30",
            "19:00", "19:30", "20:00", "20:30", "21:00", "21:30", "22:00", "22:30", "23:00", "23:30", "00:00"
        ];

        var originatorEv;
        $scope.openMenu = function($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        };


        //cambia el estado del puesto
        $scope.sampleAction = function(name, puesto) {
            switch (name) {
                case 'libre':
                    puesto.estado = 'Libre';
                    break;

                case 'ocupado':
                    puesto.estado = 'Ocupado';
                    break;

                case 'no':
                    puesto.estado = 'Sin Especificar';
                    break;
            }
            $scope.updateEstado(puesto);
        };

        $scope.updateEstado = function(puesto) {
            if (this.enterprise !== undefined) { puesto.enterprise = this.enterprise._id } else if ((puesto.enterprise !== undefined) && (puesto.enterprise !== null)) { puesto.enterprise = puesto.enterprise._id };
            if (this.sub !== undefined) { puesto.sub = this.sub._id } else if ((puesto.sub !== undefined) && (puesto.sub !== null)) { puesto.sub = puesto.sub._id };

            puesto.$update(function() {}, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        $scope.filtrarAreas = function(area) {
            $scope.nombreAreaFiltro = area.name;
        };

        $scope.eliminarFiltro = function() {
            $scope.nombreAreaFiltro = undefined;
        };

        $scope.clickSubmit = function() {
            $scope.clicked = true;
            $scope.create();
        };

        $scope.submitEdit = function() {
            if (this.personal && this.personal.puesto) {
                if (confirm("it is already used by another personal are you sure to update so that it will replace for other user")) {
                    $scope.clickedEdit = true;
                    $scope.update();
                }
            } else {
                $scope.clickedEdit = true;
                $scope.update();
            }

        };

        // Create new Puesto
        $scope.create = function() {
            // Create new Puesto object
            if ($scope.clicked === true) {
                if (this.name !== undefined) {
                    // if (this.sub !== undefined){

                    if (this.area !== undefined) {
                        var puesto = new Puestos({
                            name: this.name,
                            area: this.area,
                            horarioE: this.horarioE ? this.horarioE : undefined,
                            horarioS: this.horarioS ? this.horarioS : undefined,
                            sueldo: this.sueldo ? this.sueldo : undefined,
                            porcentajeVentas: this.porcentajeVentas ? this.porcentajeVentas : undefined,
                            parent: this.parent ? this.parent : undefined,
                            procedimientos: $rootScope.procesosAgregados,
                            interaccion: $rootScope.interactoresAgregados,
                            responsabilidades: this.responsabilidades ? this.responsabilidades : undefined,
                            requerimientos: this.requerimientos ? this.requerimientos : undefined,
                            tareas: this.observaciones ? this.observaciones : undefined,
                            criterios: this.criterios ? this.criterios : undefined,
                            objetivos: this.objetivos ? this.objetivos : undefined,
                            enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
                            centroDeCosto: this.centroDeCosto.id ? this.centroDeCosto.id : undefined,
                            // sub: this.sub ? this.sub._id : undefined
                        });

                        // Redirect after save
                        puesto.$save(function(response) {
                            /*$location.path('puestos/' + response._id);*/
                            if (response._id) {
                                // agregar sub al array

                                puesto._id = response._id;
                                $rootScope.puestos.unshift(puesto);

                            }

                            $state.go('home.puesto');

                            // Clear form fields
                            $scope.name = '';
                        }, function(errorResponse) {
                            $scope.error = errorResponse.data.message;
                        });
                    } else {
                        $scope.errorArea = 'Indicar Area del puesto';
                    }
                    // }
                    // else{
                    // 	$scope.errorSub = 'Indicar UEN';
                    // }
                } else {
                    $scope.errorName = 'Indicar nombre para el puesto';
                }
            } else {
                //no hace nada
            }
        };

        $scope.borrarMensaje = function() {
            $scope.errorName = undefined;
            $scope.errorArea = undefined;
            $scope.errorSub = undefined;
        };

        $scope.agregarProceso = function(proceso) {
            var ok = false;
            if ((proceso !== undefined) && (proceso !== null)) {
                for (var i in $rootScope.procesosAgregados) {
                    if ($rootScope.procesosAgregados[i]._id === proceso._id) {
                        ok = true;
                    }
                }
                if (!ok) {
                    $rootScope.procesosAgregados.push(proceso);
                    this.proceso = undefined;
                }
            }
        };

        $scope.agregarProcesoEdit = function(proceso) {
            if (proceso !== undefined) {
                $rootScope.procesosEdit = this.puesto.procedimientos;
                $rootScope.procesosEdit.push(proceso);
                $scope.proceso = undefined;
            }
        };

        $scope.agregarInteractores = function(interactor) {
            var ok = false;
            if ((interactor !== undefined) && (interactor !== null)) {
                for (var i in $rootScope.interactoresAgregados) {
                    if ($rootScope.interactoresAgregados[i]._id === interactor._id) {
                        ok = true;
                    }
                }
                if (!ok) {
                    $rootScope.interactoresAgregados.push(interactor);
                    this.interaccion = undefined;
                }
            }
        };


        $scope.agregarInteractoresEdit = function(i) {
            if (i !== undefined) {
                $rootScope.interactoresEdit = this.puesto.interaccion;
                $rootScope.interactoresEdit.push(i);
                $scope.interaccion = undefined;
            }
        };

        $scope.borrarProceso = function(item) {
            for (var i in $rootScope.procesosAgregados) {
                if ($rootScope.procesosAgregados[i] === item) {
                    $rootScope.procesosAgregados.splice(i, 1);
                }
            }
        };

        $scope.borrarProcesoEdit = function(item) {
            $rootScope.procesosEdit = this.puesto.procedimientos;
            for (var i in $rootScope.procesosEdit) {
                if ($rootScope.procesosEdit[i] === item) {
                    $rootScope.procesosEdit.splice(i, 1);
                }
            }
        };

        $scope.borrarInteractor = function(item) {
            for (var i in $rootScope.interactoresAgregados) {
                if ($rootScope.interactoresAgregados[i] === item) {
                    $rootScope.interactoresAgregados.splice(i, 1);
                }
            }
        };

        $scope.borrarInteractorEdit = function(item) {
            $rootScope.interactoresEdit = this.puesto.interaccion;
            for (var i in $rootScope.interactoresEdit) {
                if ($rootScope.interactoresEdit[i] === item) {
                    $rootScope.interactoresEdit.splice(i, 1);
                }
            }
        };

        //abre modal para eliminar un puesto
        $scope.showConfirm = function(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Eliminar Puesto')
                .content('¿Está seguro que desea eliminar este puesto?')
                .ariaLabel('Lucky day')
                .ok('Eliminar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(function() {
                $scope.remove(item);
            }, function() {
                console.log('cancelaste borrar');
            });
        };

        // Remove existing Puesto
        $scope.remove = function(puesto) {
            if (puesto) {
                puesto.$remove();

                for (var i in $scope.puestos) {
                    if ($scope.puestos[i] === puesto) {
                        $scope.puestos.splice(i, 1);
                    }
                }
            } else {
                $scope.puesto.$remove(function() {
                    $location.path('puestos');
                });
            }
        };

        // Update existing Puesto
        $scope.update = function() {
            if ($scope.clickedEdit == true) {

                var puesto = $scope.puesto;
                puesto.parent = $scope.parent;
                puesto.horarioE = $scope.horarioE;
                puesto.horarioS = $scope.horarioS;
                if ($scope.area !== undefined) {
                    puesto.area = $scope.area._id
                } else {
                    if (puesto.area !== undefined) {
                        puesto.area = puesto.area._id
                    }
                };
                if ($rootScope.interactoresEdit.length !== 0) {
                    for (var i in $rootScope.interactoresEdit) {
                        var id = $rootScope.interactoresEdit[i]._id;
                        $rootScope.interactoresAgregados.push(id);
                    }
                    puesto.interaccion = $rootScope.interactoresAgregados;
                }
                if ($rootScope.procesosEdit.length !== 0) {
                    for (var i in $rootScope.procesosEdit) {
                        var id = $rootScope.procesosEdit[i]._id;
                        $rootScope.procesosAgregados.push(id);
                    }
                    puesto.procesos = $rootScope.procesosAgregados;
                }

                /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
                una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
                hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */
                if (this.enterprise !== undefined) { puesto.enterprise = this.enterprise._id } else if ((puesto.enterprise !== undefined) && (puesto.enterprise !== null)) { puesto.enterprise = puesto.enterprise._id };
                if (this.centroDeCosto !== undefined) { puesto.centroDeCosto = this.centroDeCosto.id } else if ((puesto.centroDeCosto !== undefined) && (puesto.centroDeCosto !== null)) { puesto.centroDeCosto = puesto.centroDeCosto };

                if (this.personal !== undefined) { puesto.personal = this.personal._id } else if ((puesto.personal !== undefined) && (puesto.personal !== null)) { puesto.personal = puesto.personal._id };
                // if (this.sub !== undefined) { puesto.sub = this.sub._id } else if ((puesto.sub !== undefined)&&(puesto.sub !== null)){ puesto.sub = puesto.sub._id };
                puesto.changeEstado = true;
                puesto.$update(function() {
                    if(puesto.personal) {
                        $location.path('puestos/view/' + puesto._id);
                    } else {
                        $state.go('home.puesto');
                    }
                }, function(errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }
        };

        $scope.findAll = function() {
            $scope.find();
            $scope.findAreas();
        };

        // Find a list of Puestos
        $scope.find = function() {
            if ($scope.SEARCH !== undefined) {
                // $rootScope.puestos = Puestos.query({ e: $scope.SEARCH.enterprise });
                Puestos.query({ e: $scope.SEARCH.enterprise }, function(res) {
                    $rootScope.puestos = res;
                });
            }
        };

        // Find existing Puesto
        $scope.findOne = function() {
            Puestos.get({ puestoId: $stateParams.puestoId }, function(res) {
                $scope.puesto = res;
                Users.query({ e: $scope.SEARCH.enterprise }, function(res) {
                    $scope.users = res;
                    $scope.users.unshift({_id: '', displayName: '', status: 'active'});
                });

                Costcenters.query({e: $scope.SEARCH.enterprise}, function(data) {
                    $scope.relatedCostCenter = $filter('filter')(data, function(item) {
                        return item.id === $scope.puesto.centroDeCosto;
                    })[0];
                });
            });
        };

        $scope.findEnterprises = function() {
            $scope.enterprises = Enterprises.query();
        };
        $scope.findCentroDeCostos = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.centroDeCostos = Costcenters.query({e: $scope.SEARCH.enterprise});
            }
        };

        $scope.findAreas = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.areas = Areas.query({ e: $scope.SEARCH.enterprise });
            }
        };

        $scope.findProcesos = function() {
            if ($scope.SEARCH !== undefined) { $scope.procesos = Procesos.query({ e: $scope.SEARCH.enterprise }); }
        };

        $scope.findProcedimientos = function() {
            if ($scope.SEARCH !== undefined) { $scope.procedimientos = Procedimientos.query({ e: $scope.SEARCH.enterprise }); }
        };

        $scope.findInteractores = function() {
            if ($scope.SEARCH !== undefined) { $scope.interactores = Puestos.query({ e: $scope.SEARCH.enterprise }); }
        };

        $scope.findUsers = function() {
            if ($scope.SEARCH !== undefined) { $scope.usuarios = Users.query({ e: $scope.SEARCH.enterprise }); }
        };

        $scope.findSubs = function() {
            if ($scope.SEARCH !== undefined) { $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise }); }
        };

        $scope.showBottomSheet = function($event, item, model, param) {

            var template = '/modules/core/views/menu-opciones.client.view.html';
            $rootScope.currentItem = item;
            $rootScope.currentModel = model;
            $rootScope.currentParam = param;
            $mdBottomSheet.show({
                controller: DialogController,
                templateUrl: template,
                targetEvent: $event,
                resolve: {
                    item: function() {
                        return item;
                    }
                }

            }).then(function(clickedItem) {
                //$mdBottomSheet.hide();
                // console.log('por aqui ando');
            });

        };

        function DialogController($scope, $mdDialog, item, Areas) {

            $scope.item = item;

            $scope.goto = function(state, params) {
                if (state !== undefined) {
                    $state.go(state, params);
                    $mdBottomSheet.hide();
                }
            }

            //abre modal para eliminar un puesto
            $scope.showConfirm = function(ev, item) {
                var confirm = $mdDialog.confirm()
                    .title('Eliminar Puesto')
                    .content('¿Está seguro que desea eliminar este puesto?')
                    .ariaLabel('Lucky day')
                    .ok('Eliminar')
                    .cancel('Cancelar')
                    .targetEvent(ev);
                $mdDialog.show(confirm).then(function() {
                    $scope.remove(item);
                }, function() {
                    console.log('cancelaste borrar');
                });
            };

            // Remove existing Puesto
            $scope.remove = function(puesto) {
                if (puesto) {
                    puesto.$remove();

                    for (var i in $scope.$parent.puestos) {
                        if ($scope.$parent.puestos[i] === puesto) {
                            $scope.$parent.puestos.splice(i, 1);
                        }
                    }
                } else {
                    $scope.puesto.$remove(function() {
                        $location.path('puestos');
                    });
                }
                $mdBottomSheet.hide();
            };

        };    
    }
]);
/**
 * angular-drag-and-drop-lists v2.1.0
 *
 * Copyright (c) 2014 Marcel Juenemann marcel@juenemann.cc
 * Copyright (c) 2014-2017 Google Inc.
 * https://github.com/marceljuenemann/angular-drag-and-drop-lists
 *
 * License: MIT
 */
(function(dndLists) {

  // In standard-compliant browsers we use a custom mime type and also encode the dnd-type in it.
  // However, IE and Edge only support a limited number of mime types. The workarounds are described
  // in https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
  var MIME_TYPE = 'application/x-dnd';
  var EDGE_MIME_TYPE = 'application/json';
  var MSIE_MIME_TYPE = 'Text';

  // All valid HTML5 drop effects, in the order in which we prefer to use them.
  var ALL_EFFECTS = ['move', 'copy', 'link'];

  /**
   * Use the dnd-draggable attribute to make your element draggable
   *
   * Attributes:
   * - dnd-draggable      Required attribute. The value has to be an object that represents the data
   *                      of the element. In case of a drag and drop operation the object will be
   *                      serialized and unserialized on the receiving end.
   * - dnd-effect-allowed Use this attribute to limit the operations that can be performed. Valid
   *                      options are "move", "copy" and "link", as well as "all", "copyMove",
   *                      "copyLink" and "linkMove". The semantics of these operations are up to you
   *                      and have to be implemented using the callbacks described below. If you
   *                      allow multiple options, the user can choose between them by using the
   *                      modifier keys (OS specific). The cursor will be changed accordingly,
   *                      expect for IE and Edge, where this is not supported.
   * - dnd-type           Use this attribute if you have different kinds of items in your
   *                      application and you want to limit which items can be dropped into which
   *                      lists. Combine with dnd-allowed-types on the dnd-list(s). This attribute
   *                      must be a lower case string. Upper case characters can be used, but will
   *                      be converted to lower case automatically.
   * - dnd-disable-if     You can use this attribute to dynamically disable the draggability of the
   *                      element. This is useful if you have certain list items that you don't want
   *                      to be draggable, or if you want to disable drag & drop completely without
   *                      having two different code branches (e.g. only allow for admins).
   *
   * Callbacks:
   * - dnd-dragstart      Callback that is invoked when the element was dragged. The original
   *                      dragstart event will be provided in the local event variable.
   * - dnd-moved          Callback that is invoked when the element was moved. Usually you will
   *                      remove your element from the original list in this callback, since the
   *                      directive is not doing that for you automatically. The original dragend
   *                      event will be provided in the local event variable.
   * - dnd-copied         Same as dnd-moved, just that it is called when the element was copied
   *                      instead of moved, so you probably want to implement a different logic.
   * - dnd-linked         Same as dnd-moved, just that it is called when the element was linked
   *                      instead of moved, so you probably want to implement a different logic.
   * - dnd-canceled       Callback that is invoked if the element was dragged, but the operation was
   *                      canceled and the element was not dropped. The original dragend event will
   *                      be provided in the local event variable.
   * - dnd-dragend        Callback that is invoked when the drag operation ended. Available local
   *                      variables are event and dropEffect.
   * - dnd-selected       Callback that is invoked when the element was clicked but not dragged.
   *                      The original click event will be provided in the local event variable.
   * - dnd-callback       Custom callback that is passed to dropzone callbacks and can be used to
   *                      communicate between source and target scopes. The dropzone can pass user
   *                      defined variables to this callback.
   *
   * CSS classes:
   * - dndDragging        This class will be added to the element while the element is being
   *                      dragged. It will affect both the element you see while dragging and the
   *                      source element that stays at it's position. Do not try to hide the source
   *                      element with this class, because that will abort the drag operation.
   * - dndDraggingSource  This class will be added to the element after the drag operation was
   *                      started, meaning it only affects the original element that is still at
   *                      it's source position, and not the "element" that the user is dragging with
   *                      his mouse pointer.
   */
  dndLists.directive('dndDraggable', ['$parse', '$timeout', function($parse, $timeout) {
    return function(scope, element, attr) {
      // Set the HTML5 draggable attribute on the element.
      element.attr("draggable", "true");

      // If the dnd-disable-if attribute is set, we have to watch that.
      if (attr.dndDisableIf) {
        scope.$watch(attr.dndDisableIf, function(disabled) {
          element.attr("draggable", !disabled);
        });
      }

      /**
       * When the drag operation is started we have to prepare the dataTransfer object,
       * which is the primary way we communicate with the target element
       */
      element.on('dragstart', function(event) {
        event = event.originalEvent || event;

        // Check whether the element is draggable, since dragstart might be triggered on a child.
        if (element.attr('draggable') == 'false') return true;

        // Initialize global state.
        dndState.isDragging = true;
        dndState.itemType = attr.dndType && scope.$eval(attr.dndType).toLowerCase();

        // Set the allowed drop effects. See below for special IE handling.
        dndState.dropEffect = "none";
        dndState.effectAllowed = attr.dndEffectAllowed || ALL_EFFECTS[0];
        event.dataTransfer.effectAllowed = dndState.effectAllowed;

        // Internet Explorer and Microsoft Edge don't support custom mime types, see design doc:
        // https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
        var item = scope.$eval(attr.dndDraggable);
        var mimeType = MIME_TYPE + (dndState.itemType ? ('-' + dndState.itemType) : '');
        try {
          event.dataTransfer.setData(mimeType, angular.toJson(item));
        } catch (e) {
          // Setting a custom MIME type did not work, we are probably in IE or Edge.
          var data = angular.toJson({item: item, type: dndState.itemType});
          try {
            event.dataTransfer.setData(EDGE_MIME_TYPE, data);
          } catch (e) {
            // We are in Internet Explorer and can only use the Text MIME type. Also note that IE
            // does not allow changing the cursor in the dragover event, therefore we have to choose
            // the one we want to display now by setting effectAllowed.
            var effectsAllowed = filterEffects(ALL_EFFECTS, dndState.effectAllowed);
            event.dataTransfer.effectAllowed = effectsAllowed[0];
            event.dataTransfer.setData(MSIE_MIME_TYPE, data);
          }
        }

        // Add CSS classes. See documentation above.
        element.addClass("dndDragging");
        $timeout(function() { element.addClass("dndDraggingSource"); }, 0);

        // Try setting a proper drag image if triggered on a dnd-handle (won't work in IE).
        if (event._dndHandle && event.dataTransfer.setDragImage) {
          event.dataTransfer.setDragImage(element[0], 0, 0);
        }

        // Invoke dragstart callback and prepare extra callback for dropzone.
        $parse(attr.dndDragstart)(scope, {event: event});
        if (attr.dndCallback) {
          var callback = $parse(attr.dndCallback);
          dndState.callback = function(params) { return callback(scope, params || {}); };
        }

        event.stopPropagation();
      });

      /**
       * The dragend event is triggered when the element was dropped or when the drag
       * operation was aborted (e.g. hit escape button). Depending on the executed action
       * we will invoke the callbacks specified with the dnd-moved or dnd-copied attribute.
       */
      element.on('dragend', function(event) {
        event = event.originalEvent || event;

        // Invoke callbacks. Usually we would use event.dataTransfer.dropEffect to determine
        // the used effect, but Chrome has not implemented that field correctly. On Windows
        // it always sets it to 'none', while Chrome on Linux sometimes sets it to something
        // else when it's supposed to send 'none' (drag operation aborted).
        scope.$apply(function() {
          var dropEffect = dndState.dropEffect;
          var cb = {copy: 'dndCopied', link: 'dndLinked', move: 'dndMoved', none: 'dndCanceled'};
          $parse(attr[cb[dropEffect]])(scope, {event: event});
          $parse(attr.dndDragend)(scope, {event: event, dropEffect: dropEffect});
        });

        // Clean up
        dndState.isDragging = false;
        dndState.callback = undefined;
        element.removeClass("dndDragging");
        element.removeClass("dndDraggingSource");
        event.stopPropagation();

        // In IE9 it is possible that the timeout from dragstart triggers after the dragend handler.
        $timeout(function() { element.removeClass("dndDraggingSource"); }, 0);
      });

      /**
       * When the element is clicked we invoke the callback function
       * specified with the dnd-selected attribute.
       */
      element.on('click', function(event) {
        if (!attr.dndSelected) return;

        event = event.originalEvent || event;
        scope.$apply(function() {
          $parse(attr.dndSelected)(scope, {event: event});
        });

        // Prevent triggering dndSelected in parent elements.
        event.stopPropagation();
      });

      /**
       * Workaround to make element draggable in IE9
       */
      element.on('selectstart', function() {
        if (this.dragDrop) this.dragDrop();
      });
    };
  }]);

  /**
   * Use the dnd-list attribute to make your list element a dropzone. Usually you will add a single
   * li element as child with the ng-repeat directive. If you don't do that, we will not be able to
   * position the dropped element correctly. If you want your list to be sortable, also add the
   * dnd-draggable directive to your li element(s).
   *
   * Attributes:
   * - dnd-list             Required attribute. The value has to be the array in which the data of
   *                        the dropped element should be inserted. The value can be blank if used
   *                        with a custom dnd-drop handler that always returns true.
   * - dnd-allowed-types    Optional array of allowed item types. When used, only items that had a
   *                        matching dnd-type attribute will be dropable. Upper case characters will
   *                        automatically be converted to lower case.
   * - dnd-effect-allowed   Optional string expression that limits the drop effects that can be
   *                        performed in the list. See dnd-effect-allowed on dnd-draggable for more
   *                        details on allowed options. The default value is all.
   * - dnd-disable-if       Optional boolean expresssion. When it evaluates to true, no dropping
   *                        into the list is possible. Note that this also disables rearranging
   *                        items inside the list.
   * - dnd-horizontal-list  Optional boolean expresssion. When it evaluates to true, the positioning
   *                        algorithm will use the left and right halfs of the list items instead of
   *                        the upper and lower halfs.
   * - dnd-external-sources Optional boolean expression. When it evaluates to true, the list accepts
   *                        drops from sources outside of the current browser tab. This allows to
   *                        drag and drop accross different browser tabs. The only major browser
   *                        that does not support this is currently Microsoft Edge.
   *
   * Callbacks:
   * - dnd-dragover         Optional expression that is invoked when an element is dragged over the
   *                        list. If the expression is set, but does not return true, the element is
   *                        not allowed to be dropped. The following variables will be available:
   *                        - event: The original dragover event sent by the browser.
   *                        - index: The position in the list at which the element would be dropped.
   *                        - type: The dnd-type set on the dnd-draggable, or undefined if non was
   *                          set. Will be null for drops from external sources in IE and Edge,
   *                          since we don't know the type in those cases.
   *                        - dropEffect: One of move, copy or link, see dnd-effect-allowed.
   *                        - external: Whether the element was dragged from an external source.
   *                        - callback: If dnd-callback was set on the source element, this is a
   *                          function reference to the callback. The callback can be invoked with
   *                          custom variables like this: callback({var1: value1, var2: value2}).
   *                          The callback will be executed on the scope of the source element. If
   *                          dnd-external-sources was set and external is true, this callback will
   *                          not be available.
   * - dnd-drop             Optional expression that is invoked when an element is dropped on the
   *                        list. The same variables as for dnd-dragover will be available, with the
   *                        exception that type is always known and therefore never null. There
   *                        will also be an item variable, which is the transferred object. The
   *                        return value determines the further handling of the drop:
   *                        - falsy: The drop will be canceled and the element won't be inserted.
   *                        - true: Signalises that the drop is allowed, but the dnd-drop
   *                          callback already took care of inserting the element.
   *                        - otherwise: All other return values will be treated as the object to
   *                          insert into the array. In most cases you want to simply return the
   *                          item parameter, but there are no restrictions on what you can return.
   * - dnd-inserted         Optional expression that is invoked after a drop if the element was
   *                        actually inserted into the list. The same local variables as for
   *                        dnd-drop will be available. Note that for reorderings inside the same
   *                        list the old element will still be in the list due to the fact that
   *                        dnd-moved was not called yet.
   *
   * CSS classes:
   * - dndPlaceholder       When an element is dragged over the list, a new placeholder child
   *                        element will be added. This element is of type li and has the class
   *                        dndPlaceholder set. Alternatively, you can define your own placeholder
   *                        by creating a child element with dndPlaceholder class.
   * - dndDragover          Will be added to the list while an element is dragged over the list.
   */
  dndLists.directive('dndList', ['$parse', function($parse) {
    return function(scope, element, attr) {
      // While an element is dragged over the list, this placeholder element is inserted
      // at the location where the element would be inserted after dropping.
      var placeholder = getPlaceholderElement();
      placeholder.remove();

      var placeholderNode = placeholder[0];
      var listNode = element[0];
      var listSettings = {};

      /**
       * The dragenter event is fired when a dragged element or text selection enters a valid drop
       * target. According to the spec, we either need to have a dropzone attribute or listen on
       * dragenter events and call preventDefault(). It should be noted though that no browser seems
       * to enforce this behaviour.
       */
      element.on('dragenter', function (event) {
        event = event.originalEvent || event;

        // Calculate list properties, so that we don't have to repeat this on every dragover event.
        var types = attr.dndAllowedTypes && scope.$eval(attr.dndAllowedTypes);
        listSettings = {
          allowedTypes: angular.isArray(types) && types.join('|').toLowerCase().split('|'),
          disabled: attr.dndDisableIf && scope.$eval(attr.dndDisableIf),
          externalSources: attr.dndExternalSources && scope.$eval(attr.dndExternalSources),
          horizontal: attr.dndHorizontalList && scope.$eval(attr.dndHorizontalList)
        };

        var mimeType = getMimeType(event.dataTransfer.types);
        if (!mimeType || !isDropAllowed(getItemType(mimeType))) return true;
        event.preventDefault();
      });

      /**
       * The dragover event is triggered "every few hundred milliseconds" while an element
       * is being dragged over our list, or over an child element.
       */
      element.on('dragover', function(event) {
        event = event.originalEvent || event;

        // Check whether the drop is allowed and determine mime type.
        var mimeType = getMimeType(event.dataTransfer.types);
        var itemType = getItemType(mimeType);
        if (!mimeType || !isDropAllowed(itemType)) return true;

        // Make sure the placeholder is shown, which is especially important if the list is empty.
        if (placeholderNode.parentNode != listNode) {
          element.append(placeholder);
        }

        if (event.target != listNode) {
          // Try to find the node direct directly below the list node.
          var listItemNode = event.target;
          while (listItemNode.parentNode != listNode && listItemNode.parentNode) {
            listItemNode = listItemNode.parentNode;
          }

          if (listItemNode.parentNode == listNode && listItemNode != placeholderNode) {
            // If the mouse pointer is in the upper half of the list item element,
            // we position the placeholder before the list item, otherwise after it.
            var rect = listItemNode.getBoundingClientRect();
            if (listSettings.horizontal) {
              var isFirstHalf = event.clientX < rect.left + rect.width / 2;
            } else {
              var isFirstHalf = event.clientY < rect.top + rect.height / 2;
            }
            listNode.insertBefore(placeholderNode,
                isFirstHalf ? listItemNode : listItemNode.nextSibling);
          }
        }

        // In IE we set a fake effectAllowed in dragstart to get the correct cursor, we therefore
        // ignore the effectAllowed passed in dataTransfer. We must also not access dataTransfer for
        // drops from external sources, as that throws an exception.
        var ignoreDataTransfer = mimeType == MSIE_MIME_TYPE;
        var dropEffect = getDropEffect(event, ignoreDataTransfer);
        if (dropEffect == 'none') return stopDragover();

        // At this point we invoke the callback, which still can disallow the drop.
        // We can't do this earlier because we want to pass the index of the placeholder.
        if (attr.dndDragover && !invokeCallback(attr.dndDragover, event, dropEffect, itemType)) {
          return stopDragover();
        }

        // Set dropEffect to modify the cursor shown by the browser, unless we're in IE, where this
        // is not supported. This must be done after preventDefault in Firefox.
        event.preventDefault();
        if (!ignoreDataTransfer) {
          event.dataTransfer.dropEffect = dropEffect;
        }

        element.addClass("dndDragover");
        event.stopPropagation();
        return false;
      });

      /**
       * When the element is dropped, we use the position of the placeholder element as the
       * position where we insert the transferred data. This assumes that the list has exactly
       * one child element per array element.
       */
      element.on('drop', function(event) {
        event = event.originalEvent || event;

        // Check whether the drop is allowed and determine mime type.
        var mimeType = getMimeType(event.dataTransfer.types);
        var itemType = getItemType(mimeType);
        if (!mimeType || !isDropAllowed(itemType)) return true;

        // The default behavior in Firefox is to interpret the dropped element as URL and
        // forward to it. We want to prevent that even if our drop is aborted.
        event.preventDefault();

        // Unserialize the data that was serialized in dragstart.
        try {
          var data = JSON.parse(event.dataTransfer.getData(mimeType));
        } catch(e) {
          return stopDragover();
        }

        // Drops with invalid types from external sources might not have been filtered out yet.
        if (mimeType == MSIE_MIME_TYPE || mimeType == EDGE_MIME_TYPE) {
          itemType = data.type || undefined;
          data = data.item;
          if (!isDropAllowed(itemType)) return stopDragover();
        }

        // Special handling for internal IE drops, see dragover handler.
        var ignoreDataTransfer = mimeType == MSIE_MIME_TYPE;
        var dropEffect = getDropEffect(event, ignoreDataTransfer);
        if (dropEffect == 'none') return stopDragover();

        // Invoke the callback, which can transform the transferredObject and even abort the drop.
        var index = getPlaceholderIndex();
        if (attr.dndDrop) {
          data = invokeCallback(attr.dndDrop, event, dropEffect, itemType, index, data);
          if (!data) return stopDragover();
        }

        // The drop is definitely going to happen now, store the dropEffect.
        dndState.dropEffect = dropEffect;
        if (!ignoreDataTransfer) {
          event.dataTransfer.dropEffect = dropEffect;
        }

        // Insert the object into the array, unless dnd-drop took care of that (returned true).
        if (data !== true) {
          scope.$apply(function() {
            scope.$eval(attr.dndList).splice(index, 0, data);
          });
        }
        invokeCallback(attr.dndInserted, event, dropEffect, itemType, index, data);

        // Clean up
        stopDragover();
        event.stopPropagation();
        return false;
      });

      /**
       * We have to remove the placeholder when the element is no longer dragged over our list. The
       * problem is that the dragleave event is not only fired when the element leaves our list,
       * but also when it leaves a child element. Therefore, we determine whether the mouse cursor
       * is still pointing to an element inside the list or not.
       */
      element.on('dragleave', function(event) {
        event = event.originalEvent || event;

        var newTarget = document.elementFromPoint(event.clientX, event.clientY);
        if (listNode.contains(newTarget) && !event._dndPhShown) {
          // Signalize to potential parent lists that a placeholder is already shown.
          event._dndPhShown = true;
        } else {
          stopDragover();
        }
      });

      /**
       * Given the types array from the DataTransfer object, returns the first valid mime type.
       * A type is valid if it starts with MIME_TYPE, or it equals MSIE_MIME_TYPE or EDGE_MIME_TYPE.
       */
      function getMimeType(types) {
        if (!types) return MSIE_MIME_TYPE; // IE 9 workaround.
        for (var i = 0; i < types.length; i++) {
          if (types[i] == MSIE_MIME_TYPE || types[i] == EDGE_MIME_TYPE ||
              types[i].substr(0, MIME_TYPE.length) == MIME_TYPE) {
            return types[i];
          }
        }
        return null;
      }

      /**
       * Determines the type of the item from the dndState, or from the mime type for items from
       * external sources. Returns undefined if no item type was set and null if the item type could
       * not be determined.
       */
      function getItemType(mimeType) {
        if (dndState.isDragging) return dndState.itemType || undefined;
        if (mimeType == MSIE_MIME_TYPE || mimeType == EDGE_MIME_TYPE) return null;
        return (mimeType && mimeType.substr(MIME_TYPE.length + 1)) || undefined;
      }

      /**
       * Checks various conditions that must be fulfilled for a drop to be allowed, including the
       * dnd-allowed-types attribute. If the item Type is unknown (null), the drop will be allowed.
       */
      function isDropAllowed(itemType) {
        if (listSettings.disabled) return false;
        if (!listSettings.externalSources && !dndState.isDragging) return false;
        if (!listSettings.allowedTypes || itemType === null) return true;
        return itemType && listSettings.allowedTypes.indexOf(itemType) != -1;
      }

      /**
       * Determines which drop effect to use for the given event. In Internet Explorer we have to
       * ignore the effectAllowed field on dataTransfer, since we set a fake value in dragstart.
       * In those cases we rely on dndState to filter effects. Read the design doc for more details:
       * https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
       */
      function getDropEffect(event, ignoreDataTransfer) {
        var effects = ALL_EFFECTS;
        if (!ignoreDataTransfer) {
          effects = filterEffects(effects, event.dataTransfer.effectAllowed);
        }
        if (dndState.isDragging) {
          effects = filterEffects(effects, dndState.effectAllowed);
        }
        if (attr.dndEffectAllowed) {
          effects = filterEffects(effects, attr.dndEffectAllowed);
        }
        // MacOS automatically filters dataTransfer.effectAllowed depending on the modifier keys,
        // therefore the following modifier keys will only affect other operating systems.
        if (!effects.length) {
          return 'none';
        } else if (event.ctrlKey && effects.indexOf('copy') != -1) {
          return 'copy';
        } else if (event.altKey && effects.indexOf('link') != -1) {
          return 'link';
        } else {
          return effects[0];
        }
      }

      /**
       * Small helper function that cleans up if we aborted a drop.
       */
      function stopDragover() {
        placeholder.remove();
        element.removeClass("dndDragover");
        return true;
      }

      /**
       * Invokes a callback with some interesting parameters and returns the callbacks return value.
       */
      function invokeCallback(expression, event, dropEffect, itemType, index, item) {
        return $parse(expression)(scope, {
          callback: dndState.callback,
          dropEffect: dropEffect,
          event: event,
          external: !dndState.isDragging,
          index: index !== undefined ? index : getPlaceholderIndex(),
          item: item || undefined,
          type: itemType
        });
      }

      /**
       * We use the position of the placeholder node to determine at which position of the array the
       * object needs to be inserted
       */
      function getPlaceholderIndex() {
        return Array.prototype.indexOf.call(listNode.children, placeholderNode);
      }

      /**
       * Tries to find a child element that has the dndPlaceholder class set. If none was found, a
       * new li element is created.
       */
      function getPlaceholderElement() {
        var placeholder;
        angular.forEach(element.children(), function(childNode) {
          var child = angular.element(childNode);
          if (child.hasClass('dndPlaceholder')) {
            placeholder = child;
          }
        });
        return placeholder || angular.element("<li class='dndPlaceholder'></li>");
      }
    };
  }]);

  /**
   * Use the dnd-nodrag attribute inside of dnd-draggable elements to prevent them from starting
   * drag operations. This is especially useful if you want to use input elements inside of
   * dnd-draggable elements or create specific handle elements. Note: This directive does not work
   * in Internet Explorer 9.
   */
  dndLists.directive('dndNodrag', function() {
    return function(scope, element, attr) {
      // Set as draggable so that we can cancel the events explicitly
      element.attr("draggable", "true");

      /**
       * Since the element is draggable, the browser's default operation is to drag it on dragstart.
       * We will prevent that and also stop the event from bubbling up.
       */
      element.on('dragstart', function(event) {
        event = event.originalEvent || event;

        if (!event._dndHandle) {
          // If a child element already reacted to dragstart and set a dataTransfer object, we will
          // allow that. For example, this is the case for user selections inside of input elements.
          if (!(event.dataTransfer.types && event.dataTransfer.types.length)) {
            event.preventDefault();
          }
          event.stopPropagation();
        }
      });

      /**
       * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element
       * would be removed.
       */
      element.on('dragend', function(event) {
        event = event.originalEvent || event;
        if (!event._dndHandle) {
          event.stopPropagation();
        }
      });
    };
  });

  /**
   * Use the dnd-handle directive within a dnd-nodrag element in order to allow dragging with that
   * element after all. Therefore, by combining dnd-nodrag and dnd-handle you can allow
   * dnd-draggable elements to only be dragged via specific "handle" elements. Note that Internet
   * Explorer will show the handle element as drag image instead of the dnd-draggable element. You
   * can work around this by styling the handle element differently when it is being dragged. Use
   * the CSS selector .dndDragging:not(.dndDraggingSource) [dnd-handle] for that.
   */
  dndLists.directive('dndHandle', function() {
    return function(scope, element, attr) {
      element.attr("draggable", "true");

      element.on('dragstart dragend', function(event) {
        event = event.originalEvent || event;
        event._dndHandle = true;
      });
    };
  });

  /**
   * Filters an array of drop effects using a HTML5 effectAllowed string.
   */
  function filterEffects(effects, effectAllowed) {
    if (effectAllowed == 'all') return effects;
    return effects.filter(function(effect) {
      return effectAllowed.toLowerCase().indexOf(effect) != -1;
    });
  }

  /**
   * For some features we need to maintain global state. This is done here, with these fields:
   * - callback: A callback function set at dragstart that is passed to internal dropzone handlers.
   * - dropEffect: Set in dragstart to "none" and to the actual value in the drop handler. We don't
   *   rely on the dropEffect passed by the browser, since there are various bugs in Chrome and
   *   Safari, and Internet Explorer defaults to copy if effectAllowed is copyMove.
   * - effectAllowed: Set in dragstart based on dnd-effect-allowed. This is needed for IE because
   *   setting effectAllowed on dataTransfer might result in an undesired cursor.
   * - isDragging: True between dragstart and dragend. Falsy for drops from external sources.
   * - itemType: The item type of the dragged element set via dnd-type. This is needed because IE
   *   and Edge don't support custom mime types that we can use to transfer this information.
   */
  var dndState = {};

})(angular.module('dndLists', []));

'use strict';

//Puestos service used to communicate Puestos REST endpoints
angular.module('puestos').factory('Puestos', ['$resource',
	function($resource) {
		return $resource('api/puestos/:puestoId', { puestoId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the remuneraciones module
angular.module('remuneraciones').run(['Menus',
	function(Menus) {
		// Add the remuneraciones dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Remuneraciones',
			state: 'remuneraciones',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'remuneraciones', {
			title: 'List Remuneraciones',
			state: 'remuneraciones.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'remuneraciones', {
			title: 'Create Remuneracione',
			state: 'remuneraciones.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('remuneraciones').config(['$stateProvider',
	function($stateProvider) {
		// remuneraciones state routing
		$stateProvider.
		state('remuneraciones', {
			abstract: true,
			url: '/remuneraciones',
			template: '<ui-view/>'
		}).
		state('remuneraciones.list', {
			url: '',
			templateUrl: 'modules/remuneraciones/views/list-remuneraciones.client.view.html'
		}).
		state('remuneraciones.create', {
			url: '/create',
			templateUrl: 'modules/remuneraciones/views/create-remuneracione.client.view.html'
		}).
		state('remuneraciones.view', {
			url: '/:remuneracioneId',
			templateUrl: 'modules/remuneraciones/views/view-remuneracione.client.view.html'
		}).
		state('remuneraciones.edit', {
			url: '/:remuneracioneId/edit',
			templateUrl: 'modules/remuneraciones/views/edit-remuneracione.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('remuneraciones').controller('RemuneracioneCreateController', ['user', '$state', 'categories', 'Remuneraciones',
	function(user, $state, categories, Remuneraciones) {

		// asignacion de modelos
		var that = this;
		this.user = user;
		this.categories = categories;
		this.units = ["U", "Hs"];
		
		//variables de finds
		this.errorRemuneracione = undefined;

		this.selectedMode = 'md-scale';
	    this.selectedDirection = 'left';
		// asignacion de funciones
		this.create = create;
		this.rutaVolver = rutaVolver;

		function rutaVolver() {
        	history.back()
        }
		// definicion de funciones
		// Create new Remuneracione
		function create() {
			if(that.name !== undefined){
				if(that.category !== undefined) {
					var remuneracione = new Remuneraciones({
						name: that.name,
						description : that.description,
						category :that.category._id,
						enterprise: that.enterprise ? that.enterprise._id : user.enterprise._id,
						unit: that.unit
					});

					remuneracione.$save(function(response) {
						if(response._id) {
							// agregar sub al array
							$state.go('home.remuneraciones');
						}
					}, function(errorResponse) {
                        that.error = errorResponse.data.message;
					});
				} else {
                    that.errorRemuneracione = 'Se debe especificar una categoría para la remuneración';
				}
			}else{
                that.errorRemuneracione = 'Se debe especificar un nombre para la remuneración';
			}			
		}
	}
]);
'use strict';

// Comprobantes controller
angular.module('remuneraciones').controller('RemuneracioneEditController', ['$state', '$scope', 'user', 'remuneracione', 'categories',
	function($state, $scope, user, remuneracione, categories) {		
		$scope.remuneracione = remuneracione;
		$scope.categories = categories;
		$scope.units = ["U", "Hs"];

		$scope.update = function() {
			var updatedRemuneracione = $scope.remuneracione;

            if ($scope.category !== undefined) {
                updatedRemuneracione.category = $scope.category._id;
			}

            if ($scope.unit !== undefined) {
                updatedRemuneracione.unit = $scope.unit;
            }

            updatedRemuneracione.$update(function() {
                $state.go('home.remuneraciones')
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };
	}
]);

'use strict';

// Comprobantes controller
angular.module('remuneraciones').controller('RemuneracioneListController', ['$state', '$rootScope', '$mdDialog', 'user', 'remuneraciones', '$mdBottomSheet',
	function($state, $rootScope, $mdDialog, user , remuneraciones , $mdBottomSheet) {

		this.user = user;
		this.remuneraciones = remuneraciones;
		this.extraerListado = extraerListado;

		this.showBottomSheet = showBottomSheet;

		function showBottomSheet ($event, item, model, param) {
			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	//console.log('estadoactual: ', $rootScope.estadoActual);
	    	$mdBottomSheet.show({
	    		// parent: angular.element(document.body),
		      	templateUrl: template,
		      	controller: DialogController,
		      	// controller: 'ListBottomSheetCtrl',
		      	targetEvent: $event,
		      	resolve: {
		         	item: function () {
		           		return item;
		         	}
		       	}
		    });
		  }
		  
		  function extraerListado (){
			var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
		   	var b = document.getElementById('printing-css-listado').value;
		   	var c = document.getElementById('printing-data-listado').innerHTML;
		   	window.frames["print_frame_listado"].document.title = 'IM - Remuneraciones';
		   	window.frames["print_frame_listado"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
		   	window.frames["print_frame_listado"].window.focus();
		   	window.frames["print_frame_listado"].window.print();
		}

		function httpGet(theUrl){
		    var xmlHttp = null;
		    xmlHttp = new XMLHttpRequest();
		    xmlHttp.open( "GET", theUrl, false );
		    xmlHttp.send( null );
		    return xmlHttp.responseText;
		} //end httpGet

	  	function DialogController($scope, $mdDialog, item, $state) {

	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
					$state.go(state, params);
					$mdBottomSheet.hide();
				}
			};

			//abre modal para eliminar un remuneraciones
			$scope.showConfirm = function(ev,item) {
				var confirm = $mdDialog.confirm()
		          .title('Eliminar remuneraciones')
		          .content('¿Está seguro que desea eliminar este remuneraciones?')
		          .ariaLabel('Lucky day')
		          .ok('Eliminar')
		          .cancel('Cancelar')
		          .targetEvent(ev);
			    $mdDialog.show(confirm).then(function() {
			      $scope.remove(item);
			    }, function() {
			      console.log('cancelaste borrar');
			    });
			};

			// Remove existing remuneraciones
			$scope.remove = function(remuneracione) {
				remuneracione.$remove(function() {
				});
				$mdBottomSheet.hide();
			};
	  	}
	}
]);
'use strict';

// Comprobantes controller
angular.module('remuneraciones').controller('RemuneracioneViewController', ['user', 'remuneracione', 
	function(user, remuneracione) {

		this.user = user;
		this.remuneracione = remuneracione;

	}
]);
'use strict';

//Remuneraciones service used to communicate Remuneraciones REST endpoints
angular.module('remuneraciones').factory('Remuneraciones', ['$resource',
	function($resource) {
		return $resource('api/remuneraciones/:remuneracioneId', { remuneracioneId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Ventas module
angular.module('reportes').run(['Menus',
	function(Menus) {
		// Add the Ventas dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Reportes',
			state: 'reportes',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'reportes', {
			title: 'List Reportes',
			state: 'reportes.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'reportes', {
			title: 'Create Reporte',
			state: 'reportes.create'
		});
	}
]);

'use strict';

//Setting up route
angular.module('reportes').config(['$stateProvider',
	function($stateProvider) {
		// Ventas state routing
		$stateProvider.
		state('reportes', {
			abstract: true,
			url: '/reportes',
			template: '<ui-view/>'
		}).
		state('reportes.list', {
			url: '',
			templateUrl: 'modules/reportes/views/dashboard-reportes.client.view.html'
		}).
		state('reportes.create', {
			url: '/create',
			templateUrl: 'modules/reportes/views/create-reporte.client.view.html'
		}).
		state('reportes.view', {
			url: '/:reporteId',
			templateUrl: 'modules/reportes/views/view-reporte.client.view.html'
		}).
		state('reportes.edit', {
			url: '/:reporteId/edit',
			templateUrl: 'modules/reportes/views/edit-reporte.client.view.html'
		});
	}
]);

'use strict';

// Reportes controller
angular.module('reportes')
	.controller('ReportesComprasPorMesController',
		[
			'$scope',
			'$stateParams',
			'$location',
			'Authentication',
			'ReportesCompras',
			'Comprobantes',
			'Products',
			'Enterprises',
			'Condicionventas',
			'Clients',
			'$rootScope',
			'$state',
			'$filter',
			'$mdDialog',
			'$http',
			'$timeout',
			'Subs',
			'Providers',
			'Reportes',
			'$q',
	function ($scope,
		$stateParams,
		$location,
		Authentication,
		ReportesCompras,
		Comprobantes,
		Products,
		Enterprises,
		Condicionventas,
		Clients,
		$rootScope,
		$state,
		$filter,
		$http,
		$timeout,
		Subs,
		Providers,
		Reportes,
		$q)
	{
		var vm = this;
		$scope.authentication = Authentication;
		console.log('[+] ReportesComprasController::fired!');

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			vm.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			//vm.find();
			activate();
			});

		$scope.$watch(angular.bind(this, function () {
		  return this.modelo;
		}), function () {
		  console.log('modelo changed to ' + vm.modelo);
		});

		vm.find = function() {
			if (vm.SEARCH !== undefined) {
				vm.reportes = Reportes.query({ e: vm.SEARCH.enterprise });
			}
		};

			// Find existing Venta
		vm.findOne = function() {
			Reportes.get({}, function(res){
					// success
				},
				function(err){
					//error
				}
			);
		};

		vm.performanceChartData = [];
    vm.performancePeriod = 'month';
    vm.changePeriod = changePeriod;
		vm.yearValue = '2015';
		vm.quarterValue = '2015-4Q';
		vm.monthValue = '2015-10';

		vm.chartOptions = {
            chart: {
                //type: 'multiBarHorizontalChart',
								type: 'lineChart',
								objectequality: true,
                height: 350,
								duration: 500,
								isArea: true,
                //margin: { left: 50, right: 50 },
                //x: function (d) { return d[0] },
                //y: function (d) { return d[1] },
								x: function(d){return d.label;},
                y: function(d){return d.value;},
                showLabels: false,
                showLegend: false,
								//useInteractiveGuideline: true,
                title: 'Compras año ' + vm.yearValue,
								xAxis: {
						      showMaxMin: false,
									axisLabel: 'Día',
									tickFormat: function(d){
											//console.log('[+] el valor de d es: ', d);
											//console.log('[+] fecha para mostrar: ', d3.time.format('%Y/%m/%d')(new Date(d)));
											return d3.time.format('%Y-%m-%d')(new Date(d))
									}
						    },
								yAxis: {
                    axisLabel: 'Ingresos ($)',
                    tickFormat: function(d){
                        return d3.format(',.2f')(d);
                    }
                },

                //showYAxis: false,
                //showXAxis: false,
                //color: ['rgb(0, 150, 136)', 'rgb(204, 203, 203)', 'rgb(149, 149, 149)', 'rgb(44, 44, 44)'],
                //tooltip: { contentGenerator: function (d) { return '<div class="custom-tooltip">' + d.point.y + '%</div>' + '<div class="custom-tooltip">' + d.series[0].key + '</div>' } },
                showControls: false
            }
        };








    function activate() {
				//loadData();
				var queries = [loadData(vm.performancePeriod)];
        //$q.all(queries);
				//console.log('$q is: ', queries);
    }


    function loadData(periodo) {
			//vm.modelo = [];
			if(vm.SEARCH !== undefined) {
				switch (periodo) {
					case 'year':
					ReportesCompras.getDataYear(vm.yearValue, vm.SEARCH.enterprise)
					.then(function(data){
						//vm.performanceChartData = data.data;

						vm.performanceChartData = data.data.map(function(item){
							var p = item.resultado.month.split('-');
							var year = parseInt(p[0]);
							var month = parseInt(p[1]);
							var d = new Date(year, month);

							//console.log('[+] mapeando: ', d);
							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});

						vm.performanceChartData2 = data.data.map(function(item){
							var p = item.resultado.month.split('-');
							var year = parseInt(p[0]);
							var month = parseInt(p[1]);
							var d = new Date(year, month);

							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});

						if(vm.performanceChartData !== undefined) {
							vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function(item){
								//if(item.estado !== 'Finalizada') { item.value = 0};
								return item;
							}), 'label');//{ estado: 'Finalizada'}),'label')
							vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
								//if(item.estado === 'Finalizada') {item.value = 0}
								return item;
							}), 'label');

							vm.modelo = [
								{
									key: 'Finalizadas',
									color: '#1f77b4',
									values: vm.filteredData1,
								}];
						 } else {
						 	console.log('[+] la concha de su madre');
						}

					});
						break;

					case 'quarter':
					vm.modelo = undefined;
					ReportesCompras.getDataQuarter(vm.quarterValue, vm.SEARCH.enterprise)
					.then(function(data){
						console.log('[+] getDataQuarter::data: ', data);
						//vm.performanceChartData = data.data;

						vm.performanceChartData = data.data.map(function(item){
							var p = item.resultado.week.split('-');
							var year = parseInt(p[0]);
							var w = parseInt(p[1]);
							var d = new Date(year, 0, (1 + (w) * 7));

							//console.log('[+] mapeando: ', d);
							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});
						//console.log('[+] vm.performanceChartData: ', vm.performanceChartData);
						vm.performanceChartData2 = data.data.map(function(item){

								var p = item.resultado.week.split('-');
								var year = parseInt(p[0]);
								var w = parseInt(p[1]);
								var d = new Date(year, 0, (1 + (w) * 7));

								//console.log('[+] mapeando: ', d);
								return {
									label: d,
									value: item.balance || 0//,
									//estado: item.resultado.estado
								};
						});
						//console.log('[+] vm.performanceChartData2: ', vm.performanceChartData2);
						if(vm.performanceChartData !== undefined) {
							vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function(item){
								//if(item.estado !== 'Finalizada') { item.value = 0};
								return item;
							}), 'label');//{ estado: 'Finalizada'}),'label')
							vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
								//if(item.estado === 'Finalizada') {item.value = 0}
								return item;
							}), 'label');

							vm.modelo1 = [
								{
									key: 'Finalizadas',
									color: '#1f77b4',
									values: vm.filteredData1,
								}];
						 } else {
						 	console.log('[+] la concha de su madre');
						}


					});

						break;

					case 'month':
					ReportesCompras.getDataMonth(vm.monthValue, vm.SEARCH.enterprise)
					.then(function(data){
						//vm.performanceChartData = data.data;
						console.log('data in month is: ', data);
						vm.performanceChartData = data.data.resultado.balanceDia.map(function(item){
							var p = item.resultado.day.split('-');
							var year = parseInt(p[0]);
							var w = parseInt(p[1]);
							var d = new Date(year, 0);

							d = d.setDate(w);

							//console.log('[+] mapeando: ', d);
							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});

						vm.performanceChartData2 = data.data.resultado.balanceDia.map(function(item){
							var p = item.resultado.day.split('-');
							var year = parseInt(p[0]);
							var w = parseInt(p[1]);
							var d = new Date(year, 0);

							d = d.setDate(w);

							//console.log('[+] mapeando: ', d);
							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});

						if(vm.performanceChartData !== undefined) {
							vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function(item){
								//if(item.estado !== 'Finalizada') { item.value = 0};
								return item;
							}), 'label');//{ estado: 'Finalizada'}),'label')
							vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
								//if(item.estado === 'Finalizada') {item.value = 0}
								return item;
							}), 'label');

							vm.modelo2 = [
								{
									key: 'Finalizadas',
									color: '#1f77b4',
									values: vm.filteredData1,
								}];
						 } else {
						 	console.log('[+] la concha de su madre');
						}

					});
						break;
					default:

				}


					//console.log('la posta es: ', vm.performanceChartData);
				//});
				};
	};

    function changePeriod() {
				console.log('[+] changePeriod::fired! ', vm.performancePeriod);
        //loadData(vm.performancePeriod);
				var queries = [loadData(vm.performancePeriod)];
    }
	}
]);

'use strict';

// Reportes controller
angular.module('reportes')
	.controller('ReportesComprasPorQController',
		[
			'$scope',
			'$stateParams',
			'$location',
			'Authentication',
			'ReportesCompras',
			'Comprobantes',
			'Products',
			'Enterprises',
			'Condicionventas',
			'Clients',
			'$rootScope',
			'$state',
			'$filter',
			'$mdDialog',
			'$http',
			'$timeout',
			'Subs',
			'Providers',
			'Reportes',
			'$q',
	function ($scope,
		$stateParams,
		$location,
		Authentication,
		ReportesCompras,
		Comprobantes,
		Products,
		Enterprises,
		Condicionventas,
		Clients,
		$rootScope,
		$state,
		$filter,
		$http,
		$timeout,
		Subs,
		Providers,
		Reportes,
		$q)
	{
		var vm = this;
		$scope.authentication = Authentication;
		console.log('[+] ReportesComprasController::fired!');

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			vm.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			//vm.find();
			activate();
			});

		$scope.$watch(angular.bind(this, function () {
		  return this.modelo;
		}), function () {
		  console.log('modelo changed to ' + vm.modelo);
		});

		vm.find = function() {
			if (vm.SEARCH !== undefined) {
				vm.reportes = Reportes.query({ e: vm.SEARCH.enterprise });
			}
		};

			// Find existing Venta
		vm.findOne = function() {
			Reportes.get({}, function(res){
					// success
				},
				function(err){
					//error
				}
			);
		};

		vm.performanceChartData = [];
    vm.performancePeriod = 'quarter';
    vm.changePeriod = changePeriod;
		vm.yearValue = '2016';
		vm.quarterValue = '2016-1Q';
		vm.monthValue = '2016-3';

		vm.chartOptions = {
            chart: {
                //type: 'multiBarHorizontalChart',
								type: 'lineChart',
								objectequality: true,
                height: 350,
								duration: 500,
								isArea: true,
                //margin: { left: 50, right: 50 },
                //x: function (d) { return d[0] },
                //y: function (d) { return d[1] },
								x: function(d){return d.label;},
                y: function(d){return d.value;},
                showLabels: false,
                showLegend: false,
								//useInteractiveGuideline: true,
                title: 'Compras año ' + vm.yearValue,
								xAxis: {
						      showMaxMin: false,
									axisLabel: 'Semana',
									tickFormat: function(d){
											//console.log('[+] el valor de d es: ', d);
											//console.log('[+] fecha para mostrar: ', d3.time.format('%Y/%m/%d')(new Date(d)));
											return d3.time.format('%Y-%W')(new Date(d))
									}
						    },
								yAxis: {
                    axisLabel: 'Ingresos ($)',
                    tickFormat: function(d){
                        return d3.format(',.2f')(d);
                    }
                },

                //showYAxis: false,
                //showXAxis: false,
                //color: ['rgb(0, 150, 136)', 'rgb(204, 203, 203)', 'rgb(149, 149, 149)', 'rgb(44, 44, 44)'],
                //tooltip: { contentGenerator: function (d) { return '<div class="custom-tooltip">' + d.point.y + '%</div>' + '<div class="custom-tooltip">' + d.series[0].key + '</div>' } },
                showControls: false
            }
        };








    function activate() {
				//loadData();
				var queries = [loadData(vm.performancePeriod)];
        //$q.all(queries);
				//console.log('$q is: ', queries);
    }


    function loadData(periodo) {
			//vm.modelo = [];
			if(vm.SEARCH !== undefined) {
				switch (periodo) {
					case 'year':
					ReportesCompras.getDataYear(vm.yearValue, vm.SEARCH.enterprise)
					.then(function(data){
						//vm.performanceChartData = data.data;

						vm.performanceChartData = data.data.map(function(item){
							var p = item.resultado.month.split('-');
							var year = parseInt(p[0]);
							var month = parseInt(p[1]);
							var d = new Date(year, month);

							//console.log('[+] mapeando: ', d);
							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});

						vm.performanceChartData2 = data.data.map(function(item){
							var p = item.resultado.month.split('-');
							var year = parseInt(p[0]);
							var month = parseInt(p[1]);
							var d = new Date(year, month);

							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});

						if(vm.performanceChartData !== undefined) {
							vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function(item){
								//if(item.estado !== 'Finalizada') { item.value = 0};
								return item;
							}), 'label');//{ estado: 'Finalizada'}),'label')
							vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
								//if(item.estado === 'Finalizada') {item.value = 0}
								return item;
							}), 'label');

							vm.modelo = [
								{
									key: 'Finalizadas',
									color: '#1f77b4',
									values: vm.filteredData1,
								}];
						 } else {
						 	console.log('[+] la concha de su madre');
						}

					});
						break;

					case 'quarter':
					vm.modelo = undefined;
					ReportesCompras.getDataQuarter(vm.quarterValue, vm.SEARCH.enterprise)
					.then(function(data){
						console.log('[+] getDataQuarter::data: ', data);
						//vm.performanceChartData = data.data;

						vm.performanceChartData = data.data.map(function(item){
							//console.log('[+] el item tiene: ', item);
							var p = item.resultado.week.split('-');
							var year = parseInt(p[0]);
							var w = parseInt(p[1]);
							var d = new Date(year, 0, (1 + (w) * 7));

							//console.log('[+] mapeando: ', d);
							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});
						//console.log('[+] vm.performanceChartData: ', vm.performanceChartData);
						vm.performanceChartData2 = data.data.map(function(item){

								var p = item.resultado.week.split('-');
								var year = parseInt(p[0]);
								var w = parseInt(p[1]);
								var d = new Date(year, 0, (1 + (w) * 7));

								//console.log('[+] mapeando: ', d);
								return {
									label: d,
									value: item.balance || 0//,
									//estado: item.resultado.estado
								};
						});
						//console.log('[+] vm.performanceChartData2: ', vm.performanceChartData2);
						if(vm.performanceChartData !== undefined) {
							vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function(item){
								//if(item.estado !== 'Finalizada') { item.value = 0};
								return item;
							}), 'label');//{ estado: 'Finalizada'}),'label')
							vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
								//if(item.estado === 'Finalizada') {item.value = 0}
								return item;
							}), 'label');

							vm.modelo1 = [
								{
									key: 'Finalizadas',
									color: '#1f77b4',
									values: vm.filteredData1,
								}];
						 } else {
						 	console.log('[+] la concha de su madre');
						}


					});

						break;

					case 'month':
					ReportesCompras.getDataMonth(vm.monthValue, vm.SEARCH.enterprise)
					.then(function(data){
						//vm.performanceChartData = data.data;

						vm.performanceChartData = data.data.map(function(item){
							return {
								label: item.resultado.month,
								value: item.balance,
								estado: item.resultado.estado
							};
						});

						vm.performanceChartData2 = data.data.map(function(item){
							return {
								label: item.resultado.month,
								value: (item.balance) * (-1),
								estado: item.resultado.estado
							};
						});

						if(vm.performanceChartData !== undefined) {
							vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, { estado: 'Finalizada'}),'label')
							vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
								if(item.estado === 'Finalizada') {item.value = 0}
								return item;
							}), 'label');

							vm.modelo = [{
								key: 'No finalizadas',
								color: '#d62728',
								values: vm.filteredData2
								},
								{
									key: 'Finalizadas',
									color: '#1f77b4',
									values: vm.filteredData1,
								}];
						} else {
							console.log('[+] la concha de su madre');
						}


					});
						break;
					default:

				}


					//console.log('la posta es: ', vm.performanceChartData);
				//});
				};
	};

    function changePeriod() {
				console.log('[+] changePeriod::fired! ', vm.performancePeriod);
        //loadData(vm.performancePeriod);
				var queries = [loadData(vm.performancePeriod)];
    }
	}
]);

'use strict';

// Reportes controller
angular.module('reportes')
	.controller('ReportesComprasController',
		[
			'$scope',
			'$stateParams',
			'$location',
			'Authentication',
			'ReportesCompras',
			'Comprobantes',
			'Products',
			'Enterprises',
			'Condicionventas',
			'Clients',
			'$rootScope',
			'$state',
			'$filter',
			'$mdDialog',
			'$http',
			'$timeout',
			'Subs',
			'Providers',
			'Reportes',
			'$q',
	function ($scope,
		$stateParams,
		$location,
		Authentication,
		ReportesCompras,
		Comprobantes,
		Products,
		Enterprises,
		Condicionventas,
		Clients,
		$rootScope,
		$state,
		$filter,
		$http,
		$timeout,
		Subs,
		Providers,
		Reportes,
		$q)
	{
		var vm = this;
		$scope.authentication = Authentication;
		console.log('[+] ReportesComprasController::fired!');

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			vm.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			//vm.find();
			activate();
			});

		$scope.$watch(angular.bind(this, function () {
		  return this.modelo;
		}), function () {
		  console.log('modelo changed to ' + vm.modelo);
		});

		vm.find = function() {
			if (vm.SEARCH !== undefined) {
				vm.reportes = Reportes.query({ e: vm.SEARCH.enterprise });
			}
		};

			// Find existing Venta
		vm.findOne = function() {
			Reportes.get({}, function(res){
					// success
				},
				function(err){
					//error
				}
			);
		};

		vm.performanceChartData = [];
    vm.performancePeriod = 'year';
    vm.changePeriod = changePeriod;
		vm.yearValue = '2016';
		vm.quarterValue = '2016-1Q';
		vm.monthValue = '2016-3';

		vm.chartOptions = {
            chart: {
                //type: 'multiBarHorizontalChart',
								type: 'lineChart',
								objectequality: true,
                height: 350,
								duration: 500,
								isArea: true,
                //margin: { left: 50, right: 50 },
                //x: function (d) { return d[0] },
                //y: function (d) { return d[1] },
								x: function(d){return d.label;},
                y: function(d){return d.value;},
                showLabels: false,
                showLegend: false,
								//useInteractiveGuideline: true,
                title: 'Compras año ' + vm.yearValue,
								xAxis: {
						      showMaxMin: false,
									axisLabel: 'Mes',
									tickFormat: function(d){
											//console.log('[+] el valor de d es: ', d);
											//console.log('[+] fecha para mostrar: ', d3.time.format('%Y/%m/%d')(new Date(d)));
											return d3.time.format('%Y-%m')(new Date(d))
									}
						    },
								yAxis: {
                    axisLabel: 'Ingresos ($)',
                    tickFormat: function(d){
                        return d3.format(',.2f')(d);
                    }
                },

                //showYAxis: false,
                //showXAxis: false,
                //color: ['rgb(0, 150, 136)', 'rgb(204, 203, 203)', 'rgb(149, 149, 149)', 'rgb(44, 44, 44)'],
                //tooltip: { contentGenerator: function (d) { return '<div class="custom-tooltip">' + d.point.y + '%</div>' + '<div class="custom-tooltip">' + d.series[0].key + '</div>' } },
                showControls: false
            }
        };

    function activate() {
				//loadData();
				var queries = [loadData(vm.performancePeriod)];
        //$q.all(queries);
				//console.log('$q is: ', queries);
    }


    function loadData(periodo) {
			//vm.modelo = [];
			if(vm.SEARCH !== undefined) {
				switch (periodo) {
					case 'year':
					ReportesCompras.getDataYear(vm.yearValue, vm.SEARCH.enterprise)
					.then(function(data){
						//vm.performanceChartData = data.data;

						vm.performanceChartData = data.data.map(function(item){
							var p = item.resultado.month.split('-');
							var year = parseInt(p[0]);
							var month = parseInt(p[1]);
							var d = new Date(year, month);

							//console.log('[+] mapeando: ', d);
							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});

						vm.performanceChartData2 = data.data.map(function(item){
							var p = item.resultado.month.split('-');
							var year = parseInt(p[0]);
							var month = parseInt(p[1]);
							var d = new Date(year, month);

							return {
								label: d,
								value: item.balance || 0//,
								//estado: item.resultado.estado
							};
						});

						if(vm.performanceChartData !== undefined) {
							vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function(item){
								//if(item.estado !== 'Finalizada') { item.value = 0};
								return item;
							}), 'label');//{ estado: 'Finalizada'}),'label')
							vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
								//if(item.estado === 'Finalizada') {item.value = 0}
								return item;
							}), 'label');

							vm.modelo = [/*{
								key: 'No finalizadas',
								color: '#d62728',
								values: vm.filteredData2
							},*/
								{
									key: 'Finalizadas',
									color: '#1f77b4',
									values: vm.filteredData1,
								}];
						// 		console.log('[+] modelo: ', vm.modelo);
						// vm.modelo = [{
						// 	key: 'No finalizadas',
						// 	color: '#d62728',
						// 	values: [
						// 		{ value: 15000, label: new Date('2015-01-01')},
						// 		{ value: 15800, label: new Date('2015-02-01')},
						// 		{ value: 30000, label: new Date('2015-03-01')},
						// 		{ value: 28000, label: new Date('2015-04-01')},
						// 		{ value: 17000, label: new Date('2015-05-01')},
						// 		{ value: 25000, label: new Date('2015-06-01')},
						// 		{ value: 42000, label: new Date('2015-07-01')},
						// 		{ value: 39000, label: new Date('2015-08-01')},
						// 		{ value: 19800, label: new Date('2015-09-01')},
						// 		{ value: 23000, label: new Date('2015-10-01')},
						// 		{ value: 32000, label: new Date('2015-11-01')},
						// 		{ value: 57000, label: new Date('2015-12-01')},
						// 	]
						// }];
						 } else {
						 	console.log('[+] la concha de su madre');
						}

					});
						break;

					case 'quarter':
					vm.modelo = undefined;
					ReportesCompras.getDataQuarter(vm.quarterValue, vm.SEARCH.enterprise)
					.then(function(data){
						console.log('[+] getDataQuarter::data: ', data);
						//vm.performanceChartData = data.data;

						vm.performanceChartData = data.data.map(function(item){
							return {
								label: item.resultado.month,
								value: item.balance,
								estado: item.resultado.estado
							};
						});
						//console.log('[+] vm.performanceChartData: ', vm.performanceChartData);
						vm.performanceChartData2 = data.data.map(function(item){
							return {
								label: item.resultado.month,
								value: (item.balance) * (-1),
								estado: item.resultado.estado
							};
						});
						//console.log('[+] vm.performanceChartData2: ', vm.performanceChartData2);
						if(vm.performanceChartData !== undefined) {
							vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, { estado: 'Finalizada'}),'label')
							vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
								if(item.estado === 'Finalizada') {item.value = 0}
								return item;
							}), 'label');

							vm.modelo = [{
								key: 'No finalizadas',
								color: '#d62728',
								values: vm.filteredData2
								},
								{
									key: 'Finalizadas',
									color: '#1f77b4',
									values: vm.filteredData1,
								}];
							//console.log('[+] vm.modelo: ', vm.modelo);
						} else {
							console.log('[+] la concha de su madre');
						}


					});

						break;

					case 'month':
					ReportesCompras.getDataMonth(vm.monthValue, vm.SEARCH.enterprise)
					.then(function(data){
						//vm.performanceChartData = data.data;

						vm.performanceChartData = data.data.map(function(item){
							return {
								label: item.resultado.month,
								value: item.balance,
								estado: item.resultado.estado
							};
						});

						vm.performanceChartData2 = data.data.map(function(item){
							return {
								label: item.resultado.month,
								value: (item.balance) * (-1),
								estado: item.resultado.estado
							};
						});

						if(vm.performanceChartData !== undefined) {
							vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, { estado: 'Finalizada'}),'label')
							vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
								if(item.estado === 'Finalizada') {item.value = 0}
								return item;
							}), 'label');

							vm.modelo = [{
								key: 'No finalizadas',
								color: '#d62728',
								values: vm.filteredData2
								},
								{
									key: 'Finalizadas',
									color: '#1f77b4',
									values: vm.filteredData1,
								}];
						} else {
							console.log('[+] la concha de su madre');
						}


					});
						break;
					default:

				}


					//console.log('la posta es: ', vm.performanceChartData);
				//});
				};
	};

    function changePeriod() {
				console.log('[+] changePeriod::fired! ', vm.performancePeriod);
        //loadData(vm.performancePeriod);
				var queries = [loadData(vm.performancePeriod)];
    }
	}
]);

'use strict';

// Reportes controller
angular.module('reportes')
    .controller('ReportesVentasPorMesController',
        [
            '$scope',
            '$stateParams',
            '$location',
            'Authentication',
            'ReportesVentas',
            'Comprobantes',
            'Products',
            'Enterprises',
            'Condicionventas',
            'Clients',
            '$rootScope',
            '$state',
            '$filter',
            '$mdDialog',
            '$http',
            '$timeout',
            'Subs',
            'Providers',
            'Reportes',
            '$q',
            function ($scope,
                      $stateParams,
                      $location,
                      Authentication,
                      ReportesVentas,
                      Comprobantes,
                      Products,
                      Enterprises,
                      Condicionventas,
                      Clients,
                      $rootScope,
                      $state,
                      $filter,
                      $http,
                      $timeout,
                      Subs,
                      Providers,
                      Reportes,
                      $q) {
                var vm = this;
                $scope.authentication = Authentication;
                console.log('[+] ReportesVentasController::fired!');

                // watch for SEARCH to update value
                $scope.$watch('authentication', function () {
                    vm.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
                    //vm.find();
                    activate();
                });

                $scope.$watch(angular.bind(this, function () {
                    return this.modelo;
                }), function () {
                    console.log('modelo changed to ' + vm.modelo);
                });

                vm.find = function () {
                    if (vm.SEARCH !== undefined) {
                        vm.reportes = Reportes.query({e: vm.SEARCH.enterprise});
                    }
                };

                // Find existing Venta
                vm.findOne = function () {
                    Reportes.get({}, function (res) {
                            // success
                        },
                        function (err) {
                            //error
                        }
                    );
                };

                vm.performanceChartData = [];
                vm.performancePeriod = 'month';
                vm.changePeriod = changePeriod;
                vm.yearValue = '2016';
                vm.quarterValue = '2016-1Q';
                vm.monthValue = '2016-3';

                vm.chartOptions = {
                    chart: {
                        //type: 'multiBarHorizontalChart',
                        type: 'lineChart',
                        objectequality: true,
                        height: 350,
                        duration: 500,
                        isArea: true,
                        //margin: { left: 50, right: 50 },
                        //x: function (d) { return d[0] },
                        //y: function (d) { return d[1] },
                        x: function (d) {
                            return d.label;
                        },
                        y: function (d) {
                            return d.value;
                        },
                        showLabels: false,
                        showLegend: false,
                        //useInteractiveGuideline: true,
                        title: 'Ventas año ' + vm.yearValue,
                        xAxis: {
                            showMaxMin: false,
                            axisLabel: 'Día',
                            tickFormat: function (d) {
                                //console.log('[+] el valor de d es: ', d);
                                //console.log('[+] fecha para mostrar: ', d3.time.format('%Y/%m/%d')(new Date(d)));
                                return d3.time.format('%Y-%m-%d')(new Date(d))
                            }
                        },
                        yAxis: {
                            axisLabel: 'Ingresos ($)',
                            tickFormat: function (d) {
                                return d3.format(',.2f')(d);
                            }
                        },

                        //showYAxis: false,
                        //showXAxis: false,
                        //color: ['rgb(0, 150, 136)', 'rgb(204, 203, 203)', 'rgb(149, 149, 149)', 'rgb(44, 44, 44)'],
                        //tooltip: { contentGenerator: function (d) { return '<div class="custom-tooltip">' + d.point.y + '%</div>' + '<div class="custom-tooltip">' + d.series[0].key + '</div>' } },
                        showControls: false
                    }
                };


                function activate() {
                    //loadData();
                    var queries = [loadData(vm.performancePeriod)];
                    //$q.all(queries);
                    //console.log('$q is: ', queries);
                }


                function loadData(periodo) {
                    //vm.modelo = [];
                    if (vm.SEARCH !== undefined) {
                        switch (periodo) {
                            case 'year':
                                ReportesVentas.getDataYear(vm.yearValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        //vm.performanceChartData = data.data;

                                        vm.performanceChartData = data.data.map(function (item) {
                                            var p = item.resultado.month.split('-');
                                            var year = parseInt(p[0]);
                                            var month = parseInt(p[1]);
                                            var d = new Date(year, month);

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        vm.performanceChartData2 = data.data.map(function (item) {
                                            var p = item.resultado.month.split('-');
                                            var year = parseInt(p[0]);
                                            var month = parseInt(p[1]);
                                            var d = new Date(year, month);

                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function (item) {
                                                //if(item.estado !== 'Finalizada') { item.value = 0};
                                                return item;
                                            }), 'label');//{ estado: 'Finalizada'}),'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                //if(item.estado === 'Finalizada') {item.value = 0}
                                                return item;
                                            }), 'label');

                                            vm.modelo = [
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }

                                    });
                                break;

                            case 'quarter':
                                vm.modelo = undefined;
                                ReportesVentas.getDataQuarter(vm.quarterValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        console.log('[+] getDataQuarter::data: ', data);
                                        //vm.performanceChartData = data.data;

                                        vm.performanceChartData = data.data.map(function (item) {
                                            var p = item.resultado.week.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0, (1 + (w) * 7));

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });
                                        //console.log('[+] vm.performanceChartData: ', vm.performanceChartData);
                                        vm.performanceChartData2 = data.data.map(function (item) {

                                            var p = item.resultado.week.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0, (1 + (w) * 7));

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });
                                        //console.log('[+] vm.performanceChartData2: ', vm.performanceChartData2);
                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function (item) {
                                                //if(item.estado !== 'Finalizada') { item.value = 0};
                                                return item;
                                            }), 'label');//{ estado: 'Finalizada'}),'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                //if(item.estado === 'Finalizada') {item.value = 0}
                                                return item;
                                            }), 'label');

                                            vm.modelo1 = [
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }


                                    });

                                break;

                            case 'month':
                                ReportesVentas.getDataMonth(vm.monthValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        //vm.performanceChartData = data.data;
                                        console.log('data in month is: ', data);
                                        vm.performanceChartData = data.data.resultado.balanceDia.map(function (item) {
                                            var p = item.resultado.day.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0);

                                            d = d.setDate(w);

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        vm.performanceChartData2 = data.data.resultado.balanceDia.map(function (item) {
                                            var p = item.resultado.day.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0);

                                            d = d.setDate(w);

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function (item) {
                                                //if(item.estado !== 'Finalizada') { item.value = 0};
                                                return item;
                                            }), 'label');//{ estado: 'Finalizada'}),'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                //if(item.estado === 'Finalizada') {item.value = 0}
                                                return item;
                                            }), 'label');

                                            vm.modelo2 = [
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }

                                    });
                                break;
                            default:

                        }


                        //console.log('la posta es: ', vm.performanceChartData);
                        //});
                    }
                    ;
                };

                function changePeriod() {
                    console.log('[+] changePeriod::fired! ', vm.performancePeriod);
                    //loadData(vm.performancePeriod);
                    var queries = [loadData(vm.performancePeriod)];
                }
            }
        ]);

'use strict';

// Reportes controller
angular.module('reportes')
    .controller('ReportesVentasPorQController',
        [
            '$scope',
            '$stateParams',
            '$location',
            'Authentication',
            'ReportesVentas',
            'Comprobantes',
            'Products',
            'Enterprises',
            'Condicionventas',
            'Clients',
            '$rootScope',
            '$state',
            '$filter',
            '$mdDialog',
            '$http',
            '$timeout',
            'Subs',
            'Providers',
            'Reportes',
            '$q',
            function ($scope,
                      $stateParams,
                      $location,
                      Authentication,
                      ReportesVentas,
                      Comprobantes,
                      Products,
                      Enterprises,
                      Condicionventas,
                      Clients,
                      $rootScope,
                      $state,
                      $filter,
                      $http,
                      $timeout,
                      Subs,
                      Providers,
                      Reportes,
                      $q) {
                var vm = this;
                $scope.authentication = Authentication;
                console.log('[+] ReportesVentasController::fired!');

                // watch for SEARCH to update value
                $scope.$watch('authentication', function () {
                    vm.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
                    //vm.find();
                    activate();
                });

                $scope.$watch(angular.bind(this, function () {
                    return this.modelo;
                }), function () {
                    console.log('modelo changed to ' + vm.modelo);
                });

                vm.find = function () {
                    if (vm.SEARCH !== undefined) {
                        vm.reportes = Reportes.query({e: vm.SEARCH.enterprise});
                    }
                };

                // Find existing Venta
                vm.findOne = function () {
                    Reportes.get({}, function (res) {
                            // success
                        },
                        function (err) {
                            //error
                        }
                    );
                };

                vm.performanceChartData = [];
                vm.performancePeriod = 'quarter';
                vm.changePeriod = changePeriod;
                vm.yearValue = '2016';
                vm.quarterValue = '2016-1Q';
                vm.monthValue = '2015-3';

                vm.chartOptions = {
                    chart: {
                        //type: 'multiBarHorizontalChart',
                        type: 'lineChart',
                        objectequality: true,
                        height: 350,
                        duration: 500,
                        isArea: true,
                        //margin: { left: 50, right: 50 },
                        //x: function (d) { return d[0] },
                        //y: function (d) { return d[1] },
                        x: function (d) {
                            return d.label;
                        },
                        y: function (d) {
                            return d.value;
                        },
                        showLabels: false,
                        showLegend: false,
                        //useInteractiveGuideline: true,
                        title: 'Ventas año ' + vm.yearValue,
                        xAxis: {
                            showMaxMin: false,
                            axisLabel: 'Semana',
                            tickFormat: function (d) {
                                //console.log('[+] el valor de d es: ', d);
                                //console.log('[+] fecha para mostrar: ', d3.time.format('%Y/%m/%d')(new Date(d)));
                                return d3.time.format('%Y-%W')(new Date(d))
                            }
                        },
                        yAxis: {
                            axisLabel: 'Ingresos ($)',
                            tickFormat: function (d) {
                                return d3.format(',.2f')(d);
                            }
                        },

                        //showYAxis: false,
                        //showXAxis: false,
                        //color: ['rgb(0, 150, 136)', 'rgb(204, 203, 203)', 'rgb(149, 149, 149)', 'rgb(44, 44, 44)'],
                        //tooltip: { contentGenerator: function (d) { return '<div class="custom-tooltip">' + d.point.y + '%</div>' + '<div class="custom-tooltip">' + d.series[0].key + '</div>' } },
                        showControls: false
                    }
                };


                function activate() {
                    //loadData();
                    var queries = [loadData(vm.performancePeriod)];
                    //$q.all(queries);
                    //console.log('$q is: ', queries);
                }


                function loadData(periodo) {
                    //vm.modelo = [];
                    if (vm.SEARCH !== undefined) {
                        switch (periodo) {
                            case 'year':
                                ReportesVentas.getDataYear(vm.yearValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        //vm.performanceChartData = data.data;

                                        vm.performanceChartData = data.data.map(function (item) {
                                            var p = item.resultado.month.split('-');
                                            var year = parseInt(p[0]);
                                            var month = parseInt(p[1]);
                                            var d = new Date(year, month);

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        vm.performanceChartData2 = data.data.map(function (item) {
                                            var p = item.resultado.month.split('-');
                                            var year = parseInt(p[0]);
                                            var month = parseInt(p[1]);
                                            var d = new Date(year, month);

                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function (item) {
                                                //if(item.estado !== 'Finalizada') { item.value = 0};
                                                return item;
                                            }), 'label');//{ estado: 'Finalizada'}),'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                //if(item.estado === 'Finalizada') {item.value = 0}
                                                return item;
                                            }), 'label');

                                            vm.modelo = [
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }

                                    });
                                break;

                            case 'quarter':
                                vm.modelo = undefined;
                                ReportesVentas.getDataQuarter(vm.quarterValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        console.log('[+] getDataQuarter::data: ', data);
                                        //vm.performanceChartData = data.data;

                                        vm.performanceChartData = data.data.map(function (item) {
                                            //console.log('[+] el item tiene: ', item);
                                            var p = item.resultado.week.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0, (1 + (w) * 7));

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });
                                        //console.log('[+] vm.performanceChartData: ', vm.performanceChartData);
                                        vm.performanceChartData2 = data.data.map(function (item) {

                                            var p = item.resultado.week.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0, (1 + (w) * 7));

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });
                                        //console.log('[+] vm.performanceChartData2: ', vm.performanceChartData2);
                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function (item) {
                                                //if(item.estado !== 'Finalizada') { item.value = 0};
                                                return item;
                                            }), 'label');//{ estado: 'Finalizada'}),'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                //if(item.estado === 'Finalizada') {item.value = 0}
                                                return item;
                                            }), 'label');

                                            vm.modelo1 = [
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }


                                    });

                                break;

                            case 'month':
                                ReportesVentas.getDataMonth(vm.monthValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        //vm.performanceChartData = data.data;

                                        vm.performanceChartData = data.data.map(function (item) {
                                            return {
                                                label: item.resultado.month,
                                                value: item.balance,
                                                estado: item.resultado.estado
                                            };
                                        });

                                        vm.performanceChartData2 = data.data.map(function (item) {
                                            return {
                                                label: item.resultado.month,
                                                value: (item.balance) * (-1),
                                                estado: item.resultado.estado
                                            };
                                        });

                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, {estado: 'Finalizada'}), 'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                if (item.estado === 'Finalizada') {
                                                    item.value = 0
                                                }
                                                return item;
                                            }), 'label');

                                            vm.modelo = [{
                                                key: 'No finalizadas',
                                                color: '#d62728',
                                                values: vm.filteredData2
                                            },
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }


                                    });
                                break;
                            default:

                        }


                        //console.log('la posta es: ', vm.performanceChartData);
                        //});
                    }
                    ;
                };

                function changePeriod() {
                    console.log('[+] changePeriod::fired! ', vm.performancePeriod);
                    //loadData(vm.performancePeriod);
                    var queries = [loadData(vm.performancePeriod)];
                }
            }
        ]);

'use strict';

// Reportes controller
angular.module('reportes')
    .controller('ReportesVentasProductosPorMesController',
        [
            '$scope',
            '$stateParams',
            '$location',
            'Authentication',
            'ReportesVentas',
            'Comprobantes',
            'Products',
            'Enterprises',
            'Condicionventas',
            'Clients',
            '$rootScope',
            '$state',
            '$filter',
            '$mdDialog',
            '$http',
            '$timeout',
            'Subs',
            'Providers',
            'Reportes',
            '$q',
            function ($scope,
                      $stateParams,
                      $location,
                      Authentication,
                      ReportesVentas,
                      Comprobantes,
                      Products,
                      Enterprises,
                      Condicionventas,
                      Clients,
                      $rootScope,
                      $state,
                      $filter,
                      $http,
                      $timeout,
                      Subs,
                      Providers,
                      Reportes,
                      $q) {
                var vm = this;
                $scope.authentication = Authentication;
                console.log('[+] ReportesVentasController::fired!');

                // watch for SEARCH to update value
                $scope.$watch('authentication', function () {
                    vm.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
                    //vm.find();
                    activate();
                });

                $scope.$watch(angular.bind(this, function () {
                    return this.modelo;
                }), function () {
                    console.log('modelo changed to ' + vm.modelo);
                });

                vm.find = function () {
                    if (vm.SEARCH !== undefined) {
                        vm.reportes = Reportes.query({e: vm.SEARCH.enterprise});
                    }
                };

                // Find existing Venta
                vm.findOne = function () {
                    Reportes.get({}, function (res) {
                            // success
                        },
                        function (err) {
                            //error
                        }
                    );
                };

                vm.performanceChartData = [];
                vm.performancePeriod = 'month';
                vm.changePeriod = changePeriod();
                vm.chartOptions = {
                    chart: {
                        //type: 'multiBarHorizontalChart',
                        type: 'lineWithFocusChart',
                        objectequality: true,
                        height: 450,
                        duration: 500,
                        isArea: false,
                        //margin: { left: 50, right: 50 },
                        //x: function (d) { return d[0] },
                        //y: function (d) { return d[1] },
                        x: function (d) {
                            return d.day;
                        },
                        y: function (d) {
                            return d.cantidad;
                        },
                        showLabels: true,
                        showLegend: true,
                        useInteractiveGuideline: true,
                        title: 'Ventas año ' + vm.yearValue,
                        xAxis: {
                            showMaxMin: false,
                            axisLabel: 'Día',
                            tickFormat: function (d) {
                                //console.log('[+] el valor de d es: ', d);
                                //console.log('[+] fecha para mostrar: ', d3.time.format('%Y/%m/%d')(new Date(d)));
                                return d3.time.format('%Y-%m-%d')(new Date(d))
                            }
                        },
                        x2Axis: {
                            tickFormat: function (d) {
                                //return d3.time.format('%Y-%m')(new Date(d));
                                return d3.time.format('%Y-%m-%d')(new Date(d))
                            }
                        },
                        yAxis: {
                            axisLabel: 'Cantidad',
                            tickFormat: function (d) {
                                return d3.format(',.2f')(d);
                            }
                        },
                        y2Axis: {
                            tickFormat: function (d) {
                                return d3.format(',.2f')(d);
                            }
                        },

                        //showYAxis: false,
                        //showXAxis: false,
                        //color: ['rgb(0, 150, 136)', 'rgb(204, 203, 203)', 'rgb(149, 149, 149)', 'rgb(44, 44, 44)'],
                        //tooltip: { contentGenerator: function (d) { return '<div class="custom-tooltip">' + d.point.y + '%</div>' + '<div class="custom-tooltip">' + d.series[0].key + '</div>' } },
                        showControls: true
                    }
                };


                function activate() {
                    //loadData();
                    var queries = [loadData(vm.performancePeriod)];
                    //$q.all(queries);
                    //console.log('$q is: ', queries);
                }


                function loadData(periodo) {
                    //vm.modelo = [];
                    if (vm.SEARCH !== undefined) {
                        switch (periodo) {
                            case 'year':
                                ReportesVentas.getDataProductYear(vm.yearValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        //vm.performanceChartData = data.data;

                                        vm.performanceChartData = data.data.map(function (item) {
                                            var p = item.resultado.month.split('-');
                                            var year = parseInt(p[0]);
                                            var month = parseInt(p[1]);
                                            var d = new Date(year, month);

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        vm.performanceChartData2 = data.data.map(function (item) {
                                            var p = item.resultado.month.split('-');
                                            var year = parseInt(p[0]);
                                            var month = parseInt(p[1]);
                                            var d = new Date(year, month);

                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function (item) {
                                                //if(item.estado !== 'Finalizada') { item.value = 0};
                                                return item;
                                            }), 'label');//{ estado: 'Finalizada'}),'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                //if(item.estado === 'Finalizada') {item.value = 0}
                                                return item;
                                            }), 'label');

                                            vm.modelo = [
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }

                                    });
                                console.log("xvcc");
                                console.log(vm);
                                if (!vm.yearValue) {
                                    vm.yearValue = 2016;
                                }
                                ReportesVentas.getDataCategoriasYear(vm.yearValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        console.log("=======categoriesd==========");
                                        console.log(data);
                                        vm.modelcatyear = data.data;
                                    });
                                break;

                            case 'quarter':
                                vm.modelo = undefined;
                                ReportesVentas.getDataProductQuarter(vm.quarterValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        console.log('[+] getDataProductQuarter::data: ', data);
                                        //vm.performanceChartData = data.data;

                                        vm.performanceChartData = data.data.map(function (item) {
                                            var p = item.resultado.week.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0, (1 + (w) * 7));

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });
                                        //console.log('[+] vm.performanceChartData: ', vm.performanceChartData);
                                        vm.performanceChartData2 = data.data.map(function (item) {

                                            var p = item.resultado.week.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0, (1 + (w) * 7));

                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });
                                        //console.log('[+] vm.performanceChartData2: ', vm.performanceChartData2);
                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function (item) {
                                                //if(item.estado !== 'Finalizada') { item.value = 0};
                                                return item;
                                            }), 'label');//{ estado: 'Finalizada'}),'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                //if(item.estado === 'Finalizada') {item.value = 0}
                                                return item;
                                            }), 'label');

                                            vm.modelo1 = [
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }


                                    });
                                if (!vm.yearValue) {
                                    vm.yearValue = 2016;
                                }
                                ReportesVentas.getDataCategoriasYear(vm.yearValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        console.log("=======categoriesd==========");
                                        console.log(data);
                                        vm.modelcatyear = data.data;
                                    });

                                break;

                            case 'month':
                                ReportesVentas.getDataProductYear(vm.yearValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        //vm.performanceChartData = data.data;
                                        console.log('data in month is: ', data);
                                        vm.performanceChartData = data.data.map(function (item) {
                                            var dvalues = item.values.map(function (dvalue) {
                                                var p = dvalue.day.split('-');
                                                var year = parseInt(p[0]);
                                                var w = parseInt(p[1]);
                                                var d = new Date(year, 0);
                                                d = d.setDate(w);

                                                return {
                                                    cantidad: dvalue.cantidad,
                                                    day: d
                                                }
                                            });


                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                key: item.key,
                                                values: dvalues || []//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        // vm.performanceChartData2 = data.data.resultado.balanceDia.map(function(item){
                                        // 	var p = item.resultado.day.split('-');
                                        // 	var year = parseInt(p[0]);
                                        // 	var w = parseInt(p[1]);
                                        // 	var d = new Date(year, 0);
                                        //
                                        // 	d = d.setDate(w);
                                        //
                                        // 	//console.log('[+] mapeando: ', d);
                                        // 	return {
                                        // 		label: d,
                                        // 		value: item.cantidad || 0//,
                                        // 		//estado: item.resultado.estado
                                        // 	};
                                        // });

                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function (item) {
                                                //if(item.estado !== 'Finalizada') { item.value = 0};
                                                return item;
                                            }), 'key');//{ estado: 'Finalizada'}),'label')
                                            // vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function(item){
                                            // 	//if(item.estado === 'Finalizada') {item.value = 0}
                                            // 	return item;
                                            // }), 'label');

                                            // vm.modelo2 = [
                                            // 	{
                                            // 		key: 'Finalizadas',
                                            // 		color: '#1f77b4',
                                            // 		values: vm.filteredData1,
                                            // 	}];

                                            vm.modelo2 = vm.filteredData1;
                                            console.log('esta es la posta: ', vm.modelo2);
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }

                                    });
                                // if(!vm.yearValue){
                                // 	vm.yearValue=2016;
                                // }
                                // ReportesVentas.getDataCategoriasYear(vm.yearValue, vm.SEARCH.enterprise)
                                // .then(function(data){
                                // console.log("=======categoriesd==========");
                                // console.log(data);
                                // 	vm.modelcatyear=data.data;
                                // });
                                break;
                            default:

                        }


                        //console.log('la posta es: ', vm.performanceChartData);
                        //});
                    }
                    ;
                };

                function changePeriod() {
                    console.log('[+] changePeriod::fired! ', vm.performancePeriod);
                    //loadData(vm.performancePeriod);
                    var queries = [loadData(vm.performancePeriod)];
                }
            }
        ]);

'use strict';

// Reportes controller
angular.module('reportes')
    .controller('ReportesVentasController',
        [
            '$scope',
            '$stateParams',
            '$location',
            'Authentication',
            'ReportesVentas',
            'Comprobantes',
            'Products',
            'Enterprises',
            'Condicionventas',
            'Clients',
            '$rootScope',
            '$state',
            '$filter',
            '$mdDialog',
            '$http',
            '$timeout',
            'Subs',
            'Providers',
            'Reportes',
            '$q',
            function ($scope,
                      $stateParams,
                      $location,
                      Authentication,
                      ReportesVentas,
                      Comprobantes,
                      Products,
                      Enterprises,
                      Condicionventas,
                      Clients,
                      $rootScope,
                      $state,
                      $filter,
                      $http,
                      $timeout,
                      Subs,
                      Providers,
                      Reportes,
                      $q) {
                var vm = this;
                $scope.authentication = Authentication;
                console.log('[+] ReportesVentasController::fired!');

                // watch for SEARCH to update value
                $scope.$watch('authentication', function () {
                    vm.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
                    //vm.find();
                    activate();
                });

                $scope.$watch(angular.bind(this, function () {
                    return this.modelo;
                }), function () {
                    console.log('modelo changed to ' + vm.modelo);
                });

                vm.find = function () {
                    if (vm.SEARCH !== undefined) {
                        vm.reportes = Reportes.query({e: vm.SEARCH.enterprise});
                    }
                };

                // Find existing Venta
                vm.findOne = function () {
                    Reportes.get({}, function (res) {
                            // success
                        },
                        function (err) {
                            //error
                        }
                    );
                };

                vm.performanceChartData = [];
                vm.performancePeriod = 'year';
                vm.changePeriod = changePeriod;
                vm.yearValue = '2016';
                vm.quarterValue = '2016-1Q';
                vm.monthValue = '2016-3';

                vm.chartOptions = {
                    chart: {
                        //type: 'multiBarHorizontalChart',
                        //type: 'lineChart',
                        type: 'lineWithFocusChart',
                        objectequality: true,
                        height: 450,
                        duration: 500,
                        isArea: true,
                        //margin: { left: 50, right: 50 },
                        //x: function (d) { return d[0] },
                        //y: function (d) { return d[1] },
                        x: function (d) {
                            return d.label;
                        },
                        y: function (d) {
                            return d.value;
                        },
                        showLabels: false,
                        showLegend: false,
                        useInteractiveGuideline: true,
                        title: 'Ventas año ' + vm.yearValue,
                        xAxis: {
                            showMaxMin: false,
                            axisLabel: 'Mes',
                            tickFormat: function (d) {
                                //console.log('[+] el valor de d es: ', d);
                                //console.log('[+] fecha para mostrar: ', d3.time.format('%Y/%m/%d')(new Date(d)));
                                //return d3.time.format('%Y-%m')(new Date(d))
                                return d3.time.format('%Y-%m-%d')(new Date(d))
                            }
                        },
                        x2Axis: {
                            tickFormat: function (d) {
                                //return d3.time.format('%Y-%m')(new Date(d));
                                return d3.time.format('%Y-%m-%d')(new Date(d))
                            }
                        },
                        yAxis: {
                            axisLabel: 'Ingresos ($)',
                            tickFormat: function (d) {
                                return d3.format(',.2f')(d);
                            }
                        },
                        y2Axis: {
                            tickFormat: function (d) {
                                return d3.format(',.2f')(d);
                            }
                        },
                        //showYAxis: false,
                        //showXAxis: false,
                        //color: ['rgb(0, 150, 136)', 'rgb(204, 203, 203)', 'rgb(149, 149, 149)', 'rgb(44, 44, 44)'],
                        //tooltip: { contentGenerator: function (d) { return '<div class="custom-tooltip">' + d.point.y + '%</div>' + '<div class="custom-tooltip">' + d.series[0].key + '</div>' } },
                        showControls: false
                    }
                };


                function activate() {
                    //loadData();
                    var queries = [loadData(vm.performancePeriod)];
                    //$q.all(queries);
                    //console.log('$q is: ', queries);
                }


                function loadData(periodo) {
                    //vm.modelo = [];
                    if (vm.SEARCH !== undefined) {
                        switch (periodo) {
                            case 'year':
                                ReportesVentas.getDataYear(vm.yearValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        //vm.performanceChartData = data.data;
                                        console.log('algo', data.data);
                                        vm.performanceChartData = data.data.map(function (item) {
                                            //var p = item.resultado.month.split('-');
                                            // var p = item.resultado.day.split('-');
                                            // var year = parseInt(p[0]);
                                            // var month = parseInt(p[1]);
                                            // var d = new Date(year, month);

                                            var p = item.resultado.day.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0);

                                            d = d.setDate(w);


                                            //console.log('[+] mapeando: ', d);
                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        vm.performanceChartData2 = data.data.map(function (item) {
                                            var p = item.resultado.day.split('-');
                                            var year = parseInt(p[0]);
                                            var w = parseInt(p[1]);
                                            var d = new Date(year, 0);

                                            d = d.setDate(w);

                                            return {
                                                label: d,
                                                value: item.balance || 0//,
                                                //estado: item.resultado.estado
                                            };
                                        });

                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, function (item) {
                                                //if(item.estado !== 'Finalizada') { item.value = 0};
                                                return item;
                                            }), 'label');//{ estado: 'Finalizada'}),'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                //if(item.estado === 'Finalizada') {item.value = 0}
                                                return item;
                                            }), 'label');

                                            vm.modelo = [/*{
								key: 'No finalizadas',
								color: '#d62728',
								values: vm.filteredData2
							},*/
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                            // 		console.log('[+] modelo: ', vm.modelo);
                                            // vm.modelo = [{
                                            // 	key: 'No finalizadas',
                                            // 	color: '#d62728',
                                            // 	values: [
                                            // 		{ value: 15000, label: new Date('2015-01-01')},
                                            // 		{ value: 15800, label: new Date('2015-02-01')},
                                            // 		{ value: 30000, label: new Date('2015-03-01')},
                                            // 		{ value: 28000, label: new Date('2015-04-01')},
                                            // 		{ value: 17000, label: new Date('2015-05-01')},
                                            // 		{ value: 25000, label: new Date('2015-06-01')},
                                            // 		{ value: 42000, label: new Date('2015-07-01')},
                                            // 		{ value: 39000, label: new Date('2015-08-01')},
                                            // 		{ value: 19800, label: new Date('2015-09-01')},
                                            // 		{ value: 23000, label: new Date('2015-10-01')},
                                            // 		{ value: 32000, label: new Date('2015-11-01')},
                                            // 		{ value: 57000, label: new Date('2015-12-01')},
                                            // 	]
                                            // }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }

                                    });
                                break;

                            case 'quarter':
                                vm.modelo = undefined;
                                ReportesVentas.getDataQuarter(vm.quarterValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        console.log('[+] getDataQuarter::data: ', data);
                                        //vm.performanceChartData = data.data;

                                        vm.performanceChartData = data.data.map(function (item) {
                                            return {
                                                label: item.resultado.month,
                                                value: item.balance,
                                                estado: item.resultado.estado
                                            };
                                        });
                                        //console.log('[+] vm.performanceChartData: ', vm.performanceChartData);
                                        vm.performanceChartData2 = data.data.map(function (item) {
                                            return {
                                                label: item.resultado.month,
                                                value: (item.balance) * (-1),
                                                estado: item.resultado.estado
                                            };
                                        });
                                        //console.log('[+] vm.performanceChartData2: ', vm.performanceChartData2);
                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, {estado: 'Finalizada'}), 'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                if (item.estado === 'Finalizada') {
                                                    item.value = 0
                                                }
                                                return item;
                                            }), 'label');

                                            vm.modelo = [{
                                                key: 'No finalizadas',
                                                color: '#d62728',
                                                values: vm.filteredData2
                                            },
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                            //console.log('[+] vm.modelo: ', vm.modelo);
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }


                                    });

                                break;

                            case 'month':
                                ReportesVentas.getDataMonth(vm.monthValue, vm.SEARCH.enterprise)
                                    .then(function (data) {
                                        //vm.performanceChartData = data.data;

                                        vm.performanceChartData = data.data.map(function (item) {
                                            return {
                                                label: item.resultado.month,
                                                value: item.balance,
                                                estado: item.resultado.estado
                                            };
                                        });

                                        vm.performanceChartData2 = data.data.map(function (item) {
                                            return {
                                                label: item.resultado.month,
                                                value: (item.balance) * (-1),
                                                estado: item.resultado.estado
                                            };
                                        });

                                        if (vm.performanceChartData !== undefined) {
                                            vm.filteredData1 = $filter('orderBy')($filter('filter')(vm.performanceChartData, {estado: 'Finalizada'}), 'label')
                                            vm.filteredData2 = $filter('orderBy')($filter('filter')(vm.performanceChartData2, function (item) {
                                                if (item.estado === 'Finalizada') {
                                                    item.value = 0
                                                }
                                                return item;
                                            }), 'label');

                                            vm.modelo = [{
                                                key: 'No finalizadas',
                                                color: '#d62728',
                                                values: vm.filteredData2
                                            },
                                                {
                                                    key: 'Finalizadas',
                                                    color: '#1f77b4',
                                                    values: vm.filteredData1,
                                                }];
                                        } else {
                                            console.log('[+] la concha de su madre');
                                        }


                                    });
                                break;
                            default:

                        }


                        //console.log('la posta es: ', vm.performanceChartData);
                        //});
                    }
                    ;
                };

                function changePeriod() {
                    console.log('[+] changePeriod::fired! ', vm.performancePeriod);
                    //loadData(vm.performancePeriod);
                    var queries = [loadData(vm.performancePeriod)];
                }
            }
        ]);

'use strict';

// Reportes controller
angular.module('reportes').controller('ReportesController', [
    '$scope',
    '$stateParams',
    '$location',
    '$filter',
    'user',
    'tipoReporte',
    'reportesVentas',
    'ReportesCompras',
    'Puestos',
    'Costcenters',
    '$q',
    'lodash',
    function($scope, $stateParams, $location, $filter, user, tipoReporte, reportesVentas, ReportesCompras, Puestos, Costcenters, $q, lodash) {

        //var vm = this;
        this.user = user;

        this.isDayLoading = true;
        this.isWeekLoading = true;
        this.isMonthLoading = true;
        this.isRangeLoading = false;

        var now = new Date();
        var day = getDay(now);
        var month = getMonth(now);
        var week = getWeek(now);

        this.date = now;
        this.weekInput = now;
        this.monthInput = now;

        this.category = null;
        this.products = null;

        this.showByCategory = function(tab) {
            this.category = "category";

            if (tab == 'rangepickerSelected') {
                this.rangepickerSelected();
            } else {
                this.loadReportes(tab);
            }
        };

        this.showByProducts = function(tab) {
            this.products = "product";

            if (tab == 'rangepickerSelected') {
                this.rangepickerSelected();
            } else {
                this.loadReportes(tab);
            }
        };

        this.rangepickerSelected = function() {
            if (this.dateStart && this.dateEnd) {
                this.isRangeLoading = true;
                if ($stateParams.tipo === 'venta') {
                    reportesVentas.getDataRange(getDay(this.dateStart), getDay(this.dateEnd), this.user.enterprise._id, this.category, this.products)
                        .then(angular.bind(this, function(data) {
                            this.isRangeLoading = false;
                            this.range.balance = data.data.balance;
                            this.range.byCategory = data.data.byCategory;
                            this.range.byProduct = data.data.byProduct;
                            this.range.byPuesto = data.data.byPuesto;
                            this.selectedIndex = 0;
                        }))

                    reportesVentas.getDataCategoriasRange(getDay(this.dateStart), getDay(this.dateEnd), this.user.enterprise._id)
                        .then(angular.bind(this, function(data) {
                            console.log("=======categoriesd==========");
                            console.log(data);
                            this.range.modelcat = data.data;
                        }))
                    reportesVentas.getDataCategoriasRangePuesto(getDay(this.dateStart), getDay(this.dateEnd), this.user.enterprise._id)
                        .then(angular.bind(this, function(data) {
                            console.log("=======categoriesdFilter==========");
                            console.log(data);
                            this.range.modelcatPuesto = data.data;
                        }))


                    reportesVentas.getDataCondiVentaRange(getDay(this.dateStart), getDay(this.dateEnd), this.user.enterprise._id)
                        .then(angular.bind(this, function(data) {
                            console.log("=======categoriesd==========");
                            console.log(data);
                            this.range.modelCondiVenta = data.data;
                        }))
                    reportesVentas.getDataCondiVentaRangePuesto(getDay(this.dateStart), getDay(this.dateEnd), this.user.enterprise._id)
                        .then(angular.bind(this, function(data) {
                            console.log("=======categoriesdFilter==========");
                            console.log(data);
                            this.range.modelCondiVentaPuesto = data.data;
                        }))

                    reportesVentas.getDataComprobanteRange(getDay(this.dateStart), getDay(this.dateEnd), this.user.enterprise._id)
                        .then(angular.bind(this, function(data) {
                            console.log("=======categoriesd==========");
                            console.log(data);
                            this.range.modelComprobante = data.data;
                        }))
                    reportesVentas.getDataComprobanteRangePuesto(getDay(this.dateStart), getDay(this.dateEnd), this.user.enterprise._id)
                        .then(angular.bind(this, function(data) {
                            console.log("=======categoriesdFilter==========");
                            console.log(data);
                            this.range.modelComprobantePuesto = data.data;
                        }))

                    this.category = null;
                    this.products = null;
                } else {
                    ReportesCompras.getDataRange(getDay(this.dateStart), getDay(this.dateEnd), this.user.enterprise._id, this.category, this.products)
                        .then(angular.bind(this, function(data) {
                            this.isRangeLoading = false;
                            this.range.balance = data.data.balance;
                            this.range.byCategory = data.data.byCategory;
                            this.range.byProduct = data.data.byProduct;
                            this.range.byPuesto = data.data.byPuesto;
                        }))

                    ReportesCompras.getDataCategoriasRange(getDay(this.dateStart), getDay(this.dateEnd), this.user.enterprise._id).then(angular.bind(this, function(data) {
                        this.range.modelcat = data.data;
                    }));

                    this.category = null;
                    this.products = null;
                }
            }
        };

        this.monthSelected = function() {
            if (this.monthInput) {
                this.isMonthLoading = true;
                this.monthValue = getMonth(this.monthInput);
                this.loadReportes('mes');
            }
        };

        this.weekSelected = function() {
            if (this.weekInput) {
                this.isWeekLoading = true;
                this.weekValue = getWeek(this.weekInput);
                this.loadReportes('semana');
            }
        };

        this.datepickerSelected = function() {
            if (this.date) {
                this.isDayLoading = true;
                this.dayValue = getDay(this.date);
                this.loadReportes('dia');
            }
        }

        this.findPuestoById = function(puestoId) {
            return lodash.find($scope.puestos, function(puesto) {
                return puesto._id === puestoId;
            });
        };
        this.findCostcenterByPuesto = function(puesto) {
            return lodash.find($scope.costcenters, function(costcenter) {
                return costcenter._id === puesto.centroDeCosto;
            });
        };
        this.findTabName = function(puestoVetas) {
            if (puestoVetas.from === "others") {
                return puestoVetas.from;
            } else {
                return this.findCostcenterByPuesto(this.findPuestoById(puestoVetas.from)).name;
            }
        };


        this.dayValue = day;
        this.monthValue = month;
        this.weekValue = week;

        this.day = {};
        this.week = {};
        this.month = {};
        this.range = {};

        this.tipoReporte = tipoReporte;
        this.getPuestos = function() {
            var deferred = $q.defer();
            Puestos.query({}, function(res) {
                $scope.puestos = res;
                Costcenters.query({}, function(data) {
                    $scope.costcenters = data;
                    deferred.resolve(true);
                    // var relatedCostCenter = $filter('filter')(data, function(item) {
                    //     return item.id === puesto.centroDeCosto;
                    // })[0];


                });
            });
            return deferred.promise;

        };
        var ctrl = this;

        this.loadReportes = function(tab) {

            this.getPuestos().then(angular.bind(this, function() {

                if ($stateParams.tipo === 'venta') {
                    if (tab == 'dia') {
                        reportesVentas.getDataDay(this.dayValue, this.user.enterprise._id, this.category, this.products)
                            .then(angular.bind(this, function(data) {
                                this.day.balance = data.data.balance;
                                this.day.byCategory = data.data.byCategory;
                                this.day.byProduct = data.data.byProduct;
                                this.day.byPuesto = data.data.byPuesto;
                                this.isDayLoading = false;
                            }));

                        reportesVentas.getDataCategoriasDay(this.dayValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesday!aa==========");
                                console.log(data);
                                this.day.modelcat = data.data;
                            }));
                        reportesVentas.getDataCondiVentaDay(this.dayValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======CondiVentaday!aa==========");
                                console.log(data);
                                this.day.modelCondiVenta = data.data;
                            }));
                        reportesVentas.getDataComprobanteDay(this.dayValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======Comprobanteday!aa==========");
                                console.log(data);
                                this.day.modelComprobante = data.data;
                            }));
                        reportesVentas.getDataCondiVentaDayPuesto(this.dayValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======CondiVentadayPusto!aa==========");
                                console.log(data);
                                this.day.modelCondiVentaPuesto = data.data;
                            }));
                        reportesVentas.getDataComprobanteDayPuesto(this.dayValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======ComprobantedayPuesto!aa==========");
                                console.log(data);
                                this.day.modelComprobantePuesto = data.data;
                            }));

                        reportesVentas.getDataCategoriasDayPuesto(this.dayValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesdayFilter==========");
                                console.log(data);
                                this.day.modelcatPuesto = data.data;
                            }));

                        this.category = null;
                        this.products = null;
                    } else if (tab == 'semana') {
                        reportesVentas.getDataWeek(this.weekValue, this.user.enterprise._id, this.category, this.products)
                            .then(angular.bind(this, function(data) {
                                this.week.balance = data.data.balance;
                                this.week.byCategory = data.data.byCategory;
                                this.week.byProduct = data.data.byProduct;
                                this.week.byPuesto = data.data.byPuesto;
                                this.isWeekLoading = false;
                            }));

                        reportesVentas.getDataCategoriasWeek(this.weekValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesweek==========");
                                console.log(data);
                                this.week.modelcat = data.data;
                            }));

                        reportesVentas.getDataCategoriasWeekPuesto(this.weekValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesweekFilter==========");
                                console.log(data);
                                this.week.modelcatPuesto = data.data;
                            }))
                        reportesVentas.getDataCondiVentaWeek(this.weekValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesweek==========");
                                console.log(data);
                                this.week.modelCondiVenta = data.data;
                            }));

                        reportesVentas.getDataCondiVentaWeekPuesto(this.weekValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesweekFilter==========");
                                console.log(data);
                                this.week.modelCondiVentaPuesto = data.data;
                            }))
                        reportesVentas.getDataComprobanteWeek(this.weekValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesweek==========");
                                console.log(data);
                                this.week.modelComprobante = data.data;
                            }));

                        reportesVentas.getDataComprobanteWeekPuesto(this.weekValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesweekFilter==========");
                                console.log(data);
                                this.week.modelComprobantePuesto = data.data;
                            }))

                        this.category = null;
                        this.products = null;
                    } else {
                        reportesVentas.getDataDetailedMonth(this.monthValue, this.user.enterprise._id, this.category, this.products)
                            .then(angular.bind(this, function(data) {
                                console.log("_______month DATA______");
                                console.log(data);
                                this.month.balance = data.data.balance;
                                this.month.byCategory = data.data.byCategory;
                                this.month.byProduct = data.data.byProduct;
                                this.month.byPuesto = data.data.byPuesto;

                                this.isMonthLoading = false;
                            }));

                        reportesVentas.getDataCategoriasMonth(this.monthValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesmonth==========");
                                console.log(data);
                                this.month.modelcat = data.data;
                            }))

                        reportesVentas.getDataCategoriasMonthPuesto(this.monthValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesmonthFilter==========");
                                console.log(data);
                                this.month.modelcatPuesto = data.data;
                            }));


                        reportesVentas.getDataCondiVentaMonth(this.monthValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesmonth==========");
                                console.log(data);
                                this.month.modelCondiVenta = data.data;
                            }))

                        reportesVentas.getDataCondiVentaMonthPuesto(this.monthValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesmonthFilter==========");
                                console.log(data);
                                this.month.modelCondiVentaPuesto = data.data;
                            }));


                        reportesVentas.getDataComprobanteMonth(this.monthValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesmonth==========");
                                console.log(data);
                                this.month.modelComprobante = data.data;
                            }))

                        reportesVentas.getDataComprobanteMonthPuesto(this.monthValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesmonthFilter==========");
                                console.log(data);
                                this.month.modelComprobantePuesto = data.data;
                            }));



                        this.category = null;
                        this.products = null;
                    }
                } else {
                    if (tab == 'dia') {
                        ReportesCompras.getDataDay(this.dayValue, this.user.enterprise._id, this.category, this.products)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesday!faaaa==========");
                                console.log("===============Compras Da============")
                                this.day.balance = data.data.balance;
                                this.day.byCategory = data.data.byCategory;
                                this.day.byProduct = data.data.byProduct;
                                this.day.byPuesto = data.data.byPuesto;
                                this.isDayLoading = false;
                            }));


                        ReportesCompras.getDataCategoriasDay(this.dayValue, this.user.enterprise._id).then(angular.bind(this, function(data) {
                            console.log("=======categoriesday!aa==========");
                            console.log(data);
                            this.day.modelcat = data.data;
                        }));

                        this.category = null;
                        this.products = null;
                    } else if (tab == 'semana') {
                        ReportesCompras.getDataWeek(this.weekValue, this.user.enterprise._id, this.category, this.products)
                            .then(angular.bind(this, function(data) {
                                this.week.balance = data.data.balance;
                                this.week.byCategory = data.data.byCategory;
                                this.week.byProduct = data.data.byProduct;
                                this.week.byPuesto = data.data.byPuesto;
                                this.isWeekLoading = false;
                            }));

                        ReportesCompras.getDataCategoriasWeek(this.weekValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesweek==========");
                                console.log(data);
                                this.week.modelcat = data.data;
                            }));

                        this.category = null;
                        this.products = null;
                    } else {
                        ReportesCompras.getDataDetailedMonth(this.monthValue, this.user.enterprise._id, this.category, this.products)
                            .then(angular.bind(this, function(data) {
                                this.month.balance = data.data.balance;
                                this.month.byCategory = data.data.byCategory;
                                this.month.byProduct = data.data.byProduct;
                                this.month.byPuesto = data.data.byPuesto;
                                this.isMonthLoading = false;
                            }));

                        ReportesCompras.getDataCategoriasMonth(this.monthValue, this.user.enterprise._id)
                            .then(angular.bind(this, function(data) {
                                console.log("=======categoriesmonth==========");
                                console.log(data);
                                this.month.modelcat = data.data;
                            }))

                        this.category = null;
                        this.products = null;
                    }
                }
            }));
        };


        function getDay(date) {
            var start = new Date(date.getFullYear(), 0, 0);
            var diff = date - start;
            var oneDay = 1000 * 60 * 60 * 24;
            var day = Math.floor(diff / oneDay);
            var year = date.getFullYear();
            return (year + '-' + day)
        }

        function getWeek(date) {
            var temp = new Date(date);
            temp.setHours(0, 0, 0);
            temp.setDate(temp.getDate() + 4 - (temp.getDay() || 7));
            var year = date.getFullYear();
            var week = Math.ceil((((temp - new Date(temp.getFullYear(), 0, 1)) / 8.64e7) + 1) / 7);
            return (year + '-' + week)
        }

        function getMonth(date) {
            var month = date.getMonth();
            var year = date.getFullYear();
            return (year + '-' + month)
        }
    }
]);
'use strict';

//Reportes service used to communicate Reportes REST endpoints
angular.module('reportes').factory('ReportesCompras', ['$http',
	function($http) {
		return {
			getDataYear: function(year, enterprise) {
				console.log('[+] reportes::ReportesCompras::getDataYear:fired!');
				return $http({
                        method: "get",
                        url: "/api/reportes/compras/byYear/" + year,
                        params: {
                            e: enterprise
                        }/*,
                        data: {
                            name: name
                        }*/
                    });
			},
			getDataQuarter: function(quarter, enterprise) {
				return $http({
                        method: "get",
                        url: "/api/reportes/compras/byQ/" + quarter,
                        params: {
                            e: enterprise
                        }/*,
                        data: {
                            name: name
                        }*/
                    });
			},
			getDataMonth: function(month, enterprise) {
				return $http({
                        method: "get",
                        url: "/api/reportes/compras/byMonth/" + month,
                        params: {
                            e: enterprise
                        }/*,
                        data: {
                            name: name
                        }*/
                    });
			},
			getDataDetailedMonth: function (month, enterprise, category, products) {
				return $http({
					method: "get",
					url: "/api/reportes/compras/byMonthDetailed/" + month,
					params: {
						e: enterprise,
						category: category,
                        products: products
					}
				})
			},
			getDataWeek: function(week, enterprise, category, products) {
				return $http({
					method: "get",
					url: "/api/reportes/compras/byWeek/" + week,
					params: {
						e: enterprise,
						category: category,
                        products: products
					}
				})
			},
			getDataDay: function(day, enterprise, category, products) {
				return $http({
					method: "get",
					url: "/api/reportes/compras/byDay/" + day,
					params: {
						e: enterprise,
						category: category,
                        products: products
					}
				})
			},
			getDataRange: function (start, end, enterprise, category, products) {
				return $http({
					method: "get",
					url: "/api/reportes/compras/byRange",
					params: {
						e: enterprise,
						start: start,
						end: end,
						category: category,
                        products: products
					}
				})
			},
			getDataCategoriasDay: function(day, enterprise) {
				return $http({
					method: "get",
					url: "/api/reportes/compras/categorias/byDay/" + day,
					params: {
						e: enterprise
					}
				})
			},
			getDataCategoriasMonth: function(month, enterprise) {
				return $http({
					method: "get",
					url: "/api/reportes/compras/categorias/byMonth/" + month,
					params: {
						e: enterprise
					}
				})
			},getDataCategoriasWeek: function(week, enterprise) {
				return $http({
					method: "get",
					url: "/api/reportes/compras/categorias/byWeek/" + week,
					params: {
						e: enterprise
					}
				})
			},getDataCategoriasRange: function(start, end ,enterprise) {
				return $http({
					method: "get",
					url: "/api/reportes/compras/categorias/byRange/",
					params: {
						e: enterprise,
						Start: start,
						End: end
					}
				})
			},

		}
	}
]);

'use strict';

//Reportes service used to communicate Reportes REST endpoints
angular.module('reportes').factory('ReportesVentas', ['$http',
    function($http) {
        return {
            getDataYear: function(year, enterprise) {
                console.log('[+] reportes::ReportesVentas::getDataYear:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/byYear/" + year,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataQuarter: function(quarter, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/byQ/" + quarter,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataMonth: function(month, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/byMonth/" + month,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataProductYear: function(year, enterprise) {
                console.log('[+] reportes::ReportesVentas::getDataYear:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/productos/byYear/" + year,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataProductQuarter: function(quarter, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/productos/byQ/" + quarter,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataProductMonth: function(month, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/productos/byMonth/" + month,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataDetailedMonth: function(month, enterprise, category, products) {
                console.log("Category: " + category);
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/byMonthDetailed/" + month,
                    params: {
                        e: enterprise,
                        category: category,
                        products: products
                    }
                })
            },
            getDataWeek: function(week, enterprise, category, products) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/byWeek/" + week,
                    params: {
                        e: enterprise,
                        category: category,
                        products: products
                    }
                })
            },
            getDataDay: function(day, enterprise, category, products) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/byDay/" + day,
                    params: {
                        e: enterprise,
                        category: category,
                        products: products
                    }
                })
            },
            getDataRange: function(start, end, enterprise, category, products) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/byRange",
                    params: {
                        e: enterprise,
                        start: start,
                        end: end,
                        category: category,
                        products: products
                    }
                })
            },
            getDataCategoriasDay: function(Day, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasDay:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/categorias/byDay/" + Day,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },

            getDataCondiVentaDay: function(Day, enterprise) {
                console.log('[+] reportes::ReportesVentasCondiVenta::getDataCondiVentaDay:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/condiventa/byDay/" + Day,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataComprobanteDay: function(Day, enterprise) {
                console.log('[+] reportes::ReportesVentasCondiVenta::getDataCondiVentaDay:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/comprobante/byDay/" + Day,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataComprobanteDayPuesto: function(Day, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasDay:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/comprobante/byDay/" + Day,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataCondiVentaDayPuesto: function(Day, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasDay:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/condiVenta/byDay/" + Day,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataCategoriasDayPuesto: function(Day, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasDay:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/byDay/" + Day,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataCategoriasWeek: function(Week, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasWeek:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/categorias/byWeek/" + Week,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataCategoriasWeekPuesto: function(Week, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasWeek:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/byWeek/" + Week,
                    params: {
                        e: enterprise
                    }

                });
            },


            getDataCondiVentaWeek: function(Week, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasWeek:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/condiVenta/byWeek/" + Week,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataCondiVentaWeekPuesto: function(Week, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasWeek:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/condiVenta/byWeek/" + Week,
                    params: {
                        e: enterprise
                    }

                });
            },

            getDataComprobanteWeek: function(Week, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasWeek:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/comprobante/byWeek/" + Week,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataComprobanteWeekPuesto: function(Week, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasWeek:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/comprobante/byWeek/" + Week,
                    params: {
                        e: enterprise
                    }

                });
            },



            getDataCategoriasMonth: function(Month, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasMonth:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/categorias/byMonth/" + Month,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataCategoriasMonthPuesto: function(Month, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasMonth:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/byMonth/" + Month,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },

            getDataCondiVentaMonth: function(Month, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasMonth:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/condiVenta/byMonth/" + Month,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataCondiVentaMonthPuesto: function(Month, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasMonth:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/condiVenta/byMonth/" + Month,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataComprobanteMonth: function(Month, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasMonth:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/comprobante/byMonth/" + Month,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataComprobanteMonthPuesto: function(Month, enterprise) {
                console.log('[+] reportes::ReportesVentasCategorias::getDataCategoriasMonth:fired!');
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/comprobante/byMonth/" + Month,
                    params: {
                        e: enterprise
                    }
                    /*,
                                            data: {
                                                name: name
                                            }*/
                });
            },
            getDataCategoriasRange: function(start, end, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/categorias/byRange",
                    params: {
                        e: enterprise,
                        start: start,
                        end: end
                    }
                })
            },
            getDataCategoriasRangePuesto: function(start, end, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/byRange",
                    params: {
                        e: enterprise,
                        start: start,
                        end: end
                    }
                })
            },

            getDataCondiVentaRange: function(start, end, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/condiVenta/byRange",
                    params: {
                        e: enterprise,
                        start: start,
                        end: end
                    }
                })
            },
            getDataCondiVentaRangePuesto: function(start, end, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/condiVenta/byRange",
                    params: {
                        e: enterprise,
                        start: start,
                        end: end
                    }
                })
            },

            getDataComprobanteRange: function(start, end, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/comprobante/byRange",
                    params: {
                        e: enterprise,
                        start: start,
                        end: end
                    }
                })
            },
            getDataComprobanteRangePuesto: function(start, end, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/reportes/ventas/puestos/comprobante/byRange",
                    params: {
                        e: enterprise,
                        start: start,
                        end: end
                    }
                })
            }
        }
    }
]);
'use strict';

//Reportes service used to communicate Reportes REST endpoints
angular.module('reportes').factory('Reportes', ['$resource',
	function($resource) {
		return $resource('api/reportes/:reporteId', { reporteId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

// Configuring the Rrhhs module
angular.module('rrhhs').run(['Menus',
	function(Menus) {
		// Add the Rrhhs dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Rrhhs',
			state: 'rrhhs',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'rrhhs', {
			title: 'List Rrhhs',
			state: 'rrhhs.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'rrhhs', {
			title: 'Create Rrhh',
			state: 'rrhhs.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('rrhhs').config(['$stateProvider',
	function($stateProvider) {
		// Rrhhs state routing
		$stateProvider.
		state('rrhhs', {
			abstract: true,
			url: '/rrhhs',
			template: '<ui-view/>'
		}).
		state('rrhhs.list', {
			url: '',
			templateUrl: 'modules/rrhhs/views/list-rrhhs.client.view.html'
		}).
		state('rrhhs.create', {
			url: '/create',
			templateUrl: 'modules/rrhhs/views/create-rrhh.client.view.html'
		}).
		state('rrhhs.view', {
			url: '/:rrhhId',
			templateUrl: 'modules/rrhhs/views/view-rrhh.client.view.html'
		}).
		state('rrhhs.edit', {
			url: '/:rrhhId/edit',
			templateUrl: 'modules/rrhhs/views/edit-rrhh.client.view.html'
		});
	}
]);
'use strict';

// Rrhhs controller
angular.module('rrhhs').controller('RrhhsController', ['$scope', '$stateParams', '$location', 'Authentication', 'Rrhhs', 'Areas', 'Puestos', '$rootScope', '$http', '$compile', '$mdBottomSheet', 'ShowAreaInfo', 'Modal', '$mdDialog',
	function($scope, $stateParams, $location, Authentication, Rrhhs, Areas, Puestos, $rootScope, $http, $compile, $mdBottomSheet, ShowAreaInfo, Modal, $mdDialog) {
		$scope.authentication = Authentication;


		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
		});

		// Create new Rrhh
		$scope.create = function() {
			// Create new Rrhh object
			var rrhh = new Rrhhs ({
				name: this.name
			});

			// Redirect after save
			rrhh.$save(function(response) {
				$location.path('rrhhs/' + response._id);

				// Clear form fields
				$scope.name = '';
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Remove existing Rrhh
		$scope.remove = function( rrhh ) {
			if ( rrhh ) { rrhh.$remove();

				for (var i in $scope.rrhhs ) {
					if ($scope.rrhhs [i] === rrhh ) {
						$scope.rrhhs.splice(i, 1);
					}
				}
			} else {
				$scope.rrhh.$remove(function() {
					$location.path('rrhhs');
				});
			}
		};

		// Update existing Rrhh
		$scope.update = function() {
			var rrhh = $scope.rrhh ;

			rrhh.$update(function() {
				$location.path('rrhhs/' + rrhh._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		$scope.bindOrganigrama = function(id, elemento){
			// console.log(id, 'id');
			// console.log(elemento, 'elemento');
			var el = angular.element(document.getElementById(id));
			var newElem = angular.element(elemento);
  			el.append(newElem);
  			$compile(newElem)($scope);
		};
		// Find a list of Areas
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) {
				Areas.query({ e: $scope.SEARCH.enterprise }, function(res1) {
						var nivelMax = 0;
						var nivel = 0;
						$scope.organigrama = [];
						$rootScope.areas = res1;
						for(var i=0; i < $rootScope.areas.length; i++){
							if($rootScope.areas[i].nivel===0){
								$scope.organigrama[0] = $rootScope.areas[i];
							}
							if(parseInt($rootScope.areas[i].nivel)>nivelMax){
								nivelMax = $rootScope.areas[i].nivel;
							}
						}
						//armo la matriz de las areas segun niveles
						for(i=1; i<=nivelMax; i++){
							$scope.organigrama[i] = [];
							for(var j=0; j < $rootScope.areas.length; j++){
								if($rootScope.areas[j].nivel===i){
						            $scope.organigrama[i].push($rootScope.areas[j]);
								}
							}
						};
						// recorro estructura de niveles
						for(i=1; i<=nivelMax; i++){
							//recorro items del nivel i
							// console.log(i, 'nivel');
							for(var element in $scope.organigrama[i]){
								//si el area no fue eliminada
								if($scope.organigrama[i][element].deleted==false){
								//por cada item me fijo donde esta su padre
									if(i==1){
										var id = 'organigrama';
										if(document.getElementById(id).children.length==1){
											var elemento = '<ul id="nivel0"><li id="nivel'+ i + element +'" ><a ng-click="showAdvancedArea($event)" id="' + $scope.organigrama[i][element]._id + '">' + $scope.organigrama[i][element].name + '</a></li></ul>';
											$scope.bindOrganigrama(id, elemento);
										} else {
											var elemento = '<li id="nivel'+ i + element +'" ><a ng-click="showAdvancedArea($event)" id="' + $scope.organigrama[i][element]._id + '">' + $scope.organigrama[i][element].name + '</a></li>';
											$scope.bindOrganigrama('nivel0', elemento);
										}
									}
									else{
										for(var value in $scope.organigrama[i-1]){
											if($scope.organigrama[i][element].parent._id == $scope.organigrama[i-1][value]._id){
												// console.log('soy tu padre', $scope.organigrama[i][element].name);
												// console.log('soy tu padre', $scope.organigrama[i][element].deleted);
												var str1 = 'nivel';
												var str2 = i-1;
												var str3 =	value;
												var res = str1.concat(str2,str3);
												// console.log(document.getElementById(res).children.length, 'length');
												// console.log(res, 'id');
												if(document.getElementById(res).children.length==1){
													var elemento = '<ul id="itemsNivel'+res+'"><li id="nivel'+ i + element +'" ><a href="#" ng-click="showAdvancedArea($event)" id="' + $scope.organigrama[i][element]._id + '">' + $scope.organigrama[i][element].name + '</a></li></ul>';
													$scope.bindOrganigrama(res, elemento);
												} else {
													console.log('!!!!!', $scope.organigrama[i][element]);
													var elemento = '<li id="nivel'+ i + element +'" ><a href="#" ng-click="showAdvancedArea($event)" id="' + $scope.organigrama[i][element]._id + '">' + $scope.organigrama[i][element].name + '</a></li>';
													var id = 'itemsNivel' + res;
													$scope.bindOrganigrama(id, elemento);
												}
											}
										}
									}
								} //end if si el area no fue eliminada
							};
						};
				});
			}
		};

		// $scope.clickArea = function($event, value) {
		// 	var areaActive = $event.toElement.id;
		// 	console.log('value:', areaActive);
		// 	ShowAreaInfo.setArea(areaActive);
		// 	var template = 'modules/rrhhs/views/show-info.client.view.html';
		//     if (template === '') {
		//     	console.log('No existe un estado configurado para esta acción!');
		//     	// console.log($rootScope.estadoActual);
		//     } else {
		//     	//console.log('estadoactual: ', $rootScope.estadoActual);
		//     	$mdBottomSheet.show({
		// 	      templateUrl: template,
		// 	      controller: 'AreaInfoCtrl',
		// 	      targetEvent: $event
		// 	    }).then(function(clickedItem) {
		// 	    	//$mdBottomSheet.hide();
		// 	    	console.log('por aqui ando');
		// 	    });
		//     };
	 //  	};


		// Find existing Rrhh
		$scope.findOne = function() {
			$scope.rrhh = Rrhhs.get({
				rrhhId: $stateParams.rrhhId
			});
		};

		$scope.showAdvancedArea = function(ev) {
			var areaActive = ev.toElement.id;
			// console.log('value:', areaActive);
			ShowAreaInfo.setArea(areaActive);
			$mdDialog.show({
		      controller: AreaModalController,
		      templateUrl: '/modules/rrhhs/views/view-area.client.view.html',
		      parent: angular.element(document.body),
		      targetEvent: ev,
		      clickOutsideToClose: false
		    })
		    .then(function(answer) {
		      $scope.status = 'You said the information was "' + answer + '".';
		    }, function() {
		      $scope.status = 'You cancelled the dialog.';
		    });
		};

		function AreaModalController($scope, $mdDialog, ShowAreaInfo) {
			// console.log('area modal');
			var areaActive = ShowAreaInfo.getArea();
			// console.log(areaActive);
			$http({ method: 'GET',
	            url: ('/api/findAreaById'),
	            params: { areaId: areaActive }
	        })
			.then(function(response) {
	            $scope.areaActive = response.data;
	            // console.log($scope.areaActive);
	            $scope.parent = $scope.areaActive.parent;
	            $http({ method: 'GET',
			        url: ('/api/puestoByAreaId'),
			        params: { areaId: $scope.areaActive._id }
			    })
				.then(function(res) {
					if(res.data[0] == null){
						$scope.puestosActive = null;
					} else {
						$scope.puestosActive = res.data;
						console.log($scope.puestosActive);
					}
					// console.log('puestos', $scope.puestosActive);
			    }, function(response) {
			        console.log('error');
			    });
	        }, function(response) {
	            console.log('error');
	        });
			$scope.hide = function() {
			    $mdDialog.hide();
			  };
			$scope.cancel = function() {
			    $mdDialog.cancel();
			  };
			$scope.answer = function(answer) {
			    $mdDialog.hide(answer);
			  };
		};
	}
]);
// .controller('AreaInfoCtrl', ['$scope', '$stateParams', '$location', 'Authentication', 'Rrhhs', 'Areas', 'Puestos', 'ShowAreaInfo', '$http',
// 	function($scope, $stateParams, $location, Authentication, Rrhhs, Areas, Puestos, ShowAreaInfo, $http) {
// 		var areaActive = ShowAreaInfo.getArea();
// 		$http({ method: 'GET',
// 	            url: ('/api/findAreaById'),
// 	            params: { areaId: areaActive }
// 	        })
// 			.then(function(response) {
// 	            $scope.areaActive = response.data;
// 	            console.log($scope.areaActive);
// 	            $scope.parent = $scope.areaActive.parent;
// 	            $http({ method: 'GET',
// 			        url: ('/api/puestoByAreaId'),
// 			        params: { areaId: $scope.areaActive._id }
// 			    })
// 				.then(function(res) {
// 					if(res.data[0] == null){
// 						$scope.puestosActive = null;
// 					} else {
// 						$scope.puestosActive = res.data;
// 					}
// 					console.log('puestos', $scope.puestosActive);
// 			    }, function(response) {
// 			        console.log('error');
// 			    });
// 	        }, function(response) {
// 	            console.log('error');
// 	        });
// 	}
// ]);

'use strict';

//Rrhhs service used to communicate Rrhhs REST endpoints
angular.module('rrhhs').factory('Rrhhs', ['$resource',
	function($resource) {
		return $resource('api/rrhhs/:rrhhId', { rrhhId: '@_id'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
])
.factory('ShowAreaInfo', function() {    
	var actualArea;            
	return{
	    getArea: function(){           
	      return actualArea;
	    },
	    setArea: function(id){           
	      actualArea = id;
	    },
	}
});


'use strict';

//Setting up route
angular.module('servicios').config(['$stateProvider',
  function($stateProvider) {
    // Comprobantes state routing
    $stateProvider.
    state('servicios', {
      abstract: true,
      url: '/servicios',
      template: '<ui-view/>'
    }).
    state('servicios.create', {
      url: '/create',
      templateUrl: 'modules/servicios/client/views/create-servicio.client.view.html'
    })
  }
]);
(function () {
  'use strict';

  angular
    .module('servicios')
    .controller('ServiciosListController', ServiciosListController);

  ServiciosListController.$inject = ['ServiciosService'];

  function ServiciosListController(ServiciosService) {
    var vm = this;

    vm.servicios = ServiciosService.query();
  }
}());

(function () {
  'use strict';

  // Servicios controller
  angular
    .module('servicios')
    .controller('ServiciosController', ServiciosController);

  ServiciosController.$inject = ['$scope', '$state', '$window', 'Authentication', 'servicioResolve'];

  function ServiciosController ($scope, $state, $window, Authentication, servicio) {
    var vm = this;

    vm.authentication = Authentication;
    vm.servicio = servicio;
    vm.error = null;
    vm.form = {};
    vm.remove = remove;
    vm.save = save;

    // Remove existing Servicio
    function remove() {
      if ($window.confirm('Are you sure you want to delete?')) {
        vm.servicio.$remove($state.go('servicios.list'));
      }
    }

    // Save Servicio
    function save(isValid) {
      if (!isValid) {
        $scope.$broadcast('show-errors-check-validity', 'vm.form.servicioForm');
        return false;
      }

      // TODO: move create/update logic to service
      if (vm.servicio._id) {
        vm.servicio.$update(successCallback, errorCallback);
      } else {
        vm.servicio.$save(successCallback, errorCallback);
      }

      function successCallback(res) {
        $state.go('servicios.view', {
          servicioId: res._id
        });
      }

      function errorCallback(res) {
        vm.error = res.data.message;
      }
    }
  }
}());


// Servicios service used to communicate Servicios REST endpoints
(function () {
  'use strict';

  angular
    .module('servicios')
    .factory('ServiciosService', ServiciosService);

  ServiciosService.$inject = ['$resource'];

  function ServiciosService($resource) {
    return $resource('api/servicios/:servicioId', {
      servicioId: '@_id', e: '@enterprise'
    }, {
      update: {
        method: 'PUT'
      }
    });
  }
}());
angular.module('servicios').factory('CustomServicios', ['$http',
  function($http) {
    return {
      getCentroByServicios: function(e) {
        return $http({
          method: "get",
          url: "api/servicios/getCentroByServicios",
          params:{
            e:e
          }
        });
      },
    }
  }
]);
'use strict';

// Configuring the Stocks module
angular.module('stocks').run(['Menus',
	function(Menus) {
		// Add the Stocks dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Stocks',
			state: 'stocks',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'stocks', {
			title: 'List Stocks',
			state: 'stocks.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'stocks', {
			title: 'Create Stock',
			state: 'stocks.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('stocks').config(['$stateProvider',
	function($stateProvider) {
		// Stocks state routing
		$stateProvider.
		state('stocks', {
			abstract: true,
			url: '/stocks',
			template: '<ui-view/>'
		}).
		state('stocks.list', {
			url: '',
			templateUrl: 'modules/stocks/views/list-stocks.client.view.html'
		}).
		state('stocks.create', {
			url: '/create',
			templateUrl: 'modules/stocks/views/create-stock.client.view.html'
		}).
		state('stocks.view', {
			url: '/:stockId',
			templateUrl: 'modules/stocks/views/view-stock.client.view.html'
		}).
		state('stocks.edit', {
			url: '/:stockId/edit',
			templateUrl: 'modules/stocks/views/edit-stock.client.view.html'
		});
	}
]);
'use strict';

// Stocks controller
angular.module('stocks').controller('StocksController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Stocks', 'Products', 'Enterprises', '$mdBottomSheet', '$mdDialog', 'StockFactory', '$filter', '$state', 'Providers',
    function ($scope, $rootScope, $stateParams, $location, Authentication, Stocks, Products, Enterprises, $mdBottomSheet, $mdDialog, StockFactory, $filter, $state, Providers) {
        $scope.authentication = Authentication;

        // watch for SEARCH to update value
        $scope.$watch('authentication', function () {
            $scope.SEARCH = {enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null};
            $scope.find();
            $scope.findProveedores();
        });

        $scope.tipoProducto = $stateParams.tipo;
        $rootScope.productosAPedir = [];

        $scope.filtroActivo = false;

        $scope.$watch('tipoProducto', function () {
            if ($scope.tipoProducto === 'p') {
                $scope.daFilter = {esProducto: true};
                $scope.title = 'Stock de  productos';
                $scope.esProducto = true;
                $scope.esMateriaPrima = false;
                $scope.esInsumo = false;
            } else if ($scope.tipoProducto === 'm') {
                $scope.daFilter = {esMateriaPrima: true, esInsumo: true};
                $scope.title = 'Stock de materia prima e insumos';
                $scope.esMateriaPrima = true;
                $scope.esProducto = false;
                $scope.esInsumo = false;
            } else if ($scope.tipoProducto === 'i') {
                $scope.daFilter = {esInsumo: true};
                $scope.title = 'Stock de insumos';
                $scope.esMateriaPrima = false;
                $scope.esProducto = false;
                $scope.esInsumo = true;
            } else {
                // do nothing... bad request
            }
        });

        $scope.filtrarProveedores = function (proveedor) {
            $scope.nombreProveedorFiltro = proveedor.name;
            $scope.idProveedorFiltro = proveedor._id;
            $rootScope.nuevoProveedor = proveedor;
            $scope.filtroActivo = true;
        };

        $scope.eliminarFiltro = function () {
            $scope.nombreProveedorFiltro = undefined;
            $scope.filtroActivo = false;
            $scope.setStatus('');
        };

        // Create new Stock
        $scope.create = function (action, reference) {
            console.log(action, 'action');
            if (action == undefined || action === null) {
                return console.log('No se especificó una acción al intentar modificar stock');
            }
            // Create new Stock object
            var stock = new Stocks({
                action: action,
                amount: this.stockToAdd,
                product: $scope.item,
                enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
                reference: reference || undefined,
                observations: this.observations
            });

            // Redirect after save
            stock.$save(function (response) {
                //$location.path('stocks/' + response._id);

                // Clear form fields
                $scope.closeDialog();

                //$mdBottomSheet.hide();
            }, function (errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        // Remove existing Stock
        $scope.remove = function (stock) {
            if (stock) {
                stock.$remove();

                for (var i in $scope.stocks) {
                    if ($scope.stocks [i] === stock) {
                        $scope.stocks.splice(i, 1);
                    }
                }
            } else {
                $scope.stock.$remove(function () {
                    $location.path('stocks');
                });
            }
        };

        // Update existing Stock
        $scope.update = function () {
            var stock = $scope.stock;

            stock.$update(function () {
                $location.path('stocks');
            }, function (errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        // Find a list of Products
        $scope.find = function () {
            if ($scope.SEARCH !== undefined) {
                // $rootScope.products = Products.query({ e: $scope.SEARCH.enterprise }, function(data){
                // 	$scope.greenItems = $filter('filter')($rootScope.products, {
                // 		esProducto: ($scope.daFilter.esProducto === true),
                // 		esMateriaPrima: ($scope.daFilter.esMateriaPrima === true),
                // 		esInsumo: ($scope.daFilter.esInsumo === true),
                // 		stockState: {
                // 			color: 'green'
                // 		}
                // 	});
                // 	$scope.yellowItems = $filter('filter')($rootScope.products, {
                // 		esProducto: ($scope.daFilter.esProducto === true),
                // 		esMateriaPrima: ($scope.daFilter.esMateriaPrima === true),
                // 		esInsumo: ($scope.daFilter.esInsumo === true),
                // 		stockState: {
                // 			color: 'yellow'
                // 		}
                // 	});
                // 	$scope.redItems = $filter('filter')($rootScope.products, {
                // 		esProducto: ($scope.daFilter.esProducto === true),
                // 		esMateriaPrima: ($scope.daFilter.esMateriaPrima === true),
                // 		esInsumo: ($scope.daFilter.esInsumo === true),
                // 		stockState: {
                // 			color: 'red'
                // 		}
                // 	});
                // });

                Products.query({e: $scope.SEARCH.enterprise}, function (data) {
                    $scope.greenItems = $filter('filter')(data, function (item) {
                        switch ($scope.tipoProducto) {
                            //console.log('obteniendo data:', $scope.tipoProducto);
                            case 'p':
                                return (item.esProducto === true) && (item.stockState.color === 'green') && (item.deleted === false);
                                break;

                            case 'm':
                                return (item.esMateriaPrima === true || item.esInsumo === true) && (item.stockState.color === 'green') && (item.deleted === false);
                                break;
                            default:

                        }
                    });
                    $scope.yellowItems = $filter('filter')(data, function (item) {
                        switch ($scope.tipoProducto) {
                            //console.log('obteniendo data:', $scope.tipoProducto);
                            case 'p':
                                return (item.esProducto === true) && (item.stockState.color === 'yellow') && (item.deleted === false);
                                break;

                            case 'm':
                                return (item.esMateriaPrima === true || item.esInsumo === true) && (item.stockState.color === 'yellow') && (item.deleted === false);
                                break;
                            default:

                        }
                    });
                    $scope.redItems = $filter('filter')(data, function (item) {
                        switch ($scope.tipoProducto) {
                            //console.log('obteniendo data:', $scope.tipoProducto);
                            case 'p':
                                return (item.esProducto === true) && (item.stockState.color === 'red') && (item.deleted === false);
                                break;

                            case 'm':
                                return (item.esMateriaPrima === true || item.esInsumo === true) && (item.stockState.color === 'red') && (item.deleted === false);
                                break;
                            default:

                        }
                    });

                    $rootScope.products = $filter('filter')(data, function (item) {
                        switch ($scope.tipoProducto) {
                            //console.log('obteniendo data:', $scope.tipoProducto);
                            case 'p':
                                return item.esProducto === true;
                                break;

                            case 'm':
                                return item.esMateriaPrima === true || item.esInsumo === true;
                                break;
                            default:

                        }
                    });
                });

            }

        };

        $scope.$watch('greenItems', function () {
            if ($scope.greenItems !== undefined) {
                //console.log('green: ', $scope.greenItems.length)
            }

        });

        $scope.$watch('redItems', function () {
            if ($scope.redItems !== undefined) {
                //console.log('red: ', $scope.redItems.length)
            }

        });

        $scope.$watch('yellowItems', function () {
            if ($scope.yellowItems !== undefined) {
                //console.log('yellow: ', $scope.yellowItems.length)
            }

        });

        $scope.cambiar = function (producto) {
            // $location.path('pedidos/create?tipo=compra');
            $rootScope.nuevoProducto = producto;
            console.log($rootScope.nuevoProducto, 'nuevo producto');
            $state.go('home.createPedido', {"tipo": "compra"});
        };

        $scope.cambioCheckbox = function (item) {
            var product = angular.copy(item);
            if (item.checkbox == true) {
                var cant = 1;
                delete product["checkbox"];
                if (product.idealStock !== undefined) {
                    if (product.idealStock > product.unitsInStock) {
                        cant = product.idealStock - product.unitsInStock;
                    }
                }
                var tot = cant * product.costPerUnit;
                var p = {product: product, cantidad: cant, descuento: 0, total: tot, subtotal: tot, observaciones: ''};
                $rootScope.productosAPedir.push(p);
                $rootScope.providerStock = product.provider;
            } else {
                for (var i = $rootScope.productosAPedir.length - 1; i >= 0; i--) {
                    if ($rootScope.productosAPedir[i].product._id == item._id) {
                        $rootScope.productosAPedir.splice(i, 1);
                    }
                }
            }
            // console.log($rootScope.productosAPedir);
            // console.log($rootScope.providerStock);
        };

        $scope.verProd = function (item) {
            // console.log('id', item._id);
            $location.path('productos/view/' + item._id).search({back: 'home.stock', tipo: $stateParams.tipo});
        };

        $scope.setStatus = function (s) {
            if (s !== '') {
                //console.log('cambio a ', s);
                $scope.status = {stockState: {color: s}};
            } else {
                //console.log('filtro eliminado ');
                $scope.status = undefined;
            }

        };

        // Find existing Stock
        $scope.findOne = function () {
            $scope.stock = Stocks.get({
                stockId: $stateParams.stockId
            });
        };

        $scope.findProveedores = function () {
            if ($scope.SEARCH !== undefined) {
                $scope.proveedores = Providers.query({e: $scope.SEARCH.enterprise});
            }
        };

        $scope.showDialog = showDialog;


        function showDialog($event, item, action) {
            var parentEl = angular.element(document.body);
            var template = '';
            switch (action) {
                case 'agregar':
                    template = 'modules/stocks/views/add-stock.client.view.html';
                    break;

                case 'suprimir':
                    template = 'modules/stocks/views/remove-stock.client.view.html';
                    break;

                case 'pedido':
                    template = 'modules/pedidos/views/create-pedido.client.view.html';
                    break;

                case 'pedido recibido':
                    template = 'modules/stocks/views/received-stock.client.view.html';
                    break;

                default:
                    template = 'modules/stocks/views/add-stock.client.view.html'
            }

            $mdDialog.show({
                parent: parentEl,
                targetEvent: $event,
                templateUrl: template,
                locals: {
                    item: item,
                    SEARCH: $scope.SEARCH,
                    action: action
                },
                controller: DialogController
            })
                .then(function (answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                    $scope.find();
                }, function () {
                    //$scope.alert = 'You cancelled the dialog.';
                });
        } //end showDialod


        function DialogController($scope, $mdDialog, item, SEARCH, action, Stocks, StockFactory) {

            $scope.botonApagado = false;

            $scope.item = item;
            $scope.SEARCH = SEARCH;
            $scope.errorStock = undefined;
            $scope.create = function (action, $event, reference) {
                // console.log(this.stockToAdd);
                if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                    if ((this.stockToAdd != undefined) && (this.stockToAdd != null) && (this.stockToAdd != '')) {
                        if (action == undefined || action === null) {
                            return console.log('No se especificó una acción al intentar modificar stock');
                        }
                        $scope.botonApagado = true;
                        // Create new Stock object
                        var stock = new Stocks({
                            action: action,
                            amount: this.stockToAdd,
                            product: $scope.item._id,
                            enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
                            reference: reference || undefined,
                            observations: this.observations
                        });

                        // console.log(stock, 'stock');
                        // Redirect after save
                        stock.$save(function (response) {
                            //$location.path('stocks/' + response._id);

                            // Clear form fields
                            $scope.closeDialog();

                            //$mdBottomSheet.hide();
                        }, function (errorResponse) {
                            $scope.error = errorResponse.data.message;
                        });
                    }
                    else {
                        if (action == 'agregar') {
                            $scope.errorStock = 'Debe indicar el stock a agregar';
                        }
                        else {
                            $scope.errorStock = 'Debe indicar el stock a suprimir';
                        }
                    }
                }
            };

            $scope.registerOrder = function (order) {
                if (order == undefined || order === null) {
                    return console.log('No se especificó una acción al intentar modificar stock');
                }
                // Create new Stock object
                var stock = new Stocks({
                    action: 'pedido recibido',
                    amount: order.amount,
                    product: $scope.item,
                    enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
                    received: true,
                    reference: order._id || undefined,
                    observations: 'Pedido con id ' + order._id + 'recibido!'
                });

                // Redirect after save
                stock.$save(function (response) {
                    //$location.path('stocks/' + response._id);

                    // Clear form fields
                    $scope.closeDialog();

                    //$mdBottomSheet.hide();
                }, function (errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            };

            // Find a list of Stock
            $scope.findStock = function (product) {
                if ($scope.SEARCH !== undefined) {
                    StockFactory.getStockOrdersForProduct(product, $scope.SEARCH.enterprise)
                        .success(function (data) {
                            // OK
                            $scope.stocks = data;
                        })
                        .error(function (error) {
                            // FUCK!
                            console.error('Fuck!!! -> ', error);
                        });
                    console.log('sock: ', $scope.stocks)
                }
            };

            $scope.action = action;

            $scope.closeDialog = function () {
                $mdDialog.hide();
            };

            $scope.add = function (value1, value2) {
                //console.log('add fired!' +  $scope.newValue);
                $scope.newValue = value1 + value2;
                $scope.errorStock = undefined;
            };

            $scope.sup = function (value1, value2) {
                //console.log('sup fired!');
                $scope.newValue = value1 - value2;
                $scope.errorStock = undefined;
            };
        }
    }
]);

'use strict';

angular.module('stocks').factory('StockFactory', [ '$http',
	function($http) {
		// Stock factory service logic
		// ...

		// Public API
		return {
			getStockOrdersForProduct: function (productID, enterpriseID) {
				console.log('productID: ' + productID + ' enterpriseID: ' + enterpriseID );
		         if(productID && enterpriseID){
		        	return $http({
			            url: '/api/stocks/orders/' + productID,
			            method: 'GET',
			            params: {e: enterpriseID},
			            headers: {},
			            data: {}
			        }).success(function(data){
			        	//OK
			            }
			        ).error(function(data){
						// FUCK!
			            });
		        } else {
		            return [];
		        }
	     	}
		};
	}
]);
'use strict';

//Stocks service used to communicate Stocks REST endpoints
angular.module('stocks').factory('Stocks', ['$resource',
	function($resource) {
		return $resource('api/stocks/:stockId', { stockId: '@_id'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Subs module
angular.module('subs').run(['Menus',
	function(Menus) {
		// Add the Subs dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Subs',
			state: 'subs',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'subs', {
			title: 'List Subs',
			state: 'subs.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'subs', {
			title: 'Create Sub',
			state: 'subs.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('subs').config(['$stateProvider',
	function($stateProvider) {
		// Subs state routing
		$stateProvider.
		state('subs', {
			abstract: true,
			url: '/subs',
			template: '<ui-view/>'
		}).
		state('subs.list', {
			url: '',
			templateUrl: 'modules/subs/views/list-subs.client.view.html'
		}).
		state('subs.create', {
			url: '/create',
			templateUrl: 'modules/subs/views/create-sub.client.view.html'
		}).
		state('subs.view', {
			url: '/:subId',
			templateUrl: 'modules/subs/views/view-sub.client.view.html'
		}).
		state('subs.edit', {
			url: '/:subId/edit',
			templateUrl: 'modules/subs/views/edit-sub.client.view.html'
		});
	}
]);
'use strict';

// Subs controller
angular.module('subs').controller('SubsController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Subs', 'Enterprises', '$mdBottomSheet', '$mdDialog', '$state',
	function($scope, $rootScope, $stateParams, $location, Authentication, Subs, Enterprises, $mdBottomSheet, $mdDialog, $state) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		// Create new Sub
		$scope.create = function() {
			// Create new Sub object
			if (this.name !== undefined){
				var sub = new Subs ({
					name: this.name,
					description: this.description ? this.description : undefined,
					goals: this.goals ? this.goals : undefined,
					enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
				});
				// Redirect after save
				sub.$save(function(response) {
					// $location.path('subs/' + response._id);
					if(response._id) {
						// agregar sub al array

						sub._id = response._id;
						$rootScope.subs.unshift(sub);

					}			
					// Clear form fields
					$scope.name = '';
					$scope.description = '';

					$mdBottomSheet.hide();
				}, function(errorResponse) {
					$scope.error = errorResponse.data.message;
				});
			}
			else {
				$scope.errorName = 'Indique el nombre para la nueva UEN'
			}		
		};

		// Update existing Sub
		$scope.update = function() {
			var sub = $scope.sub ;
			if (this.enterprise !== undefined) { sub.enterprise = this.enterprise._id } else { sub.enterprise = sub.enterprise._id }; 

			sub.$update(function() {
				$location.path('UENs');
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Subs
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.subs = Subs.query({ e: $scope.SEARCH.enterprise }); };
			
		};

		// Find a list of Enterprises
		$scope.findEnterprises = function() {
			if ($scope.SEARCH !== undefined) { 
				$scope.enterprises = Enterprises.query(); 
			}
		};

		// Find existing Sub
		$scope.findOne = function() {
			$scope.sub = Subs.get({ 
				subId: $stateParams.subId
			});
		};
		$scope.showBottomSheet = function($event, item, model, param) {
			var template = '/modules/core/views/menu-opciones.client.view.html';
			$rootScope.currentItem = item;
			$rootScope.currentModel = model;
			$rootScope.currentParam = param;
	    	//console.log('estadoactual: ', $rootScope.estadoActual);
	    	$mdBottomSheet.show({
	    	  controller: DialogController,
		      templateUrl: template,
		      // controller: 'ListBottomSheetCtrl',
		      targetEvent: $event,
		      resolve: {
		         item: function () {
		           return item;
		         }
		       }

		    }).then(function(clickedItem) {
		    	//$mdBottomSheet.hide();
		    });

	  	};

	  	function DialogController($scope, $mdDialog, item, Areas) {

	  		$scope.item = item;

	  		$scope.goto = function (state, params) {
				if (state !== undefined) {
						$state.go(state, params);
						$mdBottomSheet.hide();
				}
			}

			//abre modal para eliminar un proveedor
			$scope.showConfirm = function(ev,item) {
				var confirm = $mdDialog.confirm()
		          .title('Eliminar UEN')
		          .content('¿Está seguro que desea eliminar esta UEN?')
		          .ariaLabel('Lucky day')
		          .ok('Eliminar')
		          .cancel('Cancelar')
		          .targetEvent(ev);
			    $mdDialog.show(confirm).then(function() {
			      $scope.remove(item);
			    }, function() {
			      console.log('cancelaste borrar');
			    });
			};
			// Remove existing Sub
			$scope.remove = function( sub ) {
				if ( sub ) { sub.$remove();

					for (var i in $scope.subs ) {
						if ($scope.subs [i] === sub ) {
							$scope.subs.splice(i, 1);
						}
					}
				} else {
					$scope.sub.$remove(function() {
						$location.path('subs');
					});
				}
				$mdBottomSheet.hide();
			};
		};
	}
]);
'use strict';

//Subs service used to communicate Subs REST endpoints
angular.module('subs').factory('Subs', ['$resource',
	function($resource) {
		return $resource('api/subs/:subId', { subId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Comprobantes module
angular.module('sucursales').run(['Menus',
	function(Menus) {
		// Add the Comprobantes dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Sucursales',
			state: 'sucursales',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'sucursales', {
			title: 'List Sucursales',
			state: 'sucursales.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'sucursales', {
			title: 'Create Sucursal',
			state: 'sucursales.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('sucursales').config(['$stateProvider',
	function($stateProvider) {
		// Comprobantes state routing
		$stateProvider.
		state('sucursales', {
			abstract: true,
			url: '/sucursales',
			template: '<ui-view/>'
		}).
		state('sucursales.list', {
			url: '',
			templateUrl: 'modules/sucursales/views/list-sucursales.client.view.html'
		}).
		state('sucursales.create', {
			url: '/create',
			templateUrl: 'modules/sucursales/views/create-sucursal.client.view.html'
		}).
		state('sucursales.view', {
			url: '/:sucursalId',
			templateUrl: 'modules/sucursales/views/view-sucursal.client.view.html'
		}).
		state('sucursales.edit', {
			url: '/:sucursalId/edit',
			templateUrl: 'modules/sucursales/views/edit-sucursal.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('sucursales').controller('SucursalesCreateController', ['user', 'sucursal', 'enterprises', '$state', 'sucursales',
	function(user, sucursal, enterprises, $state, sucursales) {

		// asignacion de modelos
		this.user = user;
		this.sucursal = sucursal;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.create = create;

		// definicion de funciones
		// Create new sucursal
		function create () {
			// Create new sucursal object
			var sucursal = new sucursales ({
				name: this.name,
				descripcion: this.descripcion ? this.descripcion : undefined,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id
			});

			// Redirect after save
			sucursal.$save(function(response) {
				if(response._id) {
					// agregar sub al array
					$state.go('home.sucursales');

				}
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};

	}
]);

'use strict';

// Comprobantes controller
angular.module('sucursales').controller('SucursalesEditController', ['user', 'sucursal', 'enterprises', '$location',
	function(user, sucursal, enterprises, $location) {

		// asignacion de modelos
		this.user = user;
		this.sucursal = sucursal;
		this.enterprises = enterprises;
		this.modosFacturacion = modosFacturacion;

		// asignacion de funciones
		this.update = update;

		// definicion de funciones
		// Update existing Comprobante
		function update () {
			// console.log(this.comprobante.enterprise, 'ent');
			// console.log(this.comprobante, 'comp');
			var sucursal = this.sucursal ;

			if (this.enterprise !== undefined) { sucursal.enterprise = this.enterprise._id } else { sucursal.enterprise = sucursal.enterprise._id };
			if (this.modoFacturacion !== undefined) { sucursal.modoFacturacion = this.modoFacturacion } else { sucursal.modoFacturacion = sucursal.modoFacturacion };

			// comprobante.$update(function() {
			// 	$location.path('comprobantes/view/' + comprobante._id);
			// }, function(errorResponse) {
			// 	this.error = errorResponse.data.message;
			// });
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('sucursales').controller('SucursalesListController', ['$location', 'user', 'sucursales', 'enterprises', '$mdDialog', 'cajas', 'ServiceNavigation',
    function($location, user, sucursales, enterprises, $mdDialog, cajas, ServiceNavigation) {

        // asignacion de modelos
        this.user = user;
        this.sucursales = sucursales;
        this.enterprises = enterprises;
        this.sucuraleId = undefined;

        // asignacion de funciones
        this.showConfirm = showConfirm;
        this.editingCaja = editingCaja;
        this.editSucursal = editSucursal;
        this.findUsuarios = findUsuarios;

        this.findUsuarios(cajas);

        // definicion de funciones
        function findUsuarios(cajas) {
            if ((this.user.roles[0] !== 'admin') && (this.user.roles[0] !== 'groso')) {
                this.sucuraleId = "";
                cajas.$promise.then(angular.bind(this, function(data) {
                    for (var i in data) {
                        if (!data[i].deleted && data[i].puestos !== undefined) {
                            if (data[i].puestos.length !== 0) {
                                console.log(data[i].puestos);
                                for (var j in data[i].puestos) {
                                    if (data[i].puestos[j]._id === user.puesto) {
                                        this.sucuraleId = data[i].sucursal;
                                    }
                                }
                            }
                        }
                    }
                }));
            } else {
                this.arrayCajas = cajas;
            }
        };

         //it initializes and gets the current name of inner page in view.
        ServiceNavigation.navInit();
        this.getName = function(name) {           
            ServiceNavigation.addNav({name:name});
        }

        // Remove existing Comprobante
        function showConfirm(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('¿Eliminar la sucursal?')
                .ariaLabel('Lucky day')
                .targetEvent(ev)
                .ok('Aceptar')
                .cancel('Cancelar');
            $mdDialog.show(confirm).then(function() {
                deleteSucursal(item);
            }, function() {
                //cancelo
            });
        };

        function deleteSucursal(item) {
            if (item) {
                item.$remove();

                for (var i in sucursales) {
                    if (sucursales[i] === item) {
                        deleteCajas(sucursales[i].cajas);
                        sucursales.splice(i, 1);
                    }
                }
            } else {
                sucursales.$remove(function() {});
            }
        };

        function deleteCajas(item) {
            for (var i in item) {
                if (item[i]) {

                    for (var i in cajas) {
                        if (cajas[i]._id === item[i]) {
                            cajas.splice(i, 1);
                        }
                    }
                } else {
                    cajas.$remove(function() {

                    });
                }
            }

        };
        //habilito edicion
        function editingCaja(item) {
            this.editing = item;
        };

        //edita nombre de la caja
        function editSucursal(item) {
            this.editing = false;
            item.enterprise = item.enterprise._id;
            for (var i in item.cajas) {
                item.cajas[i] = item.cajas[i]._id;
            };
            item.$update(function() {
                console.log('todo ok');
            }, function(errorResponse) {
                console.log('error');
            });
        };
    }
]);
'use strict';

// Comprobantes controller
angular.module('sucursales').controller('SucursalesViewController', ['user', 'sucursal', '$mdDialog', 'cajas', 'Socket', 'Cajas',
    function(user, sucursal, $mdDialog, cajas, Socket, Cajas) {

        // asignacion de modelos
        this.user = user;
        this.sucursal = sucursal;
        this.cajas = cajas;
        console.log("Tele");

        this.arrayCajas = [];
        var originatorEv;
        this.editing = false;

        this.selectedMode = 'md-scale';
        this.selectedDirection = 'up';

        // asignacion de funciones

        this.showDialog = showDialog;
        this.showDialogTransferencia = showDialogTransferencia;
        this.showDialogArqueo = showDialogArqueo;
        this.findUsuarios = findUsuarios;
        this.openMenu = openMenu;
        this.showConfirm = showConfirm;
        this.editingCaja = editingCaja;
        this.editCaja = editCaja;
        this.showDialogPuestos = showDialogPuestos;
        this.findFromArray = findFromArray;

        this.findUsuarios(cajas);

        // definicion de funciones

        function findFromArray(array, object) {

            if (!array) return false;
            if (!object) return false;

            var checker = false;

            array.forEach(function(entry) {
                if (entry._id === object._id) checker = true;
            })

            return checker;
        }

        function findUsuarios(cajas) {
            if ((this.user.roles[0] !== 'admin') && (this.user.roles[0] !== 'groso')) {
                cajas.$promise.then(angular.bind(this, function(data) {
                    for (var i in data) {
                        if (data[i].puestos !== undefined) {
                            if (data[i].puestos.length !== 0) {
                                for (var j in data[i].puestos) {
                                    if (data[i].puestos[j]._id === user.puesto) {
                                        this.arrayCajas.push(data[i]);
                                    }
                                }
                            }
                        }
                    }
                }));
            } else {
                this.arrayCajas = cajas;
            }
        };

        function showDialog($event, item) {
            var parentEl = angular.element(document.body);
            $mdDialog.show({
                    parent: parentEl,
                    targetEvent: $event,
                    templateUrl: 'modules/cajas/views/create-caja.client.view.html',
                    locals: {
                        item: item,
                        user: this.user
                    },
                    controller: DialogController
                })
                .then(function(answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                    // $scope.find();
                }, function() {
                    //$scope.alert = 'You cancelled the dialog.';
                });;
        }; //end showDialog

        function showDialogTransferencia($event, item) {
            $mdDialog.show({
                    targetEvent: $event,
                    templateUrl: 'modules/transferencias/views/create-transferencia.client.view.html',
                    locals: {
                        item: item,
                        user: this.user
                    },
                    controller: DialogController
                })
                .then(function(answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                    // $scope.find();
                }, function() {
                    //$scope.alert = 'You cancelled the dialog.';
                });;
        }; //end showDialog

        function showDialogArqueo($event, item) {
            $mdDialog.show({
                    targetEvent: $event,
                    templateUrl: 'modules/arqueos/views/create-arqueo.client.view.html',
                    locals: {
                        item: item,
                        user: this.user
                    },
                    controller: DialogController
                })
                .then(function(answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                    // $scope.find();
                }, function() {
                    //$scope.alert = 'You cancelled the dialog.';
                });;
        }; //end showDialog

        function showDialogPuestos($event, item) {
            $mdDialog.show({
                    targetEvent: $event,
                    templateUrl: 'modules/sucursales/views/add-puesto.client.view.html',
                    locals: {
                        item: item,
                        user: this.user
                    },
                    controller: DialogController
                })
                .then(function(answer) {
                    //$scope.alert = 'You said the information was "' + answer + '".';
                    // $scope.find();
                }, function() {
                    //$scope.alert = 'You cancelled the dialog.';
                });;
        }; //end showDialog

        function openMenu($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        };

        function showConfirm(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('¿Eliminar la caja?')
                .ariaLabel('Lucky day')
                .targetEvent(ev)
                .ok('Aceptar')
                .cancel('Cancelar');
            $mdDialog.show(confirm).then(function() {
                deleteCaja(item);
            }, function() {
                //cancelo
            });
        };

        function deleteCaja(item) {
            if (item) {
                item.$remove();

                for (var i in cajas) {
                    if (cajas[i] === item) {
                        cajas.splice(i, 1);
                    }
                }
            } else {
                cajas.$remove(function() {

                });
            }
        };

        //habilito edicion
        function editingCaja(item) {
            this.editing = item;
        };

        //edita nombre de la caja
        function editCaja(item) {
            this.editing = false;
            item.enterprise = item.enterprise._id;
            for (var i in item.puestos) {
                item.puestos[i] = item.puestos[i]._id;
            };
            item.$update(function() {
                console.log('todo ok');
            }, function(errorResponse) {
                console.log('error');
            });
        };


        // actualizaciones en tiempo real.

        Socket.on('sucursal.update', angular.bind(this, function(message) {
            if (message.enterprise === this.user.enterprise.enterprise) {
                this.cajas = Cajas.query({ e: this.user.enterprise.enterprise })
                    .$promise.then(angular.bind(this, function(data) {
                        //console.log('cajas:', data);
                        this.findUsuarios(data);
                    }));
            }
        }));

        // fin actualizaciones en tiempo real.
        function DialogController($scope, $mdDialog, item, user, Puestos, Cajas, Transferencias, Arqueos, $filter, $location, Socket) {

            $scope.apagarBoton = false; //desahbilita boton de crear para evitar que se presione dos veces

            $scope.$watch('Cajas', function() {
                $scope.findCajas();
                $scope.findCajasTotal();
                $scope.findTransferencias();
                $scope.findArqueos();
            });

            $scope.operaciones = [{
                id: 3,
                name: 'Ajustes'
            }, {
                id: 1,
                name: 'Apertura de Caja'
            }, {
                id: 2,
                name: 'Cierre de Caja'
            }];

            $scope.efectivo = item.efectivo;
            $scope.cheques = item.cheques;
            $scope.credito = item.credito;
            $scope.debito = item.debito;
            $scope.dolares = item.dolares;
            $scope.totalCaja = item.total;
            $scope.efectivoAjuste = 0;
            $scope.chequeAjuste = 0;
            $scope.creditoAjuste = 0;
            $scope.debitoAjuste = 0;
            $scope.dolaresAjuste = 0;

            $scope.mostrar = true;

            $scope.item = item;
            $scope.puestosAgregados = [];

            $scope.montoE = 0;
            $scope.montoC = 0;
            $scope.montoD = 0;
            $scope.montoTD = 0;
            $scope.montoTC = 0;
            $scope.newSaldo = roundToTwo(item.total);

            $scope.errorCaja = undefined;

            $scope.closeDialog = function() {
                $mdDialog.hide();
            };

            $scope.findPuestos = function() {
                $scope.puestos = Puestos.query({ e: user.enterprise._id });
            };

            //esta funcion es para seleccionar la caja destino en la transferencia, y que no aparezca la caja origen
            $scope.findCajas = function() {
                Cajas.query({ e: user.enterprise._id }, function(data) {
                    $scope.cajas = $filter('filter')(data, function(item) {
                        return (item._id !== $scope.item._id);
                    })
                });
            };
            $scope.cajasIDArray = [];
            // function for get caja id array of sucursals
            /*			$scope.findCajaID = function(){
            				console.log("in cajas function");
            				Cajas.query({ e: user.enterprise._id }, function(data){
            					for (var i in data ) {
            						if(data[i].sucursal == $scope.item._id && data[i].deleted == false){
            							$scope.cajasIDArray.push(data[i]._id);
            						}
            					}
            					var sucursal = $scope.item;					
            					sucursal.cajas = $scope.cajasIDArray;
            					sucursal.$update(function() {
            						console.log('sucursal ok');
            					}, function(errorResponse) {
            						console.log('sucursal error');
            					});

            				});

            			};
            */ //devuelve todas la cajas
            $scope.findCajasTotal = function() {
                $scope.cajasTotal = Cajas.query({ e: user.enterprise._id });
            };

            $scope.findTransferencias = function() {
                $scope.transferencias = Transferencias.query({ e: user.enterprise._id });
            };

            $scope.findArqueos = function() {
                $scope.arqueos = Arqueos.query({ e: user.enterprise._id });
            };

            $scope.addEfectivo = function(value) {
                $scope.errorCaja = undefined;
                if ($scope.item.efectivo >= value) {
                    $scope.montoE = value;

                    $scope.newSaldo = roundToTwo($scope.item.total - value - $scope.montoC - $scope.montoTD - $scope.montoTC - $scope.montoD);
                } else {
                    $scope.montoE = $scope.item.efectivo;
                    $scope.errorCaja = 'El monto a transferir no puede superar el monto disponible en la caja';
                }
            };

            $scope.addCheque = function(value) {
                $scope.errorCaja = undefined;
                if ($scope.item.cheques >= value) {
                    $scope.montoC = value;

                    $scope.newSaldo = roundToTwo($scope.item.total - value - $scope.montoE - $scope.montoTD - $scope.montoTC - $scope.montoD);
                } else {
                    $scope.montoC = $scope.item.cheques;
                    $scope.errorCaja = 'El monto a transferir no puede superar el monto disponible en la caja';
                }
            };


            $scope.addTarCre = function(value) {
                $scope.errorCaja = undefined;
                if ($scope.item.credito >= value) {
                    $scope.montoTC = value;

                    $scope.newSaldo = roundToTwo($scope.item.total - value - $scope.montoE - $scope.montoTD - $scope.montoC - $scope.montoD);
                } else {
                    $scope.montoTC = $scope.item.credito;
                    $scope.errorCaja = 'El monto a transferir no puede superar el monto disponible en la caja';
                }
            };
            $scope.addtarDeb = function(value) {
                $scope.errorCaja = undefined;
                if ($scope.item.debito >= value) {
                    $scope.montoTD = value;

                    $scope.newSaldo = roundToTwo($scope.item.total - value - $scope.montoE - $scope.montoTC - $scope.montoC - $scope.montoD);
                } else {
                    $scope.montoTD = $scope.item.debito;
                    $scope.errorCaja = 'El monto a transferir no puede superar el monto disponible en la caja';
                }
            };
            $scope.addDolares = function(value) {
                $scope.errorCaja = undefined;
                if ($scope.item.dolares >= value) {
                    $scope.montoD = value;

                    $scope.newSaldo = roundToTwo($scope.item.total - value - $scope.montoE - $scope.montoTC - $scope.montoC - $scope.montoTD);
                } else {
                    $scope.montoD = item.dolares;
                    $scope.errorCaja = 'El monto a transferir no puede superar el monto disponible en la caja';
                }
            };

            //funcion que rendondea a 2 decimales
            function roundToTwo(num) {
                return +(Math.round(num + "e+2") + "e-2");
            };

            $scope.createCaja = function($event) {

                $scope.apagarBoton = true; //desahbilita boton de crear para evitar que se presione dos veces
                var c = { caja: {} };
                var name = 'Caja '
                var num = $scope.cajasTotal.length + 1;
                var res = name.concat(num);

                var caja = {
                    name: res,
                    descripcion: this.descripcion,
                    puestos: $scope.puestosAgregados,
                    sucursal: $scope.item._id,
                    enterprise: user.enterprise._id
                };

                var sucursal = $scope.item;
                sucursal.enterprise = sucursal.enterprise._id;

                Socket.emit('caja.create', caja);
                $mdDialog.hide();
                Cajas.query({ e: user.enterprise._id }, function(data) {
                    for (var i in data) {
                        if (data[i].sucursal == $scope.item._id && data[i].deleted == false) {
                            $scope.cajasIDArray.push(data[i]._id);
                        }
                    }
                    sucursal.cajas = $scope.cajasIDArray;
                    sucursal.$update(function() {
                        console.log('sucursal ok');
                    }, function(errorResponse) {
                        console.log('sucursal error');
                    });

                });
            };
            //agrega puestos en el create de caja
            $scope.agregarPuesto = function(puesto) {
                var ok = false;
                if ((puesto !== undefined) && (puesto !== null)) {
                    for (var i in $scope.puestosAgregados) {
                        if ($scope.puestosAgregados[i]._id === puesto._id) {
                            var ok = true;
                        }
                    }
                    if (!ok) {
                        $scope.puestosAgregados.push(puesto);
                    }
                }
            };

            //agrega puestos en el edit de caja
            $scope.addPuestoCaja = function(puesto) {

                var ok = false;
                if ((puesto !== undefined) && (puesto !== null)) {
                    for (var i in item.puestos) {
                        if (item.puestos[i]._id === puesto._id) {
                            var ok = true;
                        }
                    }
                    if (!ok) {
                        item.puestos.push(puesto);
                    }
                }
            }

            //borrar puestos elegidos cuando esta creando una caja
            $scope.borrarPuesto = function(item) {
                if (item) {

                    for (var i in $scope.puestosAgregados) {
                        if ($scope.puestosAgregados[i] === item) {
                            $scope.puestosAgregados.splice(i, 1);
                        }
                    }
                } else {
                    console.log('ningun puesto');
                }
            };

            //borra puestos en el editar de cajas
            $scope.suprimirPuesto = function(p) {
                if (p) {

                    for (var i in item.puestos) {
                        if (item.puestos[i]._id === p._id) {
                            item.puestos.splice(i, 1);
                        }
                    }
                } else {
                    console.log('ningun puesto');
                }
            };
            $scope.transType = "";
            //acepta la edicion de agregar/quitar puestos de una caja
            $scope.editPuestosCaja = function(item) {
                item.enterprise = item.enterprise._id;
                for (var i in item.puestos) {
                    item.puestos[i] = item.puestos[i]._id;
                }
                item.$update(function() {
                    console.log('todo ok');
                    $mdDialog.hide();
                }, function(errorResponse) {
                    console.log('error');
                });
            }
            $scope.changeTrans = function() {
                console.log($scope.transType);
                // $scope.montoE = 0;
                // $scope.montoC = 0;
                // $scope.montoD = 0;
                // $scope.montoTC = 0;
                // $scope.montoTD = 0;



            }

            $scope.createTransferencia = function($event, item) {
                if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                    if (($scope.caja !== undefined) && ($scope.caja !== null)) {

                        $scope.apagarBoton = true; //desahbilita boton de crear para evitar que se presione dos veces

                        var newSaldoDestino = $scope.caja.total + $scope.montoE + $scope.montoC + $scope.montoD + $scope.montoTD + $scope.montoTC;

                        var numero = $scope.transferencias.length + 1;

                        var transferencia = {
                            numero: numero,
                            cajaO: item._id,
                            cajaD: $scope.caja._id,
                            montoE: $scope.montoE,
                            montoC: $scope.montoC,
                            montoD: $scope.montoD,
                            montoTD: $scope.montoTD,
                            montoTC: $scope.montoTC,

                            saldo: $scope.newSaldo,
                            saldoDestino: newSaldoDestino,
                            observaciones: $scope.observaciones,
                            enterprise: user.enterprise._id
                        };
                        console.log(transferencia);
                        Socket.emit('transferencia.create', transferencia);
                        $mdDialog.hide();
                    } else {
                        $scope.errorCaja = 'Se debe seleccionar la caja destino'
                    }
                }
            };

            $scope.createArqueo = function($event, item) {
                if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                    if ($scope.operacion !== undefined) {

                        $scope.apagarBoton = true; //desahbilita boton de crear para evitar que se presione dos veces

                        var ajuste = $scope.efectivoAjuste + $scope.chequeAjuste + $scope.creditoAjuste + $scope.debitoAjuste + $scope.dolaresAjuste;

                        var numero = $scope.arqueos.length + 1;

                        var arqueo = {
                            caja: item._id,
                            numero: numero,
                            operacion: $scope.operacion,
                            observaciones: $scope.observaciones,
                            efectivo: $scope.efectivo,
                            cheques: $scope.cheques,
                            debito: $scope.debito,
                            credito: $scope.credito,
                            dolares: $scope.dolares,
                            efectivoAjuste: $scope.efectivoAjuste,
                            chequeAjuste: $scope.chequeAjuste,
                            debitoAjuste: $scope.debitoAjuste,
                            creditoAjuste: $scope.creditoAjuste,
                            dolaresAjuste: $scope.dolaresAjuste,
                            ajuste: ajuste,
                            total: $scope.totalCaja,
                            enterprise: user.enterprise._id
                        };

                        Socket.emit('arqueo.create', arqueo);
                        $mdDialog.hide();
                    } else {
                        $scope.errorOperacion = 'Se debe indicar la operacion'
                    }
                }
            };

            $scope.addAjuste = function(tipo) {
                if (tipo == 'efectivo') {
                    $scope.efectivo = item.efectivo + $scope.efectivoAjuste;
                } else {
                    if (tipo == 'cheque') {
                        $scope.cheques = item.cheques + $scope.chequeAjuste;
                    } else {
                        if (tipo == 'credito') {
                            $scope.credito = item.credito + $scope.creditoAjuste;
                        } else {
                            if (tipo == 'debito') {
                                $scope.debito = item.debito + $scope.debitoAjuste;
                            } else {
                                if (tipo == 'dolares') {
                                    $scope.dolares = item.dolares + $scope.dolaresAjuste;
                                }
                            }
                        }
                    }
                }
                $scope.totalCaja = $scope.efectivo + $scope.cheques + $scope.credito + $scope.debito + $scope.dolares;
            }
        }
    }
]);
'use strict';

// Comprobantes controller
angular.module('sucursales').controller('SucursalesController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Sucursales', '$mdBottomSheet', 'Enterprises', '$mdDialog',
	function($scope, $rootScope, $stateParams, $location, Authentication, Sucursales, $mdBottomSheet, Enterprises, $mdDialog) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		// Create new Comprobante
		$scope.create = function() {
			// Create new Comprobante object
			var sucursal = new Sucursales ({
				name: this.name,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
			});

			// Redirect after save
			sucursal.$save(function(response) {
				if(response._id) {
					// agregar sub al array

					sucursal._id = response._id;
					$rootScope.sucursales.unshift(sucursal);

				}

			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un puesto 
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar tipo de Comprobante')
	          .content('¿Está seguro que desea eliminar este tipo de Comprobante?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Comprobante
		$scope.remove = function( sucursal ) {
			if ( sucursal ) { sucursal.$remove();

				for (var i in $scope.sucursales ) {
					if ($scope.sucursales [i] === sucursal ) {
						$scope.sucursales.splice(i, 1);
					}
				}
			} else {
				$scope.sucursal.$remove(function() {
					$location.path('sucursales');
				});
			}
		};

		// Update existing Comprobante
		$scope.update = function() {
			var sucursal = $scope.sucursal ;

			if (this.enterprise !== undefined) { sucursal.enterprise = this.enterprise._id } else { sucursal.enterprise = sucursal.enterprise._id };

			sucursal.$update(function() {
				$location.path('sucursales/view/' + sucursal._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Comprobantes
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.sucursales = Sucursales.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		// $scope.findEnterprises = function() {
		// 	if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });}			
		// };

		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find existing Comprobante
		$scope.findOne = function() {
			$scope.sucursal = Sucursales.get({ 
				sucursalId: $stateParams.sucursalId
			});
		};
	}
]);
'use strict';

//Comprobantes service used to communicate Comprobantes REST endpoints
angular.module('sucursales')
.factory('Sucursales', ['$resource',
	function($resource) {
		return $resource('api/sucursales/:sucursalId', { sucursalId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]).factory('ServiceNavigation', ['$location',
  function($location) {
  	var inneNavList = [];
  	return {
  		addNav : function(navObj) { 
  		  if(inneNavList.length > 0) { 			
          var elempos = inneNavList.map(function(x){return x.name}).indexOf(navObj.name);
          if(elempos === -1)
          	inneNavList.push(navObj);
        } else {
        	inneNavList.push(navObj);
        }         
          
        window.localStorage.setItem("subNav",JSON.stringify(inneNavList));            	
		  },
		  getNav : function() {        
		  	return (inneNavList.length > 0 ) ? inneNavList : JSON.parse(window.localStorage.getItem("subNav"));
		  },
		  navInit: function(val){
        if(val === "single"){
          inneNavList.splice(0);
          return;
        }
       inneNavList.splice(0);
       window.localStorage.removeItem("subNav");
		  },
		  back: function() {		  	
		  	if(window.localStorage.getItem("subNav")){
		  		inneNavList = JSON.parse(window.localStorage.getItem("subNav"))
  				window.localStorage.removeItem("subNav");
  			}      
		  	inneNavList.splice(inneNavList.length - 1, 1);
		  	window.localStorage.setItem("subNav",JSON.stringify(inneNavList)); 
		  },
      unIntended: false
  	}
  }
]);

'use strict';

// Configuring the Categories module
angular.module('tareas').run(['Menus',
	function(Menus) {
		// Add the Categories dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Tareas',
			state: 'tareas',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'tareas', {
			title: 'List Tareas',
			state: 'tareas.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'tareas', {
			title: 'Create Tarea',
			state: 'tareas.create'
		});
	}
]);
'use strict';

// Setting up route
angular.module('tareas').config(['$stateProvider',
	function($stateProvider) {
		// Tareas state routing
		$stateProvider.
		state('tareas', {
			abstract: true,
			url: '/tareas',
			template: '<ui-view/>'
		}).
		state('tareas.list', {
			url: '',
			templateUrl: 'modules/tareas/views/list-tareas.client.view.html'
		}).
		state('tareas.create', {
			url: '/create',
			templateUrl: 'modules/tareas/views/create-tarea.client.view.html'
		}).
		state('tareas.view', {
			url: '/:tareaId',
			templateUrl: 'modules/tareas/views/view-tarea.client.view.html'
		}).
		state('tareas.edit', {
			url: '/:tareaId/edit',
			templateUrl: 'modules/tareas/views/edit-tarea.client.view.html'
		});
	}
]);
'use strict';

angular.module('tareas').controller('TareasController', ['$scope', '$stateParams', '$location', 'Authentication', 'Tareas',
	function($scope, $stateParams, $location, Authentication, Tareas) {
		$scope.authentication = Authentication;

		$scope.create = function() {
			var tarea = new Tareas({
				title: this.title,
				content: this.content
			});
			tarea.$save(function(response) {
				$location.path('tareas/' + response._id);

				$scope.title = '';
				$scope.content = '';
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		$scope.remove = function(tarea) {
			if (tarea) {
				tarea.$remove();

				for (var i in $scope.tareas) {
					if ($scope.tareas[i] === tarea) {
						$scope.tareas.splice(i, 1);
					}
				}
			} else {
				$scope.tarea.$remove(function() {
					$location.path('tareas');
				});
			}
		};

		$scope.update = function() {
			var tarea = $scope.tarea;

			tarea.$update(function() {
				$location.path('tareas/' + tarea._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		$scope.find = function() {
			$scope.tareas = Tareas.query();
		};

		$scope.findOne = function() {
			$scope.tarea = Tareas.get({
				tareaId: $stateParams.tareaId
			});
		};
	}
]);
'use strict';

//Articles service used for communicating with the articles REST endpoints
angular.module('tareas').factory('Tareas', ['$resource',
	function($resource) {
		return $resource('api/tareas/:tareaId', {
			tareaId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

// Configuring the Taxconditions module
angular.module('taxconditions').run(['Menus',
	function(Menus) {
		// Add the Taxconditions dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Taxconditions',
			state: 'taxconditions',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'taxconditions', {
			title: 'List Taxconditions',
			state: 'taxconditions.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'taxconditions', {
			title: 'Create Taxcondition',
			state: 'taxconditions.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('taxconditions').config(['$stateProvider',
	function($stateProvider) {
		// Taxconditions state routing
		$stateProvider.
		state('taxconditions', {
			abstract: true,
			url: '/taxconditions',
			template: '<ui-view/>'
		}).
		state('taxconditions.list', {
			url: '',
			templateUrl: 'modules/taxconditions/views/list-taxconditions.client.view.html'
		}).
		state('taxconditions.create', {
			url: '/create',
			templateUrl: 'modules/taxconditions/views/create-taxcondition.client.view.html'
		}).
		state('taxconditions.view', {
			url: '/:taxconditionId',
			templateUrl: 'modules/taxconditions/views/view-taxcondition.client.view.html'
		}).
		state('taxconditions.edit', {
			url: '/:taxconditionId/edit',
			templateUrl: 'modules/taxconditions/views/edit-taxcondition.client.view.html'
		});
	}
]);
'use strict';

// Taxconditions controller
angular.module('taxconditions').controller('TaxconditionsController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Taxconditions', 'Enterprises', '$mdBottomSheet', '$mdDialog',
	function($scope, $rootScope, $stateParams, $location, Authentication, Taxconditions, Enterprises, $mdBottomSheet, $mdDialog) {
		$scope.authentication = Authentication;

		// watch for SEARCH to update value
		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
		});

		// Create new Taxcondition
		$scope.create = function() {
			// Create new Taxcondition object
			var taxcondition = new Taxconditions ({
				name: this.name,
				taxPercentage: this.taxPercentage,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise
			});

			// Redirect after save
			taxcondition.$save(function(response) {
				//$location.path('condiciones-impuesto/view/' + response._id);

				if(response._id) {
					// agregar sub al array

					taxcondition._id = response._id;
					$rootScope.taxconditions.unshift(taxcondition);

				}


				// Clear form fields
				$scope.name = '';
				$scope.taxPercentage = '';

				$mdBottomSheet.hide();
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar una condicion de iva 
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar Condicion de IVA')
	          .content('¿Está seguro que desea eliminar esta condicion de IVA?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Taxcondition
		$scope.remove = function( taxcondition ) {
			if ( taxcondition ) { taxcondition.$remove();

				for (var i in $scope.taxconditions ) {
					if ($scope.taxconditions [i] === taxcondition ) {
						$scope.taxconditions.splice(i, 1);
					}
				}
			} else {
				$scope.taxcondition.$remove(function() {
					$location.path('taxconditions');
				});
			}
		};

		// Update existing Taxcondition
		$scope.update = function() {
			var taxcondition = $scope.taxcondition ;

			if (this.enterprise !== undefined) { taxcondition.enterprise = this.enterprise._id } else { taxcondition.enterprise = taxcondition.enterprise._id }; 

			taxcondition.$update(function() {
				$location.path('condiciones-impuesto');
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Taxconditions
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.taxconditions = Taxconditions.query({ e: $scope.SEARCH.enterprise }); }
			
		};

		// Find a list of Enterprises
		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find existing Taxcondition
		$scope.findOne = function() {
			$scope.taxcondition = Taxconditions.get({ 
				taxconditionId: $stateParams.taxconditionId
			});
		};
	}
]);
'use strict';

//Taxconditions service used to communicate Taxconditions REST endpoints
angular.module('taxconditions').factory('Taxconditions', ['$resource',
	function($resource) {
		return $resource('api/taxconditions/:taxconditionId', { taxconditionId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
'use strict';

// Configuring the Comprobantes module
angular.module('transferencias').run(['Menus',
	function(Menus) {
		// Add the Comprobantes dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Transferencias',
			state: 'transferencias',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'transferencias', {
			title: 'List Transferencias',
			state: 'transferencias.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'transferencias', {
			title: 'Create Transferencia',
			state: 'transferencias.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('transferencias').config(['$stateProvider',
	function($stateProvider) {
		// Comprobantes state routing
		$stateProvider.
		state('transferencias', {
			abstract: true,
			url: 'transferencias',
			template: '<ui-view/>'
		}).
		state('transferencias.list', {
			url: '',
			templateUrl: 'modules/transferencias/views/list-transferencias.client.view.html'
		}).
		state('transferencias.create', {
			url: '/create',
			templateUrl: 'modules/transferencias/views/create-transferencia.client.view.html'
		}).
		state('transferencias.view', {
			url: '/:transfereciaId',
			templateUrl: 'modules/transferencias/views/view-transferencia.client.view.html'
		}).
		state('transferencias.edit', {
			url: '/:transferenciaId/edit',
			templateUrl: 'modules/transferencias/views/edit-transferencia.client.view.html'
		});
	}
]);
'use strict';

// Comprobantes controller
angular.module('transferencias').controller('CreateTransferenciasController', ['user', 'transferencia', 'enterprises', '$state', 'transferencias',
	function(user, transferencia, enterprises, $state, transferencias) {

		// asignacion de modelos
		this.user = user;
		this.transferencia = transferencia;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.create = create;

		// definicion de funciones
		// Create new Comprobante
		function create () {
			// Create new Comprobante object
			var transferencia = new transferencias ({
				name: this.name,
				enterprise: this.enterprise ? this.enterprise._id : this.user.enterprise._id
			});

			// Redirect after save
			transferencia.$save(function(response) {
				if(response._id) {
					// agregar sub al array
					$state.go('home.transferencias');

				}
			}, function(errorResponse) {
				this.error = errorResponse.data.message;
			});
		};

	}
]);

'use strict';

// Comprobantes controller
angular.module('transferencias').controller('EditTransferenciasController', ['user', 'transferencia', 'enterprises', 'modosFacturacion', '$location',
	function(user, transferencia, enterprises, modosFacturacion, $location) {

		// asignacion de modelos
		this.user = user;
		this.transferencia = transferencia;
		this.enterprises = enterprises;
		this.modosFacturacion = modosFacturacion;

		// asignacion de funciones
		this.update = update;

		// definicion de funciones
		// Update existing Comprobante
		function update () {
			// console.log(this.comprobante.enterprise, 'ent');
			// console.log(this.comprobante, 'comp');
			var transferencia = this.transferencia;

			if (this.enterprise !== undefined) { transferencia.enterprise = this.enterprise._id } else { transferencia.enterprise = transferencia.enterprise._id };
			if (this.modoFacturacion !== undefined) { transferencia.modoFacturacion = this.modoFacturacion } else { transferencia.modoFacturacion = comprobante.modoFacturacion };

			// comprobante.$update(function() {
			// 	$location.path('comprobantes/view/' + comprobante._id);
			// }, function(errorResponse) {
			// 	this.error = errorResponse.data.message;
			// });
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('transferencias').controller('ListTransferenciasController', ['$location', 'user', 'transferencias', 'enterprises', '$mdDialog',
	function($location, user, transferencias, enterprises, $mdDialog) {

		// asignacion de modelos
		this.user = user;
		this.transferencias = transferencias;
		this.enterprises = enterprises;

		// asignacion de funciones
		this.remove = remove;

		// definicion de funciones

		// Remove existing Comprobante
		function remove ( transferencia ) {
			if ( transferencia ) { transferencia.$remove();
			} else {
				this.transferencia.$remove(function() {
					$location.path('transferencias');
				});
			}
		};
	}
]);

'use strict';

// Comprobantes controller
angular.module('transferencias').controller('ViewTransferenciaController', ['user', 'transferencia',
	function(user, transferencia) {

		// asignacion de modelos
		this.user = user;
		this.transferencia = transferencia;

		// asignacion de funciones

		// definicion de funciones


	}
]);

'use strict';

// Comprobantes controller
angular.module('transferencias').controller('TransferenciasController', ['$scope', '$rootScope', '$stateParams', '$location', 'Authentication', 'Comprobantes', '$mdBottomSheet', 'Enterprises', '$mdDialog',
	function($scope, $rootScope, $stateParams, $location, Authentication, Comprobantes, $mdBottomSheet, Enterprises, $mdDialog) {
		$scope.authentication = Authentication;

		$scope.$watch('authentication', function (){
			$scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
			$scope.find();
			//console.log('search: ', $scope.SEARCH);
		});

		// Create new Comprobante
		$scope.create = function() {
			// Create new Comprobante object
			var transferencia = new Transferencias ({
				name: this.name,
				letra: this.letra,
				puntoDeVenta: this.puntoDeVenta,
				modoFacturacion: this.modo,
				movimientoStock: this.movimientoStock,
				movimientoCC: this.movimientoCC,
				movimientoOperacionInversa: this.movimientoOperacionInversa,
				funcionalidadSituacion: this.funcionalidadSituacion,
				autoAprobar: this.autoAprobar,
				enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
			});

			// Redirect after save
			transferencia.$save(function(response) {
				if(response._id) {
					// agregar sub al array

					transferencias._id = response._id;
					$rootScope.transferencias.unshift(transferencias);

				}

				// Clear form fields
				$scope.name = '';
				$scope.letra = '';
				$scope.puntoDeVenta = '';
				$scope.modoFacturacion = '';

				$mdBottomSheet.hide();
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		//abre modal para eliminar un puesto 
		$scope.showConfirm = function(ev,item) {
			var confirm = $mdDialog.confirm()
	          .title('Eliminar tipo de Comprobante')
	          .content('¿Está seguro que desea eliminar este tipo de Comprobante?')
	          .ariaLabel('Lucky day')
	          .ok('Eliminar')
	          .cancel('Cancelar')
	          .targetEvent(ev);
		    $mdDialog.show(confirm).then(function() {
		      $scope.remove(item);
		    }, function() {
		      console.log('cancelaste borrar');
		    });
		};

		// Remove existing Comprobante
		$scope.remove = function( transferencias ) {
			if ( transferencias ) { transferencias.$remove();

				for (var i in $scope.transferencias ) {
					if ($scope.transferencias[i] === transferencias ) {
						$scope.transferencias.splice(i, 1);
					}
				}
			} else {
				$scope.transferencias.$remove(function() {
					$location.path('transferencias');
				});
			}
		};

		// Update existing Comprobante
		$scope.update = function() {
			var transferencias = $scope.transferencias ;

			if (this.enterprise !== undefined) { transferencias.enterprise = this.enterprise._id } else { transferencias.enterprise = transferencias.enterprise._id };

			transferencias.$update(function() {
				$location.path('transferencias/view/' + transferencias._id);
			}, function(errorResponse) {
				$scope.error = errorResponse.data.message;
			});
		};

		// Find a list of Comprobantes
		$scope.find = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.transferencias = Transferencias.query({ e: $scope.SEARCH.enterprise }); }
		};

		// Find a list of Enterprises
		// $scope.findEnterprises = function() {
		// 	if($scope.SEARCH !== undefined) { $scope.enterprises = Enterprises.query({ e: $scope.SEARCH.enterprise });}			
		// };

		$scope.findEnterprises = function() {
			$scope.enterprises = Enterprises.query();
		};

		// Find a list of Modos de facturacion
		$scope.findModosF = function() {
			if ($scope.SEARCH !== undefined) { $scope.modosF = ['Comprobante interno', 'Talonario fiscal manual o pre-impreso', 'Factura electronica']; } 
		};

		// Find existing Comprobante
		$scope.findOne = function() {
			$scope.transferencia = Transferencias.get({ 
				transferenciaId: $stateParams.transferenciaId
			});
		};
	}
]);
'use strict';

//Comprobantes service used to communicate Comprobantes REST endpoints
angular.module('transferencias').factory('Transferencias', ['$resource',
	function($resource) {
		return $resource('api/transferencias/:transferenciaId', { transferenciaId: '@_id', e: '@enterprise'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

// Config HTTP Error Handling
angular.module('users').config(['$httpProvider',
	function ($httpProvider) {
		// Set the httpProvider "not authorized" interceptor
		$httpProvider.interceptors.push(['$q', '$location', 'Authentication',
			function ($q, $location, Authentication) {
				return {
					responseError: function (rejection) {
						switch (rejection.status) {
							case 401:
								// Deauthenticate the global user
								Authentication.user = null;

								// Redirect to signin page
								$location.path('signin');
								break;
							case 403:
								// Add unauthorized behaviour
								break;
						}

						return $q.reject(rejection);
					}
				};
			}
		]);
	}
]);

'use strict';

// Setting up route
angular.module('users').config(['$stateProvider',
	function ($stateProvider) {
		// Users state routing
		$stateProvider.
			state('settings', {
				abstract: true,
				url: '/settings',
				templateUrl: 'modules/users/views/settings/settings.client.view.html'
			}).
			state('settings.profile', {
				url: '/profile',
				templateUrl: 'modules/users/views/settings/edit-profile.client.view.html'
			}).
			state('settings.password', {
				url: '/password',
				templateUrl: 'modules/users/views/settings/change-password.client.view.html'
			}).
			state('settings.accounts', {
				url: '/accounts',
				templateUrl: 'modules/users/views/settings/manage-social-accounts.client.view.html'
			}).
			state('settings.picture', {
				url: '/picture',
				templateUrl: 'modules/users/views/settings/change-profile-picture.client.view.html'
			}).
			state('authentication', {
				abstract: true,
				url: '/authentication',
				templateUrl: 'modules/users/views/authentication/authentication.client.view.html'
			}).
			state('authentication.signup', {
				url: '/signup',
				templateUrl: 'modules/users/views/authentication/signup.client.view.html'
			}).
			state('authentication.signin', {
				url: '/signin',
				templateUrl: 'modules/users/views/authentication/signin.client.view.html'
			}).
			state('password', {
				abstract: true,
				url: '/password',
				template: '<ui-view/>'
			}).
			state('password.forgot', {
				url: '/forgot',
				templateUrl: 'modules/users/views/password/forgot-password.client.view.html'
			}).
			state('password.reset', {
				abstract: true,
				url: '/reset',
				template: '<ui-view/>'
			}).
			state('password.reset.invalid', {
				url: '/invalid',
				templateUrl: 'modules/users/views/password/reset-password-invalid.client.view.html'
			}).
			state('password.reset.success', {
				url: '/success',
				templateUrl: 'modules/users/views/password/reset-password-success.client.view.html'
			}).
			state('password.reset.form', {
				url: '/:token',
				templateUrl: 'modules/users/views/password/reset-password.client.view.html'
			});
	}
]);

'use strict';

angular.module('users').controller('AuthenticationController', ['$scope', '$http', '$location', 'Authentication', '$state',
	function($scope, $http, $location, Authentication, $state) {
		$scope.authentication = Authentication;

		// If user is signed in then redirect back home
		if (($scope.authentication.user) && ($scope.authentication.user.roles[0] !== 'cliente')) $location.path('/welcome');
		if (($scope.authentication.user) && ($scope.authentication.user.roles[0] === 'cliente')) $state.go('home.createPedido', { "tipo": "venta"});

		$scope.signup = function() {
			console.log($scope.credentials);
			$http.post('/api/auth/signup', $scope.credentials).success(function(response) {
				// If successful we assign the response to the global user model
				$scope.authentication.user = response;
				console.log(response);
				// And redirect to the index page
				if (response.roles[0] !== 'cliente'){
					$location.path('/welcome');
				}
				else{
					$state.go('home.createPedido', { "tipo": "venta"});
				}
			}).error(function(response) {
				$scope.error = response.message;
			});
		};

		$scope.signin = function() {
			$http.post('/api/auth/signin', $scope.credentials).success(function(response) {

				// If successful we assign the response to the global user model
				$scope.authentication.user = response;

				// And redirect to the index page
				if (response.roles[0] !== 'cliente'){
					$location.path('/welcome');
				}
				else{
					$state.go('home.createPedido', { "tipo": "venta"});
				}
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);

'use strict';

angular.module('users').controller('PasswordController', ['$scope', '$stateParams', '$http', '$location', 'Authentication',
	function($scope, $stateParams, $http, $location, Authentication) {
		$scope.authentication = Authentication;

		//If user is signed in then redirect back home
		if ($scope.authentication.user) $location.path('/');

		// Submit forgotten password account id
		$scope.askForPasswordReset = function() {
			$scope.success = $scope.error = null;

			$http.post('/api/auth/forgot', $scope.credentials).success(function(response) {
				// Show user success message and clear form
				$scope.credentials = null;
				$scope.success = response.message;

			}).error(function(response) {
				// Show user error message and clear form
				$scope.credentials = null;
				$scope.error = response.message;
			});
		};

		// Change user password
		$scope.resetUserPassword = function() {
			$scope.success = $scope.error = null;

			$http.post('/api/auth/reset/' + $stateParams.token, $scope.passwordDetails).success(function(response) {
				// If successful show success message and clear form
				$scope.passwordDetails = null;

				// Attach user profile
				Authentication.user = response;

				// And redirect to the index page
				$location.path('/password/reset/success');
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);
'use strict';

angular.module('users').controller('SettingsController', ['$scope', '$http', '$location', 'Users', 'Authentication',
	function($scope, $http, $location, Users, Authentication) {
		$scope.user = Authentication.user;

		// If user is not signed in then redirect back home
		if (!$scope.user) $location.path('/');

		// Check if there are additional accounts 
		$scope.hasConnectedAdditionalSocialAccounts = function(provider) {
			for (var i in $scope.user.additionalProvidersData) {
				return true;
			}

			return false;
		};

		// Check if provider is already in use with current user
		$scope.isConnectedSocialAccount = function(provider) {
			return $scope.user.provider === provider || ($scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider]);
		};

		// Remove a user social account
		$scope.removeUserSocialAccount = function(provider) {
			$scope.success = $scope.error = null;

			$http.delete('/api/users/accounts', {
				params: {
					provider: provider
				}
			}).success(function(response) {
				// If successful show success message and clear form
				$scope.success = true;
				$scope.user = Authentication.user = response;
			}).error(function(response) {
				$scope.error = response.message;
			});
		};

		// Update a user profile
		$scope.updateUserProfile = function(isValid) {
			if (isValid){
				$scope.success = $scope.error = null;
				var user = new Users($scope.user);
	
				user.$update(function(response) {
					$scope.success = true;
					Authentication.user = response;
				}, function(response) {
					$scope.error = response.data.message;
				});
			} else {
				$scope.submitted = true;
			}
		};

		// Change user password
		$scope.changeUserPassword = function() {
			$scope.success = $scope.error = null;

			$http.post('/api/users/password', $scope.passwordDetails).success(function(response) {
				// If successful show success message and clear form
				$scope.success = true;
				$scope.passwordDetails = null;
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);

'use strict';

angular.module('users').controller('ChangePasswordController', ['$scope', '$http', '$location', 'Users', 'Authentication',
	function($scope, $http, $location, Users, Authentication) {
		$scope.user = Authentication.user;

		// Change user password
		$scope.changeUserPassword = function() {
			$scope.success = $scope.error = null;

			$http.post('/api/users/password', $scope.passwordDetails).success(function(response) {
				// If successful show success message and clear form
				$scope.success = true;
				$scope.passwordDetails = null;
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);

'use strict';

angular.module('users').controller('ChangeProfilePictureController', ['$scope', '$timeout', '$window', 'Authentication', 'FileUploader',
	function ($scope, $timeout, $window, Authentication, FileUploader) {
		$scope.user = Authentication.user;
		$scope.imageURL = $scope.user.profileImageURL;

		// Create file uploader instance
		$scope.uploader = new FileUploader({
			url: 'api/users/picture'
		});

		// Set file uploader image filter
		$scope.uploader.filters.push({
			name: 'imageFilter',
			fn: function (item, options) {
				var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
				return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
			}
		});

		// Called after the user selected a new picture file
		$scope.uploader.onAfterAddingFile = function (fileItem) {
			if ($window.FileReader) {
				var fileReader = new FileReader();
				fileReader.readAsDataURL(fileItem._file);

				fileReader.onload = function (fileReaderEvent) {
					$timeout(function () {
						$scope.imageURL = fileReaderEvent.target.result;
					}, 0);
				};
			}
		};

		// Called after the user has successfully uploaded a new picture
		$scope.uploader.onSuccessItem = function (fileItem, response, status, headers) {
			// Show success message
			$scope.success = true;

			// Populate user object
			$scope.user = Authentication.user = response;

			// Clear upload buttons
			$scope.cancelUpload();
		};

		// Called after the user has failed to uploaded a new picture
		$scope.uploader.onErrorItem = function (fileItem, response, status, headers) {
			// Clear upload buttons
			$scope.cancelUpload();

			// Show error message
			$scope.error = response.message;
		};

		// Change user profile picture
		$scope.uploadProfilePicture = function () {
			// Clear messages
			console.log('image upload fired!');
			$scope.success = $scope.error = null;

			// Start upload
			$scope.uploader.uploadAll();
		};

		// Cancel the upload process
		$scope.cancelUpload = function () {
			$scope.uploader.clearQueue();
			$scope.imageURL = $scope.user.profileImageURL;
		};
	}
]);

'use strict';

angular.module('users').controller('EditProfileController', ['$scope', '$http', '$location', 'Users', 'Authentication', '$q',
	function($scope, $http, $location, Users, Authentication, $q) {
		$scope.user = Authentication.user;

		// Update a user profile
		$scope.updateUserProfile = function(isValid) {
			if (isValid){
				$scope.success = $scope.error = null;
				var user = new Users($scope.user);

				user.$update(function(response) {
					$scope.success = true;
					Authentication.user = response;
				}, function(response) {
					$scope.error = response.data.message;
				});
			} else {
				$scope.submitted = true;
			}
		};

		$scope.findOne = function(){
			console.log($stateParams);
			// Users.query({}, function(res){
			// $scope.users = res;
			// for(var i=0; i<$scope.users.length; i++){
			// 	if($scope.users[i]._id === $stateParams.personaId){
			// 		$scope.user = $scope.users[i];
			// 	}
			// };
			// });
		}
	}
])

.controller('EditUserController', ['$scope', '$http', '$location', 'Users', 'Authentication', '$stateParams', 'Puestos', '$rootScope', '$timeout', '$q',
	function($scope, $http, $location, Users, Authentication, $stateParams, Puestos, $rootScope, $timeout, $q) {

		$scope.roles = ['user', 'admin', 'rrhh', 'compras', 'ventas', 'produccion', 'cliente'];

		$scope.editadoOk = false;

		$scope.selectedMode = 'md-scale';
	    $scope.selectedDirection = 'up';
		// Update a user profile
		$scope.updateUserProfile = function() {
				$scope.success = $scope.error = null;
				var user = new Users($scope.user);
				if (this.puesto !== undefined) { user.puesto = this.puesto._id; } else if ((user.puesto!==undefined)&&(user.puesto!==null)) { user.puesto = user.puesto._id};
				if (this.rol !== undefined) { user.roles[0] = this.rol; } else if ((user.roles[0]!==undefined)&&(user.roles[0]!==null)) { user.roles[0] = user.roles[0]};
				user.$update(function(response) {
					$scope.success = true;
					Authentication.user = response;
				}, function(response) {
					$scope.error = response.data.message;
				});
		};

		$scope.asignarUsuario = function(){
			Users.query({}, function(res){
				$scope.users = res;
				for(var i=0; i<$scope.users.length; i++){
					if($scope.users[i]._id === $stateParams.personaId){
						$scope.user = $scope.users[i];
					}
				};
			});
		};


		$scope.editarPuesto = function(){
			if (($scope.puesto !== undefined)&&($scope.puesto !== null)){
				var nuevoPuesto = $scope.puesto._id
			}
			else{
				if (($scope.user.puesto !== null)&&($scope.user.puesto !== undefined)){
					var nuevoPuesto = $scope.user.puesto._id;
				}
				else{
					var nuevoPuesto = undefined;
				}
			}
			if($scope.rol === undefined){
				var nuevoRol = $scope.user.roles[0];
			}
			else{
				var nuevoRol = $scope.rol;
			}
				if (($scope.user.observaciones !== null)&&($scope.user.observaciones !== undefined)){
					var nuevaObservacion = $scope.user.observaciones
				}
				else{
					var nuevaObservacion = undefined;
				}
			
			$http({ method: 'POST',
                url: ('/api/users/changePuesto'),
                params: { userId: $stateParams.personaId, puestoId: nuevoPuesto, rol: nuevoRol, obs: nuevaObservacion }
                })
			  	.then(function(response) {
                    $scope.user.observaciones = nuevaObservacion;
                    $scope.user.puesto = nuevoPuesto;
                    $scope.user.roles[0] = nuevoRol;
                    $scope.modoEdicion = false;
                    $scope.editadoOk = true;
                    $timeout(function(){$scope.editadoOk = false;}, 4000);
                }, function(response) {
                    console.log('error');
                });
		};

		// Find a list of Puestos
		$scope.findPuestos = function() {
			if ($scope.SEARCH !== undefined) { $rootScope.puestos = Puestos.query({ e: $scope.SEARCH.enterprise }); }
		};

	}
]);

'use strict';

angular.module('users').controller('SocialAccountsController', ['$scope', '$http', '$location', 'Users', 'Authentication',
	function($scope, $http, $location, Users, Authentication) {
		$scope.user = Authentication.user;

		// Check if there are additional accounts
		$scope.hasConnectedAdditionalSocialAccounts = function(provider) {
			for (var i in $scope.user.additionalProvidersData) {
				return true;
			}

			return false;
		};

		// Check if provider is already in use with current user
		$scope.isConnectedSocialAccount = function(provider) {
			return $scope.user.provider === provider || ($scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider]);
		};

		// Remove a user social account
		$scope.removeUserSocialAccount = function(provider) {
			$scope.success = $scope.error = null;

			$http.delete('/api/users/accounts', {
				params: {
					provider: provider
				}
			}).success(function(response) {
				// If successful show success message and clear form
				$scope.success = true;
				$scope.user = Authentication.user = response;
			}).error(function(response) {
				$scope.error = response.message;
			});
		};
	}
]);

'use strict';

angular.module('users').controller('SettingsController', ['$scope', '$http', '$location', 'Users', 'Authentication', '$mdSidenav', '$q',
	function($scope, $http, $location, Users, Authentication, $mdSidenav, $q) {
		$scope.user = Authentication.user;
		$scope.toggleList   = toggleUsersList;

		// If user is not signed in then redirect back home
		if (!$scope.user) $location.path('/');

		function toggleUsersList() {
	      var pending = $q.when(true);

	      pending.then(function(){
	        $mdSidenav('left').toggle();
	      });
	    }

	}
]);

'use strict';

// Authentication service for user variables
angular.module('users').factory('Authentication', [

	function() {

		// console.log('fomr auth', JSON.stringify(window.user));

		var _this = this;

		_this._data = {
			user: window.user
		};

		return _this._data;
	}
]);

'use strict';

// Users service used for communicating with the users REST endpoint
angular.module('users').factory('Users', ['$resource',
	function($resource) {
		return $resource('api/users', { e: '@enterprise'}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
angular.module('users').factory('ChangeStatusUserById', ['$resource',
	function($resource) {
		return $resource('/api/users/changeStatus', { userId: '@_id', estado: '@_estado'}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);
angular.module('users').factory('FindUserById', ['$resource',
	function($resource) {
		return $resource('/api/users/byId', { userId: '@_id'}, { 
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

// Configuring the Ventas module
angular.module('ventas').run(['Menus',
	function(Menus) {
		// Add the Ventas dropdown item
		Menus.addMenuItem('topbar', {
			title: 'Ventas',
			state: 'ventas',
			type: 'dropdown'
		});

		// Add the dropdown list item
		Menus.addSubMenuItem('topbar', 'ventas', {
			title: 'List Ventas',
			state: 'ventas.list'
		});

		// Add the dropdown create item
		Menus.addSubMenuItem('topbar', 'ventas', {
			title: 'Create Venta',
			state: 'ventas.create'
		});
	}
]);
'use strict';

//Setting up route
angular.module('ventas').config(['$stateProvider',
	function($stateProvider) {
		// Ventas state routing
		$stateProvider.
		state('ventas', {
			abstract: true,
			url: '/ventas',
			template: '<ui-view/>'
		}).
		state('ventas.list', {
			url: '',
			templateUrl: 'modules/ventas/views/list-ventas.client.view.html'
		}).
		state('ventas.create', {
			url: '/create',
			templateUrl: 'modules/ventas/views/create-venta.client.view.html'
		}).
		state('ventas.view', {
			url: '/:ventaId',
			templateUrl: 'modules/ventas/views/view-venta.client.view.html'
		}).
		state('ventas.edit', {
			url: '/:ventaId/edit',
			templateUrl: 'modules/ventas/views/edit-venta.client.view.html'
		}).
		state('ventas.mostrador', {
            url: '/mostrador',
            templateUrl: 'modules/ventas/views/ventas-mostrador.client.view.html'
        });
	}
]);
'use strict';

// Ventas controller
angular.module('ventas').controller('ListVentasController', ['$scope', '$state', '$http', '$stateParams', '$location', 'user', '$rootScope', '$mdBottomSheet', '$mdDialog', '$q', '$filter', 'Ventas', 'Socket', 'BottomSheetService', 'VentasExtra',
    function ($scope, $state, $http, $stateParams, $location, user, $rootScope, $mdBottomSheet, $mdDialog, $q, $filter, Ventas, Socket, BottomSheetService, VentasExtra) {

        $scope.tabParams = $state.params.tab;

        switch ($state.params.tab) {
            case 'realizada':
                $scope.realizada = true;
                break;
            case 'proceso':
                $scope.proceso = true;
                break;
            case 'finalizada':
                $scope.finalizada = true;
                break;
            case 'anulada':
                $scope.anulada = true;
            default:
                $scope.realizada = true;
        }

        var cambio = this;

        // definicion de modelos disponibles para la vista
        this.user = user;
        // this.ventasPendientes = ventasPendientes;
        // this.ventasPendientesPago = ventasPendientesPago;
        // this.ventasPendientesEntrega = ventasPendientesEntrega;
        // this.ventasFinalizadas = ventasFinalizadas;
        // this.ventasAnuladas = ventasAnuladas;

        this.ventasPendientes = [];
        this.ventasPendientesPago = [];
        this.ventasPendientesEntrega = [];
        this.ventasFinalizadas = [];
        this.ventasAnuladas = [];

        this.verVentasFecha = false;
        this.totalPendientesPA = 0;
        this.totalPendientesPago = 0;
        this.totalPendientesEntrega = 0;
        this.totalFinalizadas = 0;
        this.totalAnuladas = 0;
        this.theDate = new Date();
        this.currentPage = 0;

        this.ventasFinalizadas = [];
        this.arrayFechas = [];
        this.fechasFiltro = [];

        // definicion de funciones disponibles para la vista
        //this.filtrarVentas = filtrarVentas;
        this.mostrarDetalle = mostrarDetalle;
        this.showAdvanced = showAdvanced;
        this.showAdvancedFinalizar = showAdvancedFinalizar;
        this.showConfirmAnular = showConfirmAnular;
        this.showConfirmEntrega = showConfirmEntrega;
        this.showConfirmPago = showConfirmPago;
        this.cambiarEstadoVenta = cambiarEstadoVenta;
        this.extraerVenta = extraerVenta;
        this.printIt = printIt;
        this.refresh = refresh;
        this.borrarVenta = borrarVenta;

        // asignacion de funciones
        this.showBottomSheetRealizada = showBottomSheetRealizada;
        this.showBottomSheetProceso = showBottomSheetProceso;
        this.showBottomSheetFinalizada = showBottomSheetFinalizada;
        this.showBottomSheetAnulada = showBottomSheetAnulada;

        this.startReal = true;
        this.startFinal = true;
        this.startProcess = true;
        this.startCancel = true;

        this.loadmoreReal = function () {
            cambio.loadingReal = true;
            cambio.startReal = false;
            VentasExtra.loadMore(cambio.user.enterprise.enterprise, 'Pendiente de pago y entrega', cambio.ventasPendientes.length ? cambio.ventasPendientes[cambio.ventasPendientes.length - 1].created : null, cambio.ventasPendientes.length < 40 ? 40 : 20).then(
                angular.bind(cambio, function (data) {
                    cambio.ventasPendientes = cambio.ventasPendientes.concat(data.data);
                    cambio.loadingReal = false;
                    cambio.startFinal = false;
                    if (data.data.length === 0) cambio.doneReal = true;
                })
            )
        };

        this.loadmoreFinal = function () {
            cambio.loadingFinal = true;
            VentasExtra.loadMore(cambio.user.enterprise.enterprise, 'Finalizada', cambio.ventasFinalizadas.length ? cambio.ventasFinalizadas[cambio.ventasFinalizadas.length - 1].created : null, cambio.ventasFinalizadas.length < 40 ? 40 : 20).then(
                angular.bind(cambio, function (data) {
                    cambio.ventasFinalizadas = cambio.ventasFinalizadas.concat(data.data);
                    cambio.loadingFinal = false;
                    cambio.startFinal = false;
                    if (data.data.length === 0) cambio.doneFinal = true;
                })
            )
        };

        this.loadmoreProcess = function () {
            cambio.loadingProcess = true;
            VentasExtra.loadMore(cambio.user.enterprise.enterprise, 'Pendiente de entrega', cambio.ventasPendientesEntrega.length ? cambio.ventasPendientesEntrega[cambio.ventasPendientesEntrega.length - 1].created : null, cambio.ventasPendientesEntrega.length < 40 ? 40 : 20).then(
                angular.bind(cambio, function (data) {

                    cambio.ventasPendientesEntrega = cambio.ventasPendientesEntrega.concat(data.data);
                    cambio.loadingProcess = false;
                    cambio.startProcess = false;
                    if (data.data.length === 0) cambio.doneProcess = true;
                })
            )
        };

        this.loadmoreCancel = function () {
            cambio.loadingCancel = true;
            VentasExtra.loadMore(this.user.enterprise.enterprise, 'Anulada', this.ventasAnuladas.length ? this.ventasAnuladas[this.ventasAnuladas.length - 1].created : null, this.ventasAnuladas.length < 40 ? 40 : 20).then(
                angular.bind(this, function (data) {

                    cambio.ventasAnuladas = cambio.ventasAnuladas.concat(data.data);
                    cambio.loadingCancel = false;
                    cambio.startCancel = false;
                    if (data.data.length === 0) cambio.doneCancel = true;
                })
            )
        };

        // actualizar modelos de dato de pedidos
        function refresh() {
            this.ventasPendientes = Ventas.query({
                e: this.user.enterprise.enterprise,
                estado: 'Pendiente de pago y entrega',
                p: 0,
                pcount: 20
            });
            this.ventasPendientesPago = Ventas.query({
                e: this.user.enterprise.enterprise,
                estado: 'Pendiente de pago2',
                p: 0,
                pcount: 20
            });
            this.ventasPendientesEntrega = Ventas.query({
                e: this.user.enterprise.enterprise,
                estado: 'Pendiente de entrega',
                p: 0,
                pcount: 20
            });
            this.ventasFinalizadas = Ventas.query({
                e: this.user.enterprise.enterprise,
                estado: 'Finalizada',
                p: 0,
                pcount: 20
            });
            this.ventasAnuladas = Ventas.query({
                e: this.user.enterprise.enterprise,
                estado: 'Anulada',
                p: 0,
                pcount: 20
            });
        }

        // // Obtener datos paginados del backend
        // function getPage (pagina, cantidad) {
        // 	console.log('pagina cantidad', pagina, cantidad)
        // 	// console.log('[+] pagina solicitada:', pagina);
        // 	if (pagina < 0) {
        // 		pagina = 0;
        // 	};
        // 	this.currentPage = pagina;
        // 	this.ventasPendientes = Ventas.query({e: this.user.enterprise.enterprise, estado: 'Pendiente de pago y entrega', p: pagina, pcount: cantidad });
        // 	this.ventasPendientesPago = Ventas.query({e: this.user.enterprise.enterprise, estado: 'Pendiente de pago2', p: pagina, pcount: cantidad });
        // 	this.ventasPendientesEntrega = Ventas.query({e: this.user.enterprise.enterprise, estado: 'Pendiente de entrega', p: pagina, pcount: cantidad });
        // 	this.ventasFinalizadas = Ventas.query({e: this.user.enterprise.enterprise, estado: 'Finalizada', p: pagina, pcount: cantidad });
        // 	this.ventasAnuladas = Ventas.query({e: this.user.enterprise.enterprise, estado: 'Anulada', p: pagina, pcount: cantidad });
        // };


        function existeFecha(venta) {
            for (var i in this.arrayFechas) {
                if (this.arrayFechas[i] === venta.filterDate.day) {
                    return true;
                }
            }
            return false;
        }

        function mostrarDetalle(i) {
            if (this.verVentasFecha === false) {
                this.verVentasFecha = true;
            } else {
                this.verVentasFecha = false;
            }
        }

        function showAdvanced(ev, item) {
            console.log(item);
            $mdDialog.show({
                controller: DialogController,
                templateUrl: '/modules/ventas/views/modal.client.view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                resolve: {
                    item: function () {
                        return item;
                    }
                }
            })
                .then(function (answer) {
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });
        } //end showAdvanced

        //modal para aprobar presupuesto
        function showAdvancedFinalizar(ev, item) {
            $mdDialog.show({
                controller: DialogController,
                templateUrl: '/modules/ventas/views/modalAprobar.client.view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                resolve: {
                    item: function () {
                        return item;
                    }
                }
            })
                .then(function (answer) {
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });
        } //end showAdvanced

        //abre modal para anular y cerrar ventas
        function showConfirmAnular(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Anular Venta')
                .content('¿Está seguro que desea anular esta venta?')
                .ariaLabel('Lucky day')
                .ok('Aceptar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(angular.bind(this, function () {
                cambio.cambiarEstadoVenta('Anulada', item);
            }), function () {
                console.log('cancelaste anular');
            });
        } //end showConfirmAnular

        function showConfirmEntrega(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Finalizar venta')
                .content('¿Está seguro que desea finalizar esta venta?')
                .ariaLabel('Lucky day')
                .ok('Aceptar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(angular.bind(this, function () {
                cambio.cambiarEstadoVenta('Finalizada', item);
            }), function () {
                console.log('cancelaste cerrar');
            });
        } //end showConfirmEntrega

        function showConfirmPago(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Pagar venta')
                .content('¿Está seguro que desea pagar esta venta?')
                .ariaLabel('Lucky day')
                .ok('Aceptar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(angular.bind(this, function () {
                cambio.cambiarEstadoVenta('Finalizada', item);
            }), function () {
                console.log('cancelaste cerrar');
            });
        }

        // Cambiar estado Venta
        function cambiarEstadoVenta(estado, v) {
            var venta = v;
            venta.estado = estado;

            if (this.enterprise !== undefined) {
                venta.enterprise = this.enterprise._id
            } else {
                venta.enterprise = venta.enterprise._id
            }

            if (this.tipoComprobante !== undefined) {
                venta.tipoComprobante = this.tipoComprobante._id
            } else if ((venta.tipoComprobante !== undefined) && (venta.tipoComprobante !== null)) {
                venta.tipoComprobante = venta.tipoComprobante._id
            }
            if ((venta.cliente !== undefined) && (venta.cliente !== null)) {
                venta.cliente = venta.cliente._id
            } else if (this.client !== undefined) {
                venta.cliente = this.client._id
            }


            if (this.condicionVenta !== undefined) {
                venta.condicionVenta = this.condicionVenta._id
            } else if ((venta.condicionVenta !== undefined) && (venta.condicionVenta !== null)) {
                venta.condicionVenta = venta.condicionVenta._id
            }

            Socket.emit('venta.update', venta);

        } //end cambiarEstadoVenta

        Socket.on('ventas.update', angular.bind(this, function (message) {
            if (message.enterprise === this.user.enterprise.enterprise) {
                if (message.estado === 'Finalizada') {
                    $http.post('/api/impuestos/updateTotal',
                        {
                            month: (new Date()).getMonth(),
                            year: (new Date()).getFullYear()
                        }
                    );
                }
                this.refresh();
            }
        }));

        function borrarVenta(venta) {
            venta.$remove();
            if (venta.estado == 'Finalizada') {
                for (var i in ventasFinalizadas) {
                    if (ventasFinalizadas[i] === venta) {
                        ventasFinalizadas.splice(i, 1);
                    }
                }
            } else {
                for (var i in ventasAnuladas) {
                    if (ventasAnuladas[i] === venta) {
                        ventasAnuladas.splice(i, 1);
                    }
                }
            }

        }

        //****PARA LA EXTRACCION DEL PDF

        function extraerVenta(item) {
            var promise = asyncAsignarVenta(item);
            promise.then(angular.bind(this, function (response) {
                // console.log(response);
                cambio.printIt();
            }));
        } //end extraerVenta

        function asyncAsignarVenta(item) {
            var deferred = $q.defer();
            $scope.venta = item;
            setTimeout(function () {
                if ($scope.venta !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        } //end asyncAsignarVenta

        function printIt() {
            var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-venta').value;
            var c = document.getElementById('printing-data-venta').innerHTML;
            window.frames["print_frame_venta"].document.title = 'IM - Venta';
            window.frames["print_frame_venta"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_venta"].window.focus();
            window.frames["print_frame_venta"].window.print();
        } //end printIt

        function httpGet(theUrl) {
            var xmlHttp = null;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", theUrl, false);
            xmlHttp.send(null);
            return xmlHttp.responseText;
        } //end httpGet

        //****FIN EXTRACCION DEL PDF

        // definicion de funciones BottomSheet
        function showBottomSheetRealizada($event, item) {

            var buttons = [{
                name: 'view',
                label: 'Ver',
                icon: 'visibility'
            },
                {
                    name: 'edit',
                    label: 'Estado',
                    icon: 'call_made'
                },
                {
                    name: 'remove',
                    label: 'Anular',
                    icon: 'remove_circle'
                },
                {
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                }
            ];

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function (err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'edit':
                        showAdvanced($event, item);
                        break;
                    case 'view':
                        $state.go('home.viewVenta', {ventaId: item._id});
                        break;
                    case 'remove':
                        showConfirmAnular($event, item);
                        break;
                    case 'print':
                        extraerVenta(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetProceso($event, item) {

            var buttons = [{
                name: 'finalize',
                label: 'Finalizar',
                icon: 'done'
            },
                {
                    name: 'view',
                    label: 'Ver',
                    icon: 'visibility'
                },
                {
                    name: 'remove',
                    label: 'Anular',
                    icon: 'close'
                },
                {
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                }
            ];

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function (err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'finalize':
                        showAdvancedFinalizar($event, item);
                        break;
                    case 'view':
                        $state.go('home.viewVenta', {ventaId: item._id});
                        break;
                    case 'remove':
                        showConfirmAnular($event, item);
                        break;
                    case 'print':
                        extraerVenta(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetFinalizada($event, item) {

            var buttons = [{
                name: 'view',
                label: 'Ver',
                icon: 'visibility'
            },
                {
                    name: 'remove',
                    label: 'Eliminar',
                    icon: 'remove_circle'
                },
                {
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                }
            ];

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function (err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'view':
                        $state.go('home.viewVenta', {ventaId: item._id});
                        break;
                    case 'remove':
                        showConfirmAnular($event, item);
                        break;
                    case 'print':
                        extraerVenta(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function showBottomSheetAnulada($event, item) {

            var buttons = [{
                name: 'view',
                label: 'Ver',
                icon: 'visibility'
            },
                {
                    name: 'print',
                    label: 'Imprimir',
                    icon: 'print'
                }
            ];

            // if ($rootScope.isMobile) {

            BottomSheetService.sheet($event, buttons, function (err, clicked) {
                if (err) return console.log('canceled', err);

                switch (clicked) {
                    case 'view':
                        $state.go('home.viewVenta', {ventaId: item._id});
                        break;
                    case 'print':
                        extraerVenta(item);
                        break;
                    default:
                        console.log('something went wrong')
                }
            })

        } //end showBottomSheet

        function DialogController($scope, $mdDialog, item, Ventas, Socket, Cajas) {

            $scope.item = item; //es la venta que tengo que actualizar

            $scope.seleccionCaja = false;

            $scope.findCajas = function () {
                $scope.cajas = [];
                Cajas.query({e: item.enterprise._id}, function (foundCaja) {
                    foundCaja.forEach(function (entry) {
                        if (entry.deleted === false) {
                            $scope.cajas.push(entry);
                        }
                    });

                    if ($scope.cajas.length === 1) {
                        $scope.caja = $scope.cajas[0];
                    }
                });
            };

            $scope.findCajas();

            $scope.finalizarVenta = function (item) {
                var estado = 'Finalizada';
                if (item.condicionVenta.name !== 'Cuenta Corriente') {
                    if (this.caja !== undefined) {
                        item.caja = this.caja;
                        updateVenta(item, estado);
                    } else {
                        $scope.errorCaja = 'Debe seleccionar la caja';
                    }
                } else {
                    item.caja = undefined;
                    updateVenta(item, estado);
                }
            };

            function updateVenta(venta, estado) {
                venta.estado = estado;

                venta.enterprise = venta.enterprise._id;
                venta.tipoComprobante = venta.tipoComprobante._id;
                if (venta.cliente && venta.cliente._id) {
                    venta.cliente = venta.cliente._id
                }
                if (venta.category1 && venta.category1._id) {
                    venta.category1 = venta.category1._id
                }
                venta.condicionVenta = venta.condicionVenta._id;
                if (venta.caja !== undefined) {
                    venta.caja = venta.caja._id;
                }

                $mdDialog.hide();
                Socket.emit('venta.update', venta);
            }

            $scope.montoTotal = function () {
                console.log('mototoal?????');
                Ventas.query({e: $scope.item.enterprise}, function () {
                    for (var i in $scope.$parent.ventas) {
                        if (($scope.ventas[i].estado === 'Pendiente de pago y entrega') && ($scope.ventas[i].deleted === false)) {
                            $scope.$parent.totalPendientesPA = $scope.$parent.totalPendientesPA + $scope.ventas[i].total;
                        }
                        if (($scope.ventas[i].estado === 'Pendiente de pago2') && ($scope.ventas[i].deleted === false)) {
                            $scope.$parent.totalPendientesPago = $scope.$parent.totalPendientesPago + $scope.ventas[i].total;
                        }
                        if (($scope.ventas[i].estado === 'Pendiente de entrega') && ($scope.ventas[i].deleted === false)) {
                            $scope.$parent.totalPendientesEntrega = $scope.$parent.totalPendientesEntrega + $scope.ventas[i].total;
                        }
                        if (($scope.ventas[i].estado === 'Finalizada') && ($scope.ventas[i].deleted === false)) {
                            $scope.$parent.totalFinalizadas = $scope.$parent.totalFinalizadas + $scope.ventas[i].total;
                            $scope.$parent.ventasFinalizadas.push($scope.ventas[i]);
                        }
                        if (($scope.ventas[i].estado === 'Anulada') && ($scope.ventas[i].deleted === false)) {
                            $scope.$parent.totalAnuladas = $scope.$parent.totalAnuladas + $scope.ventas[i].total;
                            // $scope.$parent.ventasFinalizadas.push($scope.ventas[i]);
                        }
                    }
                })
            }; //end montoTotal

            $scope.hide = function () {
                $mdDialog.hide();
            };

            $scope.cancel = function () {
                $mdDialog.cancel();
            };

            $scope.answer = function (answer) {
                $mdDialog.hide(answer);
            };

            $scope.habilitoCaja = function (n) {
                $scope.seleccionCaja = n;
            };

            $scope.actualizarVenta = function (data) {

                var venta = $scope.item;
                if (data === 'pagado') {
                    var estado = 'Pendiente de entrega';
                }
                if (data === 'entregado') {
                    var estado = 'Pendiente de pago2';
                }
                if (data === 'pYa') {
                    var estado = 'Finalizada';
                }

                venta.estado = estado;

                /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
                 una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
                 hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */
                venta.enterprise = venta.enterprise._id;
                if (venta.tipoComprobante !== undefined) {
                    venta.tipoComprobante = venta.tipoComprobante._id;
                }
                venta.cliente = venta.cliente._id;
                venta.condicionVenta = venta.condicionVenta._id;

                $mdDialog.hide();
                Socket.emit('venta.update', venta);

                // venta.$update(function() {
                // 	// $scope.montoTotal();
                // 	$mdDialog.hide();
                // 	if (data !== undefined){
                // 		location.reload(true);
                // 	}
                // 	// $location.path('ventas');
                // }, function(errorResponse) {
                // 	$scope.error = errorResponse.data.message;
                // });
            }; //end actualizarVenta

        } //end dialogController

    } //end function
]);
'use strict';

// Comprobantes controller
angular.module('ventas').controller('VentasMostradorController', ['$scope', '$rootScope', '$state', '$http', '$filter', '$q', 'Authentication', 'Cajas', 'Categories', 'Condicionventas', 'Enterprises', 'Modal', 'Ventas', 'user',
    function($scope, $rootScope, $state, $http, $filter, $q, Authentication, Cajas, Categories, Condicionventas, Enterprises, Modal, Ventas, user) {

        $scope.authentication = Authentication;
        $scope.impuesto = false;

        $scope.$watch('authentication', function() {
            $scope.find();
            $scope.findCategories();
            $scope.findProducts();
            $scope.findClients();
            $scope.findCajas();
            Condicionventas.query({ e: $scope.user.enterprise.enterprise }, function(res) {
                $scope.condicionVentas = res;
                Modal.setCondicionesVentas($scope.condicionVentas);
            });
            $scope.findComprobantes();
        });
        $scope.$watch('condicionVenta', function() {
            if ($scope.condicionVenta)

                $scope.verCondicionVenta($scope.condicionVenta)
            console.log($scope.condicionVenta);

        });

        var global = this;

        this.productList = [];
        this.itemList = {};
        this.total = 0;

        $scope.user = user;
        $scope.elegirCaja = true;
        $scope.tax1 = [];
        $scope.tax2 = [];
        $scope.tax3 = [];
        $scope.productosDeVenta = [];

        $scope.descuento_porcentaje = 0;
        $scope.descuento_valor = 0;
        $scope.vistaTotal = 0;
        $scope.vistaSubtotal = 0;
        $scope.vistaNeto = 0;
        $scope.vistaTax1 = 0;
        $scope.vistaTax2 = 0;
        $scope.vistaTax3 = 0;
        $scope.botonApagado = false;
        $scope.mensajeSinVentas = false;
        $scope.mostrarUltimaVenta = false;
        $scope.minLengthClient = 0;

        var created = new Date();
        $scope.created = new Date(created.setTime(created.getTime() + (3 * 60 * 60 * 1000)));

        // Fills the select input list with enterprises (used only if you are groso)
        $scope.findEnterprises = function() {
            $scope.enterprises = Enterprises.query();
        };

        // Fills the select input list with product items
        $scope.findProducts = function() {
            var promise = $http({
                method: 'GET',
                url: ('/api/products/mostrador/'),
                params: {
                    e: $scope.user.enterprise.enterprise
                }
            });
            promise.then(function(response) {
                for (var p = 0; p < response.data.length; p++) {
                    if (global.productList[response.data[p].category2.name])
                        global.productList[response.data[p].category2.name].push(response.data[p]);
                    else {
                        global.productList[response.data[p].category2.name] = [];
                        global.productList[response.data[p].category2.name].push(response.data[p]);
                    }
                }
            });
        };

        // Fills the select input list with comprobantes
        $scope.findComprobantes = function() {
            var promise = $http({
                method: 'GET',
                url: ('/api/comprobantes/mostrador/'),
                params: {
                    e: $scope.user.enterprise.enterprise,
                    exclude: 'Pedido'
                }
            });
            promise.then(function(response) {
                $scope.comprobantes = response.data;
                Modal.setComprobantes($scope.comprobantes);
            });
        };

        // Fills the select input list with categories
        $scope.findCategories = function() {
            var promise = $http({
                method: 'GET',
                url: ('/api/categories/mostrador/'),
                params: {
                    e: $scope.user.enterprise.enterprise
                }
            });
            promise.then(function(response) {
                $scope.categories = response.data;
            });
        };

        // Fills the select input list with categories
        $scope.findCategories2 = function() {
            Categories.query({ e: $scope.user.enterprise.enterprise }, function(data) {
                $scope.categories2 = $filter('filter')(data, function(item) {
                    return item.type1 === 'Tipo de Venta';
                });
                Modal.setCategorias($scope.categories2);
            });
        };

        // Find a list of Clients
        $scope.findClients = function() {
            var promise = $http({
                method: 'GET',
                url: ('/api/clients'),
                params: { e: $scope.user.enterprise.enterprise }
            });

            promise.then(function(response) {
                $scope.clients = response.data;
                for (var i = 0; i < $scope.clients.length; i++) {
                    if ($scope.clients[i].name === "Consumidor Final")
                        $scope.client = $scope.clients[i];
                }
            });
        };

        // Fills the select input list with cajas
        $scope.findCajas = function() {
            $scope.cajas = [];
            Cajas.query({ e: $scope.user.enterprise.enterprise }, function(foundCaja) {
                foundCaja.forEach(function(entry) {
                    if (entry.deleted === false) {
                        $scope.cajas.push(entry);
                    }

                    if (entry.puestos.length > 0 && user.puesto == entry.puestos[0]._id) {
                        $scope.caja = entry;
                    }
                });

                if ($scope.cajas.length === 1) {
                    $scope.caja = $scope.cajas[0]
                }
            })
        };

        // Find a list of Ventas
        $scope.find = function() {
            $rootScope.nuevoCliente = undefined;
            asyncVentas();
        };

        function asyncVentas() {
            $scope.ventas = Ventas.query({ e: $scope.user.enterprise.enterprise });
            var deferred = $q.defer();
            setTimeout(function() {
                if ($scope.ventas !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        }

        // Searches for clients in the list
        $scope.searchTextChangeClients = function(text) {
            return $filter('filter')($scope.clients, { name: angular.lowercase(text) });
        };

        $scope.selectedItemChange = function(item) {
            $scope.mensajeCli = undefined;
            $scope.client = item;
            $scope.ultimaVenta = [];
            if ($scope.ventaRecordada === true) {
                $scope.productosDeVenta = [];
            }
            $scope.mensajeSinVentas = false;
            if (($scope.client !== undefined) && ($scope.client !== null)) {
                var promise = null;
                if (($scope.client.condicionPago !== undefined) && ($scope.client.condicionPago !== null)) {
                    promise = $http({
                        method: 'GET',
                        url: ('/api/condicionventas'),
                        params: { e: $scope.user.enterprise.enterprise }
                    });
                    promise.then(function(response) {
                        $scope.condicionVentas = response.data;
                        for (var i = 0; i < $scope.condicionVentas.length; i++) {
                            if (($scope.client.condicionPago._id !== undefined) && ($scope.client.condicionPago._id !== null) && ($scope.condicionVentas[i]._id == $scope.client.condicionPago._id)) {
                                $scope.condicionVenta = $scope.condicionVentas[i];
                            } else if ($scope.condicionVentas[i]._id == $scope.client.condicionPago) {
                                $scope.condicionVenta = $scope.condicionVentas[i];
                            }
                        }
                    });
                }

                if (($scope.client.comprobante !== undefined) && ($scope.client.comprobante !== null)) {
                    promise = $http({
                        method: 'GET',
                        url: ('/api/comprobantes'),
                        params: { e: $scope.user.enterprise.enterprise }
                    });
                    promise.then(function(response) {
                        $scope.comprobantes = response.data;
                        for (var i = 0; i < $scope.comprobantes.length; i++) {
                            if (($scope.client.comprobante._id !== undefined) && ($scope.client.comprobante._id !== null) && ($scope.comprobantes[i]._id == $scope.client.comprobante._id)) {
                                $scope.tipoComprobante = $scope.comprobantes[i];
                                $scope.actualizarN();
                            } else if ($scope.comprobantes[i]._id == $scope.client.comprobante) {
                                $scope.tipoComprobante = $scope.comprobantes[i];
                                $scope.actualizarN();
                            }
                        }
                    });
                }
                $scope.mostrarUltimaVenta = true;
            }
        };

        $scope.sendClient = function($event, client) {
            if ($event.keyCode === 13) {
                $event.preventDefault();
                if ((client === null) || (client === undefined)) {
                    $scope.mensajeC = 'No seleccionaste un cliente valido';
                } else {
                    $scope.client = client;
                    console.log('todo ok: ', client);
                }
            }
        };

        // Adds products to the list
        $scope.addToList = function(product) {
            console.log(global.itemList);
            if (global.itemList.hasOwnProperty(product.name)) {
                global.itemList[product.name] += 1;
                for (var i = 0; i < $scope.productosDeVenta.length; i++) {
                    if ($scope.productosDeVenta[i].product.name === product.name) {
                        $scope.productosDeVenta.splice(i, 1);
                        break;
                    }
                }
            } else {
                global.itemList[product.name] = 1;
            }

            $scope.mensajeProd = undefined;
            $scope.productosDeVenta.push({
                product: product,
                cantidad: global.itemList[product.name],
                total: parseFloat(global.itemList[product.name]) * parseFloat(product.unitPrice)
            });
            $scope.calcularTotales();

            global.total = global.total + product.unitPrice;
        };

        // Removes products from the list
        $scope.removeFromList = function(productName) {
            var product = null;
            if (global.itemList.hasOwnProperty(productName)) {
                for (var i = 0; i < $scope.productosDeVenta.length; i++) {
                    if ($scope.productosDeVenta[i].product.name === productName) {
                        product = $scope.productosDeVenta[i].product;
                        $scope.productosDeVenta.splice(i, 1);
                        break;
                    }
                }
                if (global.itemList[productName] > 1) {
                    global.itemList[productName] -= 1;
                    $scope.productosDeVenta.push({
                        product: product,
                        cantidad: global.itemList[productName],
                        total: parseFloat(global.itemList[productName]) * parseFloat(product.unitPrice)
                    });
                } else {
                    delete global.itemList[productName];
                }

                global.total = global.total - product.unitPrice;
                $scope.vistaNeto = $scope.vistaNeto - product.unitPrice;
            }
        };

        $scope.roundTotal = function(num) {
            return parseInt(num * 100) / 100;
        };

        $scope.verCondicionVenta = function(c) {
            $scope.mensajeCond = undefined;
            if (c.name == 'Cuenta Corriente') {
                $scope.elegirCaja = false;
                $scope.caja = undefined;
            } else {
                $scope.elegirCaja = true;
            }
        };

        $scope.actualizarN = function() {
            $scope.letra_comprobante = $scope.tipoComprobante.letra;
            $scope.puntoVenta_comprobante = n_with_zeroes(parseInt($scope.tipoComprobante.puntoDeVenta), 4);
            $scope.comprobante = n_with_zeroes(parseInt($scope.tipoComprobante.ultimoNumero) + 1, 8);
            $scope.mensajeTipoC = undefined;
            var comprobante = $scope.tipoComprobante.name;
            if (comprobante == "Factura A" || comprobante == "Factura B" || comprobante == "Factura C") {
                $scope.impuesto = true;
            } else {
                $scope.impuesto = false;
            }
        };

        $scope.calcularTotales = function() {
            var sub = 0;
            var totTax1 = 0;
            var totTax2 = 0;
            var totTax3 = 0;
            var i;
            $scope.tax1 = [];
            $scope.tax2 = [];
            $scope.tax3 = [];
            for (i = 0; i < $scope.productosDeVenta.length; i++) {
                //descuentos
                if ($scope.productosDeVenta[i].descuento === undefined) {
                    $scope.productosDeVenta[i].descuento = 0;
                }
                var desc = parseFloat($scope.productosDeVenta[i].descuento) * $scope.productosDeVenta[i].product.unitPrice / 100;
                var finalPrice = $scope.productosDeVenta[i].product.unitPrice - desc;
                var additionalIva = parseFloat(1 - (1 / (1 + $scope.productosDeVenta[i].product.tax / 100))) * parseFloat(finalPrice);
                if (parseFloat($scope.productosDeVenta[i].product.tax) === 10.5) {
                    $scope.tax1.push(additionalIva * parseFloat($scope.productosDeVenta[i].cantidad));
                }
                if (parseFloat($scope.productosDeVenta[i].product.tax) === 21.00) {
                    $scope.tax2.push(additionalIva * parseFloat($scope.productosDeVenta[i].cantidad));
                }
                if (parseFloat($scope.productosDeVenta[i].product.tax) === 27.00) {
                    $scope.tax3.push(additionalIva * parseFloat($scope.productosDeVenta[i].cantidad));
                }
                sub = sub + parseFloat($scope.productosDeVenta[i].cantidad) * finalPrice;
            }
            if ($scope.tax1.length > 0) {
                for (i = 0; i < $scope.tax1.length; i++) {
                    totTax1 = totTax1 + parseFloat($scope.tax1[i]);
                }
            }
            if ($scope.tax2.length > 0) {
                for (i = 0; i < $scope.tax2.length; i++) {
                    totTax2 = totTax2 + parseFloat($scope.tax2[i]);
                }
            }
            if ($scope.tax3.length > 0) {
                for (i = 0; i < $scope.tax3.length; i++) {
                    totTax3 = totTax3 + parseFloat($scope.tax3[i]);
                }
            }

            $scope.vistaSubtotal = sub;
            var d = $scope.descuento_porcentaje * $scope.vistaSubtotal / 100;
            $scope.descuento_valor = d;

            $scope.vistaNeto = $scope.vistaSubtotal - d;
            $scope.vistaTax1 = totTax1;
            $scope.vistaTax2 = totTax2;
            $scope.vistaTax3 = totTax3;
            // $scope.vistaTotal = $scope.vistaNeto + $scope.vistaTax1 + $scope.vistaTax2 + $scope.vistaTax3;
            $scope.vistaTotal = $scope.vistaNeto;
        };

        function printFinalizada(item) {
            $http({
                method: 'POST',
                url: ('/api/ventas/print/'),
                data: {
                    storeName: user.storeName,
                    orden: item
                }
            });
        }

        $scope.clickSubmit = function() {
            $scope.botonApagado = true;
            $scope.clicked = true;
            $scope.create();
        };

        // Create new Venta
        $scope.create = function() {
            if ($scope.clicked === true) {
                if ($scope.productosDeVenta.length !== 0) {
                    if (($scope.client !== undefined) && ($scope.client !== '') && ($scope.client !== null)) {
                        if (($scope.tipoComprobante !== undefined) && ($scope.tipoComprobante !== '')) {
                            if (($scope.condicionVenta !== undefined) && ($scope.condicionVenta !== '')) {
                                var totalTax = $scope.vistaTax1 + $scope.vistaTax2 + $scope.vistaTax3;
                                // var total = $scope.vistaNeto + totalTax;
                                var total = $scope.vistaNeto;
                                var venta = null;
                                if ($scope.condicionVenta.name == 'Cuenta Corriente') {
                                    $scope.mensajeError = undefined;
                                    // Create new Venta object
                                    $scope.calcularTotales();
                                    venta = new Ventas({
                                        created: $scope.created,
                                        caja: undefined,
                                        tipoComprobante: this.tipoComprobante,
                                        comprobante: this.comprobante,
                                        enterprise: this.enterprise ? this.enterprise._id : $scope.user.enterprise.enterprise,
                                        puesto: $scope.authentication.user.puesto,
                                        category1: this.category1 ? this.category1._id : undefined,
                                        cliente: $scope.client,
                                        impuesto: $scope.impuesto,
                                        condicionVenta: this.condicionVenta,
                                        products: $scope.productosDeVenta,
                                        subtotal: $scope.vistaSubtotal,
                                        descuentoPorcentaje: this.descuento_porcentaje,
                                        descuentoValor: $scope.vistaSubtotal * this.descuento_porcentaje / 100,
                                        neto: $scope.vistaNeto,
                                        tax1: $scope.vistaTax1,
                                        tax2: $scope.vistaTax2,
                                        tax3: $scope.vistaTax3,
                                        totalTax: totalTax,
                                        total: total
                                    });

                                    createVenta(venta);
                                } else {
                                    if (($scope.caja !== undefined) && ($scope.caja !== '')) {
                                        $scope.mensajeError = undefined;
                                        // Create new Venta object
                                        $scope.calcularTotales();
                                        venta = new Ventas({
                                            created: $scope.created,
                                            caja: this.caja,
                                            tipoComprobante: this.tipoComprobante,
                                            comprobante: this.comprobante,
                                            enterprise: this.enterprise ? this.enterprise._id : $scope.user.enterprise.enterprise,
                                            category1: this.category1 ? this.category1._id : undefined,
                                            puesto: $scope.authentication.user.puesto,
                                            cliente: $scope.client,
                                            impuesto: $scope.impuesto,
                                            condicionVenta: this.condicionVenta,
                                            products: $scope.productosDeVenta,
                                            subtotal: $scope.vistaSubtotal,
                                            descuentoPorcentaje: this.descuento_porcentaje,
                                            descuentoValor: $scope.vistaSubtotal * this.descuento_porcentaje / 100,
                                            neto: $scope.vistaNeto,
                                            tax1: $scope.vistaTax1,
                                            tax2: $scope.vistaTax2,
                                            tax3: $scope.vistaTax3,
                                            totalTax: totalTax,
                                            total: total
                                        });
                                        createVenta(venta);
                                    } else {
                                        $scope.botonApagado = false;
                                        $scope.mensajeCaja = 'Debe elegir una caja';
                                    }
                                }
                            } else {
                                $scope.botonApagado = false;
                                $scope.mensajeCond = 'No seleccionaste una condicion de venta';
                            }
                        } else {
                            $scope.botonApagado = false;
                            $scope.mensajeTipoC = 'No seleccionaste un tipo de comprobante';
                        }
                    } else {
                        $scope.botonApagado = false;
                        $scope.mensajeCli = 'No seleccionaste un cliente';
                    }
                } else {
                    $scope.botonApagado = false;
                    $scope.mensajeProd = 'No seleccionaste productos para la venta';
                }
            }
            //end if scope clicked
        };

        function n_with_zeroes(number, length) {
            var my_string = '' + number;
            while (my_string.length < length) {
                my_string = '0' + my_string;
            }
            return my_string;
        }

        function createVenta(venta) {

            printFinalizada(venta);

            venta.$save(function(response) {
                if (response._id) {
                    $http.post('/api/impuestos/updateTotal', {
                        month: (new Date()).getMonth(),
                        year: (new Date()).getFullYear()
                    })

                    $scope.find();
                    $scope.ventas.push(venta);
                }

                $state.go($state.current, {}, { reload: true });
                // Clear form fields
                $scope.name = '';
                $scope.producto = '';
            }, function(errorResponse) {
                console.log('errorResponse', errorResponse);
            });

            $scope.clicked = false;
        }
    }
]);
'use strict';

// Ventas controller
angular.module('ventas').controller('VentasController', ['$scope', '$stateParams', '$location', 'Authentication', 'Ventas', 'Comprobantes', 'Products', 'Enterprises', 'Condicionventas', '$mdBottomSheet', 'Clients', '$rootScope', '$state', '$filter', '$mdDialog', '$http', '$timeout', 'Modal', 'Categories', 'Subs', 'Metrics', 'Providers', 'Contacts', 'Taxconditions', '$window', '$q', 'Cajas', 'Socket',
    function($scope, $stateParams, $location, Authentication, Ventas, Comprobantes, Products, Enterprises, Condicionventas, $mdBottomSheet, Clients, $rootScope, $state, $filter, $mdDialog, $http, $timeout, Modal, Categories, Subs, Metrics, Providers, Contacts, Taxconditions, $window, $q, Cajas, Socket) {
        $scope.authentication = Authentication;
        $scope.impuesto = false;
        // watch for SEARCH to update value

        if (localStorage.getItem("search") !== undefined) {
            $scope.SEARCH = JSON.parse(localStorage.getItem("search"));
        }

        $scope.$watch('authentication', function() {
            $scope.SEARCH = { enterprise: $scope.authentication.user.enterprise ? $scope.authentication.user.enterprise.enterprise : null };
            localStorage.setItem("search", JSON.stringify($scope.SEARCH));
            $scope.find();
            $scope.findClients();
            $scope.findCajas();
            Condicionventas.query({ e: $scope.SEARCH.enterprise }, function(res) {
                $scope.condicionVentas = res;
                Modal.setCondicionesVentas($scope.condicionVentas);
            });
            console.log($scope.condicionVenta);
            $scope.findComprobantes();
        });
        $scope.$watch('condicionVenta', function() {
            if ($scope.condicionVenta)

                $scope.verCondicionVenta($scope.condicionVenta)
            console.log($scope.condicionVenta);

        });

        var created = new Date();
        $scope.created = new Date(created.setTime(created.getTime() - (2 * 3 * 60 * 60 * 1000)));

        // $scope.buscaVenta = true;

        $scope.selectedMode = 'md-scale';
        $scope.selectedDirection = 'up';

        $scope.botonApagado = false;

        $scope.rutaVolver = function() {
            $state.go('home.pedidos', { "tipo": 'venta' });
        };

        $scope.initAutocomplete = function() {
            $scope.findProductos();
        };

        //si el array contiene el elemento value
        function arrContains(array, value) {
            for (var j = 0; j < array.length; j++) {
                if (array[j] === value) {
                    return true;
                }
                return false;
            }
        }

        $rootScope.$watch('nuevoProducto', function() {
            if ($rootScope.nuevoProducto !== undefined) {
                $scope.mostrarProducto = true;
                $http({
                        method: 'GET',
                        url: ('/api/products/' + $rootScope.nuevoProducto._id),
                        params: {}
                    })
                    .then(function(response) {
                        $scope.producto = response.data;
                    }, function(response) {
                        console.log('error');
                    });
                $scope.selectedItemChangeProduct($scope.producto);
            } else {
                $scope.mostrarProducto = false;
            }
        });

        $rootScope.$watch('nuevoCliente', function() {
            if ($rootScope.nuevoCliente !== undefined) {
                $scope.mostrar = true;
                $scope.cliente = $rootScope.nuevoCliente;
                $scope.selectedItemChange($scope.cliente);
            } else {
                $scope.mostrar = false;
            }
        });

        $scope.user = $scope.authentication.user;
        $scope.productoVenta = { cantidad: undefined, descuento: undefined, observaciones: '' };
        $scope.mostrarPoductosFavoritos = true;
        $scope.productosDeVenta = [];

        $scope.tax1 = [];
        $scope.tax2 = [];
        $scope.tax3 = [];

        $scope.descuento_porcentaje = 0;
        $scope.descuento_valor = 0;
        $scope.vistaSubtotal = 0;
        $scope.vistaNeto = 0;
        $scope.vistaTax1 = 0;
        $scope.vistaTax2 = 0;
        $scope.vistaTax3 = 0;

        $scope.elegirCaja = true;

        $scope.isFocused = false;

        //si la condicion de venta es CC no debe elegir caja
        $scope.verCondicionVenta = function(c) {
            $scope.mensajeCond = undefined;
            if (c.name == 'Cuenta Corriente') {
                $scope.elegirCaja = false;
                $scope.caja = undefined;
            } else {
                $scope.elegirCaja = true;
            }
        };

        //abre modal para anular y cerrar ventas
        $scope.showConfirmAnular = function(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Anular Venta')
                .content('¿Está seguro que desea anular esta venta?')
                .ariaLabel('Lucky day')
                .ok('Anular')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(function() {
                $scope.cambiarEstadoVenta('Anulada', item);
            }, function() {
                console.log('cancelaste anular');
            });
        };

        $scope.showConfirmPago = function(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Pagar venta')
                .content('¿Está seguro que desea pagar esta venta?')
                .ariaLabel('Lucky day')
                .ok('Pagar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(function() {
                $scope.cambiarEstadoVenta('Finalizada', item);
            }, function() {
                console.log('cancelaste cerrar');
            });
        };

        $scope.showConfirmEntrega = function(ev, item) {
            var confirm = $mdDialog.confirm()
                .title('Entregar venta')
                .content('¿Está seguro que desea entregar esta venta?')
                .ariaLabel('Lucky day')
                .ok('Entregar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(function() {
                $scope.cambiarEstadoVenta('Finalizada', item);
            }, function() {
                console.log('cancelaste cerrar');
            });
        };

        function n_with_zeroes(number, length) {
            var my_string = '' + number;
            while (my_string.length < length) {
                my_string = '0' + my_string;
            }
            return my_string;
        }

        //calculo de numero de comprobante
        //actualizar N
        $scope.actualizarN = function() {
            $scope.letra_comprobante = $scope.tipoComprobante.letra;
            $scope.puntoVenta_comprobante = n_with_zeroes(parseInt($scope.tipoComprobante.puntoDeVenta), 4);
            $scope.comprobante = n_with_zeroes(parseInt($scope.tipoComprobante.ultimoNumero) + 1, 8);
            $scope.mensajeTipoC = undefined;
            var comprobante = $scope.tipoComprobante.name;

            if (comprobante == "Factura A" || comprobante == "Factura B" || comprobante == "Factura C") {
                $scope.impuesto = true;
            } else {
                $scope.impuesto = false;
            }
        };


        //Para la edición
        $scope.modoEditar = [];
        $scope.mostrarP = false;
        $scope.cambiarMostrarP = function() {
            if ($scope.mostrarP === false) {
                $scope.mostrarP = true;
            } else {
                $scope.mostrarP = false;
            }
        };
        $scope.editTrue = function(id, p) {
            $scope.modoEditar[id] = true;
            // console.log(p);
            // console.log($scope.modoEditar);
        };
        $scope.updateP = function(index, p) {
            var unitWithDiscount = parseFloat(p.product.unitPrice) - (parseFloat(p.descuento) * parseFloat(p.product.unitPrice) / 100);
            // console.log(unitWithDiscount);
            var sub = parseFloat(p.cantidad) * parseFloat(unitWithDiscount);
            // console.log(sub);
            p.total = sub;
            p.totalSinD = parseFloat(p.cantidad) * parseFloat(p.product.unitPrice);
            $scope.productosDeVenta[index] = p;
            $scope.modoEditar[index] = false;
            $scope.calcularTotales();
        };

        $scope.calcularTotales = function() {
            var sub = 0;
            var totTax1 = 0;
            var totTax2 = 0;
            var totTax3 = 0;
            var descP = 0;
            var i;
            $scope.tax1 = [];
            $scope.tax2 = [];
            $scope.tax3 = [];
            if ($scope.descuento_porcentaje !== undefined) {
                descP = parseFloat($scope.descuento_porcentaje);
            }
            for (i = 0; i < $scope.productosDeVenta.length; i++) {
                //descuentos
                if ($scope.productosDeVenta[i].descuento === undefined) {
                    $scope.productosDeVenta[i].descuento = 0;
                }
                var desc = parseFloat($scope.productosDeVenta[i].descuento) * $scope.productosDeVenta[i].product.unitPrice / 100;
                var finalPrice = $scope.productosDeVenta[i].product.unitPrice - desc;
                var additionalIva = parseFloat(1 - (1 / (1 + $scope.productosDeVenta[i].product.tax / 100))) * parseFloat(finalPrice);
                if (parseFloat($scope.productosDeVenta[i].product.tax) === 10.5) {
                    $scope.tax1.push(additionalIva * parseFloat($scope.productosDeVenta[i].cantidad));
                }
                if (parseFloat($scope.productosDeVenta[i].product.tax) === 21.00) {
                    $scope.tax2.push(additionalIva * parseFloat($scope.productosDeVenta[i].cantidad));
                }
                if (parseFloat($scope.productosDeVenta[i].product.tax) === 27.00) {
                    $scope.tax3.push(additionalIva * parseFloat($scope.productosDeVenta[i].cantidad));
                }
                sub = sub + parseFloat($scope.productosDeVenta[i].cantidad) * finalPrice;
            }
            if ($scope.tax1.length > 0) {
                for (i = 0; i < $scope.tax1.length; i++) {
                    totTax1 = totTax1 + parseFloat($scope.tax1[i]);
                }
            }
            if ($scope.tax2.length > 0) {
                for (i = 0; i < $scope.tax2.length; i++) {
                    totTax2 = totTax2 + parseFloat($scope.tax2[i]);
                }
            }
            if ($scope.tax3.length > 0) {
                for (i = 0; i < $scope.tax3.length; i++) {
                    totTax3 = totTax3 + parseFloat($scope.tax3[i]);
                }
            }

            $scope.vistaSubtotal = sub;
            var descV = sub * descP / 100;
            var d = $scope.descuento_porcentaje * $scope.vistaSubtotal / 100;
            $scope.descuento_valor = d;

            $scope.vistaNeto = $scope.vistaSubtotal - d;
            $scope.vistaTax1 = totTax1;
            $scope.vistaTax2 = totTax2;
            $scope.vistaTax3 = totTax3;
            $scope.vistaTotal = $scope.vistaNeto;
        };

        $scope.clienteAsignado = function() {
            $scope.mensajeCli = undefined;
            $scope.descuento_porcentaje = $scope.client.discountRate;
            $scope.mostrarPoductosFavoritos = true;
            $scope.calcularTotales();
            // console.log($scope.client.productosAsociados);
        };

        $scope.asignarProducto = function(p) {
            $scope.stockD = false;
            $scope.producto = p;
            // console.log($scope.producto);
            // console.log('asigna proddd');
        };

        $scope.controlStock = function(p) {
            // console.log('cant', $scope.productoVenta.cantidad);
            // console.log('stock', p.unitsInStock);
            /*$scope.mensajeP = undefined;
             if ($scope.productoVenta.cantidad > p.unitsInStock) {
             $scope.stockD = true;
             $scope.productoVenta.cantidad = p.unitsInStock;
             } else {
             $scope.stockD = false;
             }*/
            if ($scope.productoVenta.cantidad > p.unitsInStock && $scope.productoVenta.cantidad > 0) {
                $scope.stockD = true;
            } else {
                $scope.stockD = false;
            }
        };

        // Create new Venta
        $scope.create = function() {
            if ($scope.clicked === true) {
                if ($scope.caja) {
                    if ($scope.productosDeVenta.length !== 0) {
                        if (($scope.client !== undefined) && ($scope.client !== '') && ($scope.client !== null)) {
                            if (($scope.tipoComprobante !== undefined) && ($scope.tipoComprobante !== '')) {
                                if (($scope.condicionVenta !== undefined) && ($scope.condicionVenta !== '')) {
                                    console.log($scope.impuesto);
                                    if ($scope.condicionVenta.name == 'Cuenta Corriente') {
                                        $scope.mensajeError = undefined;
                                        // Create new Venta object
                                        $scope.calcularTotales();
                                        var totalTax = $scope.vistaTax1 + $scope.vistaTax2 + $scope.vistaTax3;
                                        // var total = $scope.vistaNeto + totalTax;
                                        var total = $scope.vistaNeto;
                                        var productosParaAgregar = [];
                                        var venta = new Ventas({
                                            created: $scope.created,
                                            caja: undefined,
                                            tipoComprobante: this.tipoComprobante,
                                            comprobante: this.comprobante,
                                            enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
                                            category1: this.category1 ? this.category1._id : undefined,
                                            puesto: $scope.authentication.user.puesto,
                                            myDate: $scope.myDate,
                                            cliente: $scope.client,
                                            impuesto: $scope.impuesto,
                                            delivery: this.delivery,
                                            condicionVenta: this.condicionVenta,
                                            products: $scope.productosDeVenta,
                                            observaciones: this.observaciones,
                                            subtotal: $scope.vistaSubtotal,
                                            descuentoPorcentaje: this.descuento_porcentaje,
                                            descuentoValor: $scope.vistaSubtotal * this.descuento_porcentaje / 100,
                                            neto: $scope.vistaNeto,
                                            tax1: $scope.vistaTax1,
                                            tax2: $scope.vistaTax2,
                                            tax3: $scope.vistaTax3,
                                            totalTax: totalTax,
                                            total: total
                                        });


                                        createVenta(venta);
                                    } else {
                                        if (($scope.caja !== undefined) && ($scope.caja !== '')) {
                                            $scope.mensajeError = undefined;
                                            // Create new Venta object
                                            $scope.calcularTotales();
                                            var totalTax = $scope.vistaTax1 + $scope.vistaTax2 + $scope.vistaTax3;
                                            // var total = $scope.vistaNeto + totalTax;
                                            var total = $scope.vistaNeto;
                                            var productosParaAgregar = [];
                                            var venta = new Ventas({
                                                created: $scope.created,
                                                caja: this.caja,
                                                tipoComprobante: this.tipoComprobante,
                                                comprobante: this.comprobante,
                                                enterprise: this.enterprise ? this.enterprise._id : $scope.SEARCH.enterprise,
                                                category1: this.category1 ? this.category1._id : undefined,
                                                puesto: $scope.authentication.user.puesto,
                                                myDate: $scope.myDate,
                                                cliente: $scope.client,
                                                impuesto: $scope.impuesto,
                                                delivery: this.delivery,
                                                condicionVenta: this.condicionVenta,
                                                products: $scope.productosDeVenta,
                                                observaciones: this.observaciones,
                                                subtotal: $scope.vistaSubtotal,
                                                descuentoPorcentaje: this.descuento_porcentaje,
                                                descuentoValor: $scope.vistaSubtotal * this.descuento_porcentaje / 100,
                                                neto: $scope.vistaNeto,
                                                tax1: $scope.vistaTax1,
                                                tax2: $scope.vistaTax2,
                                                tax3: $scope.vistaTax3,
                                                totalTax: totalTax,
                                                total: total
                                            });

                                            createVenta(venta);
                                        } else {
                                            $scope.botonApagado = false;
                                            $scope.mensajeCaja = 'Debe elegir una caja';
                                        }
                                    }
                                } else {
                                    $scope.botonApagado = false;
                                    $scope.mensajeCond = 'No seleccionaste una condicion de venta';
                                }
                            } else {
                                $scope.botonApagado = false;
                                $scope.mensajeTipoC = 'No seleccionaste un tipo de comprobante';
                            }
                        } else {
                            $scope.botonApagado = false;
                            $scope.mensajeCli = 'No seleccionaste un cliente';
                        }
                    } else {
                        $scope.botonApagado = false;
                        $scope.mensajeProd = 'No seleccionaste productos para la venta';
                    }
                } else {
                    $scope.botonApagado = false;
                    $scope.mensajeProd = 'No seleccionaste Caja para la venta';
                }

            }
            //end if scope clicked
            else {
                //prevent defaults
                //prevengo que se haga un submit cuando presiona enter
            }
        };

        function createVenta(venta) {

            venta.$save(function(response) {
                console.log(response);
                if (response._id) {
                    // $http.put('/api/cajas/updateTotal', { response });
                    $http.post('/api/impuestos/updateTotal', {
                        month: (new Date()).getMonth(),
                        year: (new Date()).getFullYear()
                    });

                    $scope.find();
                    $scope.ventas.push(venta);
                }
                // $scope.modificarCliente(productosParaAgregar);
                $state.go('home.ventas', { tab: 'finalizada' });
                // Clear form fields
                $scope.name = '';
                $scope.producto = '';
            }, function(errorResponse) {
                console.log('errorResponse', errorResponse);
            });

            $scope.clicked = false;
        }

        //si apreto el boton submit llama al create, si se acciono por enter no
        $scope.clickSubmit = function() {
            $scope.botonApagado = true;
            $scope.clicked = true;
            $scope.create();
        };

        // Remove existing Venta
        $scope.remove = function(venta) {
            if (venta) {
                venta.$remove();

                for (var i in $scope.ventas) {
                    if ($scope.ventas[i] === venta) {
                        $scope.ventas.splice(i, 1);
                    }
                }
            } else {
                $scope.venta.$remove(function() {
                    $location.path('ventas');
                });
            }
        };

        // Update existing Venta
        $scope.update = function() {
            var venta = $scope.venta;

            /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
             una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
             hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */
            if (this.enterprise !== undefined) {
                venta.enterprise = this.enterprise._id
            } else {
                venta.enterprise = venta.enterprise._id
            }
            if (this.tipoComprobante !== undefined) {
                venta.tipoComprobante = this.tipoComprobante._id
            } else if ((venta.tipoComprobante !== undefined) && (venta.tipoComprobante !== null)) {
                venta.tipoComprobante = venta.tipoComprobante._id
            }
            if (this.client !== undefined) {
                venta.cliente = this.client._id
            } else if ((venta.cliente !== undefined) && (venta.cliente !== null)) {
                venta.cliente = venta.cliente._id
            };
            if (this.condicionVenta !== undefined) {
                venta.condicionVenta = this.condicionVenta._id
            } else if ((venta.condicionVenta !== undefined) && (venta.condicionVenta !== null)) {
                venta.condicionVenta = venta.condicionVenta._id
            };

            venta.$update(function() {
                $location.path('ventas/' + venta._id);
            }, function(errorResponse) {
                $scope.error = errorResponse.data.message;
            });
        };

        // Cambiar estado Venta
        $scope.cambiarEstadoVenta = function(estado, v) {
            var venta = v;
            venta.estado = estado;

            /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
             una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
             hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */
            if (this.enterprise !== undefined) {
                venta.enterprise = this.enterprise._id
            } else {
                venta.enterprise = venta.enterprise._id
            };
            if (this.tipoComprobante !== undefined) {
                venta.tipoComprobante = this.tipoComprobante._id
            } else if ((venta.tipoComprobante !== undefined) && (venta.tipoComprobante !== null)) {
                venta.tipoComprobante = venta.tipoComprobante._id
            };
            if ((venta.cliente !== undefined) && (venta.cliente !== null)) {
                venta.cliente = venta.cliente._id
            } else if (this.client !== undefined) {
                venta.cliente = this.client._id
            };
            if (this.condicionVenta !== undefined) {
                venta.condicionVenta = this.condicionVenta._id
            } else if ((venta.condicionVenta !== undefined) && (venta.condicionVenta !== null)) {
                venta.condicionVenta = venta.condicionVenta._id
            };

            Socket.emit('venta.update', venta);
        };

        Socket.on('ventas.update', angular.bind(this, function(message) {
            console.log("MOZDA OVDE");
            $scope.montoTotal();
            $state.go('home.ventas');
        }));

        // Find a list of Ventas

        $scope.find = function() {
            $rootScope.nuevoCliente = undefined;
            var promise = asyncVentas();
            promise.then(function(response) {
                $scope.montoTotal();
            });
            // }
        };

        function asyncVentas(item) {
            if ($scope.SEARCH !== undefined) {
                $scope.ventas = Ventas.query({ e: $scope.SEARCH.enterprise });
            }
            var deferred = $q.defer();
            setTimeout(function() {
                if ($scope.ventas !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        };

        $scope.ventasFinalizadas = [];

        $scope.montoTotal = function() {
            $scope.totalPendientesPA = 0;
            $scope.totalPendientesPago = 0;
            $scope.totalPendientesEntrega = 0;
            $scope.totalFinalizadas = 0;
            $scope.totalAnuladas = 0;
            for (var i = 0; i < $scope.ventas.length; i++) {
                if (($scope.ventas[i].estado === 'Pendiente de pago y entrega') && ($scope.ventas[i].deleted === false)) {
                    $scope.totalPendientesPA = $scope.totalPendientesPA + $scope.ventas[i].total;
                }
                if (($scope.ventas[i].estado === 'Pendiente de pago2') && ($scope.ventas[i].deleted === false)) {
                    $scope.totalPendientesPago = $scope.totalPendientesPago + $scope.ventas[i].total;
                }
                if (($scope.ventas[i].estado === 'Pendiente de entrega') && ($scope.ventas[i].deleted === false)) {
                    $scope.totalPendientesEntrega = $scope.totalPendientesEntrega + $scope.ventas[i].total;
                }
                if (($scope.ventas[i].estado === 'Finalizada') && ($scope.ventas[i].deleted === false)) {
                    $scope.totalFinalizadas = $scope.totalFinalizadas + $scope.ventas[i].total;
                    $scope.ventasFinalizadas.push($scope.ventas[i]);
                }
                if (($scope.ventas[i].estado === 'Anulada') && ($scope.ventas[i].deleted === false)) {
                    $scope.totalAnuladas = $scope.totalAnuladas + $scope.ventas[i].total;
                    // $scope.ventasFinalizadas.push($scope.ventas[i]);
                }
            }
        };

        // Find existing Venta
        $scope.findOne = function() {
            // $rootScope.nuevoCliente = undefined;
            Ventas.get({ ventaId: $stateParams.ventaId }, function(res) {
                    $scope.venta = res;
                    var ptoVenta = n_with_zeroes(parseInt($scope.venta.tipoComprobante.puntoDeVenta), 4);
                    $scope.ptoVenta = ptoVenta;
                },
                function(err) {
                    //error
                }
            );
        };

        // Find a list of Comprobantes
        $scope.findComprobantes = function() {
            // $scope.comprobantes = Comprobantes.query();
            if ($scope.SEARCH !== undefined) {
                var promise = $http({
                    method: 'GET',
                    url: ('/api/comprobantes/'),
                    params: { e: $scope.SEARCH.enterprise }
                });
                promise.then(function(response) {
                    $scope.comprobantes = response.data;
                    for (var i in $scope.comprobantes) {
                        if ($scope.comprobantes[i].name === 'Pedido') {
                            $scope.comprobantes.splice(i, 1);
                        }
                    }
                    Modal.setComprobantes($scope.comprobantes);
                });
            }
        };

        // Find a list of Enterprises
        $scope.findEnterprises = function() {
            $scope.enterprises = Enterprises.query();
        };

        // Find a list of Products
        $scope.findProductos = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.productos = Products.query({ e: $scope.SEARCH.enterprise });
            } else {
                $scope.productos = Products.query();
            }
            $scope.productosFilter = $scope.productos;
        };

        // Find a list of CondicionVentas
        $scope.findCondicionesventas = function() {
            if ($scope.SEARCH !== undefined) {
                // $scope.condicionesVentas = Condicionventas.query();
                var promise = $http({
                    method: 'GET',
                    url: ('/api/condicionventas/'),
                    params: { e: $scope.SEARCH.enterprise }
                });
                promise.then(function(response) {
                    $scope.condicionVentas = response.data;
                    Modal.setCondicionesVentas($scope.condicionVentas);
                });
            }
        };

        // Find a list of Clients
        $scope.findClients = function() {
            if ($scope.SEARCH !== undefined) {
                var promise = $http({
                    method: 'GET',
                    url: ('/api/clients'),
                    params: { e: $scope.SEARCH.enterprise }
                });

                promise.then(function(response) {
                    $scope.clients = response.data;
                    for (var i = 0; i < $scope.clients.length; i++) {
                        if ($scope.clients[i].name === "Consumidor Final")
                            $scope.client = $scope.clients[i];
                    }
                });
            }
        };

        $scope.sendClient = function($event, client) {
            if ($event.keyCode === 13) {
                $event.preventDefault();
                if ((client === null) || (client === undefined)) {
                    $scope.mensajeC = 'No seleccionaste un cliente valido';
                } else {
                    $scope.client = client;
                    console.log('todo ok: ', client);
                }
            }
        };

        $scope.mostrarUltimaVenta = false;

        $scope.selectedItemChange = function(item, ev) {
            // console.log(this.client, 'this.client');
            $scope.mensajeCli = undefined;
            $scope.client = item;
            $scope.ultimaVenta = [];
            if ($scope.ventaRecordada === true) {
                $scope.productosDeVenta = [];
            }
            $scope.mensajeSinVentas = false;
            //asigno por defecto los campos asociados al cliente en los select
            if (($scope.client !== undefined) && ($scope.client !== null)) {
                if (($scope.client.condicionPago !== undefined) && ($scope.client.condicionPago !== null)) {
                    var promise = $http({
                        method: 'GET',
                        url: ('/api/condicionventas'),
                        params: { e: $scope.SEARCH.enterprise }
                    });
                    promise.then(function(response) {
                        $scope.condicionVentas = response.data;
                        for (var i = 0; i < $scope.condicionVentas.length; i++) {
                            if (($scope.client.condicionPago._id !== undefined) && ($scope.client.condicionPago._id !== null) && ($scope.condicionVentas[i]._id == $scope.client.condicionPago._id)) {
                                // console.log('coincidio', $scope.condicionVentas[i]);
                                $scope.condicionVenta = $scope.condicionVentas[i];
                            } else if ($scope.condicionVentas[i]._id == $scope.client.condicionPago) {
                                // console.log('coincidio', $scope.condicionVentas[i]);
                                $scope.condicionVenta = $scope.condicionVentas[i];
                            }
                        }
                    });
                }
                if (($scope.client.comprobante !== undefined) && ($scope.client.comprobante !== null)) {
                    var promise = $http({
                        method: 'GET',
                        url: ('/api/comprobantes'),
                        params: { e: $scope.SEARCH.enterprise }
                    });
                    promise.then(function(response) {
                        $scope.comprobantes = response.data;
                        for (var i = 0; i < $scope.comprobantes.length; i++) {
                            if (($scope.client.comprobante._id !== undefined) && ($scope.client.comprobante._id !== null) && ($scope.comprobantes[i]._id == $scope.client.comprobante._id)) {
                                $scope.tipoComprobante = $scope.comprobantes[i];
                                $scope.actualizarN();
                            } else if ($scope.comprobantes[i]._id == $scope.client.comprobante) {
                                $scope.tipoComprobante = $scope.comprobantes[i];
                                $scope.actualizarN();
                            }
                        }
                    });
                }
                $scope.mostrarUltimaVenta = true;
            }
        };

        $scope.mensajeSinVentas = false;

        $scope.verUltimaVenta = function(client) {
            $scope.ultimaVenta = [];
            $scope.mostrarUltimaVenta = false;
            var idCliente = client._id;
            $scope.ultimaVenta = $filter('filter')($scope.ventas, function(item) {
                if ($scope.ventas.length !== 0) {
                    return (item.cliente.id === idCliente);
                }
            });

            if ($scope.ultimaVenta.length > 0) {
                if ($scope.productosDeVenta.length !== 0) {
                    $scope.productosDeVenta = [];
                    $scope.productosDeVenta = $scope.ultimaVenta[0].products;
                } else {
                    $scope.productosDeVenta = $scope.ultimaVenta[0].products;
                }
                this.descuento_porcentaje = 0;
                this.vistaTax1 = $scope.ultimaVenta[0].tax1;
                this.vistaTax2 = $scope.ultimaVenta[0].tax2;
                this.vistaTax3 = $scope.ultimaVenta[0].tax3;
                this.vistaSubtotal = $scope.ultimaVenta[0].subtotal;
                this.vistaNeto = $scope.ultimaVenta[0].subtotal;
                this.vistaTotal = $scope.ultimaVenta[0].total;
                $scope.ventaRecordada = true;
            } else {
                $scope.ventaRecordada = false;
                $scope.mensajeSinVentas = true;
            }
        };

        $scope.reverse = function(array) {
            var copy = [].concat(array);
            return copy.reverse();
        };

        $scope.selectedItemChangeProduct = function(item) {
            $scope.mensajeProd = undefined;
            $scope.producto = item;
            if($scope.producto!==null){
            	document.getElementById('inputCantidad').focus();
            }
        };

        //si presiona enter
        $scope.sendProduct = function($event, productoVenta, producto) {
            if (($event.keyCode === 13) || ($event.keyCode === 0) || ($event.keyCode === undefined)) {
                $event.preventDefault();
                // $scope.isFocused = false;
                if ((producto === null) || (producto === undefined)) {
                    $scope.mensajeP = 'No seleccionaste un producto valido';
                } else {
                    /*if ((productoVenta.cantidad === null) || (productoVenta.cantidad === undefined) || (producto.unitsInStock === 0)) {
                     if (producto.unitsInStock === 0) {
                     $scope.mensajeP = 'No hay stock disponible';
                     } else {
                     $scope.mensajeP = 'No seleccionaste una cantidad para el producto';
                     }
                     }*/
                    if ((productoVenta.cantidad === null) || (productoVenta.cantidad === undefined)) {
                        $scope.mensajeP = 'No seleccionaste una cantidad para el producto';
                    } else {
                        $scope.controlStock(producto);
                        $scope.stockD = false;
                        $scope.mensajeP = undefined;
                        $scope.producto = producto;
                        $scope.addProduct(producto, productoVenta);
                    }
                }
            }
        };

        // Add product to venta
        $scope.addProduct = function(producto, productoVenta) {
            $scope.mensajeProd = undefined;
            var p = {
                product: {},
                cantidad: undefined,
                descuento: undefined,
                total: undefined,
                observaciones: undefined
            };
            p.product = producto;
            if (producto != undefined) {
                // console.log(p, 'antes');
                if ((productoVenta.descuento === '') || (productoVenta.descuento === undefined)) {
                    p.descuento = '0';
                } else {
                    p.descuento = productoVenta.descuento;
                }
                if ((productoVenta.cantidad === '') || (productoVenta.cantidad === undefined)) {
                    p.cantidad = '0';
                } else {
                    p.cantidad = productoVenta.cantidad;
                }
                if (productoVenta.observaciones === undefined) {
                    p.observaciones = '';
                } else {
                    p.observaciones = productoVenta.observaciones;
                }
                // console.log(p);
                var unitWithDiscount = parseFloat(p.product.unitPrice) - (parseFloat(p.descuento) * parseFloat(p.product.unitPrice) / 100);
                // console.log(unitWithDiscount);
                var sub = parseFloat(p.cantidad) * parseFloat(unitWithDiscount);
                // console.log(sub);
                p.totalSinD = parseFloat(p.cantidad) * parseFloat(p.product.unitPrice);
                p.total = sub;
                $scope.productosDeVenta.push(p);
                $scope.calcularTotales();

                //pongo en vacios los campos de agregar prod
                productoVenta = undefined;
                p = undefined;
                $scope.productoVenta = { cantidad: undefined, descuento: undefined, observaciones: '' };
                $scope.selectedProduct = [];
                $scope.selectedItem = null;
                $scope.searchText2 = '';
                document.getElementById("buscaVenta").focus();
                // document.getElementById("buscaVenta").value = '';
            } else {
                return 0;
            }
        };

        // Eliminar product of venta
        $scope.eliminarProducto = function(index) {
            $scope.productosDeVenta.splice(index, 1);
            $scope.calcularTotales();
        };

        //autocomplete
        $scope.selectedProduct = [];
        $scope.selectedItem = null;

        //el texto ingresado
        $scope.searchText2 = null;

        /**
         * Create filter function for a query string
         */
        //filtro el arreglo de usuarios disponibles con los que coincidan con text
        $scope.searchTextChange = function(text) {
            var lowercaseQuery = angular.lowercase(text);
            $scope.productosFilter = $filter('filter')($scope.productos, { code: text });
        };

        $scope.searchTextChange2 = function(text) {
            var lowercaseQuery = angular.lowercase(text);
            $scope.productosNombre = $filter('filter')($scope.productos, { name: text });
        };

        $scope.searchTextChangeClients = function(text) {
            var lowercaseQuery = angular.lowercase(text);
            return $filter('filter')($scope.clients, { name: text });
        };

        $scope.round = function(total) {
            return '$' + parseFloat(total).toFixed(2);
        };

        $scope.minLengthClient = 0;

        $scope.showAdvancedClient = function(ev) {
            $scope.minLengthClient = 1;
            $scope.textToSearch = undefined;
            $scope.findContacts();
            $scope.findCategories();
            $scope.findTaxConditions();
            Modal.setEmpresa($scope.SEARCH.enterprise);
            $mdDialog.show({
                    controller: CrearController,
                    templateUrl: '/modules/ventas/views/create.client.view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: false
                })
                .then(function(answer) {
                    $scope.minLengthClient = 0;
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.minLengthClient = 0;
                    $scope.status = 'You cancelled the dialog.';
                });
        };

        $scope.findContacts = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.contacts = Contacts.query({ e: $scope.SEARCH.enterprise });
                Modal.setContactos($scope.contacts);
            }

        };

        $scope.findCategories = function() {
            if ($scope.SEARCH !== undefined) {
                Categories.query({ e: $scope.SEARCH.enterprise }, function(data) {
                    $scope.categories = $filter('filter')(data, function(item) {
                        return item.type1 === 'Tipo de Venta';
                    });
                    Modal.setCategorias($scope.categories);
                });
            }
        };

        $scope.findCajas = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.cajas = [];
                Cajas.query({ e: $scope.user.enterprise.enterprise }, function(foundCaja) {
                    foundCaja.forEach(function(entry) {
                        if (entry.deleted === false) {
                            $scope.cajas.push(entry);
                        }

                        if (entry.puestos.length > 0 && user.puesto == entry.puestos[0]._id) {
                            $scope.caja = entry;
                        }
                    });

                    if ($scope.cajas.length === 1) {
                        $scope.caja = $scope.cajas[0]
                    }
                })
            }
        };

        // Find a list of Taxconditions
        $scope.findTaxConditions = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.taxconditions = Taxconditions.query({ e: $scope.SEARCH.enterprise });
                Modal.setCondiciones($scope.taxconditions);
            }

        };

        $scope.showAdvanced = function(ev, item) {
            $mdDialog.show({
                    controller: DialogController,
                    templateUrl: '/modules/ventas/views/modal.client.view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true,
                    resolve: {
                        item: function() {
                            return item;
                        }
                    }
                })
                .then(function(answer) {
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.status = 'You cancelled the dialog.';
                });
        };

        $scope.minLength = 0;

        $scope.showAdvancedProduct = function(ev) {
            $scope.minLength = 1;
            $scope.searchText2 = undefined;
            $scope.findProveedores();
            $scope.findCategories();
            $scope.findSubs();
            $scope.findMetrics();
            $scope.findSubcategories();
            $scope.findTaxes();
            Modal.setEmpresa($scope.SEARCH.enterprise);
            $mdDialog.show({
                    controller: CrearController,
                    templateUrl: '/modules/ventas/views/create.product.view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: false
                })
                .then(function(answer) {
                    $scope.minLength = 0;
                    $scope.status = 'You said the information was "' + answer + '".';
                }, function() {
                    $scope.minLength = 0;
                    $scope.status = 'You cancelled the dialog.';
                });
        };

        $scope.findProveedores = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.proveedores = Providers.query({ e: $scope.SEARCH.enterprise });
                Modal.setProveedores($scope.proveedores);
            }
        };

        // Find a list of SBUs
        $scope.findSubs = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.subs = Subs.query({ e: $scope.SEARCH.enterprise });
                Modal.setSubs($scope.subs);
            }
        };

        $scope.findSubcategories = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.subcategorias = Categories.query({ e: $scope.SEARCH.enterprise });
                Modal.setSubcategorias($scope.subcategorias);
            }
        };

        $scope.findTaxes = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.taxes = [{ value: 1, name: 'Iva incluido en el precio' }, {
                    value: 10.5,
                    name: '10.50%'
                }, { value: 21, name: '21.00%' }, { value: 27, name: '27.00%' }];
                Modal.setTaxes($scope.taxes);
            };
        };

        $scope.findMetrics = function() {
            if ($scope.SEARCH !== undefined) {
                $scope.metrics = Metrics.query();
                Modal.setMetrics($scope.metrics);
            }
        };

        // PARA EDITAR PRODUCTOS EN VIEW Venta

        $scope.verEdicion = [];

        $scope.habilitarEdicion = function(index) {
                $scope.verEdicion[index] = true;
            } //end habilitarEdicion

        $scope.editProducto = function(p, venta, index) {
                var total = 0;
                var subtotal = 0;
                var desc = 0;
                var iva = 0;
                $scope.verEdicion = false;
                p.subtotal = p.cantidad * p.product.unitPrice;
                var descuento = (p.subtotal * p.descuento) / 100;
                p.total = p.subtotal - descuento;
                for (var i in venta.products) {
                    subtotal = subtotal + venta.products[i].total;
                    if (venta.products[i].product.tax != 1) {
                        iva = iva + ((venta.products[i].subtotal) * (1 - (1 / (1 + venta.products[i].product.tax / 100)))) // TODO: there might be issue in this code
                    }
                }
                venta.subtotal = subtotal;
                venta.descuentoValor = (subtotal * venta.descuentoPorcentaje) / 100;
                venta.neto = subtotal - venta.descuentoValor;
                venta.totalTax = iva;
                // venta.total = venta.neto + venta.totalTax;
                venta.total = venta.neto;
                $scope.verEdicion = [];
                $scope.updateVenta(venta, p)
            } //end editProducto

        $scope.updateVenta = function(item, p) {
            if ($scope.cambioPrecio === true) {
                $scope.modificarPrecioProducto(p.product, item);
                $scope.cambioPrecio = false;
            }

            var venta = item;

            /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
             una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
             hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */

            venta.enterprise = venta.enterprise._id;
            venta.tipoComprobante = venta.tipoComprobante._id;
            venta.cliente = venta.cliente._id;
            venta.condicionVenta = venta.condicionVenta._id;

            venta.$update(function() {}, function(errorResponse) {
                // $scope.error = errorResponse.data.message;
            });
        }; //end updateVenta

        $scope.cambiarPrecio = function() {
                $scope.cambioPrecio = true;
                $scope.findProductos();
            } //end cambiarPrecio

        $scope.modificarPrecioProducto = function(p, venta) {
                for (var i in $scope.productos) {
                    if ($scope.productos[i]._id === p._id) {
                        var precio = p.unitPrice;
                        p = $scope.productos[i];
                        var product = new Products({
                            _id: p._id,
                            name: p.name,
                            description: p.description,
                            code: p.code,
                            //picture: this.picture || undefined,
                            brandName: p.brandName,
                            unitPrice: precio,
                            costPerUnit: p.costPerUnit,
                            // sku: p.sku,
                            discontinued: p.discontinued,
                            provider: p.provider._id,
                            quantityPerUnit: p.quantityPerUnit,
                            unitsInStock: p.unitsInStock,
                            idealStock: p.idealStock,
                            criticalStock: p.criticalStock,
                            unitsOnOrder: p.unitsOnOrder,
                            storedIn: p.storedIn,
                            metric: p.metric,
                            reseller: p.reseller,
                            visible: p.visible,
                            esProducto: p.esProducto,
                            esMateriaPrima: p.esMateriaPrima,
                            esInsumo: p.esInsumo,
                            //rawMaterial: p.rawMaterial,
                            tax: p.tax,
                            enterprise: p.enterprise,
                            sub: p.sub._id,
                            category1: p.category1,
                            category2: p.category2
                        });

                        product.enterprise = product.enterprise._id;
                        if ((product.sub !== undefined) && (product.sub !== null)) {
                            product.sub = product.sub._id
                        };
                        if ((product.category1 !== undefined) && (product.category1 !== null)) {
                            product.category1 = product.category1._id
                        };
                        if ((product.category2 !== undefined) && (product.category2 !== null)) {
                            product.category2 = product.category2 ? product.category2._id : undefined
                        };
                        if ((product.provider !== undefined) && (product.provider !== null)) {
                            product.provider = product.provider._id
                        };

                        product.$update(function(response) {}, function(errorResponse) {
                            $scope.error = errorResponse.data.message;
                        });
                    }
                }
            } //end modificarPrecio

        $scope.showConfirm2 = function(ev, item, venta) {
            var confirm = $mdDialog.confirm()
                .title('Eliminar productos')
                .content('¿Está seguro que desea eliminar este producto de la venta?')
                .ariaLabel('Lucky day')
                .ok('Eliminar')
                .cancel('Cancelar')
                .targetEvent(ev);
            $mdDialog.show(confirm).then(function() {
                $scope.quitarProducto(item, venta);
            }, function() {});
        }; //end showConfirm2

        $scope.quitarProducto = function(p, venta) {
            var subt = 0;
            var iva = 0;
            var descProd = 0; //descuento del producto
            var descGen = 0; //descuento del proveedor
            var tax1 = 0;
            var tax2 = 0;
            var tax3 = 0;
            var totalIva = 0;
            descProd = parseFloat((p.product.unitPrice * p.cantidad) * p.descuento / 100);
            subt = parseFloat((p.product.unitPrice * p.cantidad) - descProd); //subtotal de solo ese prod
            descGen = parseFloat((subt * venta.descuentoPorcentaje) / 100);
            iva = p.product.tax;
            if (iva == 1) {
                // console.log('iva incluido');
            }
            if (iva == 10.5) {
                tax1 = parseFloat(subt * (1 - 1 / (1 + 0.105)) / 100);
                venta.tax1 = parseFloat(venta.tax1 - tax1);
            }
            if (iva == 21) {
                tax2 = parseFloat(subt * (1 - 1 / (1 + 0.21)) / 100);
                venta.tax2 = parseFloat(venta.tax2 - tax2);
            }
            if (iva == 27) {
                tax3 = parseFloat(subt * (1 - 1 / (1 + 0.27)) / 100);
                venta.tax3 = parseFloat(venta.tax3 - tax3);
            }
            venta.neto = parseFloat(venta.neto - (subt - descGen));
            venta.subtotal = parseFloat(venta.subtotal - subt);
            totalIva = (subt - descGen + tax1 + tax2 + tax3);
            venta.descuentoValor = parseFloat(venta.descuentoValor - descGen);
            // venta.total = venta.total - totalIva;
            venta.total = venta.total;
            venta.totalTax = venta.totalTax - tax1 - tax2 - tax3;
            for (var i = 0; i < venta.products.length; i++) {
                if (venta.products[i]._id === p._id) {
                    venta.products.splice(i, 1);
                }
            }
            $scope.updateVenta(venta, p);
        }; //end quitarProducto

        // FIN EDITAR PRODUCTOS

        //****PARA LA EXTRACCION DEL PDF

        $scope.extraerVenta = function(item) {
            var promise = asyncAsignarVenta(item);
            promise.then(function(response) {
                // console.log(response);
                $scope.printIt();
            });
        };

        function asyncAsignarVenta(item) {
            var deferred = $q.defer();
            $scope.venta = item;
            setTimeout(function() {
                if ($scope.venta !== undefined) {
                    deferred.resolve('Hello');
                } else {
                    deferred.reject('Greeting');
                }
            }, 1000);
            return deferred.promise;
        }

        $scope.printIt = function() {
            // var a = httpGet("http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css");
            var b = document.getElementById('printing-css-venta').value;
            var c = document.getElementById('printing-data-venta').innerHTML;
            window.frames["print_frame_venta"].document.title = '•';
            // window.frames["print_frame_venta"].document.body.innerHTML = '<style>' + a + b + '</style>' + c;
            window.frames["print_frame_venta"].document.body.innerHTML = '<style>' + b + '</style>' + c;
            window.frames["print_frame_venta"].window.focus();
            window.frames["print_frame_venta"].window.print();
        };

        function httpGet(theUrl) {
            var xmlHttp = null;
            xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", theUrl, false);
            xmlHttp.send(null);
            return xmlHttp.responseText;
        }

        //****FIN EXTRACCION DEL PDF

        function DialogController($scope, $mdDialog, item, Ventas, $state, Cajas) {

            $scope.item = item; //es la venta que tengo que actualizar

            $scope.seleccionCaja = false;

            $scope.findCajas = function() {
                $scope.cajas = [];
                Cajas.query({ e: item.enterprise._id }, function(foundCaja) {
                    foundCaja.forEach(function(entry) {
                        if (entry.deleted === false) {
                            $scope.cajas.push(entry);
                        }
                    });

                    if ($scope.cajas.length === 1) {
                        $scope.caja = $scope.cajas[0]
                    }
                });
            };

            $scope.findCajas();

            $scope.hide = function() {
                $mdDialog.hide();
            };

            $scope.cancel = function() {
                $mdDialog.cancel();
            };

            $scope.answer = function(answer) {
                $mdDialog.hide(answer);
            };

            $scope.habilitoCaja = function(n) {
                $scope.seleccionCaja = n;
            };

            $scope.finalizarVenta = function(item) {
                console.log(item, 'itemmmmm');
                var estado = 'Finalizada'
                if (item.condicionVenta.name !== 'Cuenta Corriente') {
                    if (this.caja !== undefined) {
                        item.caja = this.caja;
                        updateVenta(item, estado);
                    } else {
                        $scope.errorCaja = 'Debe seleccionar la caja';
                    }
                } else {
                    item.caja = undefined;
                    updateVenta(item, estado);
                }
            };

            function updateVenta(venta, estado) {
                venta.estado = estado;

                venta.enterprise = venta.enterprise._id;
                venta.tipoComprobante = venta.tipoComprobante._id;
                if (venta.cliente !== undefined) {
                    venta.cliente = venta.cliente._id
                }

                if (venta.category1 !== undefined) {
                    venta.category1 = venta.category1._id
                }

                venta.condicionVenta = venta.condicionVenta._id;
                if (venta.caja !== undefined) {
                    venta.caja = venta.caja._id;
                }

                $mdDialog.hide();
                venta.$update(function() {
                    $mdDialog.hide();
                    $state.go('home.ventas');
                }, function(errorResponse) {
                    $scope.error = errorResponse.data.message;
                });
            }


            $scope.actualizarVenta = function(data) {

                var venta = $scope.item;
                if (data === 'pagado') {
                    var estado = 'Pendiente de entrega';
                }
                if (data === 'entregado') {
                    var estado = 'Pendiente de pago2';
                }
                if (data === 'pYa') {
                    var estado = 'Finalizada';
                }

                venta.estado = estado;

                /* la siguiente validacion es para asegurarse que a la db llegue solo el id correspondiente en lugar del objeto completo de cada
                 una de las propiedades evaluadas ya que al hacer el populate el id almacenado como string se convierte en un objeto completo y si no
                 hacemos esta validacion eso iria a la base cuando realmente solo tiene que ir un string indicando el id */
                venta.enterprise = venta.enterprise._id;
                venta.tipoComprobante = venta.tipoComprobante._id;
                venta.cliente = venta.cliente._id;
                venta.condicionVenta = venta.condicionVenta._id;

                venta.$update(function() {
                    $mdDialog.hide();
                    $state.go('home.ventas');
                }, function(errorResponse) {
                    $scope.error = errorResponse.data.message;
                });

            };

        }

        function CrearController($scope, $mdDialog, Modal, Products, Clients, Categories) {

            $scope.contacts = Modal.getContactos();
            $scope.taxconditions = Modal.getCondiciones();
            $scope.comprobantes = Modal.getComprobantes();
            $scope.categories2 = ['Productos Terminados'];
            $scope.categories = Modal.getCategorias();
            $scope.subcategorias = Modal.getSubcategorias();
            $scope.subs = Modal.getSubs();
            $scope.proveedores = Modal.getProveedores();
            $scope.taxes = Modal.getTaxes();
            $scope.metrics = Modal.getMetrics();
            $scope.quantityPerUnit = 0;
            $scope.unitsInStock = 0;
            $scope.idealStock = 0;
            $scope.criticalStock = 0;
            $scope.unitPrice = 0;
            $scope.costPerUnit = 0;
            $scope.condicionPagos = Modal.getCondicionesVentas();
            $scope.taxconditions2 = ['Consumidor Final', 'Responsable Inscripto'];
            $scope.banco = { name: undefined, account: undefined, cbu: undefined, identity: undefined };
            $scope.creditLimit = 0;
            $scope.discountRate = 0;
            $scope.country = 'Argentina';
            $scope.city = 'La Plata';
            $scope.region = 'Buenos Aires';
            $scope.condicionPago = 'Efectivo';
            $scope.taxcondition = 'Consumidor Final';

            var marker, map;
            $scope.$on('mapInitialized', function(evt, evtMap) {
                map = evtMap;
                marker = map.markers[0];
            });

            $scope.types = "['address']";

            $scope.placeChanged = function() {
                $scope.errorDir = undefined;
                $scope.place = this.getPlace();
            };

            $scope.hide = function() {
                $mdDialog.hide();
            };
            $scope.cancel = function($event) {
                if ($event !== undefined) {
                    if ($event.keyCode == 0) {
                        $mdDialog.cancel();
                    }
                }
            };

            $scope.answer = function(answer) {
                $mdDialog.hide(answer);
            };

            $scope.mostrarFormResponsable = function() {
                $scope.errorName = undefined;
                $scope.formResponsableInscripto = false;
                if (this.taxcondition === 'Responsable Inscripto') {
                    $scope.formResponsableInscripto = true;
                }
            };

            $scope.crearProducto = function($event) {
                if ($event.keyCode == 0) {
                    var esProd = false;
                    for (var i in $scope.categories) {
                        if ($scope.categories[i].name === 'Productos Terminados') {
                            var categoria = $scope.categories[i];
                            esProd = true;
                        }
                    }
                    // if (categoria.name === 'Productos Terminados'){
                    // 	esProd = true;
                    // }
                    if (this.tax !== undefined) {
                        for (var i in $scope.taxes) {
                            if ($scope.taxes[i].name === this.tax) {
                                var valorTax = $scope.taxes[i].value
                            }
                        }
                    }


                    var empresa = Modal.getEmpresa();
                    if (this.code !== undefined) {
                        if (this.name !== undefined) {
                            if (this.tax !== undefined) {
                                if (this.category2 !== undefined) {
                                    if (this.provider !== undefined) {
                                        if (this.sub !== undefined) {
                                            var product = new Products({
                                                name: this.name,
                                                description: this.description ? this.description : undefined,
                                                code: this.code,
                                                //picture: this.picture || undefined,
                                                brandName: this.brandName ? this.brandName : undefined,
                                                unitPrice: this.unitPrice,
                                                costPerUnit: this.costPerUnit,
                                                // sku: this.sku,
                                                discontinued: this.discontinued,
                                                provider: this.provider._id,
                                                quantityPerUnit: this.quantityPerUnit,
                                                unitsInStock: this.unitsInStock,
                                                idealStock: this.idealStock,
                                                criticalStock: this.criticalStock,
                                                unitsOnOrder: this.unitsOnOrder,
                                                storedIn: this.storedIn ? this.storedIn : undefined,
                                                metric: this.metric ? this.metric : 'u.',
                                                reseller: this.reseller,
                                                visible: this.visible,
                                                esProducto: esProd,
                                                tax: this.tax ? valorTax : undefined,
                                                enterprise: empresa,
                                                sub: this.sub._id,
                                                category1: categoria,
                                                category2: this.category2 ? this.category2._id : undefined
                                            });

                                            // Redirect after save
                                            product.$save(function(response) {

                                                // Clear form fields
                                                $scope.name = '';
                                                $scope.description = '';
                                                $scope.brandName = '';
                                                $scope.unitPrice = 0;
                                                $scope.costPerUnit = 0;
                                                $scope.sku = '';
                                                $scope.discontinued = false;
                                                $scope.quantityPerUnit = 1;
                                                $scope.unitsInStock = 0;
                                                $scope.unitsOnOrder = 0;
                                                $scope.visible = true;
                                                $scope.storedIn = '';
                                                $scope.metric = '';
                                                $scope.reseller = false;
                                                $scope.hide();
                                                $rootScope.nuevoProducto = product;
                                                console.log($rootScope.nuevoProducto);

                                            }, function(errorResponse) {
                                                $scope.error = errorResponse.data.message;
                                            });
                                        } else {
                                            $scope.errorSub = 'Se debe especificar la UEN para el producto';
                                        }
                                    } else {
                                        $scope.errorProv = 'Se debe elegir un proveedor';
                                    }
                                } else {
                                    $scope.errorCategory = 'Se debe especificar la categoria para el producto';
                                }
                            } else {
                                $scope.errorTax = 'Se debe especificar el iva para el producto';
                            }
                        } else {
                            $scope.errorName = 'Se debe indicar el nombre del producto';
                        }
                    } else {
                        $scope.errorCode = 'Se debe indicar el codigo del producto';
                    }
                }
            }; //end crearProducto

            $scope.borrarError = function() {
                $scope.errorCode = undefined;
                $scope.errorProv = undefined;
                $scope.errorName = undefined;
                $scope.errorTax = undefined;
                $scope.errorSub = undefined;
                $scope.errorCategory = undefined;
            }

            $scope.crearCliente = function($event) {
                if ($event.keyCode == 0) {
                    for (var i in $scope.taxconditions) {
                        if ($scope.taxconditions[i].name === this.taxcondition) {
                            var condicionIva = $scope.taxconditions[i];
                        }
                    };
                    if ((condicionIva.name === 'Consumidor Final') && (this.apellido === undefined)) {
                        var errorApellido = true;
                    } else {
                        var errorApellido = false;
                    }
                    // Create new Client object
                    var empresa = Modal.getEmpresa();
                    var tempContact = [];
                    var prod = [];
                    console.log(condicionIva);
                    if (this.name !== undefined) {
                        if (errorApellido !== true) {
                            if ($scope.place !== undefined) {
                                var latitud = $scope.place.geometry.location.lat();
                                var longitud = $scope.place.geometry.location.lng();
                                var client = new Clients({
                                    name: this.name ? this.name : this.razonSocial,
                                    apellido: this.apellido ? this.apellido : undefined,
                                    condicionPago: this.condicionPago ? this.condicionPago._id : undefined,
                                    comprobante: this.tipoComprobante ? this.tipoComprobante._id : undefined,
                                    taxCondition: condicionIva,
                                    creditLimit: this.creditLimit ? this.creditLimit : 0,
                                    fiscalNumber: this.fiscalNumber ? this.fiscalNumber : 0,
                                    discountRate: this.discountRate ? this.discountRate : 0,
                                    loc: [latitud, longitud],
                                    paymentMethod: this.paymentMethod ? this.paymentMethod : 0,
                                    contacts: this.contact ? [this.contact._id] : [],
                                    country: this.country,
                                    city: this.city,
                                    region: this.region ? this.region : undefined,
                                    turno: this.turno ? this.turno : undefined,
                                    postalCode: this.postalCode ? this.postalCode : 0,
                                    address: this.address,
                                    phone: this.phone,
                                    web: this.web ? this.web : undefined,
                                    category1: this.category ? this.category._id : undefined,
                                    enterprise: empresa,
                                    productosAsociados: prod
                                });
                                // Redirect after save
                                client.$save(function(response) {
                                    //$location.path('clients/' + response._id);
                                    // Clear form fields
                                    $scope.name = '';
                                    $scope.creditLimit = 0;
                                    $scope.fiscalNumber = '';
                                    $scope.discountRate = 0;
                                    $scope.contacts = [];
                                    $scope.country = '';
                                    $scope.city = '';
                                    $scope.region = '';
                                    $scope.postalCode = '';
                                    $scope.address = '';
                                    $scope.phone = '';
                                    $scope.fax = '';
                                    $scope.web = '';
                                    $scope.hide();
                                    $rootScope.nuevoCliente = client;

                                }, function(errorResponse) {
                                    $scope.error = errorResponse.data.message;
                                });
                            } else {
                                $scope.errorDir = 'Se debe indicar una direccion';
                            }
                        } else {
                            $scope.errorApellido = 'Se debe indicar el apellido del cliente';
                        }
                    } else {
                        if ($scope.formResponsableInscripto === true) {
                            $scope.errorNameClient = 'Se debe indicar la Razon Social';
                        } else {
                            $scope.errorNameClient = 'Se debe indicar un nombre';
                        }
                    }
                }
            }; //end crearCliente

            $scope.eliminarMensajeError = function() {
                $scope.errorNameClient = undefined;
                $scope.errorApellido = undefined;
            };
        };
    }
]);
'use strict';

//Ventas service used to communicate Ventas REST endpoints
angular.module('ventas').factory('Ventas', ['$resource',
	function($resource) {
		return $resource('api/ventas/:ventaId', { ventaId: '@_id', e: '@enterprise', w: '@filterDate.week', y: '@filterDate.year'
		}, {
			update: {
				method: 'PUT'
			}
		});
	}
]);

'use strict';

//Reportes service used to communicate Reportes REST endpoints
angular.module('ventas').factory('VentasExtra', ['$http',
    function($http) {
        return {
            select: function(estado, enterprise) {
                return $http({
                    method: "get",
                    url: "/api/ventas/select",
                    params: {
                        e: enterprise,
                        estado: estado
                    }
                });
            },
            loadMore: function(enterprise, estado, last, limit) {
                return $http({
                    method: "get",
                    url: "/api/ventas/loadmore",
                    params: {
                        e: enterprise,
                        last: last,
                        limit: limit,
                        estado: estado
                    }
                })
            },
            loadMoreImpuestos: function(impuesto, last, limit, year, month) {
                return $http({
                    method: "get",
                    url: "/api/ventas/loadmoreImpuestos",
                    params: {
                        impuesto: impuesto,
                        last: last,
                        limit: limit,
                        year: year,
                        month: month
                    }
                })
            }
        }
    }
]);